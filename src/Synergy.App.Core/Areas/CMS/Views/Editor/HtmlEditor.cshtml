@*@using Syncfusion.EJ2
@using Syncfusion.EJ2.Navigations*@
@using Synergy.App.Common;
@using Synergy.App.ViewModel
@using Synergy.App.Business
@{
    ViewData["Title"] = "Html Editor";
    Layout = "~/Areas/Core/Views/Shared/_Reference.cshtml";
}

<div id="editorjs">

</div>
<input type="button" name="save" value="Save" onclick="OnSave()" />
<script>
    $(document).ready(function () {
        //var p = GetParentWindow();
        //console.log(p.document);
        //var k = parent.document.getElementsByName("data[CategoryName]")[0];
        //console.log(k);
    });
    const ImageTool = window.ImageTool;
    const editor = new EditorJS({
        /**
         * Id of Element that should contain the Editor
         */
        holder: 'editorjs',

        /**
         * Available Tools list.
         * Pass Tool's class or Settings object for each Tool you want to use
         */
        tools: {
            header: {
                class: Header,
                inlineToolbar: ['link']
            },
            checklist: {
                class: Checklist,
                inlineToolbar: true,
            },
            image: {
                class: ImageTool,
                config: {
                    endpoints: {
                        byFile: 'http://localhost:8008/uploadFile', // Your backend file uploader endpoint
                        byUrl: 'http://localhost:8008/fetchUrl', // Your endpoint that provides uploading by Url
                    }
                }
            },
            linkTool: {
                class: LinkTool,
                config: {
                    endpoint: 'http://localhost:8008/fetchUrl', // Your backend endpoint for url data fetching
                }
            },
            //list: {
            //    class: List,
            //    inlineToolbar: true
            //  },
            Marker: {
                class: Marker,
                shortcut: 'CMD+SHIFT+M',
            },
            list: {
                class: NestedList,
                inlineToolbar: true,
            },
            quote: {
                class: Quote,
                inlineToolbar: true,
                shortcut: 'CMD+SHIFT+O',
                config: {
                    quotePlaceholder: 'Enter a quote',
                    captionPlaceholder: 'Quote\'s author',
                },
            },
            raw: RawTool,
            //image: SimpleImage,
            table: {
                class: Table,
                inlineToolbar: true,
                config: {
                    rows: 2,
                    cols: 3,
                },
            },
            warning: {
                class: Warning,
                inlineToolbar: true,
                shortcut: 'CMD+SHIFT+W',
                config: {
                    titlePlaceholder: 'Title',
                    messagePlaceholder: 'Message',
                },
            },
            embed: {
                class: Embed,
                config: {
                    services: {
                        youtube: true,
                        coub: true
                    }
                }
            },
            delimiter: Delimiter,
        },
    })
    function OnSave() {
          var win = GetMainWindow();
            win.CloseWindow({
                MethodName: '@ViewBag.cbm', Prms: { displayfield: '@ViewBag.DisplayFiled', jsonfield: '@ViewBag.JsonField', htmlfield: '@ViewBag.HtmlField', outputData: 'outputData', html: 'html'}
            });
        return false;
        const edjsParser = edjsHTML();
        editor.save().then((outputData) => {
            
            //console.log('Article data: ', outputData)
            var html = 'html';// edjsParser.parse(outputData);
            // returns array of html strings per block
            // console.log('HTML: ', HTML);
            var win = GetParentWindow();
            win.CloseWindow({
                MethodName: '@ViewBag.cbm', Prms: { displayfield: '@ViewBag.DisplayFiled', jsonfield: '@ViewBag.JsonField', htmlfield: '@ViewBag.HtmlField', outputData: outputData, html: html}
            });
            //win[cbm](1, 2, 3, outputData, html);
        }).catch((error) => {
            console.log('Saving failed: ', error)
        });



    }
</script>
