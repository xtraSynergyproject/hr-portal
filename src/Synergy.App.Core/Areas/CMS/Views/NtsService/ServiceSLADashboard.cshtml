@using Synergy.App.DataModel
@using Synergy.App.ViewModel
@using Synergy.App.Common

@{
    ViewBag.Title = "Service SLA Dashboard";

    Layout = null;
}
@model TemplateViewModel;
<style>

    .btn-filter-reset {
        color: #fff;
        background-color: #428bca;
        border-color: #428bca;
    }

    .banner-text {
        position: absolute;
        top: 35px;
        left: 30px;
    }

    .k-datepicker {
        width: 9em !important;
    }
</style>

<script>

    var itcode = "";
    var rtcode = "";
    var ptcode = "";
    var ctcode = "";

    $(document).ready(function () {

        var t = '@String.Join(',',Model.Templates)';
        //var t = "@ViewBag.TemplateCodes";
        const tem = t.split(",");
        debugger;
        for (var i = 0; i < tem.length; i++) {
            debugger;
            var temp = tem[i];
            getIssueChart(temp);
        }

        getServiceListData();

        $("#TemplateType").kendoDropDownList({
            dataTextField: "DisplayName",
            dataValueField: "Code",
            optionLabel: "Select Service Type",
            value: '@Model.Status.ToString()',
            change: OnChangeServiceType,
            dataSource: {
                transport: {
                    read: {
                        url: "/Cms/NtsService/ReadServiceTemplate?templateCode=@ViewBag.TemplateCodes&portalNames=@ViewBag.PortalNames",
                    }
                }
            }
        });

    });

    function getIssueChart(temp) {

        debugger;

        var url = "/cms/NtsService/ReadServiceSLAListCount?categoryCodes=@ViewBag.CategoryCodes&templateCodes="+temp+"&portalNames=@ViewBag.PortalNames&moduleCodes=@ViewBag.ModuleCodes";
        $.ajax({
            type: 'GET',
            url: url,
            success: function (res) {
                if (res) {
                    debugger;
                    var chartid = "chart_" + temp;
                    //var vals = res.ItemValueSeries;
                    var vals = [res[0].CreatedByMeInProgreessOverDueCount, res[0].CreatedByMeCompleteCount, res[0].CreatedOrRequestedByMeRejectCancelCloseCount];
                    var itcode = res.Code;
                    var chart = "#" + chartid;
                    var options = {
                        series: vals,
                        //title: {
                        //    text: "Task By Status"
                        //},
                        chart: {
                            id: chartid,
                            width: 240,
                            height: 230,
                            type: 'pie',
                            events: {
                                dataPointSelection: function (event, chartContext, config) {
                                    debugger;
                                    var status = config.w.config.labels[config.dataPointIndex];
                                    var code = config.w.config.chart.id;
                                    var statusCode = '';
                                    if (status === 'Drafted') {
                                        statusCode = 'SERVICE_STATUS_DRAFT';
                                    } else if (status === 'Pending') {
                                        statusCode = 'SERVICE_STATUS_INPROGRESS,SERVICE_STATUS_OVERDUE';
                                    } else if (status === 'Overdue') {
                                        statusCode = 'SERVICE_STATUS_OVERDUE';
                                    } else if (status === 'Completed') {
                                        statusCode = 'SERVICE_STATUS_COMPLETE';
                                    } else if (status === 'Reject' || status === 'Canceled') {
                                        statusCode = 'SERVICE_STATUS_REJECT,SERVICE_STATUS_CANCEL';
                                    }
                                    //getServiceList(statusCode, itcode);
                                }
                            }
                        },
                        noData: {
                            text: "!No Data Found",
                            align: 'center',
                            verticalAlign: 'middle',
                            offsetX: 0,
                            offsetY: 0,
                            style: {
                                color: "#363642",
                                fontSize: '14px',
                            }
                        },
                        legend: {
                            position: 'bottom'
                        },
                        labels: ['In Progress','Completed','Canceled'],
                        //colors: ['#f10b0b', '#13b713', '#f2a818', '#008ffb', '#f2a818'],
                        colors: res.ItemStatusColor,
                        dataLabels: {
                            enabled: true,
                            style: {
                                colors: ['#000']
                            },
                        },

                    };
                    debugger;
                    document.getElementById(chartid).innerHTML = "";
                    var chart = new ApexCharts(document.querySelector(chart), options);
                    chart.render();
                }
            }
        });

    }

    var columnDefs = [
        {
            headerName: "Service No",
            field: "ServiceNo",
            cellRenderer: params => {
                return "<input type='button' class='btn btn-link' onclick='OpenService(\"" + params.data.Id + "\",\"" + params.data.TemplateCode + "\" )' value=\"" + params.value + "\" />";
            }
        },
        {
            headerName: "Service",
            field: "ServiceName",
        },
        {
            headerName: "Service Status",
            field: "WorkflowStatus",
        },
        {
            headerName: "Service Status",
            field: "ServiceStatusName",
             cellStyle: params => {
                debugger;
                if (params.value == "Completed") {
                    return { color: 'white', backgroundColor: '#13b713' };
                } else if (params.value == "In Progress") {
                    return { color: 'white', backgroundColor: '#007bff' };
                } else if (params.value == "Draft") {
                    return { color: 'white', backgroundColor: '#17a2b8' };
                } else if (params.value == "Overdue") {
                    return { color: 'white', backgroundColor: '#1700b8' };
                } else {
                    return { color: 'white', backgroundColor: '#17a200' };
                }
            },
            cellRenderer: params => {
                return params.value;
            }
            //cellRenderer: params => {
            //    if (params.value == "Completed") {
            //        return "<label class='text-success' style='font-weight:400;'>" + params.value + "</label>"
            //    }
            //    else if (params.value == "Draft") {
            //        return "<label class='text-info' style='font-weight:400;'>" + params.value + "</label>"
            //    }
            //    else if (params.value == "In Progress") {
            //        return "<label class='text-primary' style='font-weight:400;'>" + params.value + "</label>"
            //    }
            //    else if (params.value == "Overdue") {
            //        return "<label class='text-warning' style='font-weight:400;'>" + params.value + "</label>"
            //    }
            //    else {
            //        return "<label class='text-default' style='font-weight:400;'>" + params.value + "</label>"
            //    }

            //}
        },
        {
            headerName: "Requested By",
            field: "OwnerDisplayName",
        },
        {
            headerName: "Requested Date",
            field: "CreatedDate",
            cellRenderer: params => {
                return moment(params.value).format('@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormatForMoment');
            }
        },
        {
            headerName: "Due Date",
            field: "DueDate",
            cellRenderer: params => {
                return moment(params.value).format('@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormatForMoment');
            }
        }

    ];

    function getServiceListData(templateCode) {
        document.getElementById("serviceSLAGridView").innerHTML = "";

        var catcodes = '@ViewBag.CategoryCodes';
        //if (catcode!=null) {
        //    catcodes = catcode;
        //}
        var statuscodes = "";
        //if (statuscodes == undefined) {
        //    statuscodes = "";
        //}
        var tempCode = templateCode;
        if (tempCode == undefined) {
            tempCode = "";
        }
        /*alert(tempcodes);*/
        gridConfig(
            "serviceSLAGridView",
            "/cms/NtsService/ReadServiceSLAData?categoryCodes=" + catcodes + "&serviceStatus=" + statuscodes+ "&templateCode="+tempCode,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    function OpenService(serviceId, templateCode) {

        var portalId = $('#GlobalPortalId').val();
        var url = '/Cms/Page?lo=Popup&popup=true&cbm=OnAfterService&source=View&dataAction=View&templateCodes=' + templateCode + '&portalId=' + portalId + '&recordId=' + serviceId;

        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'View Service', Width: 1200, Height: 700 });
        return false;
    }

    function OnAfterServiceCreate() {
        window.location.href = window.location.href;
    }

    function OnCreateService() {
        var url = '/Cms/NtsService/SelectServiceTemplate?templateCode=@ViewBag.TemplateCodes&userId=@ViewBag.UserId&cbm=OnAfterServiceCreate&portalNames=@ViewBag.PortalNames';
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Select Service', Width: 1000, Height: 600, Position: 'Right1' });
        return false;
    }

    function OnChangeServiceType() {
        var search = $("#TemplateType").data("kendoDropDownList").value();
        getServiceListData(search);
    }

</script>

<div id="appWrapper" class="wrapper">
    <div class="page">
        <div class="page-inner">
            <div class="page-section">
                <div class="row no-gutters p-2">
                    <div class="col-lg-6 col-md-12">
                        <h5>@ViewBag.Title</h5>
                    </div>
                    <div class="col-lg-6 col-md-12 text-right">
                        <button class="btn btn-primary" onclick="OnCreateService();">Create Service</button>
                    </div>
                </div>
                <div class="row" style="padding:10px;">

                    @foreach (var temp in Model.TemplatesList)
                    {
                        <div class="col-sm-12 col-md-6 col-lg-3">
                            <!-- .card -->
                            <div class="card">
                                <div class="card-header text-center bg-success text-white">@temp.Name</div><!-- .card-body -->
                                <div class="card-body chart-body">
                                    <div id="chart_@temp.Code"></div>
                                </div><!-- /.card-body -->
                            </div><!-- /.card -->
                        </div>
                    }

                </div>

                <div style="padding:10px;">
                    <div class="row">
                        <div class="col-6"><h5>Service Details</h5></div>
                        <div class="col-6"><div id="TemplateType" class="form-control" style="width:50%;float:right;"></div></div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-12">
                            <div id="serviceSLAGridView" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>