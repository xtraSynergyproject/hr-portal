@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@{
    ViewData["Title"] = "Portal";
    //Layout = null;
    Layout = "~/Areas/Core/Views/Shared/_PopupLayout.cshtml";
}
@inject Synergy.App.Common.IUserContext _userContext
@model RuntimeWorkflowViewModel

    <link rel="stylesheet" href="~/lib/duration-picker/dist/jquery-duration-picker.min.css">
    <script src="~/lib/duration-picker/dist/jquery-duration-picker.min.js"></script>
    <style>
            .modal-backdrop {
                position: fixed;
                top: 0;
                left: 0;
                z-index: 99;
                width: 100vw;
                height: 100vh;
                background-color: #000;
            }
            /* .modal-backdrop.show {
            opacity: 0;
        }*/
            .form-label-group {
                position: relative;
                margin-bottom: 0px;
            }

            .cms-manageportal-footer {
                /*        position: absolute;*/
                left: 0;
                bottom: 0;
                padding: 10px;
                padding-right: 20px;
                width: 100%;
                background-color: #F8F8F8 !important;
                color: white;
                text-align: right;
            }

            .slidenav-flow {
                overflow-x: hidden;
                overflow-y: auto !important;
                height: 75%;
            }

            .style-myiconimage {
                /*border-radius: 50%;*/
                height: 100px;
                width: 100px;
            }

            .style-mybgimage {
                /*border-radius: 50%;*/
                height: 100px;
                width: 100px;
            }

            .style-mybannerimage {
                /*border-radius: 50%;*/
                height: 100px;
                width: 100px;
            }

            .style-image {
                width: 30%;
                float: left;
            }

            .style-upload {
                width: 70%;
                float: left;
            }

            .style-pickerleft {
                width: 50%;
                float: left;
                padding-bottom: 15px;
            }
            /*    k-colorpicker {
            width: 100px;
        }

        .k-colorpicker .k-selected-color {
                width: 100px;
        }*/

        .editbtn{
           font-size:20px;
           color:dodgerblue;
           margin-left:5px;
        }
        .dltbtn {
            font-size: 20px;
            color: red;
            margin-left: 5px;
        }

    </style>
    <script type="text/javascript">

        $(function () {
            $('#Name').on('input', function (e) {
                var txt = $('#Name').val();
                txt = txt.replace(/[^A-Z0-9]/ig, "");
                $('#Name').val(txt);
            });
        });

        function closeNav() {          
            var win = GetMainWindow();
            win.CloseWindow();
            return false;
        }

        var onAjaxSuccess = function (res) {

        if (res.success) {
            if ('@Model.DataAction'=='@DataActionEnum.Create')
            {
                ShowNotification("Saved Successfully", "success");
            }
            if ('@Model.DataAction'=='@DataActionEnum.Edit')
            {
                ShowNotification("Updated Successfully", "success");
            }
            $("#GridWorkflowData").jsGrid("loadData");

            HideLoader($('#runtimeWF'));           

        }
        else {
           // alert(res)
            HideLoader($('#runtimeWF'));
            showError(res.error);
        }
    };

        function OnSave(evt) {
            ShowLoader($('#runtimeWF'));
        }

        var showError = function (error) {
            $("#validation-summary").html(error);
            $("#validation-summary").css("display", "block");
        }
    </script>


    <div class="pad-15" id="runtimeWF">
        <form asp-controller="ProcessDesign" asp-action="ManageRuntimeWorkflow" class="form-horizontal" id="steptaskform" data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
              data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
              data-ajax="true" data-ajax-method="POST">

            <div id="validation-summary" class="text-danger" asp-validation-summary="All"></div>

            <div class="row" style="padding:10px;">

                @*<div class="col-3">
                    <div class="">Source Template</div>
                    <div class="">
                        <input asp-for="RuntimeWorkflowSourceTemplateId" id="RuntimeWorkflowSourceTemplateId" class="form-control" readonly="readonly" />
                    </div>
                </div>*@
                <div class="col-3">
                    <div class="">Runtime Workflow Execution Mode</div>
                    <div class="">
                        <input asp-for="RuntimeWorkflowExecutionMode" id="RuntimeWorkflowExecutionMode" class="form-control" />
                    </div>
                </div>
                <div class="col-3">
                    <div class="">Triggering Step Task Component</div>
                    <div class="">
                        <input asp-for="TriggeringStepTaskComponentId" id="TriggeringStepTaskComponentId" class="form-control" />
                    </div>
                </div>
                <div class="col-3 pad-20">
                    <input type="submit" class="btn btn-primary" value="Save" onclick="OnSave(event)" />
                    <input type="button" class="btn btn-light" value="Close" onclick="closeNav()" />
                </div>

            </div>
            <hr />
            <br />
            <div class="row-12" @*style="display:none"*@>
                @*<div id="runtimeWorkflowData"></div>*@
                <input type="button" class="btn btn-primary" value="Add Workflow Data" onclick="AddWorkflowData()">
                <br />
                <div class="row pad-10" id="workFlowData" style="display:none;">
                    <div class="col-2 pad-20" id="sequence">
                        <input type="number" class="form-control" placeholder="Sequence Order" id="seqOrder">
                    </div>

                    <div class="col-2">
                        <div class="">Assignee Type</div>
                        <div class="">
                            <input id="AssignedToTypeId" class="form-control" />
                        </div>
                    </div>
                    <div class="row col-8" id="team" style="display:none;">
                        <div class="col-6">
                            <div class="">Team Assignment Type</div>
                            <div class="">
                                <input id="TeamAssignmentType" class="form-control" />
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="">Assigned To Team</div>
                            <div class="">
                                <input id="AssignedToTeamId" class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="col-4" id="user" style="display:none;">
                        <div class="">Assigned To User</div>
                        <div class="">
                            <input id="AssignedToUserId" class="form-control" />
                        </div>
                    </div>
                    <div class="row col-6" id="hierarchy" style="display:none;">
                        <div class="col-6">
                            <div class="">Assigned To Hierarchy Master</div>
                            <div class="">
                                <input id="AssignedToHierarchyMasterId" class="form-control" />
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="">Assigned To Hierarchy Master Level</div>
                            <div class="">
                                <input id="AssignedToHierarchyMasterLevelId" class="form-control" />
                            </div>
                        </div>
                    </div>

                    <div class="col-2 pad-20">
                        <input type="hidden" id="udfId" />
                        <input type="button" class="btn btn-primary" onclick="OnAdd(event);" value="Add" id="AddWFD" />
                        <input type="button" class="btn btn-primary" onclick="OnUpdate(event);" value="Update" id="UpdateWFD" style="display:none;" />
                        <input type="button" class="btn btn-secondary" onclick="OnCancel();" value="Cancel" />
                    </div>
                </div>
                <br />
                <div id="GridWorkflowData"></div>
            </div>

            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.DataAction)
            @Html.HiddenFor(x => x.SourceServiceId)
            @Html.HiddenFor(x => x.SourceTaskId)
            @Html.HiddenFor(x => x.WorkFlowData)
            @Html.HiddenFor(x => x.RuntimeWorkflowSourceTemplateId)

            @*<div class="cms-slidebar-footer">
                <input type="button" class="btn btn-light" value="Close" onclick="closeNav()" />
                <input type="submit" class="btn btn-primary" value="Save" onclick="OnSave(event)" />
            </div>*@


        </form>
        
        
    </div>

    <script>

        var idval = 0;
        function OnAdd(e) {
            debugger;
            var seqVal = $("#RuntimeWorkflowExecutionMode").data("kendoDropDownList").text() == "Sequential" ? $('#seqOrder').val() : null;
            var type = $("#AssignedToTypeId").data("kendoDropDownList").value();                     

            if (type == "") {
                ShowNotification("Select Assignee Type","error")
                e.preventDefault();
                return false;
            }
            else if (type == "TASK_ASSIGN_TO_USER") {
                var user = $("#AssignedToUserId").data("kendoDropDownList").value();
                if (user == "") {
                    ShowNotification("Select Assigned to user", "error")
                    e.preventDefault();
                    return false;
                }
                else if ($("#RuntimeWorkflowExecutionMode").data("kendoDropDownList").text() == "Sequential" && $('#seqOrder').val() == "") {
                    ShowNotification("Enter Sequence Order", "error")
                    e.preventDefault();
                    return false;
                }
                else {
                    @*$("#GridWorkflowData").jsGrid("insertItem", {
                    SequenceOrder: $('#seqOrder').val(),
                    AssignedToTypeName: $("#AssignedToTypeId").data("kendoDropDownList").text(),
                    AssignedToTypeId: type,
                    TeamAssignmentTypeName: "",
                    TeamAssignmentType: null,
                    AssignedToTeamName:"",
                    AssignedToTeamId: null,
                    AssignedToUserName: $("#AssignedToUserId").data("kendoDropDownList").text(),
                    AssignedToUserId: user,
                    AssignedToHierarchyMasterName: "",
                        AssignedToHierarchyMasterId: null,
                    AssignedToHierarchyMasterLevelName: "",
                        AssignedToHierarchyMasterLevelId: null,
                        DataAction: "@DataActionEnum.Create",
                        Id: idval + 1
                    }).done(function () {
                    //$("#GridJobCriteria").data("JSGrid").updateItem();
                    });*@
                    var model = { SequenceOrder: seqVal, AssignedToTypeId: type, AssignedToUserId: user, DataAction: "@DataActionEnum.Create", RuntimeWorkflowId:'@Model.Id' };
                    CreateWorkflowData(model);
                }
            }
            else if (type == "TASK_ASSIGN_TO_TEAM") {
                var teamtype = $("#TeamAssignmentType").data("kendoDropDownList").value();
                var team = $("#AssignedToTeamId").data("kendoDropDownList").value();
                var user = $("#AssignedToUserId").data("kendoDropDownList").value();

                if (teamtype == "") {
                    ShowNotification("Select team assignment type", "error")
                    e.preventDefault();
                    return false;
                } else if (team == "") {
                    ShowNotification("Select team", "error")
                    e.preventDefault();
                    return false;
                } else if (user == "") {
                    ShowNotification("Select Assigned to user", "error")
                    e.preventDefault();
                    return false;
                }
                else if ($("#RuntimeWorkflowExecutionMode").data("kendoDropDownList").text() == "Sequential" && $('#seqOrder').val() == "") {
                    ShowNotification("Enter Sequence Order", "error")
                    e.preventDefault();
                    return false;
                } else {
                    @*$("#GridWorkflowData").jsGrid("insertItem", {
                        SequenceOrder: $('#seqOrder').val(),
                        AssignedToTypeName: $("#AssignedToTypeId").data("kendoDropDownList").text(),
                        AssignedToTypeId: type,
                        TeamAssignmentTypeName: $("#TeamAssignmentType").data("kendoDropDownList").text(),
                        TeamAssignmentType: teamtype,
                        AssignedToTeamName: $("#AssignedToTeamId").data("kendoDropDownList").text(),
                        AssignedToTeamId: team,
                        AssignedToUserName: $("#AssignedToUserId").data("kendoDropDownList").text(),
                        AssignedToUserId: user,
                        AssignedToHierarchyMasterName: "",
                        AssignedToHierarchyMasterId: null,
                        AssignedToHierarchyMasterLevelName: "",
                        AssignedToHierarchyMasterLevelId: null,
                        DataAction: "@DataActionEnum.Create",
                        Id: idval + 1
                        }).done(function () {
                        });*@                    

                    var model = { SequenceOrder: seqVal, AssignedToTypeId: type, TeamAssignmentType: teamtype, AssignedToTeamId: team, AssignedToUserId: user, DataAction: "@DataActionEnum.Create", RuntimeWorkflowId:'@Model.Id' };
                    CreateWorkflowData(model);
                }
            }
            else if (type == "TASK_ASSIGN_TO_USER_HIERARCHY") {
                var master = $("#AssignedToHierarchyMasterId").data("kendoDropDownList").value();
                var level = $("#AssignedToHierarchyMasterLevelId").data("kendoDropDownList").value();

                if (master == "") {
                    ShowNotification("Select hierarchy master", "error")
                    e.preventDefault();
                    return false;
                } else if (level == "") {
                    ShowNotification("Select hierarchy master level", "error")
                    e.preventDefault();
                    return false;
                }
                else if ($("#RuntimeWorkflowExecutionMode").data("kendoDropDownList").text() == "Sequential" && $('#seqOrder').val() == "") {
                    ShowNotification("Enter Sequence Order", "error")
                    e.preventDefault();
                    return false;
                }
                else {
                     @*$("#GridWorkflowData").jsGrid("insertItem", {
                        SequenceOrder: $('#seqOrder').val(),
                        AssignedToTypeName: $("#AssignedToTypeId").data("kendoDropDownList").text(),
                        AssignedToTypeId: type,
                        TeamAssignmentTypeName: "",
                        TeamAssignmentType: null,
                        AssignedToTeamName: "",
                        AssignedToTeamId: null,
                        AssignedToUserName: "",
                        AssignedToUserId: user,
                        AssignedToHierarchyMasterName: $("#AssignedToHierarchyMasterId").data("kendoDropDownList").text(),
                        AssignedToHierarchyMasterId: master,
                        AssignedToHierarchyMasterLevelName: $("#AssignedToHierarchyMasterLevelId").data("kendoDropDownList").text(),
                        AssignedToHierarchyMasterLevelId: level,
                        DataAction: "@DataActionEnum.Create",
                        Id: idval + 1
                    }).done(function () {
                    //$("#GridJobCriteria").data("JSGrid").updateItem();
                    });*@

                    var model = { SequenceOrder: seqVal, AssignedToTypeId: type, AssignedToHierarchyMasterId: master, AssignedToHierarchyMasterLevelId: level, DataAction: "@DataActionEnum.Create", RuntimeWorkflowId:'@Model.Id' };
                    CreateWorkflowData(model);
                }
            }

            OnCancel();

        }

        function CreateWorkflowData(modelData,mode) {
            ShowLoader($('#runtimeWF'));

            debugger;
            $.ajax({
                type: "POST",
                dataType: "json",
                url: "/Cms/ProcessDesign/ManageRuntimeWorkflowData",
                data: modelData,
                success: function (res) {
                    debugger;
                    if (res.success) {
                        var msg = mode == "Update" ? "Updated Successfully" : "Created Successfully";
                        ShowNotification(msg, "success");
                        $("#GridWorkflowData").jsGrid("loadData");
                        HideLoader($('#runtimeWF'));
                    }
                    else {
                        ShowNotification(res.error, "error");
                        $("#GridWorkflowData").jsGrid("loadData");
                        HideLoader($('#runtimeWF'));
                    }
                    
                },

                error: function (res) {
                    ShowNotification(res.error,"error");
                }
            });
        }

        function OnEditWFD(data) {
            debugger;

            $('#workFlowData').show();

            if ($("#RuntimeWorkflowExecutionMode").data("kendoDropDownList").text() == "Sequential") {
                $('#seqOrder').val(data.SequenceOrder);
            }
            
            $('#udfId').val(data.Id);
            $("#AssignedToTypeId").data("kendoDropDownList").value(data.AssignedToTypeCode);
            onchangetype();
            if (data.AssignedToTypeCode == "TASK_ASSIGN_TO_USER") {
                $("#AssignedToUserId").data("kendoDropDownList").value(data.AssignedToUserId);
            }
            else if (data.AssignedToTypeCode == "TASK_ASSIGN_TO_TEAM") {
                $("#TeamAssignmentType").data("kendoDropDownList").value(data.TeamAssignmentType);
                $("#AssignedToTeamId").data("kendoDropDownList").value(data.AssignedToTeamId);
                onchangeteam();
            } else if (data.AssignedToTypeCode == "TASK_ASSIGN_TO_USER_HIERARCHY") {
                $("#AssignedToHierarchyMasterId").data("kendoDropDownList").value(data.AssignedToHierarchyMasterId);
                assigneeToLevel();
                $("#AssignedToHierarchyMasterLevelId").data("kendoDropDownList").value(data.AssignedToHierarchyMasterLevelId);
            }

            $('#AddWFD').hide();
            $('#UpdateWFD').show();

            OnChangeExeMode();

        }

        function OnDeleteWFD(data) {
            ShowLoader($('#runtimeWF'));

            kendo.confirm("Do you really want to delete selected item?")
                .done(function () {
                    ConfirmDelete(data);
                })
                .fail(function () {
                    HideLoader($('#runtimeWF'));
                });

        }

        function OnLoadExeMode() {
            if ($("#RuntimeWorkflowExecutionMode").data("kendoDropDownList").text() == "Sequential") {
                $("#GridWorkflowData").jsGrid("fieldOption", "SequenceOrder", "visible", true);
            }
            else {
                $("#GridWorkflowData").jsGrid("fieldOption", "SequenceOrder", "visible", false);
            }
        }

        function ConfirmDelete(data) {
            debugger;
            $.ajax({
                type: "POST",
                dataType: "json",
                url: "/Cms/ProcessDesign/DeleteRuntimeWorkflowData?Id=" + data.Id,
                success: function (res) {
                    if (res.success) {
                        ShowNotification("Deleted Successfully", "success");
                        $("#GridWorkflowData").jsGrid("loadData");
                        HideLoader($('#runtimeWF'));
                    }
                    else {
                        ShowNotification("Try Again", "error");
                    }
                },

                error: function (res) {
                    ShowNotification(res.error, "error");
                }
            });
        }

        function OnUpdate() {
            debugger;
            var type = $("#AssignedToTypeId").data("kendoDropDownList").value();
            var seqordval = $("#RuntimeWorkflowExecutionMode").data("kendoDropDownList").text() == "Sequential" ? $('#seqOrder').val() : null;

            if (type == "") {
                ShowNotification("Select Assignee Type","error")
                e.preventDefault();
                return false;
            }
            else if (type == "TASK_ASSIGN_TO_USER") {
                var user = $("#AssignedToUserId").data("kendoDropDownList").value();
                if (user == "") {
                    ShowNotification("Select Assigned to user", "error")
                    e.preventDefault();
                    return false;
                }
                else if ($("#RuntimeWorkflowExecutionMode").data("kendoDropDownList").text() == "Sequential" && $('#seqOrder').val() == "") {
                    ShowNotification("Enter Sequence Order", "error")
                    e.preventDefault();
                    return false;
                }
                else {
                    var model = {
                        Id: $('#udfId').val(),
                        AssignedToTypeId: type, AssignedToUserId: user, DataAction: "@DataActionEnum.Edit", RuntimeWorkflowId: '@Model.Id', SequenceOrder: seqordval,
                        TeamAssignmentType: null, AssignedToTeamId: null, AssignedToHierarchyMasterId: null, AssignedToHierarchyMasterLevelId:null};
                    CreateWorkflowData(model,"Update");
                }
            }
            else if (type == "TASK_ASSIGN_TO_TEAM") {
                var teamtype = $("#TeamAssignmentType").data("kendoDropDownList").value();
                var team = $("#AssignedToTeamId").data("kendoDropDownList").value();
                var user = $("#AssignedToUserId").data("kendoDropDownList").value();

                if (teamtype == "") {
                    ShowNotification("Select team assignment type", "error")
                    e.preventDefault();
                    return false;
                } else if (team == "") {
                    ShowNotification("Select team", "error")
                    e.preventDefault();
                    return false;
                } else if (user == "") {
                    ShowNotification("Select Assigned to user", "error")
                    e.preventDefault();
                    return false;
                }
                else if ($("#RuntimeWorkflowExecutionMode").data("kendoDropDownList").text() == "Sequential" && $('#seqOrder').val() == "") {
                    ShowNotification("Enter Sequence Order", "error")
                    e.preventDefault();
                    return false;
                } else {

                    var model = {
                        Id: $('#udfId').val(),
                        AssignedToTypeId: type, TeamAssignmentType: teamtype, AssignedToTeamId: team, AssignedToUserId: user, DataAction: "@DataActionEnum.Edit", RuntimeWorkflowId: '@Model.Id', SequenceOrder: seqordval,
                        AssignedToHierarchyMasterId: null, AssignedToHierarchyMasterLevelId: null
                    };
                    CreateWorkflowData(model, "Update");
                }
            }
            else if (type == "TASK_ASSIGN_TO_USER_HIERARCHY") {
                var master = $("#AssignedToHierarchyMasterId").data("kendoDropDownList").value();
                var level = $("#AssignedToHierarchyMasterLevelId").data("kendoDropDownList").value();

                if (master == "") {
                    ShowNotification("Select hierarchy master", "error")
                    e.preventDefault();
                    return false;
                } else if (level == "") {
                    ShowNotification("Select hierarchy master level", "error")
                    e.preventDefault();
                    return false;
                }
                else if ($("#RuntimeWorkflowExecutionMode").data("kendoDropDownList").text() == "Sequential" && $('#seqOrder').val() == "") {
                    ShowNotification("Enter Sequence Order", "error")
                    e.preventDefault();
                    return false;
                }
                else {
                    var model = {
                        Id: $('#udfId').val(),
                        AssignedToTypeId: type, AssignedToHierarchyMasterId: master, AssignedToHierarchyMasterLevelId: level, DataAction: "@DataActionEnum.Edit", RuntimeWorkflowId: '@Model.Id', SequenceOrder: seqordval,
                        TeamAssignmentType: null, AssignedToTeamId: null, AssignedToUserId:null };
                    CreateWorkflowData(model, "Update");
                }
            }

            OnCancel();
        }


        //function OnUpdate(e) {
        //    debugger;
        //    var grid = $("#GridWorkflowData").data("JSGrid");
        //    var asstype = $('#AssignedToTypeId').data("kendoDropDownList").value();
        //    var selId = $('#udfId').val();
        //    for (var i = 0; i < grid.data.length; i++) {
        //        if (grid.data[i].Id == $('#udfId').val()) {

        //            grid.data[i].AssignedToTypeId = $('#AssignedToTypeId').data("kendoDropDownList").value();
        //            grid.data[i].AssignedToTypeName = $('#AssignedToTypeId').data("kendoDropDownList").text();

        //            if (asstype == "TASK_ASSIGN_TO_USER") {

        //                grid.data[i].AssignedToUserId = $('#AssignedToUserId').data("kendoDropDownList").value();
        //                grid.data[i].AssignedToUserName = $('#AssignedToUserId').data("kendoDropDownList").text();

        //                grid.data[i].TeamAssignmentType = "";
        //                grid.data[i].AssignedToTeamId = null;
        //                grid.data[i].TeamAssignmentTypeName = "";
        //                grid.data[i].AssignedToTeamName = "";
        //                grid.data[i].AssignedToHierarchyMasterId = null;
        //                grid.data[i].AssignedToHierarchyMasterLevelId = null;
        //                grid.data[i].AssignedToHierarchyMasterName = "";
        //                grid.data[i].AssignedToHierarchyMasterLevelName = "";
        //            }
        //            else if (asstype == "TASK_ASSIGN_TO_TEAM") {
        //                grid.data[i].TeamAssignmentType = $('#TeamAssignmentType').data("kendoDropDownList").value();
        //                grid.data[i].AssignedToTeamId = $('#AssignedToTeamId').data("kendoDropDownList").value();
        //                grid.data[i].AssignedToUserId = $('#AssignedToUserId').data("kendoDropDownList").value();

        //                grid.data[i].TeamAssignmentTypeName = $('#TeamAssignmentType').data("kendoDropDownList").text();
        //                grid.data[i].AssignedToTeamName = $('#AssignedToTeamId').data("kendoDropDownList").text();
        //                grid.data[i].AssignedToUserName = $('#AssignedToUserId').data("kendoDropDownList").text();

        //                grid.data[i].AssignedToHierarchyMasterId = null;
        //                grid.data[i].AssignedToHierarchyMasterLevelId = null;
        //                grid.data[i].AssignedToHierarchyMasterName = "";
        //                grid.data[i].AssignedToHierarchyMasterLevelName = "";

        //            } else if (asstype == "TASK_ASSIGN_TO_USER_HIERARCHY") {
        //                grid.data[i].AssignedToHierarchyMasterId = $('#AssignedToHierarchyMasterId').data("kendoDropDownList").value();
        //                grid.data[i].AssignedToHierarchyMasterLevelId = $('#AssignedToHierarchyMasterLevelId').data("kendoDropDownList").value();

        //                grid.data[i].AssignedToHierarchyMasterName = $('#AssignedToHierarchyMasterId').data("kendoDropDownList").text();
        //                grid.data[i].AssignedToHierarchyMasterLevelName = $('#AssignedToHierarchyMasterLevelId').data("kendoDropDownList").text();

        //                grid.data[i].TeamAssignmentType = "";
        //                grid.data[i].AssignedToTeamId = null;
        //                grid.data[i].TeamAssignmentTypeName = "";
        //                grid.data[i].AssignedToTeamName = "";
        //                grid.data[i].AssignedToUserId = null;
        //                grid.data[i].AssignedToUserName = "";
        //            }

        //            //grid.data[i].AssignedToTypeId = $('#AssignedToTypeId').data("kendoDropDownList").value();
        //            //grid.data[i].TeamAssignmentType = $('#TeamAssignmentType').data("kendoDropDownList").value();
        //            //grid.data[i].AssignedToTeamId = $('#AssignedToTeamId').data("kendoDropDownList").value();
        //            //grid.data[i].AssignedToUserId = $('#AssignedToUserId').data("kendoDropDownList").value();
        //            //grid.data[i].AssignedToHierarchyMasterId = $('#AssignedToHierarchyMasterId').data("kendoDropDownList").value();
        //            //grid.data[i].AssignedToHierarchyMasterLevelId = $('#AssignedToHierarchyMasterLevelId').data("kendoDropDownList").value();

        //            //grid.data[i].AssignedToTypeName = $('#AssignedToTypeId').data("kendoDropDownList").text();
        //            //grid.data[i].TeamAssignmentTypeName = $('#TeamAssignmentType').data("kendoDropDownList").text();
        //            //grid.data[i].AssignedToTeamName = $('#AssignedToTeamId').data("kendoDropDownList").text();
        //            //grid.data[i].AssignedToUserName = $('#AssignedToUserId').data("kendoDropDownList").text();
        //            //grid.data[i].AssignedToHierarchyMasterName = $('#AssignedToHierarchyMasterId').data("kendoDropDownList").text();
        //            //grid.data[i].AssignedToHierarchyMasterLevelName = $('#AssignedToHierarchyMasterLevelId').data("kendoDropDownList").text();
        //        }
        //    }

        //    OnCancel();
        //    $("#GridWorkflowData").jsGrid("refresh");
        //}

        //function OnSave(e) {
        //    var wfDataGrid = $("#GridWorkflowData").data("JSGrid");
        //    var ccount = wfDataGrid.data.length;
        //    if (ccount > 0) {
        //        var detail = JSON.stringify(wfDataGrid.data);
        //        $("#WorkFlowData").val(detail);
        //    }
        //}


        function onchangetype() {

            var type = $("#AssignedToTypeId").data("kendoDropDownList").value();
            debugger;
            if (type == "TASK_ASSIGN_TO_USER") {
                $("#AssignedToTeamId").data("kendoDropDownList").value("");
                $("#user").show();
                $("#team").hide();
                $("#hierarchy").hide();
            }
            else if (type == "TASK_ASSIGN_TO_TEAM") {
                $("#user").show();
                $("#team").show();
                $("#hierarchy").hide();
            }
            else if (type == "TASK_ASSIGN_TO_USER_HIERARCHY") {
                $("#user").hide();
                $("#team").hide();
                $("#hierarchy").show();
            }
            else {
                $("#user").hide();
                $("#team").hide();
                $("#hierarchy").hide();
            }
            assigneeToUserDropdown();
        }

        function onchangeteam() {
            assigneeToUserDropdown();
            getteamowner();
        }

        function assigneeToUserDropdown() {
            debugger;
            var assigneeType = $("#AssignedToTypeId").data("kendoDropDownList").value();
            var teamId = $("#AssignedToTeamId").data("kendoDropDownList").value();

            $("#AssignedToUserId").kendoDropDownList({
                dataTextField: "Name",
                dataValueField: "Id",
                filter: "contains",
                optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
                dataSource: {
                    transport: {
                        read: {
                            url: "/Cms/User/GetUsersListOnTypeBasis?assigneeType=" + assigneeType + "&teamId=" + teamId,
                        }
                    }
                }
            });
        }

        function getteamowner() {
            var teamId = $("#AssignedToTeamId").data("kendoDropDownList").value();
            $.ajax({
                url: "/cms/user/GetTeamOwnerUser?id=" + teamId,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    if (data.success) {
                        $("#AssignedToUserId").data("kendoDropDownList").value(data.userId);
                    }

                }
            });
        }

        function assigneeToLevel() {
            var value = $("#AssignedToHierarchyMasterId").data("kendoDropDownList").value();

            $("#AssignedToHierarchyMasterLevelId").kendoDropDownList({
                dataTextField: "Name",
                dataValueField: "Id",
                filter: "contains",
                optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
                dataSource: {
                    transport: {
                        read: {
                        url: "/Cms/ProcessDesign/ReadHierarchyMasterLevelDataById?Id=" + value,
                        }
                    }
                }
            });
        }

        function OnCancel() {
            debugger;

            var type = $("#AssignedToTypeId").data("kendoDropDownList").value();

            if (type == "TASK_ASSIGN_TO_USER") {
                $("#AssignedToTeamId").data("kendoDropDownList").value("");
                $("#AssignedToUserId").data("kendoDropDownList").value("");
                $("#user").hide();
            }
            else if (type == "TASK_ASSIGN_TO_TEAM") {
                $("#TeamAssignmentType").data("kendoDropDownList").value("");
                $("#AssignedToTeamId").data("kendoDropDownList").value("");
                $("#AssignedToUserId").data("kendoDropDownList").value("");
                $("#user").hide();
                $("#team").hide();
            }
            else if (type == "TASK_ASSIGN_TO_USER_HIERARCHY") {
                $("#AssignedToHierarchyMasterId").data("kendoDropDownList").value("");
                $("#AssignedToHierarchyMasterLevelId").data("kendoDropDownList").value("");
                $("#hierarchy").hide();
            }
            else {
                $("#user").hide();
                $("#team").hide();
                $("#hierarchy").hide();
            }

            $("#AssignedToTypeId").data("kendoDropDownList").value("");
            $('#seqOrder').val("");
            $('#udfId').val("");
            $('#workFlowData').hide();
        }

        function OnChangeExeMode() {
            if ($("#RuntimeWorkflowExecutionMode").data("kendoDropDownList").text() == "Sequential") {
                $('#sequence').show();
                $("#GridWorkflowData").jsGrid("fieldOption", "SequenceOrder", "visible", true);
            }
            else {
                $('#seqOrder').val("");
                $('#sequence').hide();
                $("#GridWorkflowData").jsGrid("fieldOption", "SequenceOrder", "visible", false);
            }
        }

    $(document).ready(function () {
        @*$("#RuntimeWorkflowSourceTemplateId").kendoDropDownList({
        dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            value: '@Model.RuntimeWorkflowSourceTemplateId',
            dataSource: {
            transport: {
                read: {
                    url: "/Cms/Template/GetTemplates",
                    }
                }
            }
        });*@

        $("#RuntimeWorkflowExecutionMode").kendoDropDownList({
        dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            change: OnChangeExeMode,
            dataBound: OnLoadExeMode,
            dataSource: {
            transport: {
                read: {
                    url: "/Home/GetEnumIdNameList?enumType=WorkflowExecutionModeEnum",
                    }
                }
            }
        });

        $("#TriggeringStepTaskComponentId").kendoDropDownList({
        dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataSource: {
            transport: {
                read: {
                    url: "/Cms/ProcessDesign/GetTriggeringStepTaskComponentList?templateId=@Model.RuntimeWorkflowSourceTemplateId",
                    }
                }
            }
        });

        //Workflow data
        $("#AssignedToTypeId").kendoDropDownList({
        dataTextField: "Name",
            dataValueField: "Code",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            change: onchangetype,
            dataSource: {
            transport: {
                read: {
                    url: "/Cms/LOV/GetLOVIdNameList?lovType=TASK_ASSIGN_TO_TYPE",
                    }
                }
            }
        });

        $("#TeamAssignmentType").kendoDropDownList({
        dataTextField: "Name",
            dataValueField: "EnumId",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataSource: {
            transport: {
                read: {
                    url: "/Home/GetEnumIdNameList?enumType=WorkAssignmentTypeEnum",
                    }
                }
            }
        });

        $("#AssignedToTeamId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            change: onchangeteam,
            dataSource: {
            transport: {
                read: {
                    url: "/Cms/ProcessDesign/ReadTeamData",
                    }
                }
            }
        });

        $("#AssignedToHierarchyMasterId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            change: assigneeToLevel,
            dataBound: assigneeToLevel,
            dataSource: {
            transport: {
                read: {
                    url: "/Cms/ProcessDesign/ReadHierarchyMasterData",
                    }
                }
            }
        });

        var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(WorkAssignmentTypeEnum)))';
        var statusObj = JSON.parse(status);

        //new grid
        $("#GridWorkflowData").jsGrid({
        width: "100%",
        height: "auto",
        inserting: false,
        editing: true,
        sorting: true,
        paging: false,
        autoload: true,
        deleteConfirm: "Do you really want to delete client?",
        controller: {
            loadData: function (filter) {
                return $.ajax({
                    type: "GET",
                    url: "/Cms/ProcessDesign/GetRuntimeWorkflowDataList?runtimeWorkflowDataId=@Model.Id",
                    data: filter,
                    dataType: "json"
                });
            },
            updateItem: function (item) {
            },
        },
        onItemEditing: function (e) {
            if (e.grid._container.find(".jsgrid-edit-row")[0] != undefined) {
                //
                e.grid.updateItem();
            }
            },

            fields: [
                {
                    name: "Id", type: "control", editButton: false, deleteButton: false,
                    itemTemplate: function (value, item) {
                        var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);

                        var $customEditButton = $("<i>").attr({ class: "fa-duotone fa-pen-to-square editbtn",title:"Edit" })
                            .click(function (e) {
                                debugger;
                                OnEditWFD(item);
                                e.stopPropagation();
                            });

                        var $customDeleteButton = $("<i>").attr({ class: "fa-solid fa-trash-can dltbtn", title: "Delete" })
                            .click(function (e) {
                                debugger;
                                OnDeleteWFD(item);
                                e.stopPropagation();
                            });
                        //return $result.add($customEditButton, $customDeleteButton);
                        return $("<div>").append($customEditButton).append($customDeleteButton);

                    },
                     width: 80
                },
                { type: "text", name: "SequenceOrder", title: "Sequence Order", editing: false, width: 150},
                { name: "AssignedToTypeId",  editing: false, visible: false,width: 180},
                { name: "AssignedToTypeName", title: 'Assigned To Type', editing: false, width: 150},

                {
                    name: "TeamAssignmentType", editing: false, visible: false, width: 180,
                    
                },
                {
                    name: "TeamAssignmentTypeName", title: 'Team Assignment Type', editing: false, width: 150,
                    itemTemplate: function (value,item) {
                        debugger;
                        return statusObj[item.TeamAssignmentType];
                    }
                },

                { name: "AssignedToTeamId",  editing: false, visible: false,width: 180},
                { name: "AssignedToTeamName", title: 'Assigned To Team', editing: false, width: 220 },

                { name: "AssignedToUserId", editing: false, visible: false,width: 180},
                { name: "AssignedToUserName", title: 'Assigned To User', editing: false, width: 220 },

                { name: "AssignedToHierarchyMasterId", editing: false, visible: false },
                { name: "AssignedToHierarchyMasterName", title: 'Assigned To Hierarchy Master', editing: false, width: 220 },

                { name: "AssignedToHierarchyMasterLevelId",  editing: false, visible: false},
                { name: "AssignedToHierarchyMasterLevelName", title: 'Assigned To Hierarchy Master Level', editing: false, width: 220 },

                { name: "AssignedToTypeCode", editing: false, visible: false },

            ]
        });



        //grid
        @*<!--$.ajax({
            type: "GET",
            url: "/Cms/LOV/GetLOVIdNameList?lovType=TASK_ASSIGN_TO_TYPE",
            dataType: "json",
            success: function (data) {
                debugger;
                $.ajax({
                    type: "GET",
                    url: "/Cms/User/GetUsersIdNameList",
                    dataType: "json",
                    success: function (data1)
                    {
                        $("#GridWorkflowData").jsGrid({
                    width: "100%",
                    height: "400px",
                    inserting: false,
                    editing: true,
                    sorting: true,
                    paging: true,
                    autoload: true,
                    pageSize: 14,
                    pageButtonCount: 5,
                    deleteConfirm: "Do you really want to delete the entry?",
                    controller: {
                        loadData: function (filter) {
                            return $.ajax({
                                type: "GET",
                                url: "/Cms/ProcessDesign/GetRuntimeWorkflowDataList?runtimeWorkflowDataId=@Model.Id",
                                data: filter,
                                dataType: "json"
                            });
                        },
                        updateItem: function (item) {
                            onSaveWorkflowGridData(item);
                        },
                        deleteItem: function (item) {
                            if (item.SequenceOrder > 0) {
                                seq = seq - 1;
                            }
                        },
                        },
                             onItemEditing: function (e) {
                                 if (e.grid._container.find(".jsgrid-edit-row")[0] != undefined) {
                                     e.grid.updateItem();
                                 }
                             },
                    fields: [
                        { type: "control",title:"Actions"  },
                        { type: "text", name: "SequenceOrder", title:"Sequence Order",editing:false },
                        {
                            name: "AssignedToTypeId", title: 'Assigned To Type', type: "select", items: data, valueField: "Id", textField: "Name",

                            editTemplate: function (value) {
                                var teamType = this._grid.fields[3];
                                var teamList = this._grid.fields[4];
                                var userList = this._grid.fields[5];
                                var hieMaster = this._grid.fields[6];
                                var hieMasterLevel = this._grid.fields[7];
                                var $editControl = jsGrid.fields.select.prototype.editTemplate.call(this, value);

                                var changeCriteria = function () {

                                    var selectedDepartment = $editControl.val();
                                    //var departmentTeam = [];
                                    for (var i = 0; i < data.length; i++) {
                                        debugger;
                                        if (data[i].Id == selectedDepartment && data[i].Name == "User") {
                                            //console.log("user");
                                            userList.items = GetUserList(null);
                                            teamType._grid.fields[3].editControl.val(null);
                                            teamList._grid.fields[4].editControl.val(null);
                                            hieMaster._grid.fields[6].editControl.val(null);
                                            hieMasterLevel._grid.fields[7].editControl.val(null);

                                            $(".edit-user").empty().append(userList.editTemplate());
                                            $(".edit-team-type").empty();
                                            $(".edit-team").empty();
                                            $(".edit-hier-master").empty();
                                            $(".edit-hier-master-level").empty();
                                            break;
                                        }
                                        else if (data[i].Id == selectedDepartment && data[i].Name == "Team") {
                                            //console.log("team");
                                            teamType.items = GetTeamType();
                                            teamList.items = GetTeamList();
                                            hieMaster._grid.fields[6].editControl.val(null);
                                            hieMasterLevel._grid.fields[7].editControl.val(null);
                                            $(".edit-team-type").empty().append(teamType.editTemplate());
                                            $(".edit-team").empty().append(teamList.editTemplate());
                                            $(".edit-user").empty();
                                            $(".edit-hier-master").empty();
                                            $(".edit-hier-master-level").empty();
                                        }
                                        else if (data[i].Id == selectedDepartment && data[i].Name == "User Hierarchy") {
                                            //console.log("user hierarchy");
                                            hieMaster.items = GetHierarchyMaster();
                                            teamType._grid.fields[3].editControl.val(null);
                                            teamList._grid.fields[4].editControl.val(null);
                                            userList._grid.fields[5].editControl.val(null);
                                            //OnClear("UserHierarchy");
                                            //hieMasterLevel.items = GetHierarchyMasterLevel();
                                            $(".edit-user").empty();
                                            $(".edit-team-type").empty();
                                            $(".edit-team").empty();
                                            $(".edit-hier-master").empty().append(hieMaster.editTemplate());
                                            //$(".edit-hier-master-level").empty().append(hieMasterLevel.editTemplate());
                                            $(".edit-hier-master-level").empty();
                                        }
                                        //else
                                        //{
                                        //    lovField.items = departmentTeam;
                                        //    $(".edit-user").empty();
                                        //    $(".edit-team-type").empty();
                                        //    $(".edit-team").empty();
                                        //    $(".edit-hier-master").empty();
                                        //    $(".edit-hier-master-level").empty();
                                        //}
                                    }
                                };
                                $editControl.on("change", changeCriteria);
                                changeCriteria();
                                return $editControl;
                            }
                        },
                        {
                            name: "TeamAssignmentType", title: 'Team Assignment Type', type: "select", items: data1, valueField: "EnumId", textField: "Name", editcss: "edit-team-type"
                        },
                        {
                            name: "AssignedToTeamId", title: 'Assigned To Team', type: "select", items: data1, valueField: "Id", textField: "Name", editcss: "edit-team",
                            editTemplate: function (value) {
                                var userList = this._grid.fields[5];
                                var $editControl = jsGrid.fields.select.prototype.editTemplate.call(this, value);

                                var changeTeam = function () {
                                    debugger;
                                    var selectedTeam = $editControl.val();

                                    userList.items = GetUserList(selectedTeam);
                                    $(".edit-user").empty().append(userList.editTemplate());
                                };

                                $editControl.on("change", changeTeam);
                                changeTeam();
                                return $editControl;
                            }
                        },
                        {
                            name: "AssignedToUserId", title: 'Assigned To User', type: "select", items: data1, valueField: "Id", textField: "Name", editcss: "edit-user"
                        },
                        {
                            name: "AssignedToHierarchyMasterId", title: 'Assigned To Hierarchy Master', type: "select", items: data1, valueField: "Id", textField: "Name", editcss: "edit-hier-master",
                            editTemplate: function (value) {
                                var hieMasterLevel = this._grid.fields[7];
                                var $editControl = jsGrid.fields.select.prototype.editTemplate.call(this, value);

                                var changeHieMaster = function () {

                                    var masterList = GetHierarchyMaster();
                                    var mId = masterList[0].Id;

                                    var selectedMaster = $editControl.val();
                                    if (selectedMaster != null && selectedMaster != "") {
                                        mId = selectedMaster;
                                    }
                                    hieMasterLevel.items = GetHierarchyMasterLevel(mId);
                                    $(".edit-hier-master-level").empty().append(hieMasterLevel.editTemplate());
                                };
                                $editControl.on("change", changeHieMaster);
                                changeHieMaster();
                                return $editControl;
                            }
                        },
                        {
                            name: "AssignedToHierarchyMasterLevelId", title: 'Assigned To Hierarchy Master Level', type: "select", items: data1, valueField: "Id", textField: "Name", editcss: "edit-hier-master-level"
                        },

                        { type: "text", name: "Id", visible: false },
                    ]
                });
                    }
                });-->
                $(".LovClass").kendoDropDownList({
                    dataTextField: "Name",
                    dataValueField: "Id"                   filter: "contains",
                    optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
                    dataSource: {
                            serverFiltering: true,
                            transport: {
                                read: {
                                    url: "/Cms/LOV/GetListOfValueList?type=Criteria_Type_Otherinfo",
                                }
                            }
                    },
                });
            <!--}
        });-->*@


    function onSaveWorkflowGridData(arg) {

        if (arg.AssignedToTypeId == "") {
            arg.preventDefault();
            kendo.alert("Please select Assigned To Type");
            return false;
        }
        else{
            $.ajax({
                type: "GET",
                dataType: "json",
                url: "/Cms/LOV/GetListOfValueByid?ID=" + arg.AssignedToTypeId,
                success: function (name) {
                    debugger;
                    var assignedToType = name[0].Name;
                    if (assignedToType == "User") {
                        if (arg.AssignedToUserId == "" || arg.AssignedToUserId == null) {
                            arg.preventDefault();
                            kendo.alert("Please select Assigned To User");
                            return false;
                        }
                    }
                    else if (name[0].Name == "Team") {
                        if (arg.TeamAssignmentType == "" || arg.TeamAssignmentType == null) {
                            arg.preventDefault();
                            kendo.alert("Please select Team Assignment Type");
                            return false;
                        } else if (arg.AssignedToTeamId == "" || arg.AssignedToTeamId == null) {
                            arg.preventDefault();
                            kendo.alert("Please select Assigned To Team");
                            return false;
                        }
                        else if (arg.AssignedToUserId == "" || arg.AssignedToUserId == null) {
                            arg.preventDefault();
                            kendo.alert("Please select Assigned To User");
                            return false;
                        }
                    } else if (name[0].Name == "User Hierarchy") {
                        if (arg.AssignedToHierarchyMasterId == "" || arg.AssignedToHierarchyMasterId == null) {
                            arg.preventDefault();
                            kendo.alert("Please select Assigned To Hierarchy Master");
                            return false;
                        } else if (arg.AssignedToHierarchyMasterLevelId == "" || arg.AssignedToHierarchyMasterLevelId == null) {
                            arg.preventDefault();
                            kendo.alert("Please select Assigned To Hierarchy Master Level");
                            return false;
                        }
                    }
                },
            });
        }
    }

    });

        var seq = 0;
        function AddWorkflowData() {

            $('#workFlowData').show();
            OnChangeExeMode();
            $('#AddWFD').show();
            $('#UpdateWFD').hide();

            @*var exeMode = $("#RuntimeWorkflowExecutionMode").data("kendoDropDownList").text();

            var data = false;
            var wfgrid = $("#GridWorkflowData").data("JSGrid");
            for (var i = 0; i < wfgrid.data.length; i++) {
                if (wfgrid.data[i].AssignedToTypeId == '' || wfgrid.data[i].AssignedToTypeId == null) {
                    data = true;
                }
            }
            if (data) {
                kendo.alert("Select Assigned To Type");
            } else {
                if (exeMode == "Sequential") {
                    seq = seq + 1;
                } else {
                    seq = null;
                }
                $("#GridWorkflowData").jsGrid("insertItem", {
                    SequenceOrder: seq,
                    AssignedToTypeId: "",
                    TeamAssignmentType: "",
                    TeamAssignmentType: "",
                    AssignedToTeamId: "",
                    AssignedToUserId: "",
                    AssignedToHierarchyMasterId: "",
                    AssignedToHierarchyMasterLevelId: 0,
                    DataAction: "@DataActionEnum.Create",
                    Id:""
                }).done(function () {
                    //$("#GridJobCriteria").data("JSGrid").updateItem();
                });
            }*@
        }

        function GetUserList(selteamId) {
            debugger;
            var url = "/Cms/User/GetUsersListOnTypeBasis?assigneeType=TASK_ASSIGN_TO_USER";

            if (selteamId != null && selteamId != "" && selteamId != undefined) {
                url= "/Cms/User/GetUsersListOnTypeBasis?teamId=" + selteamId;
            }

            var userlist;
            $.ajax({
                type: "GET",
                url: url,
                dataType: "json",
                async: false,
                success: function (data) {
                    userlist= data;
                }
            });
            return userlist;
        }

        function GetTeamType() {
            var teamtype;
            $.ajax({
                type: "GET",
                url: "/Home/GetEnumIdNameList?enumType=WorkAssignmentTypeEnum",
                dataType: "json",
                async: false,
                success: function (data) {
                    teamtype = data;
                }
            });
            return teamtype;
        }
        function GetTeamList() {
            var teamlist;
            $.ajax({
                type: "GET",
                url: "/Cms/ProcessDesign/ReadTeamData",
                dataType: "json",
                async: false,
                success: function (data) {
                    teamlist = data;
                }
            });
            return teamlist;
        }


        function GetHierarchyMaster() {
            var hieMasterList;
            $.ajax({
                type: "GET",
                url: "/Cms/ProcessDesign/ReadHierarchyMasterData",
                dataType: "json",
                async: false,
                success: function (data) {
                    hieMasterList = data;
                }
            });
            return hieMasterList;
        }

        function GetHierarchyMasterLevel(value) {
            var hieMasterLevelList;
            $.ajax({
                type: "GET",
                url: "/Cms/ProcessDesign/ReadHierarchyMasterLevelDataById?Id=" + value,
                dataType: "json",
                async: false,
                success: function (data) {
                    hieMasterLevelList = data;
                }
            });
            return hieMasterLevelList;
        }
    </script>