@{
    ViewData["Title"] = "Dashboard";
    Layout = null;
}
@using Synergy.App.ViewModel;
@model StreamingViewModel
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/webrtc-adapter/8.1.1/adapter.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.4.0/bootbox.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/spin.js/2.3.2/spin.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.js"></script>
<script type="text/javascript" src="~/js/janus.js"></script>
@*<script type="text/javascript" src="~/js/streamingtest.js"></script>
*@
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootswatch/3.4.0/cerulean/bootstrap.min.css" type="text/css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" type="text/css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.css" />

<script>
var server = "https://10.100.100.101/janus"+"@Model.ServerId";
//var server = "https://10.100.100.101/januslatest";
var streamId = null;

var janus = null;
var streaming = null;
var opaqueId = "streamingtest-" + Janus.randomString(12);

var remoteTracks = {}, remoteVideos = 0, dataMid = null;
var bitrateTimer = {};
var spinner = {};
var rtspUrl = "@Model.RTSP_Url";
rtspUrl = rtspUrl.replaceAll("amp;", "");
var rtspId = "@Model.RTSP_Id";

var simulcastStarted = {}, svcStarted = {};

var streamsList = {};
var streamsDesList = {};
var selectedStream = null;


	$(document).ready(function () {
        setTimeout(function () {            
            if ($(".waitingvideo").length > 0) {
                window.location.reload();
            }
        }, 10000);
	// Initialize the library (all console debuggers enabled)
	Janus.init({
		debug: "all", callback: function () {
			// Use a button to start the demo
			$('#start').one('click', function () {
				$(this).attr('disabled', true).unbind('click');
				// Make sure the browser supports WebRTC
				if (!Janus.isWebrtcSupported()) {
					bootbox.alert("No WebRTC support... ");
					return;
				}
				// Create session
				janus = new Janus(
					{
						server: server,
						success: function () {
							// Attach to Streaming plugin
							janus.attach(
								{
									plugin: "janus.plugin.streaming",
									opaqueId: opaqueId,
									success: function (pluginHandle) {
										$('#details').remove();
										streaming = pluginHandle;
										Janus.log("Plugin attached! (" + streaming.getPlugin() + ", id=" + streaming.getId() + ")");
										// Setup streaming session
										$('#update-streams').click(updateStreamsList);
										//startRtspStream(1, streaming, 1);
										updateStreamsList();
										//startRtspStream();


										$('#start').removeAttr('disabled').html("Stop")
											.click(function () {
												$(this).attr('disabled', true);
												for (var i in bitrateTimer)
													clearInterval(bitrateTimer[i]);
												bitrateTimer = {};
												janus.destroy();
												$('#streamslist').attr('disabled', true);
												$('#watch').attr('disabled', true).unbind('click');
												$('#start').attr('disabled', true).html("Bye").unbind('click');
											});
									},
									error: function (error) {
										Janus.error("  -- Error attaching plugin... ", error);
										bootbox.alert("Error attaching plugin... " + error);
									},
									iceState: function (state) {
										Janus.log("ICE state changed to " + state);
									},
									webrtcState: function (on) {
										Janus.log("Janus says our WebRTC PeerConnection is " + (on ? "up" : "down") + " now");
									},
									slowLink: function (uplink, lost, mid) {
										Janus.warn("Janus reports problems " + (uplink ? "sending" : "receiving") +
											" packets on mid " + mid + " (" + lost + " lost packets)");
									},
									onmessage: function (msg, jsep) {
										Janus.debug(" ::: Got a message :::", msg);
										var result = msg["result"];
										if (result) {
											if (result["status"]) {
												var status = result["status"];
												if (status === 'starting')
													$('#status').removeClass('hide').text("Starting, please wait...").show();
												else if (status === 'started')
													$('#status').removeClass('hide').text("Started").show();
												else if (status === 'stopped')
													stopStream();
											} else if (msg["streaming"] === "event") {
												// Does this event refer to a mid in particular?
												var mid = result["mid"] ? result["mid"] : "0";
												// Is simulcast in place?
												var substream = result["substream"];
												var temporal = result["temporal"];
												if ((substream !== null && substream !== undefined) || (temporal !== null && temporal !== undefined)) {
													if (!simulcastStarted[mid]) {
														simulcastStarted[mid] = true;
														addSimulcastButtons(mid);
													}
													// We just received notice that there's been a switch, update the buttons
													updateSimulcastButtons(mid, substream, temporal);
												}
												// Is VP9/SVC in place?
												var spatial = result["spatial_layer"];
												temporal = result["temporal_layer"];
												if ((spatial !== null && spatial !== undefined) || (temporal !== null && temporal !== undefined)) {
													if (!svcStarted[mid]) {
														svcStarted[mid] = true;
														addSvcButtons(mid);
													}
													// We just received notice that there's been a switch, update the buttons
													updateSvcButtons(mid, spatial, temporal);
												}
											}
										} else if (msg["error"]) {
											bootbox.alert(msg["error"]);
											stopStream();
											return;
										}
										if (jsep) {
											Janus.debug("Handling SDP as well...", jsep);
											var stereo = (jsep.sdp.indexOf("stereo=1") !== -1);
											// Offer from the plugin, let's answer
											streaming.createAnswer(
												{
													jsep: jsep,
													// We want recvonly audio/video and, if negotiated, datachannels
													media: { audioSend: false, videoSend: false, data: true },
													customizeSdp: function (jsep) {
														if (stereo && jsep.sdp.indexOf("stereo=1") == -1) {
															// Make sure that our offer contains stereo too
															jsep.sdp = jsep.sdp.replace("useinbandfec=1", "useinbandfec=1;stereo=1");
														}
													},
													success: function (jsep) {
														Janus.debug("Got SDP!", jsep);
														var body = { request: "start" };
														streaming.send({ message: body, jsep: jsep });
														$('#watch').html("Stop").removeAttr('disabled').unbind('click').click(stopStream);
													},
													error: function (error) {
														Janus.error("WebRTC error:", error);
														bootbox.alert("WebRTC error... " + error.message);
													}
												});
										}
									},
									onremotetrack: function (track, mid, on) {
										Janus.debug("Remote track (mid=" + mid + ") " + (on ? "added" : "removed") + ":", track);
										var mstreamId = "mstream" + mid;
										if (streamsList[streamId] && streamsList[streamId].legacy)
											mstreamId = "mstream0";
										if (!on) {
											// Track removed, get rid of the stream and the rendering
											var stream = remoteTracks[mid];
											if (stream) {
												try {
													var tracks = stream.getTracks();
													for (var i in tracks) {
														var mst = tracks[i];
														if (mst)
															mst.stop();
													}
												} catch (e) { }
											}
											$('#remotevideo' + mid).remove();
											if (track.kind === "video") {
												remoteVideos--;
												if (remoteVideos === 0) {
													// No video, at least for now: show a placeholder
													if ($('#' + mstreamId + ' .no-video-container').length === 0) {
														$('#' + mstreamId).append(
															'<div class="no-video-container">' +
															'<i class="fa fa-video-camera fa-5 no-video-icon"></i>' +
															'<span class="no-video-text">No remote video available</span>' +
															'</div>');
													}
												}
											}
											delete remoteTracks[mid];
											return;
										}
										// If we're here, a new track was added
										var stream = null;
										if (track.kind === "audio") {
											// New audio track: create a stream out of it, and use a hidden <audio> element
											stream = new MediaStream();
											stream.addTrack(track.clone());
											remoteTracks[mid] = stream;
											Janus.log("Created remote audio stream:", stream);
											$('#' + mstreamId).append('<audio class="hide" id="remotevideo' + mid + '" playsinline/>');
											$('#remotevideo' + mid).get(0).volume = 0;
											if (remoteVideos === 0) {
												// No video, at least for now: show a placeholder
												if ($('#' + mstreamId + ' .no-video-container').length === 0) {
													$('#' + mstreamId).append(
														'<div class="no-video-container audioonly">' +
														'<i class="fa fa-video-camera fa-5 no-video-icon"></i>' +
														'<span class="no-video-text">No webcam available</span>' +
														'</div>');
												}
											}
										} else {
											// New video track: create a stream out of it
											remoteVideos++;
											$('.no-video-container').remove();
											stream = new MediaStream();
											stream.addTrack(track.clone());
											remoteTracks[mid] = stream;
											Janus.log("Created remote video stream:", stream);
											$('#' + mstreamId).append('<video class="rounded centered hide" id="remotevideo' + mid + '" width="80%" height="100%" controls playsinline/>');
											$('#remotevideo' + mid).get(0).volume = 0;
											// Use a custom timer for this stream
											if (!bitrateTimer[mid]) {
												$('#curbitrate' + mid).removeClass('hide').show();
												bitrateTimer[mid] = setInterval(function () {
													if (!$("#remotevideo" + mid).get(0))
														return;
													// Display updated bitrate, if supported
													var bitrate = streaming.getBitrate(mid);
													$('#curbitrate' + mid).text(bitrate);
													// Check if the resolution changed too
													var width = $("#remotevideo" + mid).get(0).videoWidth;
													var height = $("#remotevideo" + mid).get(0).videoHeight;
													if (width > 0 && height > 0)
														$('#curres' + mid).removeClass('hide').text(width + 'x' + height).show();
												}, 1000);
											}
										}
										// Play the stream and hide the spinner when we get a playing event
										$("#remotevideo" + mid).bind("playing", function (ev) {
                                            document.getElementById("load-msg").innerHTML = "";
											$('.waitingvideo').remove();
											if (spinner[mid])
												spinner[mid].stop();
											spinner[mid] = null;
											if (!this.videoWidth)
												return;
											$('#' + ev.target.id).removeClass('hide').show();
											var width = this.videoWidth;
											var height = this.videoHeight;
											$('#curres' + mid).removeClass('hide').text(width + 'x' + height).show();
											if (Janus.webRTCAdapter.browserDetails.browser === "firefox") {
												// Firefox Stable has a bug: width and height are not immediately available after a playing
												setTimeout(function () {
													var width = $('#' + ev.target.id).get(0).videoWidth;
													var height = $('#' + ev.target.id).get(0).videoHeight;
													$('#curres' + mid).removeClass('hide').text(width + 'x' + height).show();
												}, 2000);
											}
										});
										Janus.attachMediaStream($('#remotevideo' + mid).get(0), stream);
										$('#remotevideo' + mid).get(0).play();
										//$('#remotevideo' + mid).get(0).volume = 1;
									},
									ondataopen: function (data) {
										Janus.log("The DataChannel is available!");
										$('.waitingvideo').remove();
										$('#mstream' + dataMid).append(
											'<input class="form-control" type="text" id="datarecv" disabled></input>'
										);
										for (var i in spinner) {
											if (spinner[i])
												spinner[i].stop();
										}
										spinner = {};
									},
									ondata: function (data) {
										Janus.debug("We got data from the DataChannel!", data);
										$('#datarecv').val(data);
									},
									oncleanup: function () {
										Janus.log(" ::: Got a cleanup notification :::");
										$('#videos').empty();
										for (var i in bitrateTimer)
											clearInterval(bitrateTimer[i]);
										bitrateTimer = {};
										for (var i in spinner) {
											if (spinner[i])
												spinner[i].stop();
										}
										spinner = {};
										simulcastStarted = false;
										remoteTracks = {};
										remoteVideos = 0;
										dataMid = null;
										$('#streamset').removeAttr('disabled');
										$('#streamslist').removeAttr('disabled');
										$('#watch').html("Watch or Listen").removeAttr('disabled')
											.unbind('click').click(startStream);
									}
								});
						},
						error: function (error) {
							Janus.error(error);
							bootbox.alert(error, function () {
								window.location.reload();
							});
						},
						destroyed: function () {
							window.location.reload();
						}
					});
			});
		}
	});



});


function startRtspStream() {
	let streamId1 = Math.floor(Math.random() * (1000000 - 10 + 1)) + 0;
	Janus.log(streamId1);
	if(rtspUrl == ""){
		rtspUrl = "rtsp://10.0.12.253/cam/realmonitor?channel=1&subtype=0";
	}
	streaming.send(
		{
			"message": {
				"request": "create",
				"type": "rtsp",
				"id": streamId1,
				"description": rtspId,
				"video": true,
				"audio": false,
				"url": rtspUrl,
				"rtsp_user" : "@Model.RTSP_User",
				"rtsp_pwd" : "@Model.RTSP_Pwd",
				"videopt" : 96,
				"videortpmap" : "H264/90000",
				"videofmtp" : "profile-level-id=42e01f;packetization-mode=1", 
				"permanent": false,
			},
			success: function (response) {
				Janus.log("Selected video id #" + streamId1);
				if(response.streaming == "created"){
					window.location.reload();
				}else{
					//alert(response.error);
                    document.getElementById("load-msg").innerHTML = "";
                    //document.getElementById("error-msg").innerHTML = response.error +" (@Model.RTSP_Url)";
                    document.getElementById("error-msg").innerHTML = "CCTV camera is not reachable";
				}

			}
		});
}

function updateStreamsList() {
	$('#update-streams').unbind('click').addClass('fa-spin');
	var body = { request: "list" };
	Janus.debug("Sending message:", body);
	streaming.send({
		message: body, success: function (result) {
			setTimeout(function () {
				$('#update-streams').removeClass('fa-spin').unbind('click').click(updateStreamsList);
			}, 500);
			if (!result) {
				bootbox.alert("Got no response to our query for available streams");
				return;
			}
			if (result["list"]) {
				$('#streams').removeClass('hide').show();
				$('#streamslist').empty();
				$('#watch').attr('disabled', true).unbind('click');
				var list = result["list"];
				if (list && Array.isArray(list)) {
					list.sort(function (a, b) {
						if (!a || a.id < (b ? b.id : 0))
							return -1;
						if (!b || b.id < (a ? a.id : 0))
							return 1;
						return 0;
					});
				}
				Janus.log("Got a list of available streams:", list);
				streamsList = {};
				for (var mp in list) {
					Janus.debug("  >> [" + list[mp]["id"] + "] " + list[mp]["description"] + " (" + list[mp]["type"] + ")");
					$('#streamslist').append("<li><a href='#' id='" + list[mp]["id"] + "'>" + escapeXmlTags(list[mp]["description"]) + " (" + list[mp]["type"] + ")" + "</a></li>");
					// Check the nature of the available streams, and if there are some multistream ones
					list[mp].legacy = true;
					if (list[mp].media) {
						var audios = 0, videos = 0;
						for (var mi in list[mp].media) {
							if (!list[mp].media[mi])
								continue;
							if (list[mp].media[mi].type === "audio")
								audios++;
							else if (list[mp].media[mi].type === "video")
								videos++;
							if (audios > 1 || videos > 1) {
								list[mp].legacy = false;
								break;
							}
						}
					}
					// Keep track of all the available streams
					streamsList[list[mp]["id"]] = list[mp];
					streamsDesList[list[mp]["description"]] = list[mp];
				}

				if (!rtspId || !streamsDesList[rtspId]) {
					startRtspStream();

				}else{
					streamId = streamsDesList[rtspId].id;
				    startStream(streamId);
				}

				$('#streamslist a').unbind('click').click(function () {
					selectedStream = $(this).attr("id");
					$('#streamset').html($(this).html()).parent().removeClass('open');
					return false;

				});
			}
		}
	});
}

function getStreamInfo(streamId) {
	$('#metadata').empty();
	$('#info').addClass('hide').hide();
	if (!selectedStream || !streamsList[streamId])
		return;
	// Send a request for more info on the mountpoint we subscribed to
	var body = { request: "info", id: parseInt(streamId) || streamId };
	streaming.send({
		message: body, success: function (result) {
			if (result && result.info && result.info.metadata) {
				$('#metadata').html(escapeXmlTags(result.info.metadata));
				$('#info').removeClass('hide').show();
			}
		}
	});
}

function startStream(streamId) {
	Janus.log("Selected video id #" + streamId);
	//if (!streamId || !streamsList[streamId]) {
	//	bootbox.alert("Select a stream from the list");
	//	return;
	//}
	$('#streamset').attr('disabled', true);
	$('#streamslist').attr('disabled', true);
	$('#watch').attr('disabled', true).unbind('click');
	// Add some panels to host the remote streams
	if (streamsList[streamId].legacy) {
		// At max 1-audio/1-video, so use a single panel
		var mid = null;
		for (mi in streamsList[streamId].media) {
			// Add a new panel
			var type = streamsList[streamId].media[mi].type;
			if (type === "video") {
				mid = streamsList[streamId].media[mi].mid;
				break;
			}
		}
		if ($('#mstream0').length === 0) {
			addPanel("0", mid);
			// No remote video yet
			$('#mstream0').append('<video class="rounded centered waitingvideo" id="waitingvideo0" width="100%" height="100%" />');
		}
		if (mid) {
			if (spinner[mid] == null) {
				var target = document.getElementById('mstream0');
				spinner[mid] = new Spinner({ top: 100 }).spin(target);
			} else {
				spinner[mid].spin();
			}
		}
		dataMid = "0";
	} else {
		// Multistream mountpoint, create a panel for each stream
		for (mi in streamsList[streamId].media) {
			// Add a new panel
			var type = streamsList[streamId].media[mi].type;
			var mid = streamsList[streamId].media[mi].mid;
			var label = streamsList[streamId].media[mi].label;
			if ($('#mstream' + mid).length === 0) {
				addPanel(mid, mid, label);
				// No remote media yet
				$('#mstream' + mid).append('<video class="rounded centered waitingvideo" id="waitingvideo' + mid + '" width="100%" height="100%" />');
			}
			if (spinner[mid] == null) {
				var target = document.getElementById('mstream' + mid);
				spinner[mid] = new Spinner({ top: 100 }).spin(target);
			} else {
				spinner[mid].spin();
			}
			if (type === 'data')
				dataMid = mid;
		}
	}
	// Prepare the request to start streaming and send it
	var body = { request: "watch", id: parseInt(streamId) || streamId };
	// Notice that, for RTP mountpoints, you can subscribe to a subset
	// of the mountpoint media, rather than them all, by adding a "stream"
	// array containing the list of stream mids you're interested in, e.g.:
	//
	//		body.streams = [ "0", "2" ];
	//
	// to only subscribe to the first and third stream, and skip the second
	// (assuming those are the mids you got from a "list" or "info" request).
	// By default, you always subscribe to all the streams in a mountpoint
	streaming.send({ message: body });
	// Get some more info for the mountpoint to display, if any
	getStreamInfo(streamId);
}

function stopStream() {
	$('#watch').attr('disabled', true).unbind('click');
	var body = { request: "stop" };
	streaming.send({ message: body });
	streaming.hangup();
}

// Helper to escape XML tags
function escapeXmlTags(value) {
	if (value) {
		var escapedValue = value.replace(new RegExp('<', 'g'), '&lt');
		escapedValue = escapedValue.replace(new RegExp('>', 'g'), '&gt');
		return escapedValue;
	}
}

// Helper to add a new panel to the 'videos' div
function addPanel(panelId, mid, desc) {
	$('#videos').append(
		'<div class="row" id="panel' + panelId + '">' +
		'	<div class="panel-body" id="mstream' + panelId + '"></div>' +
		'	</div>' +
		'</div>'
	);
}

// Helper to escape XML tags
function escapeXmlTags(value) {
	if (value) {
		var escapedValue = value.replace(new RegExp('<', 'g'), '&lt');
		escapedValue = escapedValue.replace(new RegExp('>', 'g'), '&gt');
		return escapedValue;
	}
}

// Helpers to create Simulcast-related UI, if enabled
function addSimulcastButtons(mid) {
	$('#curres' + mid).parent().append(
		'<div id="simulcast' + mid + '" class="btn-group-vertical btn-group-vertical-xs pull-right">' +
		'	<div class"row">' +
		'		<div class="btn-group btn-group-xs" style="width: 100%">' +
		'			<button id="m-' + mid + '-sl-2" type="button" class="btn btn-primary" data-toggle="tooltip" title="Switch to higher quality" style="width: 33%">SL 2</button>' +
		'			<button id="m-' + mid + '-sl-1" type="button" class="btn btn-primary" data-toggle="tooltip" title="Switch to normal quality" style="width: 33%">SL 1</button>' +
		'			<button id="m-' + mid + '-sl-0" type="button" class="btn btn-primary" data-toggle="tooltip" title="Switch to lower quality" style="width: 34%">SL 0</button>' +
		'		</div>' +
		'	</div>' +
		'	<div class"row">' +
		'		<div class="btn-group btn-group-xs hide" style="width: 100%">' +
		'			<button id="m-' + mid + '-tl-2" type="button" class="btn btn-primary" data-toggle="tooltip" title="Cap to temporal layer 2" style="width: 34%">TL 2</button>' +
		'			<button id="m-' + mid + '-tl-1" type="button" class="btn btn-primary" data-toggle="tooltip" title="Cap to temporal layer 1" style="width: 33%">TL 1</button>' +
		'			<button id="m-' + mid + '-tl-0" type="button" class="btn btn-primary" data-toggle="tooltip" title="Cap to temporal layer 0" style="width: 33%">TL 0</button>' +
		'		</div>' +
		'	</div>' +
		'</div>');
	// Enable the simulcast selection buttons
	$('#m-' + mid + '-sl-0').removeClass('btn-primary btn-success').addClass('btn-primary')
		.unbind('click').click(function () {
			toastr.info("Switching simulcast substream, wait for it... (lower quality)", null, { timeOut: 2000 });
			if (!$('#m-' + mid + '-sl-2').hasClass('btn-success'))
				$('#m-' + mid + '-sl-2').removeClass('btn-primary btn-info').addClass('btn-primary');
			if (!$('#m-' + mid + '-sl-1').hasClass('btn-success'))
				$('#m-' + mid + '-sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');
			$('#m-' + mid + '-sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');
			streaming.send({ message: { request: "configure", mid: mid, substream: 0 } });
		});
	$('#m-' + mid + '-sl-1').removeClass('btn-primary btn-success').addClass('btn-primary')
		.unbind('click').click(function () {
			toastr.info("Switching simulcast substream, wait for it... (normal quality)", null, { timeOut: 2000 });
			if (!$('#m-' + mid + '-sl-2').hasClass('btn-success'))
				$('#m-' + mid + '-sl-2').removeClass('btn-primary btn-info').addClass('btn-primary');
			$('#m-' + mid + '-sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-info');
			if (!$('#m-' + mid + '-sl-0').hasClass('btn-success'))
				$('#m-' + mid + '-sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');
			streaming.send({ message: { request: "configure", mid: mid, substream: 1 } });
		});
	$('#m-' + mid + '-sl-2').removeClass('btn-primary btn-success').addClass('btn-primary')
		.unbind('click').click(function () {
			toastr.info("Switching simulcast substream, wait for it... (higher quality)", null, { timeOut: 2000 });
			$('#m-' + mid + '-sl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');
			if (!$('#m-' + mid + '-sl-1').hasClass('btn-success'))
				$('#m-' + mid + '-sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');
			if (!$('#m-' + mid + '-sl-0').hasClass('btn-success'))
				$('#m-' + mid + '-sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');
			streaming.send({ message: { request: "configure", mid: mid, substream: 2 } });
		});
	// We always add temporal layer buttons too, even though these will only work with vP8
	$('#m-' + mid + '-tl-0').parent().removeClass('hide');
	$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-success').addClass('btn-primary')
		.unbind('click').click(function () {
			toastr.info("Capping simulcast temporal layer, wait for it... (lowest FPS)", null, { timeOut: 2000 });
			if (!$('#m-' + mid + '-tl-2').hasClass('btn-success'))
				$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');
			if (!$('#m-' + mid + '-tl-1').hasClass('btn-success'))
				$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');
			$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');
			streaming.send({ message: { request: "configure", mid: mid, temporal: 0 } });
		});
	$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-success').addClass('btn-primary')
		.unbind('click').click(function () {
			toastr.info("Capping simulcast temporal layer, wait for it... (medium FPS)", null, { timeOut: 2000 });
			if (!$('#m-' + mid + '-tl-2').hasClass('btn-success'))
				$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');
			$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-info').addClass('btn-info');
			if (!$('#m-' + mid + '-tl-0').hasClass('btn-success'))
				$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');
			streaming.send({ message: { request: "configure", mid: mid, temporal: 1 } });
		});
	$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-success').addClass('btn-primary')
		.unbind('click').click(function () {
			toastr.info("Capping simulcast temporal layer, wait for it... (highest FPS)", null, { timeOut: 2000 });
			$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');
			if (!$('#m-' + mid + '-tl-1').hasClass('btn-success'))
				$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');
			if (!$('#m-' + mid + '-tl-0').hasClass('btn-success'))
				$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');
			streaming.send({ message: { request: "configure", mid: mid, temporal: 2 } });
		});
}

function updateSimulcastButtons(mid, substream, temporal) {
	// Check the substream
	if (substream === 0) {
		toastr.success("Switched simulcast substream! (lower quality)", null, { timeOut: 2000 });
		$('#m-' + mid + '-sl-2').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');
	} else if (substream === 1) {
		toastr.success("Switched simulcast substream! (normal quality)", null, { timeOut: 2000 });
		$('#m-' + mid + '-sl-2').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');
		$('#m-' + mid + '-sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');
	} else if (substream === 2) {
		toastr.success("Switched simulcast substream! (higher quality)", null, { timeOut: 2000 });
		$('#m-' + mid + '-sl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');
		$('#m-' + mid + '-sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');
	}
	// Check the temporal layer
	if (temporal === 0) {
		toastr.success("Capped simulcast temporal layer! (lowest FPS)", null, { timeOut: 2000 });
		$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');
	} else if (temporal === 1) {
		toastr.success("Capped simulcast temporal layer! (medium FPS)", null, { timeOut: 2000 });
		$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');
		$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');
	} else if (temporal === 2) {
		toastr.success("Capped simulcast temporal layer! (highest FPS)", null, { timeOut: 2000 });
		$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');
		$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');
	}
}

// Helpers to create SVC-related UI for a new viewer
function addSvcButtons(mid) {
	if ($('#svc').length > 0)
		return;
	$('#curres' + mid).parent().append(
		'<div id="svc' + mid + '" class="btn-group-vertical btn-group-vertical-xs pull-right">' +
		'	<div class"row">' +
		'		<div class="btn-group btn-group-xs" style="width: 100%">' +
		'			<button id="m-' + mid + '-sl-1" type="button" class="btn btn-primary" data-toggle="tooltip" title="Switch to normal resolution" style="width: 50%">SL 1</button>' +
		'			<button id="m-' + mid + '-sl-0" type="button" class="btn btn-primary" data-toggle="tooltip" title="Switch to low resolution" style="width: 50%">SL 0</button>' +
		'		</div>' +
		'	</div>' +
		'	<div class"row">' +
		'		<div class="btn-group btn-group-xs" style="width: 100%">' +
		'			<button id="m-' + mid + '-tl-2" type="button" class="btn btn-primary" data-toggle="tooltip" title="Cap to temporal layer 2 (high FPS)" style="width: 34%">TL 2</button>' +
		'			<button id="m-' + mid + '-tl-1" type="button" class="btn btn-primary" data-toggle="tooltip" title="Cap to temporal layer 1 (medium FPS)" style="width: 33%">TL 1</button>' +
		'			<button id="m-' + mid + '-tl-0" type="button" class="btn btn-primary" data-toggle="tooltip" title="Cap to temporal layer 0 (low FPS)" style="width: 33%">TL 0</button>' +
		'		</div>' +
		'	</div>' +
		'</div>'
	);
	// Enable the SVC selection buttons
	$('#m-' + mid + '-sl-0').removeClass('btn-primary btn-success').addClass('btn-primary')
		.unbind('click').click(function () {
			toastr.info("Switching SVC spatial layer, wait for it... (low resolution)", null, { timeOut: 2000 });
			if (!$('#m-' + mid + '-sl-1').hasClass('btn-success'))
				$('#m-' + mid + '-sl-1').removeClass('btn-primary btn-info').addClass('btn-primary');
			$('#m-' + mid + '-sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');
			streaming.send({ message: { request: "configure", mid: mid, spatial_layer: 0 } });
		});
	$('#m-' + mid + '-sl-1').removeClass('btn-primary btn-success').addClass('btn-primary')
		.unbind('click').click(function () {
			toastr.info("Switching SVC spatial layer, wait for it... (normal resolution)", null, { timeOut: 2000 });
			$('#m-' + mid + '-sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-info');
			if (!$('#m-' + mid + '-sl-0').hasClass('btn-success'))
				$('#m-' + mid + '-sl-0').removeClass('btn-primary btn-info').addClass('btn-primary');
			streaming.send({ message: { request: "configure", mid: mid, spatial_layer: 1 } });
		});
	$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-success').addClass('btn-primary')
		.unbind('click').click(function () {
			toastr.info("Capping SVC temporal layer, wait for it... (lowest FPS)", null, { timeOut: 2000 });
			if (!$('#m-' + mid + '-tl-2').hasClass('btn-success'))
				$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');
			if (!$('#m-' + mid + '-tl-1').hasClass('btn-success'))
				$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');
			$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-info');
			streaming.send({ message: { request: "configure", mid: mid, temporal_layer: 0 } });
		});
	$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-success').addClass('btn-primary')
		.unbind('click').click(function () {
			toastr.info("Capping SVC temporal layer, wait for it... (medium FPS)", null, { timeOut: 2000 });
			if (!$('#m-' + mid + '-tl-2').hasClass('btn-success'))
				$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-info').addClass('btn-primary');
			$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-info').addClass('btn-info');
			if (!$('#m-' + mid + '-tl-0').hasClass('btn-success'))
				$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');
			streaming.send({ message: { request: "configure", mid: mid, temporal_layer: 1 } });
		});
	$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-success').addClass('btn-primary')
		.unbind('click').click(function () {
			toastr.info("Capping SVC temporal layer, wait for it... (highest FPS)", null, { timeOut: 2000 });
			$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-info');
			if (!$('#m-' + mid + '-tl-1').hasClass('btn-success'))
				$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-info').addClass('btn-primary');
			if (!$('#m-' + mid + '-tl-0').hasClass('btn-success'))
				$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-info').addClass('btn-primary');
			streaming.send({ message: { request: "configure", mid: mid, temporal_layer: 2 } });
		});
}

function updateSvcButtons(mid, spatial, temporal) {
	// Check the spatial layer
	if (spatial === 0) {
		toastr.success("Switched SVC spatial layer! (lower resolution)", null, { timeOut: 2000 });
		$('#m-' + mid + '-sl-1').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-sl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');
	} else if (spatial === 1) {
		toastr.success("Switched SVC spatial layer! (normal resolution)", null, { timeOut: 2000 });
		$('#m-' + mid + '-sl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');
		$('#m-' + mid + '-sl-0').removeClass('btn-primary btn-success').addClass('btn-primary');
	}
	// Check the temporal layer
	if (temporal === 0) {
		toastr.success("Capped SVC temporal layer! (lowest FPS)", null, { timeOut: 2000 });
		$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-info btn-success').addClass('btn-success');
	} else if (temporal === 1) {
		toastr.success("Capped SVC temporal layer! (medium FPS)", null, { timeOut: 2000 });
		$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-info btn-success').addClass('btn-success');
		$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');
	} else if (temporal === 2) {
		toastr.success("Capped SVC temporal layer! (highest FPS)", null, { timeOut: 2000 });
		$('#m-' + mid + '-tl-2').removeClass('btn-primary btn-info btn-success').addClass('btn-success');
		$('#m-' + mid + '-tl-1').removeClass('btn-primary btn-success').addClass('btn-primary');
		$('#m-' + mid + '-tl-0').removeClass('btn-primary btn-success').addClass('btn-primary');
	}
}
$(window).load(function () {
	$("#start").trigger("click");
	//setTimeout(() => {
	//	$('#remotevideov').get(0).play();
	//}, 1000)

});
var popup_1 = window.parent.$("#popup_1").data("kendoWindow");
if(popup_1 != undefined){
	popup_1.bind("close", window_close);
}
var popup_2 = window.parent.$("#popup_2").data("kendoWindow");
if(popup_2 != undefined){
	popup_2.bind("close", window_close);
}
function window_close(e) {       
		if(janus != undefined){
			for (var s in Janus.sessions) {
				if (Janus.sessions[s] && Janus.sessions[s].destroyOnUnload) {
					Janus.log("Destroying session " + s);
					Janus.sessions[s].destroy({ unload: true, notifyDestroyed: false });
				}
			}
		}
        
    }
</script>

<style>
    .rounded {
        border-radius: 5px;
    }

    .centered {
        display: block;
        margin: auto;
    }

    .relative {
        position: relative;
    }

    .navbar-brand {
        margin-left: 0px !important;
    }

    .navbar-default {
        -webkit-box-shadow: 0px 3px 5px rgba(100, 100, 100, 0.49);
        -moz-box-shadow: 0px 3px 5px rgba(100, 100, 100, 0.49);
        box-shadow: 0px 3px 5px rgba(100, 100, 100, 0.49);
    }

    .navbar-header {
        padding-left: 40px;
    }

    .margin-sm {
        margin: 5px !important;
    }

    .margin-md {
        margin: 10px !important;
    }

    .margin-xl {
        margin: 20px !important;
    }

    .margin-bottom-sm {
        margin-bottom: 5px !important;
    }

    .margin-bottom-md {
        margin-bottom: 10px !important;
    }

    .margin-bottom-xl {
        margin-bottom: 20px !important;
    }

    .divider {
        width: 100%;
        text-align: center;
    }

        .divider hr {
            margin-left: auto;
            margin-right: auto;
            width: 45%;
        }

    .fa-2 {
        font-size: 2em !important;
    }

    .fa-3 {
        font-size: 4em !important;
    }

    .fa-4 {
        font-size: 7em !important;
    }

    .fa-5 {
        font-size: 12em !important;
    }

    .fa-6 {
        font-size: 20em !important;
    }

    div.no-video-container {
        position: relative;
    }

    .no-video-icon {
        width: 100%;
        height: 240px;
        text-align: center;
    }

    .no-video-text {
        text-align: center;
        position: absolute;
        bottom: 0px;
        right: 0px;
        left: 0px;
        font-size: 24px;
    }

	video {
    border-bottom: 1px solid transparent;
	}


    .meetecho-logo {
        padding: 12px !important;
    }

        .meetecho-logo > img {
            height: 26px;
        }

    pre {
        white-space: pre-wrap;
        white-space: -moz-pre-wrap;
        white-space: -pre-wrap;
        white-space: -o-pre-wrap;
        word-wrap: break-word;
    }

    .januscon {
        font-weight: bold;
        animation: pulsating 1s infinite;
    }
</style>
<button style="display:none" class="btn btn-default" autocomplete="off" id="start">Start</button>
<h4 id="load-msg" style="text-align: center;color: blue;">trying to fetch video ......</h4>
<h4 id="error-msg" style="text-align: center;color: blue;"></h4>
<div id="videos">
</div>