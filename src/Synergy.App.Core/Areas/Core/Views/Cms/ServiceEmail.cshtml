@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@inject Synergy.App.Common.IUserContext _userContext
@{
    Layout = ViewBag.Layout;
}
@model ServiceTemplateViewModel
<style>
    .exp-col {
        -ms-flex: 0 0 50px;
        flex: 0 0 50px;
    }

    .card-header {
        font-weight: 500 !important;
    }

    .Drafted {
        background-color: #17a2b8;
        color: #fff;
    }

    .Pending {
        background-color: #007bff;
        color: #fff;
    }

    .Completed {
        background-color: #13b713;
        color: #fff;
    }
    .Service {
        background-color: #d8e4fb;
    }
</style>
<script>
    function UpdateHtmlContent(obj) {

        var myform = Object.values(Formio.forms)[0];
        var h = '';
        if (obj.html.length>2) {
            h = obj.html.substring(1, obj.html.length - 1);
            h = h.replace(/\\n/g, '').replace(/\\"/g, '"');
            myform.getComponent(obj.df).component.html = h;
            myform.getComponent(obj.df).originalComponent.html = h;
        }
        var c = '';
        if (obj.cf.length > 2) {
            var scrpt = document.getElementById("dynamicscript");
            if (scrpt != null && scrpt != undefined) {
                scrpt.parentNode.removeChild(scrpt);
            }
            c = obj.css.substring(1, obj.css.length - 1);
            var css = '<style type="text/css" id="dynamicscript">' + c + '</style>';
            $('head').append(css);
        }
        myform.getComponent(obj.jf).setValue(obj.json);
        myform.getComponent(obj.hf).setValue(obj.html);
        myform.getComponent(obj.sf).setValue(obj.style);
        myform.getComponent(obj.cf).setValue(obj.css);
    }

    function OnViewTask(id, pageid, tempCode) {
        var portalId = "";
        if (window.parent == "" || window.parent == undefined) {
            portalId = $("#GlobalPortalId").val();
        }
        else {
            portalId = window.parent.$("#GlobalPortalId").val();
        }
        var prms = encodeURIComponent('hideStpTaskDetails=true');
        var url = "";
        url = '/Cms/Page?lo=Popup&pageType=Task&source=View&dataAction=View&templateCodes=' + tempCode + '&portalId=' + portalId + '&recordId=' + id + '&prms=' + prms;
        LoadCmsPartialView(url, 'Task', true, 1000, 600, 'Task');
        return false;
    }
    function htmlDecode(value) {
        return value.replace(/&lt;/g, "<").replace(/&gt;/g, ">");
    }

    function FillSharingCount() {
        var openUrl = "/cms/GetServiceSharedCount?serviceId=@Model.ServiceId" ;
        $.ajax({
            url: openUrl,
            type: 'GET',
            cache: false,
            success: function (data) {
                $('#sharedCount').html(data);
            },
            error: function (errData) {
                OnError(errData);
            }
        });
    }
    function FillCommentCount() {
        var openUrl = "/cms/GetServiceCommentCount?serviceId=@Model.ServiceId" ;
        $.ajax({
            url: openUrl,
            type: 'GET',
            cache: false,
            success: function (data) {
                $('#commentCount').html(data);
            },
            error: function (errData) {
                OnError(errData);
            }
        });
    }

     function FillAttachmentCount()
     {
        $.ajax({
            type: "Get",
            url: '/cms/GetServiceAttachmentCount?serviceId=@Model.ServiceId',
            success: function (data) {
                $("#attchmentCount").html(data);
            },
            dataType: "json",
        });
    }
     function FillNotificationCount()
    {
        $.ajax({
            type: "Get",
            url: '/cms/GetServiceNotificationCount?serviceId=@Model.ServiceId',
            success: function (data) {
                $("#notificationCount").html(data);
            },
            dataType: "json",
        });
    }
    function SaveAsDraft() {
        $("#ServiceStatusCode").val('SERVICE_STATUS_DRAFT');
        var json = $('#formio-container').html();
        if (json === null || json === '' || json == undefined) {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        }
        $('form#frmManageService').submit();
        return false;
    }


    var ajaxResponse;
    var onAjaxSuccess = function (res) {
        ajaxResponse = res;
        if (res.success) {
            if (res.openMsgPopup) {
                var mymodal = $('#messageModal');
                mymodal.find('.modal-body').html(res.customMsg);
                mymodal.modal('show');
                return false;
            }
            else {
                ShowNotification(res.msg, 'success');
            }
            CompleteSubmit(res);

        }
        else {
            ShowServiceError(res.error);
        }
    };
    function CompleteSubmit(res) {
        if (res.mode === 'Popup') {
            var win = GetMainWindow();
            var cb = null;
            if (res.cbm !== null && res.cbm !== undefined && res.cbm !== '') {
                cb = { MethodName: res.cbm, Prms: res.vm };
            }
            win.CloseWindow(cb);
            return false;
        }
        if (res.mode === 'Iframe') {
            if (res.cbm !== null && res.cbm !== undefined && res.cbm !== '') {
                window.parent[res.cbm](res.vm);
                return false;
            }
        }
        if (res.mode === 'Div') {
            if (res.cbm !== null && res.cbm !== undefined && res.cbm !== '') {
                window[res.cbm](res.vm);
                return false;
            }

        }
        if (res.reload) {
            LoadPageById(res.pageId, res.pageType, res.source, res.dataAction, res.recordId);
        }
        else if (res.ru !== null && res.ru !== '' && res.ru !== undefined && res.ru !== 'undefined') {
            window.location.href = res.ru;
        }
    }
    function ShowServiceError(error) {
        $("#validation-summary-manageform").html(error);
        $("#validation-summary-manageform").css("display", "block")
    }


    function myFunction() {
        document.getElementById("myDropdown").classList.toggle("show");
    }



    function onchangetype() {
        var userId = $("#AssignedToTypeCode").data("kendoDropDownList").value();
        console.lNtsTypeEnumg(userId);
        if (userId == "TASK_ASSIGN_TO_USER") {
            $("#users").show();
            $("#teams").hide();
            $("#teamusers").hide();
            $("#hm").hide();
            $("#hmlevel").hide();
        }
        else if (userId == "TASK_ASSIGN_TO_TEAM") {
            $("#users").hide();
            $("#teams").show();
            $("#teamusers").show();
            $("#hm").hide();
            $("#hmlevel").hide();
        }
        else if (userId == "TASK_ASSIGN_TO_USER_HIERARCHY") {
            $("#users").hide();
            $("#teams").hide();
            $("#teamusers").hide();
            $("#hm").show();
            $("#hmlevel").show();
        }
        else {
            $("#users").hide();
            $("#teams").hide();
            $("#teamusers").hide();
            $("#hm").hide();
            $("#hmlevel").hide();
        }
    }


    function OnActionChange(code) {
        $("#action-add-comment").hide();
        $("#action-cancel-service").hide();
        $("#action-close-task").hide();
        $(".action-section").show();
        $(".main-section").hide();
        if (code == "ADD_COMMENT") {
            $(".richText-toolbar").hide();
            $("#action-add-comment").show();
        }
        else if (code == "CANCEL_SERVICE") {
            $("#action-cancel-service").show();
        }
        else if (code == "CLOSE_SERVICE") {
            $("#action-close-task").show();
        }
        else if (code == "COMPLETE_SERVICE") {
            $("#action-complete-service").show();
        }
        else if (code == "EDIT_SERVICE") {
            ShowLoader($('.service-div'));
            $(".action-section").hide();
            var portalId = "";
            if (window.parent == "" || window.parent == undefined) {
                portalId = $("#GlobalPortalId").val();
            }
            else {
                portalId = window.parent.$("#GlobalPortalId").val();
            }
            var url = '/Cms/Page?lo=Popup&pageType=Service&source=Versioning&dataAction=Edit&templateCodes=@Model.TemplateCode&recordId=@Model.ServiceId&portalId=' + portalId;
            location.href = url;
        }
        else
        {
            $(".action-section").hide();
            $(".main-section").show();
        }
        return false;
    }

    function Filter() {
        var value = $("#AssignedToHierarchyMasterId").val();
        return {
            Id: value
        }
    }

    function OnStartDateDueDateChange() {
        var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        var ed = kendo.toString($("#DueDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        if (new Date(ed) > new Date(sd)) {
            var sec = GetSLAInSeconds(sd, ed);
            $('#ServiceSLAMinutes').data('durationPicker').setValue(sec);
        }
    }
    function GetSLAInSeconds(startDate, endDate) {
        var query = "startDate=" + startDate + "&endDate=" + endDate;
        var diff = UtilityAjax("GetSLAInSeconds", query);
        return diff;
    }
    function GetAddSeconds(startDate, seconds) {
        var query = "date=" + startDate + "&seconds=" + seconds;
        var diff = UtilityAjax("AddSeconds", query);
        return diff;
    }

    function onTag()
    {
          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("TagCategoryByTemplateType", "TagCategory", new { @area = "Cms" })?templateId=@Model.TemplateId&Id=@Model.ServiceId&TemplateType=Service';
        win.OpenWindow({ Title: 'Tags', Width: 1200, Height: 600 });
        return false;
    }
       function onLog()
    {
           var win = GetMainWindow();
           win.iframeOpenUrl = '@Url.Action("GetServiceLogsDetails", "NtsService", new { @area = "Cms" })?ServiceId=@Model.ServiceId&templateCode=@Model.TemplateCode&UdfNoteId=@Model.UdfNoteId&TemplateType=Service';
        win.OpenWindow({ Title: 'Logs', Width: 1200, Height: 600 });
        return false;
    }
    function onAdhocTask() {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ServiceAdhocTask", "Cms", new { @area = "" })?templateId=@Model.TemplateId&serviceId=@Model.ServiceId';
        win.OpenWindow({ Title: 'Adhoc Task', Width: 1200, Height: 600 });
        return false;

    }
   function onclickShare() {

         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("NtsServiceShared", "Cms", new { @area = "" })?serviceId=@Model.ServiceId&IsSharingEnabled=@Model.IsSharingEnabled';
       win.OpenWindow({ Title: 'Share With', Width: 1200, Height: 600 });
        return false;
    }
    function onProcessDesign()
    {

        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("NtsServiceProcessDesignResult", "Cms", new { @area = "" })?serviceId=@Model.ServiceId';
        win.OpenWindow({ Title: 'Process Design Result', Width: 1200, Height: 600 });
        return false;
    }

    function ViewVersionDetails() {
        var portalId = window.parent.$('#GlobalPortalId').val();
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("NtsVersion", "Cms", new { @area = "" })?recordId=@Model.ServiceId&type='+'@NtsTypeEnum.Service'+'&portalId='+portalId;
        win.OpenWindow({ Title: 'Version Details', Width: 1200, Height: 600 });
        return false;
    }

      function AddAttachment(e)
{

           var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("AddServiceAttachment", "Cms", new { @area = "" })?serviceId=@Model.ServiceId&IsAddAttachmentEnabled=@Model.IsAddAttachmentEnabled';
          win.OpenWindow({ Title: 'Service Attachment', Width: 800, Height: 700 });
        return false;
    }
    function onCommentClick()
    {

         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("ServiceComments", "Cms", new { @area = "" })?serviceId=@Model.ServiceId&IsAddCommentEnabled=@Model.IsAddCommentEnabled';
        win.OpenWindow({ Title: 'Service CoModelments', Width: 1200, Height: 600 });
        return false;
    }

    function ViewNotification()
    {


        var win = GetMainWindow();
        win.iframeOpenUrl = "/PortalAdmin/NotificationTemplate/NotificationIndex?lo=Popup&refTypeId=" + '@Model.ServiceId';
        win.OpenWindow({ Title: 'Notifications', Width: 1200, Height: 700 });
        return false;

    }

    function OnReply(targetType,ntsType, targetId, ntsId, parentId, to,from,toemail,subject,status) {
        
        $("#TargetType").val(targetType);
        $("#NtsType").val(ntsType);
        $("#TargetId").val(targetId);
        $("#NtsId").val(ntsId);
        $("#ParentId").val(parentId);
        $("#CommentToUserId").val(to);
        $("#From").val(from);     
        $("#To").data("kendoMultiSelect").value(to);
        $("#MessageSubject").val(subject);
        if (targetType == "SubTask") {
            var ds = [
                { Text: "Request Info", Value: "REQUEST_INFO" },
                { Text: "Resolution Check", Value: "REQUEST_ACCEPTION" },
            ];
            $("#drpAction").data("kendoDropDownList").setDataSource(ds);
        }
        else if (targetType == "AcceptanceTask" && status!="Completed") {
            var ds = [
                { Text: "Request Info", Value: "REQUEST_INFO" },
                { Text: "Accept Resolution", Value: "ACCEPT_RESOLUTION" },
            ];
            $("#drpAction").data("kendoDropDownList").setDataSource(ds);
        }
        else if (targetType == "AcceptanceTask" && status == "Completed") {
            var ds = [
                { Text: "Request Info", Value: "REQUEST_INFO" }
            ];
            $("#drpAction").data("kendoDropDownList").setDataSource(ds);
        }
        $("#div-reply").show('slow');
    }
    function OnOpen(targetType, ntsType, targetId, ntsId, parentId, to,templateCode) {
        var portalId = $('#GlobalPortalId').val();
        var url = '/Cms/Page?lo=Popup&pageType=Service&cbm=OnAfterServiceCreate&source=Edit&dataAction=Edit&templateCodes=' + templateCode + '&portalId=' + portalId + '&recordId=' + ntsId;
        var win = GetMainWindow();
        if (ntsType === 'Service') {
            win.iframeOpenUrl = url;
            win.OpenWindow({ Title: 'View Service', Width: 1200, Height: 700 });
            return false;

        } else if ('Task') {
            win.iframeOpenUrl = url;
            url = '/Cms/Page?lo=Popup&pageType=Task&cbm=OnAfterServiceCreate&source=Edit&dataAction=Edit&templateCodes=' + templateCode + '&portalId=' + portalId + '&recordId=' + ntsId;
            win.OpenWindow({ Title: 'View Task', Width: 1200, Height: 700 });
            return false;

        }
    }

    function OnReplySubmit() {
        var targetType = $("#TargetType").val();
        var ntsId=$("#NtsId").val();
        var parentId = $("#ParentId").val();
        var targetId = $("#TargetId").val();
        var serviceId = $("#ServiceId").val();
        var to = $("#To").val();
        var cc = $("#CC").val();
        PostTaskReply(serviceId, ntsId, to, cc)
        //if (targetType==='Service') {
        //    PostTaskReply(serviceId,ntsId, to,cc)
        //} else if (targetType === 'SubTask') {
        //    PostTaskReply(serviceId,ntsId, to,cc)
        //}
        //else if (targetType === 'Subtask') {
        //    PostTaskReply(serviceId,ntsId,to, cc)
        //}
        //else if (targetType === 'TaskComment') {
        //    PostTaskComment(ntsId, targetId, to)
        //}

    }
    function OnReplyCancel(e) {
        $("#div-reply").hide('slow');
    }
    function PostTaskReply(serviceId, ntsId, to, cc) {
        
        if ($("#drpAction").val() =="ACCEPT_RESOLUTION" || ($("#MessageSubject").val() != "" && $("#MessageBody").val() != "" && $("#To").data("kendoMultiSelect").value()!="")) {
            if ($("#drpAction").val() != "") {
                ShowLoader($('#div-reply'));
                $.ajax({
                    type: "POST",
                    url: "/cms/ReplyTask",
                    data: {
                        ServiceId: serviceId,
                        Subject: $("#MessageSubject").val(),
                        Body: $("#MessageBody").val(),
                        NtsId: ntsId,
                        Tos: to,
                        CCs: cc,
                        TemplateId: '@Model.Id',
                        Action: $("#drpAction").val(),
                        TargetType: $("#TargetType").val()
                    },
                    success: function (data) {
                        if (data.success) {
                            HideLoader($('#div-reply'));
                            @*var win = GetMainWindow();
                            win.CloseWindow({ MethodName: '@Model.PopupCallbackMethod' });*@
                            window.location.href = window.location.href;
                        }
                        else {
                            HideLoader($('#div-reply'));
                            ShowError(data.errors);
                        }
                    },
                    error: function (err) {
                        HideLoader($('#div-reply'));
                        ShowError(err);
                    }

                });
            }
            else {
                kendo.alert("Please Select Action");
            }
        }
        else
        {
            kendo.alert("Please enter message to,subject and body");
        }
    }
    function PostTaskComment(taskId,parentId,to) {
        if ($("#MessageSubject").val() != "" && $("#MessageBody").val() != "") {
            ShowLoader($('#div-reply'));
            $.ajax({
                type: "POST",
                url: "/cms/PostTaskComment",
                data: {
                    NtsTaskId: taskId,
                    CommentSubject: $("#MessageSubject").val(),
                    Comment: $("#MessageBody").val(),
                    ParentCommentId: parentId,
                    CommentToUserIds: to
                },
                success: function (data) {
                    if (data.success) {
                        HideLoader($('#div-reply'));
                        var win = GetMainWindow();
                        win.CloseWindow({ MethodName: '@Model.PopupCallbackMethod' });
                    }
                    else {
                        ShowErrors(data.errors);
                    }
                },
                error: function (err) {
                    ShowErrors(err);
                }

            });
        }
        else
        {
            kendo.alert("Please enter message subject and body");
        }
    }
    function OnReasonSave(e) {
        var comment = $("#CommentTemp").val();
        if (comment == null || comment == '') {
            $("#commentReq").show();
            return false;
        }
        else {
            $("#Comment").val(comment);
            $("#frmManageTask").submit();
            window[actionName]();
        }
    }
    var tempOwnerId;
    function OnChangeOwner() {
        $('#from-display').hide('slow');
        $('#from-edit').show('slow');
        tempOwnerId = $("#OwnerUserId").val();
        $("#OwnerUserId").val(null);
        return false;
    }
    function OnChangeOwnerCancel() {
        $('#from-display').show('slow');
        $('#from-edit').hide('slow');
        $("#OwnerUserId").val(tempOwnerId);
        return false;
    }
    function OnChangeOwnerSave() {
        var owner = $("#owner").data("kendoDropDownList");
        var dataItem = owner.dataItem();
        $("#OwnerUserId").val(dataItem.Id);
        $("#o-img").attr('src', '/Cms/document/getimagemongo/' + dataItem.PhotoId);
        $("#o-name").html(dataItem.Name);
        $("#o-email").html(dataItem.Email);
        $('#from-display').show('slow');
        $('#from-edit').hide('slow');
        $('#user-popup-card').data('user-id', dataItem.Id);
        SetOwnerAndRequesterVisibility();
        return false;
    }
    function SetOwnerAndRequesterVisibility() {
        var owner = $("#OwnerUserId").val();
        var requester = $("#RequestedByUserId").val();
        if (owner !== requester) {
            $('#div-requested-by').show('slow');
        }
        else {
            $('#div-requested-by').hide('slow');
        }
        return false;
    }

      function onEmail()
    {
          url = '@Url.Action("NtsEmail", "Cms", new { @area = "" })?refId=@Model.ServiceId' + '&refType=@ReferenceTypeEnum.NTS_Service';
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Email', Width: 1200, Height: 600 });
    }

    function onPermission(e)
    {
        $.ajax({
            type: "Get",
            url: '/cms/GetServiceDocumentId?serviceId=@Model.ServiceId',
            success: function (data) {
                if (data !=null && data!="") {
                    var win = GetMainWindow();
                    win.iframeOpenUrl = '@Url.Action("Index", "DocumentPermission", new { @area = "Dms" })?noteId='+data;
                    win.OpenWindow({ Title: 'Permission', Width: 1000, Height: 650 });
                    return false;
                }
            },
            dataType: "json",
        });
        return false;


    }
    function inlineComment(e)
    {
        $.ajax({
            type: "Get",
            url: '/cms/GetServiceDocumentId?serviceId=@Model.ServiceId',
            success: function (data) {
                if (data !=null && data!="") {
                    var win = GetMainWindow();
                    win.iframeOpenUrl =  '@Url.Action("InlineComment", "Cms", new { @area = "" })?noteId='+data;
                    win.OpenWindow({ Title: 'Inline Comment', Width: 1000, Height: 650 });
                    return false;
                }
            },
            dataType: "json",
        });
        return false;
    }
    function OnDrpActionChange() {
        var code = $("#drpAction").data("kendoDropDownList").value();
       
        if (code == "ACCEPT_RESOLUTION") {
            $("#ReplyMessage").hide();
            $("#Replybtn").val("Accept");
            
        }
        else {
            $("#ReplyMessage").show();
            $("#Replybtn").val("Reply");
        }
       
    }
    function OnAfterServiceCreate() {
        //GetChart();
        window.parent.location.href = window.parent.location.href;
        //caseSummaryGrid();
    }
</script>


<div id="appWrapper" class="wrapper">
    <div class="page">

        <div class="page-inner">
            <h5 class="text-center" style="width:100%;">@Model.TemplateDisplayName</h5>
            <h6 class="pb-2">Summary</h6>
            <div class="card d-flex mb-3 p-3" style="background-color:rgb(216 228 251);">
                <div class="row">

                    <div class="col-12 pb-2">
                        <span class="text-muted">Subject:</span>
                        <span class="pl-1 user-popup-card">
                            <span>
                                @Model.ServiceSubject
                            </span>

                        </span>
                    </div>
                    <div class="col-3">
                        <span class="text-muted">Owner:</span>
                        <span class="pl-1">
                            @Model.RequestedByUserEmail
                        </span>
                    </div>
                    <div class="col-3">
                        <span class="text-muted">Date:</span>
                        <span class="pl-1">
                            @Model.DueDate.ToDefaultDateTimeFormat()
                        </span>
                    </div>
                    <div class="col-3">
                        <span class="text-muted">Status:</span>
                        <span class="pl-1 user-popup-card">
                            <span>
                                @Model.ServiceStatusName
                            </span>
                        </span>
                    </div>
                    <div class="col-3">
                        <span class="text-muted">Service No:</span>
                        <span class="pl-1">
                            @Model.ServiceNo
                        </span>
                    </div>


                </div>
            </div>
            <h6 class="pb-2">Workflow Sequence Details</h6>
            @if (Model.EmailList.IsNotNull() && Model.EmailList.Any())
            {
        <div class="card" id="div-reply" style="display:none;">
            <div class="row p-3" id="ReplyMessage">
                <div class="col-12 pb-1">
                    From:
                    <input id="From" type="text" class="form-control text-muted" disabled />
                </div>
                <div class="col-12 pb-1">
                    To:
                    <select id="To" style="width:100%"></select>
                </div>
                <div class="col-12 pb-2">
                    CC:
                    <select id="CC" style="width:100%"></select>
                </div>
                <div class="col-12 pb-3">
                    <input id="MessageSubject" type="text" class="form-control" placeholder="Message Subject" />
                </div>
                <div class="col-12 pb-3">
                    <textarea id="MessageBody" rows="4" class="form-control" placeholder="Message Body"></textarea>
                </div>
            </div>
            <div class="row">
                <div class="col-12 d-flex">
                    <div id="drpDiv" class="p-3"><input id="drpAction" class="drp-btn" /></div>
                    <script>
                        $("#drpAction").kendoDropDownList({
                            optionLabel: "--Select Action--",
                            //filter: "contains",
                            change: OnDrpActionChange,
                            dataTextField: "Text",
                            dataValueField: "Value",
                            dataSource: [
                                { Text: "Request Info", Value: "REQUEST_INFO" },
                            ],

                        });

                    </script>
                    <div class="p-3">
                        <input type="button" id="Replybtn" class="btn btn-primary" value="Reply" onclick="OnReplySubmit()" />
                        <input type="button" class="btn btn-secondary" value="Cancel" onclick="OnReplyCancel()" />
                    </div>

                </div>
                <div class="col-12">
                    <input id="TargetType" type="hidden" />
                    <input id="TargetId" type="hidden" />
                    <input id="NtsId" type="hidden" />
                    <input id="ParentId" type="hidden" />
                    <input id="CommentToUserId" type="hidden" />
                </div>
            </div>
        </div>
                <div id="accordion" class="card-expansion">
                    @foreach (var item in Model.EmailList)
                    {
                        <div class="card card-expansion-item @item.TargetType.ToString()">
                            <div class="card-header border-0 row" id="heading_@item.TargetId">
                                <div class="col exp-col">
                                    <button class="btn btn-reset" data-toggle="collapse" data-target="#data-@item.TargetId" aria-expanded="false" aria-controls="data-@item.TargetId">
                                        <span class="collapse-indicator mr-2"><i class="fa fa-fw fa-caret-right"></i></span>
                                    </button>
                                </div>
                                <div class="col row">
                                    <div class="row col-11">
                                        <div class="col-6 pb-1">
                                            <span class="text-muted">From:</span>
                                            <span class="pl-1 user-popup-card" data-user-id="@item.FromUserId">
                                                <span>
                                                    @item.FromUserName
                                                </span>
                                                <a>&lt;@item.FromUserEmail&gt;</a>
                                            </span>
                                        </div>
                                        <div class="col-3 pb-1">
                                            <span class="text-muted">Sent:</span>
                                            <span class="pl-1">
                                                @item.CreatedDate.ToDefaultDateTimeFormat()
                                            </span>
                                        </div>
                                        <div class="col-3 pb-1">
                                            <span class="text-muted">Status:</span>
                                            <span class="badge badge-pill pl-1 @item.InboxStatus.ToString()">
                                                @item.InboxStatus.ToString()
                                            </span>
                                        </div>
                                        <div class="col-6 pb-1">
                                            <span class="text-muted">To:</span>
                                            <span class="pl-1 user-popup-card" data-user-id="@item.ToUserId">
                                                <span>
                                                    @item.ToUserName
                                                </span>
                                                <a>&lt;@item.ToUserEmail&gt;</a>
                                            </span>
                                        </div>
                                        <div class="col-3 pb-1">
                                            <span class="text-muted">Sequence:</span>
                                            <span class="pl-1">
                                                @item.SequenceOrderText
                                            </span>
                                        </div>
                                        <div class="col-3 pb-1">
                                            <span class="text-muted">Message Id:</span>
                                            <span class="pl-1 text-truncate">
                                                @item.NtsNo
                                            </span>
                                        </div>
                                        <div class="col-12 pb-1">
                                            <span class="text-muted">Subject:</span>
                                            <span class="pl-1 text-truncate">
                                                @item.Subject
                                            </span>
                                        </div>

                                    </div>
                                    <div class="row col-1">
                                        @if (item.CanReply)
                                        {
                                            <input type="button" class="btn btn-light btn-sm pb-2" value="Reply" onclick="OnReply('@item.TargetType.ToString()', '@item.NtsType.ToString()', '@item.TargetId', '@item.NtsId', '@item.ParentId', '@item.FromUserId','@ViewBag.UserName','@item.ToUserId','@item.Subject','@item.InboxStatus.ToString()')" />
                                        }
                                        @if (item.CanOpen)
                                        {
                                            <input type="button" class="btn btn-light btn-sm" value="Open" onclick="OnOpen('@item.TargetType.ToString()', '@item.NtsType.ToString()', '@item.TargetId', '@item.NtsId', '@item.ParentId', '@item.FromUserId', '@item.TemplateCode')" />
                                        }

                                    </div>
                                </div>
                            </div>
                            <div id="data-@item.TargetId" class="collapse" aria-labelledby="heading_@item.TargetId" data-parent="#accordion">
                                <div class="card-body pt-0"> @Html.Raw(item.Body)</div>
                            </div>
                        </div><!-- /.card -->
                    }
                </div>
            }
        </div>
    </div>
</div>



@Html.HiddenFor(x => x.TemplateCode)
@Html.HiddenFor(x => x.PopupCallbackMethod)
@Html.HiddenFor(x => x.DataAction)
@Html.HiddenFor(x => x.PortalId)
@Html.HiddenFor(x => x.ServiceId)
@Html.HiddenFor(x => x.RequestSource)
@Html.HiddenFor(x => x.OwnerUserId)
@Html.HiddenFor(x => x.RequestedByUserId)


<script>
    $('#messageModal').on('hide.bs.modal', function (event) {
        CompleteSubmit(ajaxResponse);
    })
    function chkChange() {

        if ($('#enableDescHtml').is(":checked")) {
            $(".richText-toolbar").show();
        }
        else {
            $(".richText-toolbar").hide();
        }
    }

    function onWorkflow() {
        debu
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ServiceDiagram", "NtsService", new { @area = "cms" })?id=@Model.ServiceId&isTemplate=false';
        win.OpenWindow({ Title: 'Service Workflow', Width: 1200, Height: 600 });
        return false;
    }
    (function ($) {
        $('#ServiceSLAMinutes').durationPicker({
            showSeconds: false,
            onChanged: function (newVal, init) {
                if (!init) {
                    var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
                    var ed = GetAddSeconds(sd, newVal);
                    var f = new Date(ed);
                    console.log(f);
                    $("#DueDate").data("kendoDateTimePicker").value(f)
                }

            }
        });
        $.fn.ribbon = function (id) {

            if (!id) {
                if (this.attr('id')) {
                    id = this.attr('id');
                }
            }

            var that = function () {
                return thatRet;
            };

            var thatRet = that;

            that.selectedTabIndex = -1;

            var tabNames = [];

            that.goToBackstage = function () {
                ribObj.addClass('backstage');
            }

            that.returnFromBackstage = function () {
                ribObj.removeClass('backstage');
            }
            var ribObj = null;

            that.init = function (id) {
                if (!id) {
                    id = 'ribbon';
                }

                ribObj = $('#' + id);
                ribObj.find('.ribbon-window-title').after('<div id="ribbon-tab-header-strip"></div>');
                var header = ribObj.find('#ribbon-tab-header-strip');

                ribObj.find('.ribbon-tab').each(function (index) {
                    var id = $(this).attr('id');
                    if (id == undefined || id == null) {
                        $(this).attr('id', 'tab-' + index);
                        id = 'tab-' + index;
                    }
                    tabNames[index] = id;

                    var title = $(this).find('.ribbon-title');
                    var isBackstage = $(this).hasClass('file');
                    //header.append('<div id="ribbon-tab-header-' + index + '" class="ribbon-tab-header"></div>');
                    var thisTabHeader = header.find('#ribbon-tab-header-' + index);
                    thisTabHeader.append(title);
                    if (isBackstage) {
                        thisTabHeader.addClass('file');

                        thisTabHeader.click(function () {
                            that.switchToTabByIndex(index);
                            that.goToBackstage();
                        });
                    } else {
                        if (that.selectedTabIndex == -1) {
                            that.selectedTabIndex = index;
                            thisTabHeader.addClass('sel');
                        }

                        thisTabHeader.click(function () {
                            that.returnFromBackstage();
                            that.switchToTabByIndex(index);
                        });
                    }
                    $(this).hide();
                });

                ribObj.find('.ribbon-button').each(function (index) {
                    var title = $(this).find('.button-title');
                    title.detach();
                    $(this).append(title);

                    var el = $(this);

                    this.enable = function () {
                        ServiceIdl.removeClass('disabled');
                    };

                    this.disable = function () {
                        el.addClass('disabled');
                    };

                    this.isEnabled = function () {
                        return !el.hasClass('disabled');
                    };

                    if ($(this).find('.ribbon-hot').length == 0) {
                        $(this).find('.ribbon-normal').addClass('ribbon-hot');
                    };

                    if ($(this).find('.ribbon-disabled').length == 0) {
                        $(this).find('.ribbon-normal').addClass('ribbon-disabled');
                        $(this).find('.ribbon-normal').addClass('ribbon-implicit-disabled');
                    };

                    $(this).tooltip({
                        bodyHandler: function () {
                            if (!$(this).isEnabled()) {
                                $('#tooltip').css('visibility', 'hidden');
                                return '';
                            }

                            var tor = '';

                            if (jQuery(this).children('.button-help').size() > 0)
                                tor = (jQuery(this).children('.button-help').html());
                            else
                                tor = '';

                            if (tor == '') {
                                $('#tooltip').css('visibility', 'hidden');
                                return '';
                            }

                            $('#tooltip').css('visibility', 'visible');

                            return tor;
                        },
                        left: 0,
                        extraClass: 'ribbon-tooltip'
                    });
                });

                ribObj.find('.ribbon-section').each(function (index) {
                    $(this).after('<div class="ribbon-section-sep"></div>');
                });

                ribObj.find('div').attr('unselectable', 'on');
                ribObj.find('span').attr('unselectable', 'on');
                ribObj.attr('unselectable', 'on');

                that.switchToTabByIndex(that.selectedTabIndex);
            }

            that.switchToTabByIndex = function (index) {
                var headerStrip = $('#ribbon #ribbon-tab-header-strip');
                headerStrip.find('.ribbon-tab-header').removeClass('sel');
                headerStrip.find('#ribbon-tab-header-' + index).addClass('sel');

                $('#ribbon .ribbon-tab').hide();
                $('#ribbon #' + tabNames[index]).show();
            }

            $.fn.enable = function () {
                if (this.hasClass('ribbon-button')) {
                    if (this[0] && this[0].enable) {
                        this[0].enable();
                    }
                }
                else {
                    this.find('.ribbon-button').each(function () {
                        $(this).enable();
                    });
                }
            }




            $.fn.disable = function () {
                if (this.hasClass('ribbon-button')) {
                    if (this[0] && this[0].disable) {
                        this[0].disable();
                    }
                }
                else {
                    this.find('.ribbon-button').each(function () {
                        $(this).disable();
                    });
                }
            }

            $.fn.isEnabled = function () {
                if (this[0] && this[0].isEnabled) {
                    return this[0].isEnabled();
                } else {
                    return true;
                }
            }


            that.init(id);

            $.fn.ribbon = that;
        };

    })(jQuery);
     $('.user-popup-card').webuiPopover('destroy').webuiPopover(userPopoverSettings);
    $('.duedate-popup-card').webuiPopover('destroy').webuiPopover({
        width: 270,
        height: 200,
        trigger: 'hover',
        placement: 'auto',
        delay: {
            show: null,
            hide: 300
        },
        content: '<div class="row pt-2 pb-2 pl-2"><div class="col-12 alert-light mb-3"><span class="text-label">Start Date</span><span class="text-title">@Model.StartDate.ToDefaultDateTimeFormat()</span></div><div class="col-12 alert-light mb-3"><span class="text-label">Due Date:</span><span class="text-title">@Model.DueDate.ToDefaultDateTimeFormat()</span></div><div class="col-12 alert-light"><span class="text-label">SLA:</span><span class="text-title">@Model.ServiceSLA</span></div></div>',
    });
    function OnMsgDatabound() {
        $('.user-popup-card').webuiPopover('destroy').webuiPopover(userPopoverSettings);
    }
    function FillFormIo(json, datajson) {
        var formio = $('#formio-container').html();
        if (formio != undefined) {
            var formio = document.getElementById('formio-container');
            LoadFormIo({ uiJson: json, dataJson: datajson }, formio);
        }
    }
    $(document).ready(function () {
        $("div[title]").webuiPopover('destroy').webuiPopover(generalPopoverSettings);
         $("#To").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Id",
            dataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/Core/Cms/GetUserIdNameList",
                        dataType: "json"
                    }
                },
            }),
            autoClose: false,
            placeholder: "Select User ...",
            valuePrimitive: true,
            serverFiltering: true,
            filter: '@FilterType.Contains',
     });
    $("#CC").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Id",
            dataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/Core/Cms/GetUserIdNameList",
                        dataType: "json"
                    }
                },
            }),
            autoClose: false,
            placeholder: "Select User ...",
            valuePrimitive: true,
            serverFiltering: true,
            filter: '@FilterType.Contains',
        });
        var items = {
            @if (!Model.HideWorkflowInHeader)
            {
                @: "workflow": { name: 'Workflow', icon: "fas fa-sitemap" },
            }
            @if (!Model.IsInEditMode && !Model.HideProcessDiagramInHeader)
                {
                   @: "processDesignResult": { name: 'Process Design Result', icon: "fas fa-project-diagram" },
                }
            @if (!Model.IsInEditMode && !Model.HideAdhocTaskInHeader)
                {
                   @:  "adhocTask": { name: 'Adhoc Task', icon: "fas fa-list-check" },
                }
              @if (!Model.HideEmailInHeader)
                  {
                    @:  "email": { name: 'Email', icon: "fas fa-envelope" },
                  }
              @if (!Model.IsInEditMode && !Model.HideNotificationInHeader)
                  {
                      @: "notification": { name: 'Notification', icon: "fas fa-bell" },
                  }
               @if (!Model.HideTahsInHeader)
                   {
                      @: "tag": { name: 'Tag', icon: "fas fa-tag" },
                   }
               @if (!Model.HideLogInHeader)
                   {
                       @: "log": { name: 'Log', icon: "fas fa-history" },
                   }


               };
        $.contextMenu({
            selector: '.more-option',
            trigger: 'left',
            autoHide: true,
            build: function ($trigger, e) {
                return {
                    callback: function (key, options) {

                        switch (key) {
                            case 'workflow':
                                onWorkflow();
                                break;
                            case 'adhocTask':
                                onAdhocTask();
                                break;
                            case 'processDesignResult':
                                onProcessDesign();
                                break;
                            case 'email':
                                onEmail();
                                break;
                            case 'notification':
                                ViewNotification();
                                break;
                            case 'tag':
                                onTag();
                                break;
                            case 'log':
                                onLog();
                                break;
                        }
                    },
                    items: items
                };


            }
        });
        var actions = {
             @if (Model.IsAddCommentEnabled)
             {
                @: "ADD_COMMENT": { name: 'Add Comment', icon: "fas fa-message" },
             }
             @if (Model.IsCloseButtonVisible)
             {
                @: "CLOSE_SERVICE": { name: 'Close Service', icon: "fas fa-times-circle" },
             }
             @if (Model.IsCancelButtonVisible)
             {
                @: "CANCEL_SERVICE": { name: 'Cancel Service', icon: "fas fa-ban" },
             }
             @if (Model.IsEditButtonVisible && !Model.DisableReopen)
             {
                @: "EDIT_SERVICE": { name: 'Edit Service', icon: "fas fa-pen" },
             }
             @*@if (Model.IsVersioningButtonVisible)
             {
                @: "EDIT_SERVICE": { name: 'Edit Service', icon: "fas fa-pen" },
             }*@
        };
        $.contextMenu({
            selector: '.more-action',
            trigger: 'left',
            delay: 200,
            autoHide: true,
            build: function ($trigger, e) {
                return {
                    callback: function (key, options) {
                        OnActionChange(key);
                    },
                    items: actions
                };


            }
        });
        if ('@Model.IsInEditMode' == 'True' && '@Model.HideHeader' == 'False' && '@Model.HideStartDate' == 'False') {
$("#StartDate").kendoDateTimePicker({ value: '@Model.StartDate', format: '@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormat', change: OnStartDateDueDateChange});
        $("#DueDate").kendoDateTimePicker({ value: '@Model.DueDate', format: '@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormat', change: OnStartDateDueDateChange});
        $("#ReminderDate").kendoDateTimePicker({value:'@Model.ReminderDate',format:'@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormat'});

        }


        $('.content').richText();

        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/cms/Service/ReadAttachedReplies?serviceId="+'@Model.ServiceId',
                    dataType: "json",
                }
            },
        });

        var dataSource = [];
        var i = 1;
        var list = '@Model.StepTasksList';
        for (let li of list) {
            dataSource[i] = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/cms/GetTaskMessageList?taskId="+li.Id,
                    dataType: "json"
                    }
                },
                pageSize: 1000
            });

            $("#listViewMsg_" + li.Id).kendoListView({
            dataSource: dataSource[i],
                dataBound: OnMsgDatabound,
                scrollable: "endless",
                template: kendo.template($("#templateListReplies").html())
            });
            i++;
        }

        var json = $('#Json').val();
        var datajson = $('#DataJson').val();
        FillFormIo(json, datajson);
        $('[data-toggle="popover"]').popover();
        SetOwnerAndRequesterVisibility();

        $('#enable-btn').click(function () {
            $('#del-table-btn').enable();
            $('#del-page-btn').enable();
            $('#save-btn').enable();
            $('#other-btn-2').enable();

            $('#enable-btn').hide();
            $('#disable-btn').show();
        });
        $('#disable-btn').click(function () {
            $('#del-table-btn').disable();
            $('#del-page-btn').disable();
            $('#save-btn').disable();
            $('#other-btn-2').disable();

            $('#disable-btn').hide();
            $('#enable-btn').show();
        });

        FillAttachmentCount();

        FillSharingCount();
        FillNotificationCount();
        FillCommentCount();

        $(".richText-toolbar").hide();


    });

    function allSynergyCharts() {
        @Html.Raw(Model.ChartItems);
    }
    @Html.Raw(Model.ChartItems);
    @if (Model.FormClientScript.IsNotNullAndNotEmpty())
    {
         @Html.Raw(Model.FormClientScript);
    }
</script>

















