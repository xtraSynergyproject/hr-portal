@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@model ServiceTemplateViewModel;
@{
    Layout = null;
}
<link rel="stylesheet" href="~/Themes/Looper/dist/assets/stylesheets/theme.min.css" data-skin="default" asp-append-version="true">
<link rel="stylesheet" href="~/Themes/Looper/dist/assets/vendor/flatpickr/flatpickr.min.css" asp-append-version="true">
<link rel="stylesheet" href="~/Themes/Looper/dist/assets/stylesheets/custom.css" asp-append-version="true">
<script>

    function UpdateHtmlContent(obj) {

        var myform = Object.values(Formio.forms)[0];
        var h = '';
        if (obj.html.length > 2) {
            h = obj.html.substring(1, obj.html.length - 1);
            h = h.replace(/\\n/g, '').replace(/\\"/g, '"');
            myform.getComponent(obj.df).component.html = h;
            myform.getComponent(obj.df).originalComponent.html = h;
        }
        var c = '';
        if (obj.cf.length > 2) {
            var scrpt = document.getElementById("dynamicscript");
            if (scrpt != null && scrpt != undefined) {
                scrpt.parentNode.removeChild(scrpt);
            }
            c = obj.css.substring(1, obj.css.length - 1);
            var css = '<style type="text/css" id="dynamicscript">' + c + '</style>';
            $('head').append(css);
        }
        myform.getComponent(obj.jf).setValue(obj.json);
        myform.getComponent(obj.hf).setValue(obj.html);
        myform.getComponent(obj.sf).setValue(obj.style);
        myform.getComponent(obj.cf).setValue(obj.css);
    }

    function OnViewTask(id, pageid, tempCode) {
        var portalId = "";
        if (window.parent == "" || window.parent == undefined) {
            portalId = $("#GlobalPortalId").val();
        }
        else {
            portalId = window.parent.$("#GlobalPortalId").val();
        }
        var prms = encodeURIComponent('hideStpTaskDetails=true');
        var url = "";
        url = '/Cms/Page?lo=Popup&pageType=Task&source=View&dataAction=View&templateCodes=' + tempCode + '&portalId=' + portalId + '&recordId=' + id + '&prms=' + prms;
        LoadCmsPartialView(url, 'Task', true, 1000, 600, 'Task');
        return false;
    }
    function htmlDecode(value) {
        return value.replace(/&lt;/g, "<").replace(/&gt;/g, ">");
    }
    function PostComment(e) {
        if ($("#editorAddComment").val() == "") {
            alert("Please add any Comment ");
        }
        else {
            $.ajax({
                type: "POST",
                url: "/cms/PostServiceComment",
                data: {
                    NtsServiceId: "@Model.ServiceId",
                    Comment: $("#editorAddComment").val(),
                    CommentToUserId: $("#CommentToUserId").data("kendoDropDownList").value()
                },
                success: function (data) {
                    if (data.success) {
                        ShowNotification("Commented successfully", "success");
                        $("#drpAction").data("kendoDropDownList").value('');
                        $(".action-section").hide();
                        $("#action-add-comment").hide();
                        var editor = $("#editorAddComment").data("kendoEditor");

                        editor.value("");
                        $("#CommentToUserId").data("kendoDropDownList").value('');
                        // $("#gridNTSReplies").data("kendoListView").dataSource.read();

                        FillCommentCount();

                    }
                    else {
                        ShowNotification("Please try again!", "error");
                        ShowErrors(data.errors);
                    }
                },
                error: function (err) {

                }

            });
        }
        e.preventDefault();
    }

    function FillSharingCount() {
        var openUrl = "/cms/GetServiceSharedCount?serviceId=@Model.ServiceId";
        $.ajax({
            url: openUrl,
            type: 'GET',
            cache: false,
            success: function (data) {
                $('#sharedCount').html(data);
            },
            error: function (errData) {
                OnError(errData);
            }
        });
    }
    function FillCommentCount() {
        var openUrl = "/cms/GetServiceCommentCount?serviceId=@Model.ServiceId";
        $.ajax({
            url: openUrl,
            type: 'GET',
            cache: false,
            success: function (data) {
                $('#commentCount').html(data);
            },
            error: function (errData) {
                OnError(errData);
            }
        });
    }

    function FillAttachmentCount() {
        $.ajax({
            type: "Get",
            url: '/cms/GetServiceAttachmentCount?serviceId=@Model.ServiceId',
            success: function (data) {
                $("#attchmentCount").html(data);
            },
            dataType: "json",
        });
    }
    function FillNotificationCount() {
        $.ajax({
            type: "Get",
            url: '/cms/GetServiceNotificationCount?serviceId=@Model.ServiceId',
            success: function (data) {
                $("#notificationCount").html(data);
            },
            dataType: "json",
        });
    }
    function SaveAsDraft() {
        $("#ServiceStatusCode").val('SERVICE_STATUS_DRAFT');
        var json = $('#formio-container').html();
        if (json === null || json === '' || json == undefined) {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        }
        $('form#frmManageService').submit();
        return false;
    }
    function OnWizardSubmit() {
        Submit();
    }
    function OpenRuntimeWorkflow() {
        var win = GetMainWindow();
        win.iframeOpenUrl = '/cms/processdesign/RunTimeWorkflow?templateId=@Model.TemplateId&serviceId=@Model.ServiceId';
        win.OpenWindow({ Title: 'Manage Workflow', Width: 1200, Height: 700 });
        return false;
    }
    function Submit() {
        var json = $('#formio-container').html();
        var isValid = json === null || json === '' || frm.checkValidity(frm.submission.data);
        if (isValid) {
            if ('@Model.EnableDynamicStepTaskSelection' == 'True') {
                var win = GetMainWindow();
                win.iframeOpenUrl = '@Url.Action("StepComponent", "Cms", new { @area = "" })?templateId=@Model.TemplateId&serviceId=@Model.ServiceId';
                win.OpenWindow({ Title: 'Service Step', Width: 800, Height: 500 });
                return false;
            }
            else {
                $("#ServiceStatusCode").val('SERVICE_STATUS_INPROGRESS');
                if (json === null || json === '' || json == undefined) {
                    $("#Json").val(JSON.stringify({}));
                }
                else {
                    $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
                }
                $('form#frmManageService').submit();
                return false;
            }
        }
        else {
            frm.submit();
        }
        return false;
    }
    function FillNextStepId(id) {
        var win = GetMainWindow();
        win.CloseWindow();
        var json = $('#formio-container').html();
        $("#ServiceStatusCode").val('SERVICE_STATUS_INPROGRESS');
        $("#NextStepTaskComponentId").val(id);
        if (json === null || json === '' || json == undefined) {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        }
        $("#frmManageService").submit();
        return true;
    }
    function Cancel() {

        $("#ServiceStatusCode").val('SERVICE_STATUS_CANCEL');
        var json = $('#formio-container').html();
        if (json === null || json === '' || json == undefined) {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.dataServiceId, null, 4));
        }
        return true;
    }
    function Complete() {

        $("#ServiceStatusCode").val('SERVICE_STATUS_COMPLETE');
        var json = $('#formio-container').html();
        if (json === null || json === '' || json == undefined) {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        }
        return true;
    }
    function CloseService() {

        $("#ServiceStatusCode").val('SERVICE_STATUS_CLOSE');
        var json = $('#formio-container').html();
        if (json === null || json === '' || json == undefined) {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        }
        return true;

    }
    var ajaxResponse;
    var onAjaxSuccess = function (res) {
        ajaxResponse = res;
        if (res.success) {
            if (res.openMsgPopup) {
                var serstatcode = $("#ServiceStatusCode").val();
                //alert(serstatcode);
                if(serstatcode == "SERVICE_STATUS_DRAFT"){
                var mymodal = $('#messageModal');
                mymodal.find('.modal-body').html("Service Saved as Draft.");
                mymodal.modal('show');
                }else{
                var mymodal = $('#messageModal');
                mymodal.find('.modal-body').html(res.customMsg);
                mymodal.modal('show');
                }
                return false;
            }
            else {
                ShowNotification(res.msg, 'success');
            }
            CompleteSubmit(res);

        }
        else {
            ShowServiceError(res.error);
        }
    };
    function CompleteSubmit(res) {
        if (res.mode === 'Popup') {
            var win = GetMainWindow();
            var cb = null;
            if (res.cbm !== null && res.cbm !== undefined && res.cbm !== '') {
                cb = { MethodName: res.cbm, Prms: res.vm };
            }
            win.CloseWindow(cb);
            return false;
        }
        if (res.mode === 'Iframe') {
            if (res.cbm !== null && res.cbm !== undefined && res.cbm !== '') {
                window.parent[res.cbm](res.vm);
                return false;
            }
        }
        if (res.mode === 'Div') {
            if (res.cbm !== null && res.cbm !== undefined && res.cbm !== '') {
                window[res.cbm](res.vm);
                return false;
            }

        }
        if (res.reload) {
            LoadPageById(res.pageId, res.pageType, res.source, res.dataAction, res.recordId);
        }
        else if (res.ru !== null && res.ru !== '' && res.ru !== undefined && res.ru !== 'undefined') {
            window.location.href = res.ru;
        }
    }
    function ShowServiceError(error) {
        $("#validation-summary-manageform").html(error);
        $("#validation-summary-manageform").css("display", "block")
    }


    function myFunction() {
        document.getElementById("myDropdown").classList.toggle("show");
    }



    function onchangetype() {
        var userId = $("#AssignedToTypeCode").data("kendoDropDownList").value();
        console.lNtsTypeEnumg(userId);
        if (userId == "TASK_ASSIGN_TO_USER") {
            $("#users").show();
            $("#teams").hide();
            $("#teamusers").hide();
            $("#hm").hide();
            $("#hmlevel").hide();
        }
        else if (userId == "TASK_ASSIGN_TO_TEAM") {
            $("#users").hide();
            $("#teams").show();
            $("#teamusers").show();
            $("#hm").hide();
            $("#hmlevel").hide();
        }
        else if (userId == "TASK_ASSIGN_TO_USER_HIERARCHY") {
            $("#users").hide();
            $("#teams").hide();
            $("#teamusers").hide();
            $("#hm").show();
            $("#hmlevel").show();
        }
        else {
            $("#users").hide();
            $("#teams").hide();
            $("#teamusers").hide();
            $("#hm").hide();
            $("#hmlevel").hide();
        }
    }
    function AddComment() {
        $(".action-section").show();
        $(".richText-toolbar").hide();
        $("#action-add-comment").show();
    }
    function CancelService() {
        $("#action-cancel-service").show();
    }
    function CloseService() {
        $("#action-close-task").show();
    }
    function CompleteService() {
        $("#action-complete-service").show();
    }
    function EditService() {
        ShowLoader();
        var portalId = "";
        if (window.parent == "" || window.parent == undefined) {
            portalId = $("#GlobalPortalId").val();
        }
        else {
            portalId = window.parent.$("#GlobalPortalId").val();
        }
        var url = '/Cms/Page?lo=Popup&pageType=Service&source=Versioning&dataAction=Edit&templateCodes=@Model.TemplateCode&recordId=@Model.ServiceId&portalId=' + portalId;
        location.href = url;
    }
    function OpenService(id, code) {
        var portalId = "";
        if (window.parent == "" || window.parent == undefined) {
            portalId = $("#GlobalPortalId").val();
        }
        else {
            portalId = window.parent.$("#GlobalPortalId").val();
        }
        var win = GetMainWindow();
        win.iframeOpenUrl = '/Cms/Page?lo=Popup&pageType=Service&source=View&dataAction=View&templateCodes=' + code + '&recordId=' + id + '&portalId=' + portalId;
        win.OpenWindow({ Title: 'Service', Width: 1200, Height: 650 });
    }
    function OnActionChange(code) {
        $("#action-add-comment").hide();
        $("#action-cancel-service").hide();
        $("#action-close-task").hide();
        $(".action-section").show();
        $(".main-section").hide();
        if (code == "ADD_COMMENT") {
            $(".richText-toolbar").hide();
            $("#action-add-comment").show();
        }
        else if (code == "CANCEL_SERVICE") {
            $("#action-cancel-service").show();
        }
        else if (code == "CLOSE_SERVICE") {
            $("#action-close-task").show();
        }
        else if (code == "COMPLETE_SERVICE") {
            $("#action-complete-service").show();
        }
        else if (code == "EDIT_SERVICE") {
            ShowLoader($('.service-div'));
            $(".action-section").hide();
            var portalId = "";
            if (window.parent == "" || window.parent == undefined) {
                portalId = $("#GlobalPortalId").val();
            }
            else {
                portalId = window.parent.$("#GlobalPortalId").val();
            }
            var url = '/Cms/Page?lo=Popup&pageType=Service&source=Versioning&dataAction=Edit&templateCodes=@Model.TemplateCode&recordId=@Model.ServiceId&portalId=' + portalId;
            location.href = url;
        }
        else {
            $(".action-section").hide();
            $(".main-section").show();
        }
        return false;
    }

    function Filter() {
        var value = $("#AssignedToHierarchyMasterId").val();
        return {
            Id: value
        }
    }

    function OnStartDateDueDateChange() {
        var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        var ed = kendo.toString($("#DueDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        if (new Date(ed) > new Date(sd)) {
            var sec = GetSLAInSeconds(sd, ed);
            $('#ServiceSLAMinutes').data('durationPicker').setValue(sec);
        }
    }
    function GetSLAInSeconds(startDate, endDate) {
        var query = "startDate=" + startDate + "&endDate=" + endDate;
        var diff = UtilityAjax("GetSLAInSeconds", query);
        return diff;
    }
    function GetAddSeconds(startDate, seconds) {
        var query = "date=" + startDate + "&seconds=" + seconds;
        var diff = UtilityAjax("AddSeconds", query);
        return diff;
    }

    function onTag() {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("TagCategoryByTemplateType", "TagCategory", new { @area = "Cms" })?templateId=@Model.TemplateId&Id=@Model.ServiceId&TemplateType=Service';
        win.OpenWindow({ Title: 'Tags', Width: 1200, Height: 600 });
        return false;
    }
    function onLog() {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("GetServiceLogsDetails", "NtsService", new { @area = "Cms" })?ServiceId=@Model.ServiceId&templateCode=@Model.TemplateCode&UdfNoteId=@Model.UdfNoteId&TemplateType=Service';
        win.OpenWindow({ Title: 'Logs', Width: 1200, Height: 600 });
        return false;
    }
    function onAdhocTask() {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ServiceAdhocTask", "Cms", new { @area = "" })?templateId=@Model.TemplateId&serviceId=@Model.ServiceId';
        win.OpenWindow({ Title: 'Adhoc Task', Width: 1200, Height: 600 });
        return false;

    }
    function onclickShare() {

        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("NtsServiceShared", "Cms", new { @area = "" })?serviceId=@Model.ServiceId&IsSharingEnabled=@Model.IsSharingEnabled';
        win.OpenWindow({ Title: 'Share With', Width: 1200, Height: 600 });
        return false;
    }
    function onProcessDesign() {

        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("NtsServiceProcessDesignResult", "Cms", new { @area = "" })?serviceId=@Model.ServiceId';
        win.OpenWindow({ Title: 'Process Design Result', Width: 1200, Height: 600 });
        return false;
    }

    function ViewVersionDetails() {
        var portalId = window.parent.$('#GlobalPortalId').val();
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("NtsVersion", "Cms", new { @area = "" })?recordId=@Model.ServiceId&type=' + '@NtsTypeEnum.Service' + '&portalId=' + portalId;
        win.OpenWindow({ Title: 'Version Details', Width: 1200, Height: 600 });
        return false;
    }

    function AddAttachment(e) {

        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("AddServiceAttachment", "Cms", new { @area = "" })?serviceId=@Model.ServiceId&IsAddAttachmentEnabled=@Model.IsAddAttachmentEnabled';
        win.OpenWindow({ Title: 'Service Attachment', Width: 800, Height: 700 });
        return false;
    }
    function onCommentClick() {

        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ServiceComments", "Cms", new { @area = "" })?serviceId=@Model.ServiceId&IsAddCommentEnabled=@Model.IsAddCommentEnabled';
        win.OpenWindow({ Title: 'Service Comments', Width: 1200, Height: 600 });
        return false;
    }

    function ViewNotification() {


        var win = GetMainWindow();
        win.iframeOpenUrl = "/PortalAdmin/NotificationTemplate/NotificationIndex?lo=Popup&refTypeId=" + '@Model.ServiceId';
        win.OpenWindow({ Title: 'Notifications', Width: 1200, Height: 700 });
        return false;

    }
    function closeNavMemberGroup() {
        if ('@Convert.ToString(Model.LayoutMode)' === 'Popup') {
            var win = GetMainWindow();
            win.CloseWindow();
            return false;
        }
        var id = '@Model.Page.Id';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.Main.ToString()';
        var action = '@DataActionEnum.None.ToString()';
        LoadPageById(id, type, source, action, '', '', '', '', '');
    }
    function OnReply(e) {
        var id = '@Model.Page.Id';
        var portalId = '@Model.Page.PortalId';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.Edit.ToString()';
        var action = '@RequestSourceEnum.Edit.ToString()';
        var templateCodes = '@Model.Page.TemplateCodes';
        if ('@Convert.ToString(Model.ViewMode)' === '@NtsViewTypeEnum.Book.ToString()') {
            var win = GetMainWindow();
            win.iframeOpenUrl = '/Cms/Page?lo=Popup&pageType=' + type + '&source=' + source + '&dataAction=' + action + '&templateCodes=' + templateCodes + '&portalId=' + portalId + '&recordId=@Model.ServiceId';
            win.OpenWindow({ Title: 'Manage Service', Width: 1200, Height: 700 });
            return false;
        }
        else {
            LoadPageById(id, type, source, action, '@Model.ServiceId', true, 1200, 700, 'Manage Service', '@Model.PopupCallbackMethod', true, templateCodes, portalId);
            return false;
        }

    }

    function OnReasonSave(e) {
        var comment = $("#CommentTemp").val();
        if (comment == null || comment == '') {
            $("#commentReq").show();
            return false;
        }
        else {
            $("#Comment").val(comment);
            $("#frmManageTask").submit();
            window[actionName]();
        }
    }
    var tempOwnerId;
    function OnChangeOwner() {
        $('#from-display').hide('slow');
        $('#from-edit').show('slow');
        tempOwnerId = $("#OwnerUserId").val();
        $("#OwnerUserId").val(null);
        return false;
    }
    function OnChangeOwnerCancel() {
        $('#from-display').show('slow');
        $('#from-edit').hide('slow');
        $("#OwnerUserId").val(tempOwnerId);
        return false;
    }
    function OnChangeOwnerSave() {
        var owner = $("#owner").data("kendoDropDownList");
        var dataItem = owner.dataItem();
        $("#OwnerUserId").val(dataItem.Id);
        $("#o-img").attr('src', '/Cms/document/getimagemongo/' + dataItem.PhotoId);
        $("#o-name").html(dataItem.Name);
        $("#o-email").html(dataItem.Email);
        $('#from-display').show('slow');
        $('#from-edit').hide('slow');
        $('#user-popup-card').data('user-id', dataItem.Id);
        SetOwnerAndRequesterVisibility();
        return false;
    }
    function SetOwnerAndRequesterVisibility() {
        var owner = $("#OwnerUserId").val();
        var requester = $("#RequestedByUserId").val();
        if (owner !== requester) {
            $('#div-requested-by').show('slow');
        }
        else {
            $('#div-requested-by').hide('slow');
        }
        return false;
    }

    function onEmail() {
        url = '@Url.Action("NtsEmail", "Cms", new { @area = "" })?refId=@Model.ServiceId' + '&refType=@ReferenceTypeEnum.NTS_Service';
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Email', Width: 1200, Height: 600 });
    }

    function onPermission(e) {
        $.ajax({
            type: "Get",
            url: '/cms/GetServiceDocumentId?serviceId=@Model.ServiceId',
            success: function (data) {
                if (data != null && data != "") {
                    var win = GetMainWindow();
                    win.iframeOpenUrl = '@Url.Action("Index", "DocumentPermission", new { @area = "Dms" })?noteId=' + data;
                    win.OpenWindow({ Title: 'Permission', Width: 1000, Height: 650 });
                    return false;
                }
            },
            dataType: "json",
        });
        return false;


    }
    function inlineComment(e) {
        $.ajax({
            type: "Get",
            url: '/cms/GetServiceDocumentId?serviceId=@Model.ServiceId',
            success: function (data) {
                if (data != null && data != "") {
                    var win = GetMainWindow();
                    win.iframeOpenUrl = '@Url.Action("InlineComment", "Cms", new { @area = "" })?noteId=' + data;
                    win.OpenWindow({ Title: 'Inline Comment', Width: 1000, Height: 650 });
                    return false;
                }
            },
            dataType: "json",
        });
        return false;


    }



</script>

<div class="page">
    @if (Model.ViewMode != NtsViewTypeEnum.Book)
    {
        <div class="row no-gutters">
            <div class="col-sm-12 col-md-6 p-3 pt-4">
                <h5 class="">@Model.TemplateDisplayName</h5>
            </div>
            <div class="col-sm-12 col-md-6 float-right text-right p-3">
                <a href="#" class="tile bg-primary tile-circle more-action" title="Actions">
                    <i class="icon-btn-icon fa fa-pencil">
                    </i>
                </a>
                @if (!Model.HideAttachmentInHeader)
                {
                    <a href="#" class="icon-btn tile bg-warning tile-circle" title="Attachment" onclick="AddAttachment();">
                        <i class="icon-btn-icon fa fa-paperclip font-weight-bold">
                        </i>
                    </a>
                }
                @if (!Model.IsInEditMode && !Model.HideShareInHeader)
                {
                    <a href="#" class="icon-btn tile bg-success tile-circle" title="Share" onclick="onclickShare();">
                        <i class="icon-btn-icon fa fa-share-alt">
                        </i>
                    </a>
                }
                @if (!Model.IsInEditMode && !Model.HideCommentInHeader)
                {
                    <a href="#" class="icon-btn tile bg-info tile-circle" title="Comment" onclick="onCommentClick();">
                        <i class="icon-btn-icon fa fa-comment-alt">
                        </i>
                    </a>
                }
                <a href="#" class="icon-btn tile bg-danger tile-circle more-option" title="More Options">
                    <i class="icon-btn-icon fa fa-ellipsis-h">
                    </i>
                </a>
                @if (Model.EnableBackButton && Model.LayoutMode != LayoutModeEnum.Iframe)
                {
                    <a href="#" class="icon-btn tile bg-default tile-circle more-option" title="Close Window" onclick="closeNavMemberGroup();">
                        <i class="icon-btn-icon fa fa-times">
                        </i>
                    </a>
                }
            </div>
        </div>
        <hr class="mt-0 ml-3" />
        @if (Model.ServicePlusRecordId.IsNotNullAndNotEmpty())
        {
            <div class="row m-3">
                <button class="btn btn-primary" value="Initial Service" onclick="OpenService('@Model.ServicePlusId','@Model.ServicePlusRecordCode')">Initial Service</button>
            </div>
        }

    }
    <div class="d-flex bg-light m-3">
        <div class="flex-fill text-center nts-display-item" title="Service Owner/Requester">
            <div class="m-3">
                <i class="fa fa-user text-primary"></i>
                <span class="user-popup-card" data-user-id="@Model.RequestedByUserId">
                    <span class="pl-2">@Model.RequestedByUserName</span>
                    <span>&lt;<a>@Model.RequestedByUserEmail</a>&gt;</span>
                </span>
            </div>
        </div>
        <div class="flex-fill text-center nts-display-item" title="Service No">
            <div class="m-3">
                <i class="fa fa-hashtag mr-2 text-warning"></i>@Model.ServiceNo
            </div>
        </div>
        <div class="flex-fill text-center nts-display-item" title="Service Status">
            <div class="m-3">
                <i class="fa fa-check-double mr-2 text-success"></i>@Model.ServiceStatusName
            </div>
        </div>
        <div class="flex-fill text-center nts-display-item" title="Due Date">
            <div class="m-3">
                <i class="fa fa-calendar-clock mr-2 text-info"></i>@Model.DueDate.Humanize()
            </div>
        </div>
        <div class="flex-fill text-center nts-display-item" title="Service Version">
            <div class="m-3">
                <i class="fa fa-v mr-2 text-danger"></i>@Model.VersionNo
            </div>
        </div>
    </div>

    <div class="page-inner p-2 pl-3">
        <form asp-controller="Cms" asp-action="ManageService" asp-area="" method="post" class="form-parse-date form-horizontal"
              data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete" id="frmManageService"
              data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess" onsubmit="ConvertDate()"
              data-ajax="true" data-ajax-method="POST">
            <div class="service-div">
                <div class="row no-gutters">
                    @Html.HiddenFor(x => x.ServiceStatusCode)
                    @Html.HiddenFor(x => x.ServiceTableId)
                    @Html.HiddenFor(x => x.VersionNo)
                    @Html.HiddenFor(x => x.Json)
                    @Html.HiddenFor(x => x.DataJson)
                    @Html.HiddenFor(x => x.Id)
                    @Html.HiddenFor(x => x.ServiceTemplateId)
                    @Html.HiddenFor(x => x.UdfNoteTableId)
                    @Html.HiddenFor(x => x.ServiceId)
                    @Html.HiddenFor(x => x.TemplateId)
                    @Html.HiddenFor(x => x.UdfTemplateId)
                    @Html.HiddenFor(x => x.UdfTableMetadataId)
                    @Html.HiddenFor(x => x.UdfNoteId)
                    @Html.HiddenFor(x => x.TemplateCode)
                    @Html.HiddenFor(x => x.PageId)
                    @Html.HiddenFor(x => x.DataAction)
                    @Html.HiddenFor(x => x.RecordId)
                    @Html.HiddenFor(x => x.PortalName)
                    @Html.HiddenFor(x => x.CloseComment)
                    @Html.HiddenFor(x => x.CreateReturnType)
                    @Html.HiddenFor(x => x.EditReturnType)
                    @Html.HiddenFor(x => x.ParentServiceId)
                    @Html.HiddenFor(x => x.ActiveUserType)
                    @Html.HiddenFor(x => x.ActiveUserId)
                    @Html.HiddenFor(x => x.TableMetadataId)
                    @Html.HiddenFor(x => x.RequestedByUserId)
                    @Html.HiddenFor(x => x.OwnerUserId)
                    @Html.HiddenFor(x => x.LayoutMode)
                    @Html.HiddenFor(x => x.ReturnUrl)
                    @Html.HiddenFor(x => x.CustomUrl)
                    @Html.HiddenFor(x => x.PopupCallbackMethod)
                    @Html.HiddenFor(x => x.IsSubjectMandatory)
                    @Html.HiddenFor(x => x.IsSubjectUnique)
                    @Html.HiddenFor(x => x.AllowPastStartDate)
                    @Html.HiddenFor(x => x.CreatedBy)
                    @Html.HiddenFor(x => x.LastUpdatedBy)
                    @Html.HiddenFor(x => x.LegalEntityId)
                    @Html.HiddenFor(x => x.CompanyId)
                    @Html.HiddenFor(x => x.ReferenceType)
                    @Html.HiddenFor(x => x.ReferenceId)
                    @Html.HiddenFor(x => x.ParentNoteId)
                    @Html.HiddenFor(x => x.ParentTaskId)
                    @Html.HiddenFor(x => x.ServicePlusId)
                    @Html.HiddenFor(x => x.NotePlusId)
                    @Html.HiddenFor(x => x.TaskPlusId)
                    @Html.HiddenFor(x => x.SequenceOrder)
                    @Html.HiddenFor(x => x.NextStepTaskComponentId)
                    @Html.HiddenFor(x => x.EnableCustomMessageOnCreation)
                    @Html.HiddenFor(x => x.CustomMessageOnCreation)
                    @Html.HiddenFor(x => x.EnableCustomMessageOnEdit)
                    @Html.HiddenFor(x => x.CustomMessageOnEdit)
                    @Html.HiddenFor(x => x.TriggeredByReferenceType)
                    @Html.HiddenFor(x => x.TriggeredByReferenceId)
                    <div id="validation-summary-manageform" class="pt-2 pb-2 error-summary alert alert-danger" asp-validation-summary="All" style="display:none;"></div>
                    @if (Model.IsReturnReasonVisible)
                    {
                        <div class="error-summary alert alert-danger">
                            <strong>Return Reason:</strong>
                            <span class="pl-1">
                                <span>
                                    @Model.ReturnReason
                                </span>
                            </span>
                        </div>
                    }
                    <div class="row col-12 no-gutters action-section" style="display:none;">
                        <div id="action-add-comment" class="col-12 p-2" style="display:none;">
                            <div class="form-group">
                                <label class="col-form-label">
                                    Comment
                                </label>
                                <div>
                                    <div class="page-wrapper box-content">
                                        <textarea class="content" id="editorAddComment"></textarea>
                                    </div>
                                </div>
                                <div class="pt-2">
                                    <input id="CommentToUserId" class="form-control" />
                                    <script>
                                        $(document).ready(function () {
                                            $("#CommentToUserId").kendoDropDownList({
                                                optionLabel: "All",
                                                dataTextField: "Name",
                                                dataValueField: "Id",
                                                filter: "contains",
                                                height: 400,
                                                autoBind: true,
                                                dataSource: {
                                                    transport: {
                                                        read: {
                                                            url: "/Cms/NtsService/GetServiceSharedUsersIdNameList?serviceId=@Model.ServiceId",
                                                        }
                                                    }
                                                }
                                            });
                                        });
                                    </script>
                                </div>
                            </div>


                            <button class="btn btn-primary" onclick="PostComment(event)">Add Comment</button>
                            <button type="button" class="btn btn-secondary" onclick="return OnActionChange();">Back</button>
                        </div>
                        <div id="action-cancel-service" class="col-12 p-2" style="display:none;">
                            <div class="form-group">
                                <label class="col-form-label">
                                    Cancel Reason
                                </label>

                                <div>


                                    <div class="page-wrapper box-content">
                                        <textarea class="content" asp-for="CancelReason" id="CancelReason"></textarea>
                                    </div>

                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary" onclick="return Cancel();">Cancel</button>
                            <button type="button" class="btn btn-secondary" onclick="return OnActionChange();">Back</button>
                        </div>
                        <div id="action-close-task" class="col-12 p-2" style="display:none;">
                            <div class="form-group">
                                <label class="col-form-label">
                                    Rating
                                </label>
                                <div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-form-label">
                                    Comments

                                </label>

                                <div>
                                    <div class="page-wrapper box-content">
                                        <textarea class="content" asp-for="CloseComment" id="CloseComment"></textarea>
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary" onclick="return CloseService();">Close</button>
                            <button type="button" class="btn btn-secondary" onclick="return OnActionChange();">Back</button>
                        </div>
                        <div id="action-complete-service" class="col-12 p-2" style="display:none;">
                            <div class="form-group">
                                <label class="col-form-label">
                                    Complete Reason

                                </label>
                                <div>
                                    <div class="page-wrapper box-content">
                                        <textarea class="content" asp-for="CompleteReason" id="CompleteReason"></textarea>
                                    </div>

                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary" onclick="return Complete();">Complete</button>
                        </div>
                    </div>

                    <div class="row col-12 main-section no-gutters">
                        @if (Model.FormType != FormTypeEnum.Wizard && (Model.ActionButtonPosition == ActionButtonPositionEnum.TopAndBottom || Model.ActionButtonPosition == ActionButtonPositionEnum.TopOnly))
                        {
                            <div class="row col-12 pb-2">
                                <div class="col">
                                    @if (Model.IsRutimeWorkflowButtonVisible)
                                    {
                                        <button type="submit" class="btn btn-danger" onclick="return OpenRuntimeWorkflow();">@Model.RuntimeWorkflowButtonText.ToDefaultRuntimeWorkflowText()</button>
                                    }
                                    @if (Model.IsDraftButtonVisible)
                                    {
                                        <button type="submit" class="btn btn-info" onclick="return SaveAsDraft();">@Model.SaveAsDraftText.ToDefaultSaveAsDraftButtonText()</button>
                                    }
                                    @if (Model.IsSubmitButtonVisible)
                                    {
                                        <button type="submit" class="btn btn-primary f" onclick="return Submit();">@Model.SubmitButtonText.ToDefaultSubmitButtonText()</button>
                                    }
                                    @if (Model.IsReopenButtonVisible && !Model.DisableReopen)
                                    {
                                        <button type="submit" class="btn btn-primary s" onclick="return Submit();">@Model.SubmitButtonText.ToDefaultSubmitButtonText()</button>
                                    }
                                </div>
                            </div>

                        }
                        <div class="row no-gutters col-12 pr-2">
                            @if (Model.IsInEditMode)
                            {
                                @if (Model.NumberGenerationType == NumberGenerationTypeEnum.UserEntry)
                                {
                                    <div class="col-12 pt-2 pb-2">
                                        <div class="form-group">
                                            <label class="col-form-label">
                                                @Model.ServiceNo.ToDefaultServiceNumberText()
                                            </label>
                                            <div>
                                                <input asp-for="ServiceNo" type="text" class="form-control" style="width:100%" />
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    @Html.HiddenFor(x => x.ServiceNo)
                                }

                                @if (!Model.HideHeader)
                                {
                                    @if (!Model.HideSubject)
                                    {
                                        <div class="col-12 pt-1 pb-1">
                                            <div class="form-group">
                                                <label class="col-form-label">
                                                    @Model.SubjectText.ToDefaultSubjectText()
                                                </label>
                                                <div>
                                                    <input asp-for="ServiceSubject" type="text" class="form-control" style="width:100%" />
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(x => x.ServiceSubject)
                                    }

                                    @if (!Model.HideDescription)
                                    {
                                        <div class="col-12 pt-1 pb-1">
                                            <div class="form-group">
                                                <label class="col-form-label">
                                                    @Model.DescriptionText.ToDefaultDescriptionText()
                                                </label>
                                                <div>
                                                    <input asp-for="ServiceDescription" type="text" class="form-control" style="width:100%" />
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(x => x.ServiceDescription)
                                    }

                                    <div class="col-12 pt-1 pb-1">
                                        <a data-toggle="collapse" href="#otherDetails" role="button" aria-expanded="false" aria-controls="otherDetails">
                                            More details(Requester, Due Date, SLA, Priority etc.)
                                        </a>
                                    </div>
                                    <div class="collapse col-12 row no-gutters" id="otherDetails">
                                        <div class="form-group col-12 pt-2 pb-2" id="div-requested-by" style="display:none;">
                                            <label class="col-form-label">
                                                Requested By
                                            </label>
                                            <div class="alert-light">
                                                <img class="user-photo rounded-circle" src="/Cms/document/getimagemongo/@Model.RequestedByUserPhotoId" onerror="OnPhotoError(this);">
                                                <span class="user-popup-card" data-user-id="@Model.RequestedByUserId">
                                                    <span class="pl-2">@Model.RequestedByUserName</span>
                                                    <span>&lt;<a>@Model.RequestedByUserEmail</a>&gt;</span>
                                                </span>
                                            </div>
                                        </div>
                                        @if (!Model.HideOwner)
                                        {
                                            <div class="col-12 pt-1 pb-1">
                                                <div class="form-group">
                                                    <label class="col-form-label">
                                                        From
                                                    </label>
                                                    <div class="alert-light" id="from-display">
                                                        <img id="o-img" class="user-photo rounded-circle" src="/Cms/document/getimagemongo/@Model.OwnerUserPhotoId" onerror="OnPhotoError(this);">
                                                        <span id="user-popup-card" class="user-popup-card" data-user-id="@Model.OwnerUserId">
                                                            <span id="o-name" class="pl-2">@Model.OwnerUserName</span>
                                                            <span>&lt;<a id="o-email">@Model.OwnerUserEmail</a>&gt;</span>
                                                        </span>
                                                        <i title="Change Owner" class="pl-2 fa fa-pencil pt-1" style="font-size:22px;cursor:pointer;" onclick="return OnChangeOwner()"></i>
                                                    </div>
                                                    <div id="from-edit" class="row no-gutters" style="display:none;">
                                                        <div class="col-11">@await Html.PartialAsync("~/Areas/Core/Views/Shared/_UserDropdown.cshtml", new Tuple<string, string, string, string>(Model.OwnerUserId, "owner", null, "form-control"))</div>
                                                        <div class="1">
                                                            <i class="fa fa-check-circle" style="font-size:30px;cursor:pointer;padding-left:5px;padding-top:7px;color:green;" title="Save" onclick="return OnChangeOwnerSave()"></i>
                                                            <i class="fa fa-times-circle" style="font-size:30px;cursor:pointer;padding-left:5px;padding-top:7px;color:red;" title="Cancel" onclick="return OnChangeOwnerCancel()"></i>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            @Html.HiddenFor(x => x.OwnerUserId)
                                        }
                                        @if (!Model.HidePriority)
                                        {
                                            <div class="row col-12 pt-1 pb-1">
                                                <div class="form-group col-6">
                                                    <label class="col-form-label">
                                                        Priority
                                                    </label>
                                                    <div>
                                                        <input asp-for="ServicePriorityId" id="ServicePriorityId" class="form-control" style="width: 100%;" />
                                                        <script>
                                                            $(document).ready(function () {
                                                                $("#ServicePriorityId").kendoDropDownList({
                                                                    optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
                                                                    dataTextField: "Name",
                                                                    dataValueField: "Id",
                                                                    value: "@Model.ServicePriorityId",
                                                                    autoBind: true,
                                                                    dataSource: {
                                                                        transport: {
                                                                            read: {
                                                                                url: "/Cms/LOV/GetLOVIdNameList?lovType=SERVICE_PRIORITY",
                                                                            }
                                                                        }
                                                                    }
                                                                });
                                                            });
                                                        </script>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            @Html.HiddenFor(x => x.ServicePriorityId)
                                        }
                                        @if (!Model.HideStartDate)
                                        {
                                            <div class="row pt-1 pb-1">
                                                <div class="form-group col-6">
                                                    <label class="col-form-label">
                                                        Start Date
                                                    </label>
                                                    <div>
                                                        <input asp-for="StartDate" id="StartDate" style="width:100%" />
                                                    </div>
                                                </div>
                                                <div class="form-group col-6">
                                                    <label class="col-form-label">
                                                        Due Date
                                                    </label>
                                                    <div>
                                                        <input asp-for="DueDate" id="DueDate" style="width:100%" />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row pt-1 pb-1">
                                                <div class="form-group col-6">
                                                    <label class="col-form-label">
                                                        SLA
                                                    </label>
                                                    <div>
                                                        <input asp-for="ServiceSLAMinutes" type="text" class="form-control" style="width:100%" />

                                                    </div>
                                                </div>
                                                <div class="form-group col-6">
                                                    <label class="col-form-label">
                                                        Reminder Date
                                                    </label>
                                                    <div>
                                                        <input asp-for="ReminderDate" id="ReminderDate" style="width:100%" />
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            @Html.HiddenFor(x => x.StartDate)
                                            @Html.HiddenFor(x => x.DueDate)
                                            @Html.HiddenFor(x => x.SLA)
                                            @Html.HiddenFor(x => x.ReminderDate)
                                        }
                                    </div>

                                }
                                else
                                {
                                    @Html.HiddenFor(x => x.ServiceSubject)
                                    @Html.HiddenFor(x => x.ServiceDescription)
                                    @Html.HiddenFor(x => x.RequestedByUserId)
                                    @Html.HiddenFor(x => x.OwnerUserId)
                                    @Html.HiddenFor(x => x.ServicePriorityId)
                                    @Html.HiddenFor(x => x.StartDate)
                                    @Html.HiddenFor(x => x.DueDate)
                                    @Html.HiddenFor(x => x.SLA)
                                    @Html.HiddenFor(x => x.ReminderDate)
                                }
                                <div id="formio-container" class="col-12"></div>
                            }
                            else
                            {
                                @if (Model.ServiceSubject.IsNotNullAndNotEmpty())
                                {
                                    <div class="col-12 pb-2">
                                        <span class="text-muted">@(Model.SubjectText.ToDefaultSubjectText()):</span>
                                        <span class="pl-1">
                                            @Model.ServiceSubject
                                        </span>
                                    </div>
                                }
                                <div class="col-12 pb-2">
                                    <span class="text-muted">From:</span>
                                    <span class="pl-1 user-popup-card" data-user-id="@Model.OwnerUserId">
                                        <span>
                                            @Model.OwnerUserName
                                        </span>
                                        <a>&lt;@Model.OwnerUserEmail&gt;</a>
                                    </span>
                                </div>
                                <div class="col-12 pb-2">
                                    <span class="text-muted">Sent:</span>
                                    <span class="pl-1">
                                        @Model.SubmittedDate.Humanize()
                                    </span>
                                </div>

                                @if (Model.ServiceDescription.IsNotNullAndNotEmpty())
                                {
                                    <div class="col-12 pb-2">
                                        <div class="p-0">
                                            <p> @Html.Raw(Model.ServiceDescription.HtmlDecode()) </p>
                                        </div>
                                    </div>
                                }


                                <div class="div-readonly col-12">
                                    <hr class="hr mt-0" />
                                </div>
                                <div id="formio-container" class="col-12">
                                </div>
                                @Html.HiddenFor(x => x.ServiceNo)
                            }
                        </div>
                        @if (Model.FormType != FormTypeEnum.Wizard && (Model.ActionButtonPosition == ActionButtonPositionEnum.TopAndBottom || Model.ActionButtonPosition == ActionButtonPositionEnum.BottomOnly))
                        {
                            <div class="row col-12 pt-2 pb-3">
                                <div class="col">
                                    @if (Model.IsRutimeWorkflowButtonVisible)
                                    {
                                        <button type="submit" class="btn btn-danger" onclick="return OpenRuntimeWorkflow();">@Model.RuntimeWorkflowButtonText.ToDefaultRuntimeWorkflowText()</button>
                                    }
                                    @if (Model.IsDraftButtonVisible)
                                    {
                                        <button type="submit" class="btn btn-info" onclick="return SaveAsDraft();">@Model.SaveAsDraftText.ToDefaultSaveAsDraftButtonText()</button>
                                    }

                                    @if (Model.IsSubmitButtonVisible)
                                    {
                                        <button type="submit" class="btn btn-primary" onclick="return Submit();">@Model.SubmitButtonText.ToDefaultSubmitButtonText()</button>
                                    }
                                    @if (Model.IsReopenButtonVisible && !Model.DisableReopen)
                                    {
                                        <button type="submit" class="btn btn-primary" onclick="return Submit();">@Model.SubmitButtonText.ToDefaultSubmitButtonText()</button>
                                    }

                                </div>
                            </div>
                        }
                    </div>
                </div>
                <script type="text/x-kendo-tmpl" id="templateListReplies">
                    <div class="col header-readonly">#=Type#</div>
                    <div class="div-readonly">
                        <strong>From:</strong>
                        <span class="pl-1 user-popup-card" data-user-id="#=FromId#">
                           <span>#=From#</span><span><a>&lt;#=FromEmail#&gt;</a></span>
                        </span>
                    </div>
                    <div class="div-readonly">
                        <strong>Sent:</strong>
                        <span class="pl-1">
                            #=SentDateDisplay#

                        </span>
                    </div>
                    #if(To!=null){#
                        <div class="div-readonly">
                            <strong>To:</strong>
                            <span class="pl-1 user-popup-card" data-user-id="#=ToId#">
                                <span>#=To#</span><span><a>&lt;#=ToEmail#&gt;</a></span>
                            </span>
                        </div>
                     #}#
                     #if(Subject!=null){#
                        <div class="div-readonly">
                            <strong>Subject:</strong>
                            <span class="pl-1">
                                   #=Subject#
                            </span>
                        </div>
                     #}#
                     #if(Body!=null){#
                        <div class="div-readonly">
                            <span class="pl-1">
                    #= htmlDecode(Body) #
                            </span>
                        </div>
                     #}#
                         <hr/>
                </script>
            </div>
        </form>

    </div>
</div>


<div class="modal fade" id="messageModal" tabindex="-1" role="dialog" aria-labelledby="messageModalLabel"
     aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="messageModalLabel">Request Completed</h6>
                <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">@Model.CustomMessageOnCreation</div>
            <div class="modal-footer">
                <button class="btn btn-secondary" type="button" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<script>
    $('#messageModal').on('hide.bs.modal', function (event) {
        CompleteSubmit(ajaxResponse);
    })
    function chkChange() {

        if ($('#enableDescHtml').is(":checked")) {
            $(".richText-toolbar").show();
        }
        else {
            $(".richText-toolbar").hide();
        }
    }

    function onWorkflow() {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ServiceDiagram", "NtsService", new { @area = "cms" })?id=@Model.ServiceId&isTemplate=false';
        win.OpenWindow({ Title: 'Service Workflow', Width: 1200, Height: 600 });
        return false;
    }
    (function ($) {
        $('#ServiceSLAMinutes').durationPicker({
            showSeconds: false,
            onChanged: function (newVal, init) {
                if (!init) {
                    var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
                    var ed = GetAddSeconds(sd, newVal);
                    var f = new Date(ed);
                    console.log(f);
                    $("#DueDate").data("kendoDateTimePicker").value(f)
                }

            }
        });
        $.fn.ribbon = function (id) {

            if (!id) {
                if (this.attr('id')) {
                    id = this.attr('id');
                }
            }

            var that = function () {
                return thatRet;
            };

            var thatRet = that;

            that.selectedTabIndex = -1;

            var tabNames = [];

            that.goToBackstage = function () {
                ribObj.addClass('backstage');
            }

            that.returnFromBackstage = function () {
                ribObj.removeClass('backstage');
            }
            var ribObj = null;

            that.init = function (id) {
                if (!id) {
                    id = 'ribbon';
                }

                ribObj = $('#' + id);
                ribObj.find('.ribbon-window-title').after('<div id="ribbon-tab-header-strip"></div>');
                var header = ribObj.find('#ribbon-tab-header-strip');

                ribObj.find('.ribbon-tab').each(function (index) {
                    var id = $(this).attr('id');
                    if (id == undefined || id == null) {
                        $(this).attr('id', 'tab-' + index);
                        id = 'tab-' + index;
                    }
                    tabNames[index] = id;

                    var title = $(this).find('.ribbon-title');
                    var isBackstage = $(this).hasClass('file');
                    //header.append('<div id="ribbon-tab-header-' + index + '" class="ribbon-tab-header"></div>');
                    var thisTabHeader = header.find('#ribbon-tab-header-' + index);
                    thisTabHeader.append(title);
                    if (isBackstage) {
                        thisTabHeader.addClass('file');

                        thisTabHeader.click(function () {
                            that.switchToTabByIndex(index);
                            that.goToBackstage();
                        });
                    } else {
                        if (that.selectedTabIndex == -1) {
                            that.selectedTabIndex = index;
                            thisTabHeader.addClass('sel');
                        }

                        thisTabHeader.click(function () {
                            that.returnFromBackstage();
                            that.switchToTabByIndex(index);
                        });
                    }
                    $(this).hide();
                });

                ribObj.find('.ribbon-button').each(function (index) {
                    var title = $(this).find('.button-title');
                    title.detach();
                    $(this).append(title);

                    var el = $(this);

                    this.enable = function () {
                        ServiceIdl.removeClass('disabled');
                    };

                    this.disable = function () {
                        el.addClass('disabled');
                    };

                    this.isEnabled = function () {
                        return !el.hasClass('disabled');
                    };

                    if ($(this).find('.ribbon-hot').length == 0) {
                        $(this).find('.ribbon-normal').addClass('ribbon-hot');
                    };

                    if ($(this).find('.ribbon-disabled').length == 0) {
                        $(this).find('.ribbon-normal').addClass('ribbon-disabled');
                        $(this).find('.ribbon-normal').addClass('ribbon-implicit-disabled');
                    };

                    $(this).tooltip({
                        bodyHandler: function () {
                            if (!$(this).isEnabled()) {
                                $('#tooltip').css('visibility', 'hidden');
                                return '';
                            }

                            var tor = '';

                            if (jQuery(this).children('.button-help').size() > 0)
                                tor = (jQuery(this).children('.button-help').html());
                            else
                                tor = '';

                            if (tor == '') {
                                $('#tooltip').css('visibility', 'hidden');
                                return '';
                            }

                            $('#tooltip').css('visibility', 'visible');

                            return tor;
                        },
                        left: 0,
                        extraClass: 'ribbon-tooltip'
                    });
                });

                ribObj.find('.ribbon-section').each(function (index) {
                    $(this).after('<div class="ribbon-section-sep"></div>');
                });

                ribObj.find('div').attr('unselectable', 'on');
                ribObj.find('span').attr('unselectable', 'on');
                ribObj.attr('unselectable', 'on');

                that.switchToTabByIndex(that.selectedTabIndex);
            }

            that.switchToTabByIndex = function (index) {
                var headerStrip = $('#ribbon #ribbon-tab-header-strip');
                headerStrip.find('.ribbon-tab-header').removeClass('sel');
                headerStrip.find('#ribbon-tab-header-' + index).addClass('sel');

                $('#ribbon .ribbon-tab').hide();
                $('#ribbon #' + tabNames[index]).show();
            }

            $.fn.enable = function () {
                if (this.hasClass('ribbon-button')) {
                    if (this[0] && this[0].enable) {
                        this[0].enable();
                    }
                }
                else {
                    this.find('.ribbon-button').each(function () {
                        $(this).enable();
                    });
                }
            }




            $.fn.disable = function () {
                if (this.hasClass('ribbon-button')) {
                    if (this[0] && this[0].disable) {
                        this[0].disable();
                    }
                }
                else {
                    this.find('.ribbon-button').each(function () {
                        $(this).disable();
                    });
                }
            }

            $.fn.isEnabled = function () {
                if (this[0] && this[0].isEnabled) {
                    return this[0].isEnabled();
                } else {
                    return true;
                }
            }


            that.init(id);

            $.fn.ribbon = that;
        };

    })(jQuery);
    $('.user-popup-card').webuiPopover('destroy').webuiPopover(userPopoverSettings);
    $('.duedate-popup-card').webuiPopover('destroy').webuiPopover({
        width: 270,
        height: 200,
        trigger: 'hover',
        placement: 'auto',
        delay: {
            show: null,
            hide: 300
        },
        content: '<div class="row pt-2 pb-2 pl-2"><div class="col-12 alert-light mb-3"><span class="text-label">Start Date</span><span class="text-title">@Model.StartDate.ToDefaultDateTimeFormat()</span></div><div class="col-12 alert-light mb-3"><span class="text-label">Due Date:</span><span class="text-title">@Model.DueDate.ToDefaultDateTimeFormat()</span></div><div class="col-12 alert-light"><span class="text-label">SLA:</span><span class="text-title">@Model.ServiceSLA</span></div></div>',
    });
    function OnMsgDatabound() {
        $('.user-popup-card').webuiPopover('destroy').webuiPopover(userPopoverSettings);
    }
    function FillFormIo(json, datajson) {
        var formio = $('#formio-container').html();
        if (formio != undefined) {
            var formio = document.getElementById('formio-container');
            LoadFormIo({ uiJson: json, dataJson: datajson }, formio);
        }
    }
    $(document).ready(function () {
        $("div[title]").webuiPopover('destroy').webuiPopover(generalPopoverSettings);
        var items = {
    @if (!Model.HideWorkflowInHeader)
    {
        @: "workflow": { name: 'Workflow', icon: "fas fa-sitemap" },
    }
    @if (!Model.IsInEditMode && !Model.HideProcessDiagramInHeader)
    {
        @: "processDesignResult": { name: 'Process Design Result', icon: "fas fa-project-diagram" },
    }
    @if (!Model.IsInEditMode && !Model.HideAdhocTaskInHeader)
    {
        @:  "adhocTask": { name: 'Adhoc Task', icon: "fas fa-list-check" },
    }
    @if (!Model.HideEmailInHeader)
    {
        @:  "email": { name: 'Email', icon: "fas fa-envelope" },
    }
    @if (!Model.IsInEditMode && !Model.HideNotificationInHeader)
    {
        @: "notification": { name: 'Notification', icon: "fas fa-bell" },
    }
    @if (!Model.HideTahsInHeader)
    {
        @: "tag": { name: 'Tag', icon: "fas fa-tag" },
    }
    @if (!Model.HideLogInHeader)
    {
        @: "log": { name: 'Log', icon: "fas fa-history" },
    }


                   };
    $.contextMenu({
        selector: '.more-option',
        trigger: 'left',
        autoHide: true,
        build: function ($trigger, e) {
            return {
                callback: function (key, options) {

                    switch (key) {
                        case 'workflow':
                            onWorkflow();
                            break;
                        case 'adhocTask':
                            onAdhocTask();
                            break;
                        case 'processDesignResult':
                            onProcessDesign();
                            break;
                        case 'email':
                            onEmail();
                            break;
                        case 'notification':
                            ViewNotification();
                            break;
                        case 'tag':
                            onTag();
                            break;
                        case 'log':
                            onLog();
                            break;
                    }
                },
                items: items
            };


        }
    });
    var actions = {
    @if (Model.IsAddCommentEnabled)
    {
        @: "ADD_COMMENT": { name: 'Add Comment', icon: "fas fa-message" },
    }
    @if (Model.IsCloseButtonVisible)
    {
        @: "CLOSE_SERVICE": { name: 'Close Service', icon: "fas fa-times-circle" },
    }
    @if (Model.IsCancelButtonVisible)
    {
        @: "CANCEL_SERVICE": { name: 'Cancel Service', icon: "fas fa-ban" },
    }
    @if (Model.IsEditButtonVisible && !Model.DisableReopen)
    {
        @: "EDIT_SERVICE": { name: 'Edit Service', icon: "fas fa-pen" },
    }
    @*@if (Model.IsVersioningButtonVisible)
        {
        @: "EDIT_SERVICE": { name: 'Edit Service', icon: "fas fa-pen" },
        }*@
            };
    $.contextMenu({
        selector: '.more-action',
        trigger: 'left',
        delay: 200,
        autoHide: true,
        build: function ($trigger, e) {
            return {
                callback: function (key, options) {
                    OnActionChange(key);
                },
                items: actions
            };


        }
    });
    if ('@Model.IsInEditMode' == 'True' && '@Model.HideHeader' == 'False' && '@Model.HideStartDate' == 'False') {
        $("#StartDate").kendoDateTimePicker({ value: '@Model.StartDate', format: '@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormat', change: OnStartDateDueDateChange });
        $("#DueDate").kendoDateTimePicker({ value: '@Model.DueDate', format: '@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormat', change: OnStartDateDueDateChange });
        $("#ReminderDate").kendoDateTimePicker({ value: '@Model.ReminderDate', format: '@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormat' });

    }


    $('.content').richText();

    var dataSource = new kendo.data.DataSource({
        transport: {
            read: {
                url: "/cms/Service/ReadAttachedReplies?serviceId=" + '@Model.ServiceId',
                dataType: "json",
            }
        },
    });

    var dataSource = [];
    var i = 1;
    var list = '@Model.StepTasksList';
    for (let li of list) {
        dataSource[i] = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/cms/GetTaskMessageList?taskId=" + li.Id,
                    dataType: "json"
                }
            },
            pageSize: 1000
        });

        $("#listViewMsg_" + li.Id).kendoListView({
            dataSource: dataSource[i],
            dataBound: OnMsgDatabound,
            scrollable: "endless",
            template: kendo.template($("#templateListReplies").html())
        });
        i++;
    }

    var json = $('#Json').val();
    var datajson = $('#DataJson').val();
    FillFormIo(json, datajson);
    $('[data-toggle="popover"]').popover();
    SetOwnerAndRequesterVisibility();

    $('#enable-btn').click(function () {
        $('#del-table-btn').enable();
        $('#del-page-btn').enable();
        $('#save-btn').enable();
        $('#other-btn-2').enable();

        $('#enable-btn').hide();
        $('#disable-btn').show();
    });
    $('#disable-btn').click(function () {
        $('#del-table-btn').disable();
        $('#del-page-btn').disable();
        $('#save-btn').disable();
        $('#other-btn-2').disable();

        $('#disable-btn').hide();
        $('#enable-btn').show();
    });

    FillAttachmentCount();

    FillSharingCount();
    FillNotificationCount();
    FillCommentCount();

    $(".richText-toolbar").hide();


        });

    function allSynergyCharts() {
    @Html.Raw(Model.ChartItems);
    }
    @Html.Raw(Model.ChartItems);
    @if (Model.FormClientScript.IsNotNullAndNotEmpty())
    {
        @Html.Raw(Model.FormClientScript)
        ;
    }
</script>







