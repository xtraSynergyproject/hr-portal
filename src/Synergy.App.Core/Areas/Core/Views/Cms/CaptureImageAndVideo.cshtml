@using Synergy.App.Common;

@{
    ViewData["Title"] = "Portal";
    Layout = "~/Areas/Core/Views/Shared/themes/looper/_layout.cshtml";
}
@inject Synergy.App.Common.IUserContext _userContext


<script type="text/javascript" src="https://unpkg.com/webcam-easy/dist/webcam-easy.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/dom-to-image/2.6.0/dom-to-image.min.js"
        integrity="sha512-01CJ9/g7e8cUmY0DFTMcUw/ikS799FHiOA0eyHsUWfOetgbx/t6oV4otQ5zXKQyIrQGTHSmRVPIgrgLcZi/WMA==" crossorigin="anonymous"
        referrerpolicy="no-referrer"></script>

<script src="~/lib/recordRTC/RecordRTC.js"></script>
<link href="~/css/hover.css" rel="stylesheet" />
<script src="~/lib/recordRTC/RecordRTC.min.js"></script>
<script src="https://www.webrtc-experiment.com/common.js"></script>

<div style="padding:2%">
    <div class="card card-fluid">
        <!-- .card-header -->
        <div class="card-header">
            <!-- .nav-tabs -->
            <ul class="nav nav-tabs card-header-tabs">
                <li id="imgTab" class="nav-item" style="display:none">
                    <a id="aimg" class="nav-link show active" data-toggle="tab" href="#image">Image Capture</a>
                </li>
                <li id="vdTab" class="nav-item" style="display:none">
                    <a id="vimg" class="nav-link show active" data-toggle="tab" href="#video">Video Recording</a>
                </li>
            </ul><!-- /.nav-tabs -->
        </div><!-- /.card-header -->
        <!-- .card-body -->
        <div class="card-body">
            <!-- .tab-content -->
            <div id="myTabContent" class="tab-content">
                <div class="tab-pane fade active show" id="image">
                    <div id="app-panel" class="app-panel md-content row p-0 m-0">
                        <div id="webcam-container" class="webcam-container col-6 d-none p-0 m-0">
                            <video id="webcam" autoplay playsinline style="width: 100%; height: 100%;"></video>
                            <canvas id='takePhotoCanvas' style="width: 100%; height: 100%;display:none;"></canvas>
                        </div>

                        <div id="webcam-container-camera" class=" webcam-container-camera col-6 d-none p-0 m-0">
                            <!-- .visual-picker -->
                            <div class="visual-picker visual-picker-sm has-peek px-3" onclick="onTakePhotoButtonClick()">
                                <!-- visual-picker input -->
                                <input type="radio" id="vpr02" name="vprSM" checked=""> <!-- .visual-picker-figure -->
                                <label class="visual-picker-figure" for="vpr02">
                                    <!-- .visual-picker-content -->
                                    <span class="visual-picker-content"><span class="tile tile-sm bg-danger"><i class="fas fa-camera"></i></span></span> <!-- /.visual-picker-content -->
                                </label> <!-- /.visual-picker-figure -->
                                <!-- .visual-picker-peek -->
                                <span class="visual-picker-peek">Capture</span>
                            </div><!-- /.visual-picker -->
                            <!--<div class="visual-picker visual-picker-sm has-peek px-3" onclick="saveSnapshot()">-->
                            <!-- visual-picker input -->
                            <!--<input type="radio" id="vpr01" name="vprSM">--> <!-- .visual-picker-figure -->
                            <!--<label class="visual-picker-figure" for="vpr01">-->
                            <!-- .visual-picker-content -->
                            <!--<span class="visual-picker-content"><span class="tile tile-sm bg-info"><i class="fas fa-save"></i></span></span>--> <!-- /.visual-picker-content -->
                            <!--</label>--> <!-- /.visual-picker-figure -->
                            <!-- .visual-picker-peek -->
                            <!--<span class="visual-picker-peek">Save</span>
                            </div>-->
                            <!-- /.visual-picker -->
                            <!-- .visual-picker -->
                            <!--<a class="visual-picker visual-picker-sm has-peek px-3 d-none" id="download-photo" download="selfie.png" target="_blank" title="Save Photo">-->
                            <!-- visual-picker input -->
                            <!--<input type="radio" id="vpr04" name="vprSM">--> <!-- .visual-picker-figure -->
                            <!--<label class="visual-picker-figure" for="vpr04">-->
                            <!-- .visual-picker-content -->
                            <!--<span class="visual-picker-content"><span class="tile tile-sm bg-warning"><i class="fas fa-download" style="color:white"></i></span></span>--> <!-- /.visual-picker-content -->
                            <!--</label>--> <!-- /.visual-picker-figure -->
                            <!-- .visual-picker-peek -->
                            <!--<span class="visual-picker-peek">Download</span>
                            </a>-->
                            <!-- /.visual-picker -->
                            <div class="visual-picker visual-picker-sm has-peek px-3" onclick="resetCanvas();">
                                <input type="radio" id="vpr04" name="vprSM">
                                <label class="visual-picker-figure" for="vpr04">
                                    <span class="visual-picker-content">
                                        <span class="tile tile-sm bg-warning">
                                            <i class="fas fa-trash" style="color:white"></i>
                                        </span>
                                    </span>
                                </label>
                                <span class="visual-picker-peek">Reset</span>
                            </div>
                        </div>
                    </div>
                </div>





            </div>
            <div class="tab-pane fade active show" id="video">
                <div class="row" id="video_zone">
                    <div class="col">
                        <div class="align-center">
                            <video id="videoRec" autoplay style="margin: 2%; width: 100%; height: 100%;" controls playsinline></video>
                        </div>

                    </div>
                    <div class="col">
                        <div class="section-block text-center text-sm-left">
                            <div class="visual-picker visual-picker-sm has-peek px-3" id="recordVideoButton" onclick="recordVideo()">
                                <!-- visual-picker input -->
                                <input type="radio" id="vpr01" name="vprSM"> <!-- .visual-picker-figure -->
                                <label class="visual-picker-figure" for="vpr01">
                                    <!-- .visual-picker-content -->
                                    <span class="visual-picker-content"><span class="tile tile-sm bg-info"><i class="fas fa-play-circle"></i></span></span> <!-- /.visual-picker-content -->
                                </label> <!-- /.visual-picker-figure -->
                                <!-- .visual-picker-peek -->
                                <span class="visual-picker-peek">Record</span>
                            </div><!-- /.visual-picker -->
                            <!-- .visual-picker -->
                            <div id="stopVideoButton" class="visual-picker visual-picker-sm has-peek px-3" onclick="stopVideo()">
                                <!-- visual-picker input -->
                                <input id="stopVideoButton" disabled type="radio" id="vpr02" name="vprSM"> <!-- .visual-picker-figure -->
                                <label class="visual-picker-figure" for="vpr02">
                                    <!-- .visual-picker-content -->
                                    <span class="visual-picker-content"><span class="tile tile-sm bg-danger"><i class="fas fa-stop-circle"></i></span></span> <!-- /.visual-picker-content -->
                                </label> <!-- /.visual-picker-figure -->
                                <!-- .visual-picker-peek -->
                                <span class="visual-picker-peek">Stop</span>
                            </div><!-- /.visual-picker -->
                            <!-- .visual-picker -->
                            <div class="visual-picker visual-picker-sm has-peek px-3" onclick="onSaveVideo()">
                                <!-- visual-picker input -->
                                <input type="radio" id="vpr03" name="vprSM"> <!-- .visual-picker-figure -->
                                <label class="visual-picker-figure" for="vpr03">
                                    <!-- .visual-picker-content -->
                                    <span class="visual-picker-content"><span class="tile tile-sm bg-success"><i class="fas fa-save"></i></span></span> <!-- /.visual-picker-content -->
                                </label> <!-- /.visual-picker-figure -->
                                <!-- .visual-picker-peek -->
                                <span class="visual-picker-peek">Save</span>
                            </div><!-- /.visual-picker -->
                            <!-- .visual-picker -->
                            <div class="visual-picker visual-picker-sm has-peek px-3" onclick="onCancelVideo()">
                                <!-- visual-picker input -->
                                <input type="radio" id="vpr04" name="vprSM"> <!-- .visual-picker-figure -->
                                <label class="visual-picker-figure" for="vpr04">
                                    <!-- .visual-picker-content -->
                                    <span class="visual-picker-content"><span class="tile tile-sm bg-warning"><i class="fas fa-window-close"></i></span></span> <!-- /.visual-picker-content -->
                                </label> <!-- /.visual-picker-figure -->
                                <!-- .visual-picker-peek -->
                                <span class="visual-picker-peek">Cancel</span>
                            </div><!-- /.visual-picker -->
                        </div>
                    </div>
                </div>
            </div>
        </div><!-- /.tab-content -->
    </div><!-- /.card-body -->
</div>


<script>


    var imageCapture;
    onGetUserMediaButtonClick();
    function onGetUserMediaButtonClick() {
        document.getElementById("webcam").style.display = "";
        document.getElementById("takePhotoCanvas").style.display = "none";

        navigator.mediaDevices.getUserMedia({ video: true })
            .then(mediaStream => {
                document.getElementById('webcam').srcObject = mediaStream;

                const track = mediaStream.getVideoTracks()[0];
                imageCapture = new ImageCapture(track);
            })
            .catch(error => ChromeSamples.log(error));
    }


    function onTakePhotoButtonClick() {
        document.getElementById("webcam").style.display = "none";
        imageCapture.takePhoto()
            .then(blob => createImageBitmap(blob))
            .then(imageBitmap => {
                const canvas = document.getElementById('takePhotoCanvas');
                drawCanvas(canvas, imageBitmap);
                document.getElementById("takePhotoCanvas").style.display = "";

                canvas.toBlob((blob) => {
                    let file = new File([blob], "fileName.jpg", { type: "image/jpeg" })
                    uploadFile(file);
                    console.log(file);
                }, 'image/jpeg');
            })
            .catch(error => ChromeSamples.log(error));
    }

    /* Utils */

    function drawCanvas(canvas, img) {
        canvas.width = getComputedStyle(canvas).width.split('px')[0];
        canvas.height = getComputedStyle(canvas).height.split('px')[0];
        let ratio = Math.min(canvas.width / img.width, canvas.height / img.height);
        let x = (canvas.width - img.width * ratio) / 2;
        let y = (canvas.height - img.height * ratio) / 2;
        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
        canvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height,
            x, y, img.width * ratio, img.height * ratio);
    }

    document.querySelector('video').addEventListener('play', function () {
        document.querySelector('#grabFrameButton').disabled = false;
        document.querySelector('#takePhotoButton').disabled = false;
    });

    function resetCanvas() {
        onGetUserMediaButtonClick();
    }

    const webcamElement = document.getElementById('webcam');

    const canvasElement = document.getElementById('canvas');

    const snapSoundElement = document.getElementById('snapSound');

    const webcam = new Webcam(webcamElement, 'user', canvasElement, snapSoundElement);


    if ('@ViewBag.CaptureType' == "@CaptureType.Video") {
        document.getElementById("image").style.display = "none";
        document.getElementById("video").style.display = "";
        document.getElementById("imgTab").style.display = "none";
        document.getElementById("vdTab").style.display = "";

    } else {
        document.getElementById("video").style.display = "none";
        document.getElementById("image").style.display = "";
        document.getElementById("imgTab").style.display = "";
        document.getElementById("vdTab").style.display = "none";

        $('.md-modal').addClass('md-show');
        webcam.start()
            .then(result => {
                cameraStarted();
                console.log("webcam started");
            })
            .catch(err => {
                displayError();
            });
    }

    var recorderVideo; // globally accessible

    var videoRec = document.getElementById('videoRec');

    function stopVideo() {
        document.getElementById('stopVideoButton').disabled = true;
        recorderVideo.stopRecording(stopRecordingVideoCallback);
        $("#recordVideoButtonStart").css({ "color": "black" });
        $("#stopVideoButton").css("pointer-events", "none");
        document.getElementById('stopScreenButton').disabled = true;
        $("#stopVideonButton").css({ "color": "lightgray" });
        document.getElementById('videoRec').disabled = false;
    }

    function captureCamera(callback) {
        navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(function (camera) {
            callback(camera);
        }).catch(function (error) {
            alert('Unable to capture your camera. Please check console logs.');
            console.error(error);
        });
    }
    var videoFile;

    function recordVideo() {
        this.disabled = true;
        captureCamera(function (camera) {
            videoRec.muted = true;
            videoRec.volume = 0;
            videoRec.srcObject = camera;

            recorderVideo = RecordRTC(camera, {
                type: 'video'
            });

            recorderVideo.startRecording();

            // release camera on stopRecording
            recorderVideo.camera = camera;

            document.getElementById('stopVideoButton').disabled = false;
            $("#recordVideoButtonStart").css({ "color": "red" });
            $("#stopVideoButton").css("pointer-events", "auto");
            $("#stopVideoButton").css({ "color": "#bdaf2e" });
        });
    }

    function stopRecordingVideoCallback() {
        debugger;
        videoRec.src = videoRec.srcObject = null;
        videoRec.muted = false;
        videoRec.volume = 1;
        videoRec.src = URL.createObjectURL(recorderVideo.getBlob());
        var blob = recorderVideo.getBlob();
        var file = new File([blob], getFileName('mp4'), {
            type: 'video/mp4'
        });
        videoFile = file;
        recorderVideo.camera.stop();
        recorderVideo.destroy();
        recorderVideo = null;

        $("#stopVideoButton").css("pointer-events", "none");
        document.getElementById('stopVideoButton').disabled = true;
        $("#stopVideoButton").css({ "color": "lightgray" });
    }

    function getFileName(fileExtension) {
        var d = new Date();
        var year = d.getFullYear();
        var month = d.getMonth();
        var date = d.getDate();
        return 'Record-' + year + month + date + '-' + getRandomString() + '.' + fileExtension;
    }

    function getRandomString() {
        if (window.crypto && window.crypto.getRandomValues && navigator.userAgent.indexOf('Safari') === -1) {
            var a = window.crypto.getRandomValues(new Uint32Array(3)),
                token = '';
            for (var i = 0, l = a.length; i < l; i++) {
                token += a[i].toString(36);
            }
            return token;
        } else {
            return (Math.random() * new Date().getTime()).toString(36).replace(/\./g, '');
        }
    }

    function onSaveVideo() {
        if (videoFile != undefined && videoFile != null) {
            uploadFile(videoFile);
            onCancelVideo();
        } else {
           // alert("Video not recorded");
        }
    }

    // function uploadFile(file) {
    //    var data = new FormData();
    //     data.append("files", file);
    //     uploadFile(file);
    //}

    function onCancelVideo() {
        videoFile = null;
        videoRec.setAttribute('src', '');

    }



    $("#webcam-switch").change(function () {
        if (this.checked) {
            $('.md-modal').addClass('md-show');
            webcam.start()
                .then(result => {
                    cameraStarted();
                    console.log("webcam started");
                })
                .catch(err => {
                    displayError();
                });
        }
        else {
            cameraStopped();
            webcam.stop();
            console.log("webcam stopped");
        }
    });

    $('#cameraFlip').click(function () {
        webcam.flip();
        webcam.start();
    });

    $('#closeError').click(function () {
        $("#webcam-switch").prop('checked', false).change();
    });

    function displayError(err = '') {
        if (err != '') {
            $("#errorMsg").html(err);
        }
        $("#errorMsg").removeClass("d-none");
    }

    function cameraStarted() {
        $("#errorMsg").addClass("d-none");
        $('.flash').hide();
        $("#webcam-caption").html("on");
        $("#webcam-control").removeClass("webcam-off");
        $("#webcam-control").addClass("webcam-on");
        $(".webcam-container").removeClass("d-none");
        $(".webcam-container-camera").removeClass("d-none");
        if (webcam.webcamList.length > 1) {
            $("#cameraFlip").removeClass('d-none');
        }
        $("#wpfront-scroll-top-container").addClass("d-none");
        window.scrollTo(0, 0);
        $('body').css('overflow-y', 'hidden');
    }

    function cameraStopped() {
        $("#errorMsg").addClass("d-none");
        $("#wpfront-scroll-top-container").removeClass("d-none");
        $("#webcam-control").removeClass("webcam-on");
        $("#webcam-control").addClass("webcam-off");
        $("#cameraFlip").addClass('d-none');
        $(".webcam-container").addClass("d-none");
        $(".webcam-container-camera").addClass("d-none");
        $("#webcam-caption").html("Click to Start Camera");
        $('.md-modal').removeClass('md-show');
    }

    let picture;
    $("#take-photo").click(function () {
        beforeTakePhoto();
         picture = webcam.snap();
        //console.log(picture);
        //var file = dataURLtoFile(picture, 'file.png');
        //uploadFile(file);
        document.getElementById("captureImage").src = picture;
        document.querySelector('#download-photo').href = picture;
        afterTakePhoto();
    });

    function saveSnapshot() {
       // let picture = webcam.snap();
        console.log(picture);
        var file = dataURLtoFile(picture, 'file.png');
        uploadFile(file);
    }

    function uploadFile(file) {
        debugger;
        var data = new FormData();
        data.append('file', file);

        $.ajax({
            url: "/Cms/Document/SaveFile",
            type: 'POST',
            data: data,
            contentType: false,
            processData: false,
            success: function (data) {
                var id = data.fileId;
                var win = GetMainWindow();
                win.CloseWindow({ MethodName: '@ViewBag.CallbackMethod', Prms: { fileId: id } });
                return false;
            },
            error: function () {
            }
        });

    }


    function dataURLtoFile(dataurl, filename) {
        var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
        while (n--) {
            u8arr[n] = bstr.charCodeAt(n);
        }
        return new File([u8arr], filename, { type: mime });
    }

    function beforeTakePhoto() {
        $('.flash')
            .show()
            .animate({ opacity: 0.3 }, 500)
            .fadeOut(500)
            .css({ 'opacity': 0.7 });
        window.scrollTo(0, 0);
        $('#webcam-control').addClass('d-none');
        $('#cameraControls').addClass('d-none');
    }

    function afterTakePhoto() {
        webcam.stop();
        $('#canvas').removeClass('d-none');
        $('#take-photo').addClass('d-none');
        $('#exit-app').removeClass('d-none');
        $('#download-photo').removeClass('d-none');
        $('#resume-camera').removeClass('d-none');
        $('#cameraControls').removeClass('d-none');
    }

    function removeCapture() {
        $('#canvas').addClass('d-none');
        $('#webcam-control').removeClass('d-none');
        $('#cameraControls').removeClass('d-none');
        $('#take-photo').removeClass('d-none');
        $('#exit-app').addClass('d-none');
        $('#download-photo').addClass('d-none');
        $('#resume-camera').addClass('d-none');
    }

    $("#resume-camera").click(function () {
        webcam.stream()
            .then(facingMode => {
                removeCapture();
            });
    });

    $("#exit-app").click(function () {
        removeCapture();
        $("#webcam-switch").prop("checked", false).change();
    });
</script>


