@*@using Kendo.Mvc.UI*@
@using System.Text
@using Synergy.App.ViewModel;
@model HybridHierarchyViewModel
@{
    ViewBag.Title = "Hybrid Hierarchy";
    //Layout = null;
    Layout = ViewBag.Layout != null ? ViewBag.Layout : null;
}

<script src="~/js/HybridHierarchyMenu.js" asp-append-version="true"></script>
<link href="~/css/objectchart.css" rel="stylesheet" asp-append-version="true" />

<script>
        /*! pagemap v1.4.0 - https://larsjung.de/pagemap/ */
        !function (e, t) { "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define("pagemap", [], t) : "object" == typeof exports ? exports.pagemap = t() : e.pagemap = t() }("undefined" != typeof self ? self : this, function () { return r = {}, o.m = n = [function (e, t, n) { (function (M) { e.exports = function (c, e) { function t(e) { return "rgba(0,0,0,".concat(e / 100, ")") } function r(t, n, e, r) { return e.split(/\s+/).forEach(function (e) { return t[n](e, r) }) } function o(e, t, n) { return r(e, "addEventListener", t, n) } function n(e, t, n) { return r(e, "removeEventListener", t, n) } function u(e, t, n, r) { return { x: e, y: t, w: n, h: r } } function l(e, t) { var n = 1 < arguments.length && void 0 !== t ? t : { x: 0, y: 0 }; return u(e.x - n.x, e.y - n.y, e.w, e.h) } function f(e) { var t = e.getBoundingClientRect(); return { x: t.left + O.pageXOffset, y: t.top + O.pageYOffset } } function a(e) { var t = f(e), n = t.x, r = t.y; return u(n + e.clientLeft, r + e.clientTop, e.clientWidth, e.clientHeight) } function s(e, t) { t && (H.beginPath(), H.rect(e.x, e.y, e.w, e.h), H.fillStyle = t, H.fill()) } function p(n) { Object.keys(n).forEach(function (e) { var t, i = n[e]; t = e, Array.from((W || S).querySelectorAll(t)).forEach(function (e) { var t, n, r, o; s(l((n = f(t = e), r = n.x, o = n.y, u(r, o, t.offsetWidth, t.offsetHeight)), m), i) }) }) } function i() { var e, t, n, r, o, i; m = W ? (t = f(e = W), n = t.x, r = t.y, u(n + e.clientLeft - e.scrollLeft, r + e.clientTop - e.scrollTop, e.scrollWidth, e.scrollHeight)) : u(0, 0, T.scrollWidth, T.scrollHeight), x = W ? a(W) : u(O.pageXOffset, O.pageYOffset, T.clientWidth, T.clientHeight), b = P(m.w, m.h), o = m.w * b, i = m.h * b, c.width = o, c.height = i, c.style.width = "".concat(o, "px"), c.style.height = "".concat(i, "px"), H.setTransform(1, 0, 0, 1, 0, 0), H.clearRect(0, 0, c.width, c.height), H.scale(b, b), s(l(m, m), L.back), p(L.styles), s(l(x, m), _ ? L.drag : L.view) } function d(e) { e.preventDefault(); var t = a(c), n = (e.pageX - t.x) / b - x.w * w, r = (e.pageY - t.y) / b - x.h * j; W ? (W.scrollLeft = n, W.scrollTop = r) : O.scrollTo(n, r), i() } function h(e) { _ = !1, c.style.cursor = "pointer", E.style.cursor = "auto", n(O, "mousemove", d), n(O, "mouseup", h), d(e) } function y(e) { _ = !0; var t = a(c), n = l(x, m); w = ((e.pageX - t.x) / b - n.x) / n.w, j = ((e.pageY - t.y) / b - n.y) / n.h, (w < 0 || 1 < w || j < 0 || 1 < j) && (j = w = .5), c.style.cursor = "crosshair", E.style.cursor = "crosshair", o(O, "mousemove", d), o(O, "mouseup", h), d(e) } var g, v, m, x, b, w, j, O = M.window, S = O.document, T = S.documentElement, E = S.querySelector("body"), H = c.getContext("2d"), L = Object.assign({ viewport: null, styles: { "header,footer,section,article": t(8), "h1,a": t(10), "h2,h3,h4": t(8) }, back: t(2), view: t(5), drag: t(10), interval: null }, e), P = (g = c.clientWidth, v = c.clientHeight, function (e, t) { return Math.min(g / e, v / t) }), W = L.viewport, _ = !1; return c.style.cursor = "pointer", o(c, "mousedown", y), o(W || O, "load resize scroll", i), 0 < L.interval && setInterval(function () { return i() }, L.interval), i(), { redraw: i } } }).call(this, n(1)) }, function (e, t) { var n; n = function () { return this }(); try { n = n || new Function("return this")() } catch (e) { "object" == typeof window && (n = window) } e.exports = n }], o.c = r, o.d = function (e, t, n) { o.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: n }) }, o.r = function (e) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }) }, o.t = function (t, e) { if (1 & e && (t = o(t)), 8 & e) return t; if (4 & e && "object" == typeof t && t && t.__esModule) return t; var n = Object.create(null); if (o.r(n), Object.defineProperty(n, "default", { enumerable: !0, value: t }), 2 & e && "string" != typeof t) for (var r in t) o.d(n, r, function (e) { return t[e] }.bind(null, r)); return n }, o.n = function (e) { var t = e && e.__esModule ? function () { return e.default } : function () { return e }; return o.d(t, "a", t), t }, o.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t) }, o.p = "", o(o.s = 0); function o(e) { if (r[e]) return r[e].exports; var t = r[e] = { i: e, l: !1, exports: {} }; return n[e].call(t.exports, t, t.exports, o), t.l = !0, t.exports } var n, r });
    </script>

<style>
    #map {
        position: fixed;
        /*top: 0;*/
        right: 0;
        width: 200px;
        height: 15% !important;
        z-index: 100;
        border: 1px solid darkgray;
        border-radius: 3px;
        margin-top: 15px;
    }

    .hr-dhc {
        top: 95px !important;
    }

    .hr-org-expand, .hr-org-collapse {
        top: 95px !important;
    }

    .org-node-1 {
        width: 245px !important;
        height: 193px !important;
    }

    .tree {
        text-align: center;
        align-items: center;
        display: inline-block !important; /*initial center alignment*/
        overflow-x: auto;
        overflow-y: hidden;
    }

    .k-menu-group {
        position: initial !important
    }

    #wrapper {
        height: 100%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

        #wrapper > ul {
            height: 75%;
            list-style: none;
            display: flex;
            align-content: center;
            flex-direction: column;
            flex-wrap: wrap;
        }

        #wrapper > li {
            flex-basis: calc(100% / 3 - 2px);
            color: firebrick;
            border: 1px solid firebrick;
            background-color: greenYellow;
            width: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

    .type-img {
        width: 28px;
        height: 28px;
        border-radius: 6px;
        border: 2px solid silver;
    }
</style>

<script type="text/javascript">
    var reset = true, chartMode = 'Normal', hierarchyId, asonDate,
        allowedParentId, hierarchyRootNodeId, isAsOnDate , permissionCSV, isAdmin , loggedInEmpId
        , loggedInOrganizationId, loggedInUserOrganizationMapping
        , loggedInOrgId, isAdmin,reqType
        $(document).ready(function () {
            //$("#hybridHierarchychartmenu").hide();
            //$("#hybridHierarchychartmenu").find("ul").addClass("dropdown-menu");
        allowedParentId='@Model.AllowedRootNodeId';
        InitialLoad('@Model.AllowedRootNodeId');
        pagemapload();            
        });

    function OnAfterCreate(note) {
        
        //  InitialLoad('@Model.AllowedRootNodeId');
        var rootli = $('.root-li');
        if (trgt != null && trgt != undefined) {
            if (trgt[0].parentNode.parentNode.parentNode.parentNode.id == "org--1") {
                selectedObject = trgt[0].parentNode.parentNode.parentNode.parentNode.children[1];
                Collapse(selectedObject, rootli);
                Expand(selectedObject, rootli);

            }
            else {
                //if (reqType == "RenameDept" || reqType == "RenameJob") {
                selectedObject = trgt[0].parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.children[0].children[1];
                Collapse(selectedObject, rootli);
                // }
                Expand(selectedObject, rootli);
            }
        }
        else
        {
            InitialLoad('@Model.AllowedRootNodeId');
        }
    }
    function GetDataUser(userId)
    {
        $.ajax({
            url: "/portalAdmin/ObjectHierarchyChart/AddExistingUserPost" ,
            type: 'POST',
            data: {
                "parentUserId": orgId,
                "userId": userId,
                "hierarchyId": '@Model.HierarchyId'
            },
            success: function (data) {

               InitialLoad('@Model.AllowedRootNodeId');
            },
            error: function (errData) {
               // OnError(errData);
                console.log(errData);
            }
        });
    }

    function OnAsOnDateChange(e) {
        var params = window.location.search;
        params = RemoveParams(params, 'date');
        var url = window.location.pathname + '?' + params + '&date='+kendo.toString(this.value(), 'yyyy-MM-dd');
        window.location.href = url;
        return false;
    }
    function InitialLoad(OrganizationId) {
        if (OrganizationId != null && OrganizationId != '') {
            var url = "/CHR/BusinessHierarchy/GetHybridHierachyChildList?parentid=" + allowedParentId + "&includeParent=true&level=0&levelUpto=1&enableAOR=@ViewBag.EnableAOR" + "&bulkRequestId=@ViewBag.BulkRequestId" ;
            var li = $('.root-li');
            GetChildList(url, li, allowedParentId, true, null);
            }
        else {
            Search(OrganizationId);
       }
    }
    function ExportToPdf() {
        $("#Width").val($(".root-li").width());
        $("#Height").val($(".root-li").height());
        var html = $('.tree').prop('outerHTML');
        $("#Content").val($('<div/>').text(html).html());
        document.getElementById('exportToPdf').submit();
        return true;
    }
    //$(document).on('click', function (e) {

    //    if ($(e.target).closest("#hybridHierarchychartmenu").length === 0 && $(e.target).closest(".hr-org-menu").length === 0) {
    //        $("#hybridHierarchychartmenu").hide();
    //    }
    //});
    @*function GotoDep(type) {
        if (type=='@ChartViewType.TopNode') {
            InitialLoad(null);
        }
        else if (type=='@ChartViewType.MyNode') {
            InitialLoad(loggedInOrganizationId);
        }
    }*@
    function OrganizationChartSearchCallBack(Organizations) {

        var win = GetMainWindow();
        win.CloseWindow();
        return false;

        Search(Organizations.replace(',', ''));
        return false;
    }
    function Search(OrganizationId) {
        var url = "/hrs/Organizationchart/GetParentHierarchyWithAllChild?OrganizationId=" + OrganizationId
            + "&hierarchyId=" + hierarchyId + "&hierarchyRootId=" + hierarchyRootNodeId
            + "&allowedRootId=" + allowedParentId + "&date=" + asonDate;
        var li = $('.root-li');
        GetChildList(url, li, allowedParentId, true, OrganizationId);
    }

    function FillNode(data, liData, parentLvl) {

        liData.Level = parentLvl;
        var html = "";
        var template = kendo.template($("#template-org").html());
        html = template(liData);
        var items = $.grep(data, function (element, index) {
            return element.ParentId == liData.Id;
        });

        if (items != null && items.length > 0) {
            html = html.replace('hr-org-expand', 'hr-org-collapse');
            html += "<ul class='" + parentLvl + "'>"
            for (var i = 0; i < items.length; i++) {
                html += "<li id='" + items[i].Id +"' lvl='" + (eval(parentLvl) + 1) + "'>";
                html += FillNode(data, items[i], eval(parentLvl) + 1);
                html += "</li>"
            }
            html += "</ul>";
        }
        return html;
    }
    function GetChildList(url, li, OrganizationId, includeParent, searchId) {

        $.ajax({
            url: url,
            type: 'GET',
            cache: false,
            //async: false,
            success: function (data) {
                if (includeParent) {

                    var parentData = $.grep(data, function (element, index) {
                        return element.Id == OrganizationId;
                    });
                   if (parentData != null && parentData.length > 0) {
                        var parentLvl = eval(li.attr('lvl'));
                        li.html(FillNode(data, parentData[0], parentLvl) );
                    }
                }
                else {

                    var childData = $.grep(data, function (element, index) {
                        return element.ParentId == OrganizationId;
                    });

                    if (childData != null && childData.length > 0) {
                        var parentLvl = eval(li.attr('lvl'));
                        var html = "<ul class='" + parentLvl + "'>"
                        for (var i = 0; i < childData.length; i++) {
                            html += "<li id='" + childData[i].Id+"' lvl='" + (eval(parentLvl) + 1) + "'>";
                            html += FillNode(data, childData[i], (eval(parentLvl) + 1));
                            html += "</li>"
                        }
                        html += "</ul>";
                        li.append(html);


                    }
                }
                if (searchId!=null) {
                    $("#org-" + searchId).addClass('focus');
                    FocusSearchResultNode();
                }
                //var element = document.getElementById('wrapper');
                //alert(element.clientWidth);
                //alert(element.offsetWidth);
                //alert(element.style.width);
                //element.style.width =   '4000';
                SetContextMenu();
            },
            error: function (errData) {
                //OnError(errData);
                console.log(errData);
            }
        });
        return false;
    }
    function SetContextMenu() {
        var isDisplayOnly = '@Convert.ToString(ViewBag.IsDisplayOnly)' === 'True';
        var canManageAllContextMenu = '@Convert.ToString(ViewBag.IsManageAllContextMenu)' === 'True';
        var isBulkRequest = '@Convert.ToString(ViewBag.IsBulkRequest)' === 'True';
        var isRequestClosed = '@Convert.ToString(ViewBag.BulkRequestStatusCode)' === 'SERVICE_STATUS_CLOSE' || '@Convert.ToString(ViewBag.BulkRequestStatusCode)' === 'SERVICE_STATUS_COMPLETE' || '@Convert.ToString(ViewBag.BulkRequestStatusCode)' === 'SERVICE_STATUS_CANCEL' || '@Convert.ToString(ViewBag.BulkRequestStatusCode)' === 'SERVICE_STATUS_REJECT';

        var actionValue = (isDisplayOnly === false && isRequestClosed === false) || (canManageAllContextMenu === true && isBulkRequest===false);
        var requests = (isDisplayOnly === false && isBulkRequest === false) || (canManageAllContextMenu === true && isBulkRequest === false);
        $.contextMenu({
            selector: '.hr-org-menu',
            className:'context-menu',
            trigger: 'left',
            build: function ($trigger, e) {
                var refType = $trigger.attr("reftype");
                var dc = $trigger.attr("dc");
                var openContextMenu, newChild, existingChild, newChildReq, newPer, newPerReq, newPos, newPosReq, exisPos, renameJob = false;
                var renameJobRequest, renameDept, reqRenameDep, editPerson, changeLM, changeAssignment, changeJob, reqChangeJob, addEmployeeRequest, request = false;
                var changeDepartment, changeDepartmentRequest, addEmployee, manageAOR, managePermission, removeFromHierarchy, moveTo, viewHieDetails, Expand, CollapseAll = false;
                var newOrg1, newOrg2, newOrg3, newOrg4, newBrand, newMarket, newProvince, newDepartment, newCareerLevel, newJob, newPosition, newEmployee = false;
                var exstOrg1, exstOrg2, exstOrg3, exstOrg4, exstBrand, exstMarket, exstProvince, exstDepartment, exstCareerLevel, exstJob, exstPosition, exstEmployee = false;
                var reqOrg1, reqOrg2, reqOrg3, reqOrg4, reqBrand, reqMarket, reqProvince, reqDepartment,reqCareerLevel,reqJob,reqPosition,reqEmployee = false;
                switch (refType) {
                    case 'DEPARTMENT_SERVICE':
                    case 'JOB_SERVICE':
                    case 'CAREER_LEVEL_SERVICE':
                    case 'PERSON_SERVICE':
                    case 'POSITION_SERVICE':
                        openContextMenu = actionValue;
                        break;
                    case 'ROOT':
                        newChild = actionValue;
                        newOrg1 = true;
                        existingChild = actionValue;
                        exstOrg1 = true;
                        break;
                    case 'LEVEL1':
                        newChild = actionValue;
                        newOrg2 = true;
                        newOrg3 = true;
                        newOrg4 = true;
                        newBrand = true;
                        newMarket = true;
                        newProvince = true;
                        newDepartment = true;
                        newCareerLevel = true;
                        newJob = true;
                        newPosition = true;
                        newEmployee = true;

                        existingChild = actionValue;
                        exstOrg2 = true;
                        exstOrg3 = true;
                        exstOrg4 = true;
                        exstBrand = true;
                        exstMarket = true;
                        exstProvince = true;
                        exstDepartment = true;
                        exstCareerLevel = true;
                        exstJob = true;
                        exstPosition = true;
                        exstEmployee = true;
                        renameDept = true;

                        request = requests;
                        reqOrg2 = true;
                        reqOrg3 = true;
                        reqOrg4 = true;
                        reqBrand = true;
                        reqMarket = true;
                        reqProvince = true;
                        reqDepartment = true;
                        reqCareerLevel = true;
                        reqJob = true;
                        reqPosition = true;
                        reqEmployee = true;
                        reqRenameDep = true;

                        removeFromHierarchy = actionValue;
                        moveTo = true; 
                        viewHieDetails = true;
                        
                        break;
                    case 'LEVEL2':
                        newChild = actionValue;
                        newOrg3 = true;
                        newOrg4 = true;
                        newBrand = true;
                        newMarket = true;
                        newProvince = true;
                        newDepartment = true;
                        newCareerLevel = true;
                        newJob = true;
                        newPosition = true;
                        newEmployee = true;

                        existingChild = actionValue;
                        exstOrg3 = true;
                        exstOrg4 = true;
                        exstBrand = true;
                        exstMarket = true;
                        exstProvince = true;
                        exstDepartment = true;
                        exstCareerLevel = true;
                        exstJob = true;
                        exstPosition = true;
                        exstEmployee = true;
                        renameDept = true;

                        request = requests;
                        reqOrg3 = true;
                        reqOrg4 = true;
                        reqBrand = true;
                        reqMarket = true;
                        reqProvince = true;
                        reqDepartment = true;
                        reqCareerLevel = true;
                        reqJob = true;
                        reqPosition = true;
                        reqEmployee = true;
                        reqRenameDep = true;

                        removeFromHierarchy = actionValue;
                        moveTo = true;
                        viewHieDetails = true;
                        break;
                    case 'LEVEL3':
                        newChild = actionValue;
                        newOrg4 = true;
                        newBrand = true;
                        newMarket = true;
                        newProvince = true;
                        newDepartment = true;
                        newCareerLevel = true;
                        newJob = true;
                        newPosition = true;
                        newEmployee = true;

                        existingChild = actionValue;
                        exstOrg4 = true;
                        exstBrand = true;
                        exstMarket = true;
                        exstProvince = true;
                        exstDepartment = true;
                        exstCareerLevel = true;
                        exstJob = true;
                        exstPosition = true;
                        exstEmployee = true;
                        renameDept = true;

                        request = requests;
                        reqOrg4 = true;
                        reqBrand = true;
                        reqMarket = true;
                        reqProvince = true;
                        reqDepartment = true;
                        reqCareerLevel = true;
                        reqJob = true;
                        reqPosition = true;
                        reqEmployee = true;
                        reqRenameDep = true;

                        removeFromHierarchy = actionValue;
                        moveTo = true;
                        viewHieDetails = true;
                        break;
                    case 'LEVEL4':
                        newChild = actionValue;
                        newBrand = true;
                        newMarket = true;
                        newProvince = true;
                        newDepartment = true;
                        newCareerLevel = true;
                        newJob = true;
                        newPosition = true;
                        newEmployee = true;

                        existingChild = actionValue;
                        exstBrand = true;
                        exstMarket = true;
                        exstProvince = true;
                        exstDepartment = true;
                        exstCareerLevel = true;
                        exstJob = true;
                        exstPosition = true;
                        exstEmployee = true;
                        renameDept = true;

                        request = requests;
                        reqBrand = true;
                        reqMarket = true;
                        reqProvince = true;
                        reqDepartment = true;
                        reqCareerLevel = true;
                        reqJob = true;
                        reqPosition = true;
                        reqEmployee = true;
                        reqRenameDep = true;

                        removeFromHierarchy = actionValue;
                        moveTo = true;
                        viewHieDetails = true;
                        break;
                    case 'BRAND':
                        newChild = actionValue;
                        newMarket = true;
                        newProvince = true;
                        newDepartment = true;
                        newCareerLevel = true;
                        newJob = true;
                        newPosition = true;
                        newEmployee = true;

                        existingChild = actionValue;
                        exstMarket = true;
                        exstProvince = true;
                        exstDepartment = true;
                        exstCareerLevel = true;
                        exstJob = true;
                        exstPosition = true;
                        exstEmployee = true;
                        renameDept = true;

                        request = requests;
                        reqMarket = true;
                        reqProvince = true;
                        reqDepartment = true;
                        reqCareerLevel = true;
                        reqJob = true;
                        reqPosition = true;
                        reqEmployee = true;
                        reqRenameDep = true;

                        removeFromHierarchy = actionValue;
                        moveTo = true;
                        viewHieDetails = true;
                        break;
                    case 'MARKET':
                        newChild = actionValue;
                        newProvince = true;
                        newDepartment = true;
                        newCareerLevel = true;
                        newJob = true;
                        newPosition = true;
                        newEmployee = true;

                        existingChild = actionValue;
                        exstProvince = true;
                        exstDepartment = true;
                        exstCareerLevel = true;
                        exstJob = true;
                        exstPosition = true;
                        exstEmployee = true;
                        renameDept = true;

                        request = requests;
                        reqProvince = true;
                        reqDepartment = true;
                        reqCareerLevel = true;
                        reqJob = true;
                        reqPosition = true;
                        reqEmployee = true;
                        reqRenameDep = true;

                        removeFromHierarchy = actionValue;
                        moveTo = true;
                        viewHieDetails = true;
                        break;
                    case 'PROVINCE':
                        newChild = actionValue;
                        newDepartment = true;
                        newCareerLevel = true;
                        newJob = true;
                        newPosition = true;
                        newEmployee = true;

                        existingChild = actionValue;
                        exstDepartment = true;
                        exstCareerLevel = true;
                        exstJob = true;
                        exstPosition = true;
                        exstEmployee = true;
                        renameDept = true;

                        request = requests;
                        reqDepartment = true;
                        reqCareerLevel = true;
                        reqJob = true;
                        reqPosition = true;
                        reqEmployee = true;
                        reqRenameDep = true;

                        removeFromHierarchy = actionValue;
                        moveTo = true;
                        viewHieDetails = true;
                        break;
                    case 'DEPARTMENT':
                        newChild = actionValue;
                        newCareerLevel = true;
                        newJob = true;
                        newPosition = true;
                        newEmployee = true;

                        existingChild = actionValue;
                        exstCareerLevel = true;
                        exstJob = true;
                        exstPosition = true;
                        exstEmployee = true;
                        renameDept = true;

                        request = requests;
                        reqCareerLevel = true;
                        reqJob = true;
                        reqPosition = true;
                        reqEmployee = true;
                        reqRenameDep = true;

                        removeFromHierarchy = actionValue;
                        moveTo = true;
                        viewHieDetails = true;
                        break;

                    case 'CAREER_LEVEL':
                        newChild = actionValue;
                        newJob = true;
                        newPosition = true;
                        newEmployee = true;

                        existingChild = actionValue;
                        exstJob = true;
                        exstPosition = true;
                        exstEmployee = true;

                        request = requests;
                        reqJob = true;
                        reqPosition = true;
                        //reqEmployee = true;

                        removeFromHierarchy = actionValue;
                        moveTo = true;
                        viewHieDetails = true;
                        break;
                        
                    case 'JOB':
                        newChild = actionValue;
                        newPosition = true;
                        newEmployee = true;

                        existingChild = actionValue;
                        exstPosition = true;
                        exstEmployee = true;
                        renameJob = true;

                        request = requests;
                        reqPosition = true;
                        reqEmployee = true;
                        renameJobRequest = true;
                        removeFromHierarchy = actionValue;
                        moveTo = true;
                        viewHieDetails = true;
                        break;
                    case 'POSITION':
                        newChild = actionValue;
                        newEmployee = true;

                        existingChild = actionValue;
                        exstEmployee = true;

                        request = requests;
                        reqEmployee = true;

                        removeFromHierarchy = actionValue;
                        moveTo = true;
                        viewHieDetails = true;
                        break;
                         
                    case 'EMPLOYEE':
                        changeLM = actionValue;
                        editPerson = actionValue;
                        changeJob = actionValue;
                        reqChangeJob = requests;
                        changeDepartment = actionValue;
                        changeDepartmentRequest = requests;
                        changeAssignment = actionValue;
                        removeFromHierarchy = actionValue;
                        moveTo = true;
                        viewHieDetails = true;
                        
                        break;
                    default:
                }

                if (dc > 0) {
                    Expand = true;
                    CollapseAll = true;
                }
                newChild = newChild && (newOrg1 || newOrg2 || newOrg3 || newOrg4 || newBrand || newMarket || newProvince || newDepartment || newCareerLevel || newJob || newPosition || newEmployee);
                existingChild = existingChild && (exstOrg1 || exstOrg2 || exstOrg3 || exstOrg4 || exstBrand || exstMarket || exstProvince || exstDepartment || exstCareerLevel || exstJob || exstPosition || exstEmployee);
                request = request && (reqOrg1 || reqOrg2 || reqOrg3 || reqOrg4 || reqBrand || reqMarket || reqProvince || reqDepartment || reqCareerLevel || reqJob || reqPosition || reqEmployee);
                return {
                    callback: function (key, options) {
                        $trigger.contextMenu("hide");
                        OnMenuClick($trigger, key,'@ViewBag.BulkRequestId');
                    },
                    items: {
                        "openContextMenu": { name: "Open Request", icon: "fas fa-external-link", visible: function () { return openContextMenu; } },
                        "newChild": {
                            name: "Add New Child", icon: "fas fa-plus", visible: function () { return newChild; }, items: {
                                "OrgLevel1": { name: "Org Level 1", icon: "fas fa-building", visible: function () { return newOrg1; } },
                                "OrgLevel2": { name: "Org Level 2", icon: "fas fa-building", visible: function () { return newOrg2; } },
                                "OrgLevel3": { name: "Org Level 3", icon: "fas fa-building", visible: function () { return newOrg3; } },
                                "OrgLevel4": { name: "Org Level 4", icon: "fas fa-building", visible: function () { return newOrg4; } },
                                "Brand": { name: "Brand", icon: "fa-solid fa-badge-check", visible: function () { return newBrand; } },
                                "Market": { name: "Market", icon: "fa-light fa-bag-shopping", visible: function () { return newMarket; } },
                                "Province": { name: "Province", icon: "fa-thin fa-house-building", visible: function () { return newProvince; } },
                                "Department": { name: "Department", icon: "fa-solid fa-apartment", visible: function () { return newDepartment; } },
                                "CareerLevel": { name: "Career Level", icon: "fa-solid fa-dial-high", visible: function () { return newCareerLevel; } },
                                "Job": { name: "Job", icon: "fa-solid fa-briefcase", visible: function () { return newJob; } },
                                "newPos": { name: "Position", icon: "fa-solid fa-sitemap", visible: function () { return newPosition; } },
                                "addEmployee": { name: "Employee", icon: "fa-duotone fa-user-tie-hair", visible: function () { return newEmployee; } }                              
                                
                            }
                        },
                        "existingChild": {
                            name: "Add Existing Child", icon: "fas fa-edit", visible: function () { return existingChild; }, items: {
                                "exisOrgLevel1": { name: "Org Level 1", icon: "fas fa-building", visible: function () { return exstOrg1; } },
                                "exisOrgLevel2": { name: "Org Level 2", icon: "fas fa-building", visible: function () { return exstOrg2; } },
                                "exisOrgLevel3": { name: "Org Level 3", icon: "fas fa-building", visible: function () { return exstOrg3; } },
                                "exisOrgLevel4": { name: "Org Level 4", icon: "fas fa-building", visible: function () { return exstOrg4; } },
                                "exisBrand": { name: "Brand", icon: "fa-solid fa-badge-check", visible: function () { return exstBrand; } },
                                "exisMarket": { name: "Market", icon: "fa-light fa-bag-shopping", visible: function () { return exstMarket; } },
                                "exisProvince": { name: "Province", icon: "fa-thin fa-house-building", visible: function () { return exstProvince; } },
                                "exisDepartment": { name: "Department", icon: "fa-solid fa-apartment", visible: function () { return exstDepartment; } },
                                "exisCareerLevel": { name: "Career Level", icon: "fa-solid fa-dial-high", visible: function () { return exstCareerLevel; } },
                                "exisJob": { name: "Job", icon: "fa-solid fa-briefcase", visible: function () { return exstJob; } },
                                "exisPos": { name: "Position", icon: "fa-solid fa-sitemap", visible: function () { return exstPosition; } },
                                "exisEmployee": { name: "Employee", icon: "fa-duotone fa-user-tie-hair", visible: function () { return exstEmployee; } },
                                "renameDept": { name: "Rename Department", icon: "fas fa-expand-alt", visible: function () { return renameDept; } },
                                "renameJob": { name: "Rename Job", icon: "fas fa-black-tie", visible: function () { return renameJob; } },

                            }
                        },
                        "request": {
                            name: "Add New Child Request", icon: "fas fa-plus", visible: function () { return request; },items: {
                                "reqOrg_LEVEL1": { name: "Org Level 1", icon: "fas fa-building", visible: function () { return reqOrg1; } },
                                "reqOrg_LEVEL2": { name: "Org Level 2", icon: "fas fa-building", visible: function () { return reqOrg2; } },
                                "reqOrg_LEVEL3": { name: "Org Level 3", icon: "fas fa-building", visible: function () { return reqOrg3; } },
                                "reqOrg_LEVEL4": { name: "Org Level 4", icon: "fas fa-building", visible: function () { return reqOrg4; } },
                                "req_BRAND": { name: "Brand", icon: "fa-solid fa-badge-check", visible: function () { return reqBrand; } },
                                "req_MARKET": { name: "Market", icon: "fa-light fa-bag-shopping", visible: function () { return reqMarket; } },
                                "req_PROVINCE": { name: "Province", icon: "fa-thin fa-house-building", visible: function () { return reqProvince; } },
                                "req_DEPARTMENT": { name: "Department", icon: "fa-solid fa-apartment", visible: function () { return reqDepartment; } },
                                "reqCareerLevel": { name: "Career Level", icon: "fa-solid fa-dial-high", visible: function () { return reqCareerLevel; } },
                                "reqJob": { name: "Job", icon: "fa-solid fa-briefcase", visible: function () { return reqJob; } },
                                "newPosReq": { name: "Position", icon: "fa-solid fa-sitemap", visible: function () { return reqPosition; } },
                                "addEmployeeRequest": { name: "Employee", icon: "fa-duotone fa-user-tie-hair", visible: function () { return reqEmployee; } },
                                "renameDeptRequest": { name: "Rename Department", icon: "fas fa-expand-alt", visible: function () { return reqRenameDep; } },
                                "renameJobRequest": { name: "Rename Job Request", icon: "fas fa-black-tie", visible: function () { return renameJobRequest; } },

                            }
                        },
                        //"newPer": { name: "Add New Employee", icon: "fas fa-user", visible: function () { return newPer; } },
                       // "newPerReq": { name: "Add New Employee Request", icon: "fas fa-user", visible: function () { return newPerReq; } },

                        //"newPos": { name: "Add New Position", icon: "fas fa-chair", visible: function () { return newPos; } },
                        //"newPosReq": { name: "Add New Position Request", icon: "fas fa-chair", visible: function () { return newPosReq; } },
                        //"exisPos": { name: "Add Existing Position", icon: "fas fa-chair", visible: function () { return exisPos; } },
                        //"renameJob": { name: "Rename Job", icon: "fas fa-black-tie", visible: function () { return renameJob; } },
                        //"renameJobRequest": { name: "Rename Job Request", icon: "fas fa-black-tie", visible: function () { return renameJobRequest; } },
                        //"renameDept": { name: "Rename Department", icon: "fas fa-building", visible: function () { return renameDept; } },
                        //"reqRenameDep": { name: "Rename Department Request", icon: "fas fa-building", visible: function () { return reqRenameDep; } },

                        //"editPerson": { name: "Edit Person", icon: "fas fa-user", visible: function () { return editPerson; } },

                        "changeLM": { name: "Change Line Manager", icon: "fas fa-user-circle", visible: function () { return changeLM; } },
                        "changeAssignment": { name: "Edit Assignment", icon: "fas fa-suitcase-rolling", visible: function () { return changeAssignment; } },
                        "changeJob": { name: "Change Job", icon: "fas fa-black-tie", visible: function () { return changeJob; } },
                        "reqChangeJob": { name: "Change Job Request", icon: "fas fa-black-tie", visible: function () { return reqChangeJob; } },
                        "changeDepartment": { name: "Change Department", icon: "fas fa-building", visible: function () { return changeDepartment; } },
                        "changeDepartmentRequest": { name: "Change Department Request", icon: "fas fa-building", visible: function () { return changeDepartmentRequest; } },
                        //"addEmployee": { name: "Add Employee", icon: "fas fa-user", visible: function () { return addEmployee; } },
                        //"addEmployeeRequest": { name: "Add Employee Request", icon: "fas fa-user", visible: function () { return addEmployeeRequest; } },

                        "manageAOR": { name: "Manage AOR", icon: "fas fa-sitemap", visible: function () { return manageAOR; } },
                        "managePermission": { name: "Manage Permissions", icon: "fas fa-tasks", visible: function () { return managePermission; } },
                        "removeFromHierarchy": { name: "Remove From Hierarchy", icon: "fas fa-trash", visible: function () { return removeFromHierarchy; } },
                        "moveTo": { name: "Move To", icon: "fas fa-arrow-right", visible: function () { return moveTo; } },
                        "viewHieDetails": { name: "View Hierarchy Details", icon: "fas fa-eye", visible: function () { return viewHieDetails; } },
                        "Expand": {
                            name: "Expand", icon: "fas fa-expand-alt", visible: function () { return Expand; }, items: {
                                "Expand2": { name: "Expand 2 Levels Below", icon: "fas fa-expand-alt" },
                                "Expand3": { name: "Expand 3 Levels Below", icon: "fas fa-expand-alt" },
                                "Expand4": { name: "Expand 4 Levels Below", icon: "fas fa-expand-alt" },
                                "Expand5": { name: "Expand 5 Levels Below", icon: "fas fa-expand-alt" },
                                "ExpandAll": { name: "Expand All Levels Below", icon: "fas fa-expand-alt" }
                            }

                        },
                        "CollapseAll": { name: "Collapse All", icon: "fas fa-compress-alt", visible: function () { return CollapseAll; } }
                    }
                };


            }
        });
    }
    function Expand(e, rootli) {

        var node = $(e).parent('div').parent('li');
        var lvl = eval(node.attr('lvl'));
     //var id = eval(node.attr('id'));
        var id = node.attr('id');
        var ul = node.find('ul[class=' + lvl + ']');

        if (ul.length <= 0) {
            var rootli = $('.root-li');
            //hierarchyId = $("#HierarchyId").val();
            if (id == undefined) {
                var node1 = $(e).parent('div')

                var rootid = node1[0].id;
                rootid = rootid.split("org-");
                var url = "/CHR/BusinessHierarchy/GetHybridHierachyChildList?parentId=" + rootid[1] + "&levelUpto=1&level=" + lvl +"&enableAOR=@ViewBag.EnableAOR" + "&bulkRequestId=@ViewBag.BulkRequestId";
                GetChildList(url, node, rootid[1], false, null)
            }
            else {
                var url = "/CHR/BusinessHierarchy/GetHybridHierachyChildList?parentId=" + id + "&levelUpto=1&level="+lvl+"&enableAOR=@ViewBag.EnableAOR" + "&bulkRequestId=@ViewBag.BulkRequestId";
                GetChildList(url, node, id, false, null)
            }
            //var url = "/CHR/OrganizationHierarchy/GetChildList?parentId=" + id +"&levelUpto=1";

          //  GetChildList(url, node, id,false,null)
        }
        else {
            ul.show();
            //OnComplete();
        }
    }

    function MultiLevelExpandCollapse(OrganizationId, level) {

        var node = $('#org-' + OrganizationId).parent('li');
        //var node = document.getElementById('org-' + OrganizationId).parent('li');
        node.find('.hr-ec').toggleClass('hr-org-expand hr-org-collapse');
        var lvl = eval(node.attr('lvl'));
        var id = node.attr('id');
        var ul = node.find('ul[class=' + lvl + ']');
        var ec = node.find('.hr-ec');
        ec.removeClass("hr-org-expand");
        ec.addClass("hr-org-collapse");
        //var pnode = document.getElementById('org-' + OrganizationId);
        //var node = pnode.parentElement;
        //var lvl = node.getAttribute('lvl');
        //var id = node.getAttribute('id');
        //var ul = node.getElementsByClassName(lvl);
        //var ec = node.querySelector('.hr-ec');
        //ec.classList.remove('hr-org-expand');
        //ec.classList.add('hr-org-collapse');

        if (ul.length > 0) {
            ul.remove();
        }
        hierarchyId = $("#HierarchyId").val();
        if (id == undefined) {
            var url = "/CHR/BusinessHierarchy/GetHybridHierachyChildList?parentId=" + OrganizationId + "&level=" + lvl + "&levelUpto=" + level + "&enableAOR=@ViewBag.EnableAOR" + "&bulkRequestId=@ViewBag.BulkRequestId";
            GetChildList(url, node, OrganizationId, false, null)
        }
        else {
            var url = "/CHR/BusinessHierarchy/GetHybridHierachyChildList?parentId=" + id + "&level=" + lvl + "&levelUpto=" + level + "&enableAOR=@ViewBag.EnableAOR" + "&bulkRequestId=@ViewBag.BulkRequestId";
            GetChildList(url, node, id, false, null)
        }

       // GetChildList(url, node, id, false, null)
    }
    function CollapseAll(OrganizationId) {

        var node = $('#org-' + OrganizationId).parent('li');
        var lvl = eval(node.attr('lvl'));
        var ec = node.find('.hr-ec');
        ec.removeClass("hr-org-collapse");
        ec.addClass("hr-org-expand");
        var ul = node.find('ul[class=' + lvl + ']');
        ul.remove();
        //OnComplete();

    }
    function Collapse(e, rootli) {
        var node = $(e).parent('div').parent('li');
        var lvl = eval(node.attr('lvl'));
        var ul = node.find('ul[class=' + lvl + ']');
        ul.remove();
        //OnComplete();
    }
        function OnExpandCollapseClick(e) {
        var rootli = $('.root-li');
        //OnBegin();
        var isExpand = $(e).hasClass('hr-org-expand');
        $(e).toggleClass('hr-org-expand hr-org-collapse');
        if (isExpand) {
            Expand(e, rootli);
        }
        else {
            Collapse(e, rootli);
        }

    }

    function OnManage(source, orgId, relationshipId, hierarchyId) {
        var rsv = encodeURIComponent("/hrs/organizationchart/index?a=1");
        if (type1 == "OrgExcel") {
            rsv = encodeURIComponent("/hrs/organizationchart/index?type=OrgExcel");
        }
        var url = "/hrs/Organizationhierarchy/" + source + (orgId == null ? "" : "?orgId=" + orgId) +  "&relationshipId=" + relationshipId + "&hierarchyId=" + hierarchyId+ "&ru=" + rsv;
        window.location.href = url;

    }
    function OnOrgManage(source, id) {
        var rsv = encodeURIComponent("/hrs/organizationchart/index?a=1");
        if (type1 == "OrgExcel") {
            rsv = encodeURIComponent("/hrs/organizationchart/index?type=OrgExcel");
        }

        var url = "/hrs/Organization/" + source + (id == null ? "" : "?id=" + id + "&ru=" + rsv +  "&hierarchyId=" + hierarchyId + "&orgId=" + orgId + "&date=" + asonDate);
        window.location.href = url;

    }
    function onAddRootNode() {
        var rsv = encodeURIComponent("//hrs/organizationchart/index?a=1");
        window.location.href = "/hrs/organization/create?parentOrganizationId=0&hierarchyid=1&rs=" + rsv;
    }

    $('#left').click(function () {
        event.preventDefault();
        $('#chartdiv').animate({
            scrollLeft: "-=1075px"
        }, "slow");

    });

    $('#right').click(function () {
        event.preventDefault();
        $('#chartdiv').animate({
            scrollLeft: "+=1075px"
        }, "slow");

    });

    $('#left1').click(function () {
        event.preventDefault();
        $('#chartdiv').animate({
            scrollLeft: "-=1075px"
        }, "slow");

    });

    $('#right1').click(function () {
        event.preventDefault();
        $('#chartdiv').animate({
            scrollLeft: "+=1075px"
        }, "slow");

    });

     function onDownloadFile() {
       var url = '/Chr/BusinessHierarchy/DownloadHybridHierarchy';
        window.open(url, '_blank');
    }
    function onDownloadBPFile() {
        var url = '/Chr/BusinessHierarchy/DownloadBusinessPartnerMappingData';
        window.open(url, '_blank');
    }
    function onManageAOR() {
        var portalId = $('#GlobalPortalId').val();
        var url = '/CHR/BusinessHierarchy/BusinessHierarchyAOR?lo=Popup&portalId=' + portalId;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Manage AOR', Width: 1000, Height: 650 });
        return false;
    }
    function onManagePermissions() {
        var portalId = $('#GlobalPortalId').val();
        var url = '/CHR/BusinessHierarchy/BHPermissionIndex?lo=Popup&portalId=' + portalId;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Manage Permissions', Width: 1000, Height: 650 });
        return false;
    }
    function onManageRootPermissions() {
        var portalId = $('#GlobalPortalId').val();
        //var url = '/CHR/BusinessHierarchy/BHPermissionIndex?lo=Popup&portalId=' + portalId;
        var url = '/CHR/BusinessHierarchy/BusinessHierarchyRootPermission?lo=Popup&portalId=' + portalId;

        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Manage Permissions', Width: 1000, Height: 650 });
        return false;
    }
    function onChangeRequest() {
        var portalId = $('#GlobalPortalId').val();

        var url = '/CHR/BusinessHierarchy/BHServiceIndex?portalId=' + portalId;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Change Request', Width: 1000, Height: 650 });
        return false;
    }
    function onMyTasks() {
        var portalId = $('#GlobalPortalId').val();
        var url = '/CHR/BusinessHierarchy/BHSearch?portalId=' + portalId;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'My Tasks', Width: 1500, Height: 650 });
        return false;
    }

    function getId(Prms) {
        alert(Prms);
    }

    function onHideMap(e) {               
        var x = document.getElementById("map");
        if (x.style.display === "none") {
            x.style.display = "block";
            e.className = "fa fa-eye-slash";
        } else {
            x.style.display = "none";
            e.className = "fa fa-eye";
        }
    }
</script>
@Html.AntiForgeryToken()

@Html.HiddenFor(x => x.Id)
@Html.HiddenFor(x => x.ParentId)
@Html.HiddenFor(x => x.Name)


<canvas id='map'></canvas>
<div id="appWrapper">

    <script type="text/x-kendo-template" id="template-org">
        <div class="row-12 org-node #:data.CssClass# #:data.ItemBorderCss#" id="org-#:data.Id#" style="Height:75px !important">

        <div class="col">
        <div class="row">
            <div class="chartText" style="white-space:normal;font-size:12px;padding-top:10px;padding-bottom:10px;width:85%;">
                # if (data.Name!==null && data.Name!=='' && data.Name!=='null') { # <div> #: Name #  </div>  # } #
                # if (data.WorkflowStatus!==null && data.WorkflowStatus!=='' && data.WorkflowStatus!=='null') { # <div> #: WorkflowStatus #  </div>  # } #

            </div>

            <div class="row no-gutters hr-org-menu-div" style="padding-top:8px;width:15%;text-align:center;">
                <div class="col-12" style="text-align:center;">
                    <img class="type-img" src="/images/BusinessHierarchy/#:data.TypeIcon#.png" title="#:data.TypeIconTitle#" />
                </div>
                <div class="col-12">
                    <span id="hr-org-menu-#:data.Id#" type="#:data.NodeType#"  refType="#:data.ReferenceType#"
                          orgId="#:data.Id#" hc="0" lvl="#:data.LevelId#" dc="#:data.DirectChildCount#"
                          jobId="0" rl="Abc" refId="#:data.ReferenceId#"
                          orl="Xyz" pt="1" ntsId="#:data.NtsId#" serStatus="#:data.StatusCode#"
                          pPosId="1" nt="A" ccHolderId="1"
                          orgHierarchyId="1" hierarchyId="#:data.HierarchyId#" parentId="#:data.ParentId#"
                          userId="1" noteId="#:data.Id#" orgHierarchyNoteId="#:data.UserHierarchyNoteId#" orgName="#:data.Name#"
                          class="hr-org-menu fa fa-ellipsis-v" style="font-size:18px;padding-top:8px;">
                    </span>
                </div>
            </div>

        </div>
        </div>

            # if (data.DirectChildCount>0) { #
            <span  class="hr-org-expand hr-ec" onclick="OnExpandCollapseClick(this)"></span>
            <span class="hr-dhc" title="#:data.DirectChildCount# direct reportee(s) and #:data.AllChildCount# all reportee(s)"><b>#:data.DirectChildCount#</b>(#:data.AllChildCount#)</span>
            # } #

        </div>
    </script>

    @if (!Convert.ToBoolean(ViewBag.IsBulkRequest) && !Convert.ToBoolean(ViewBag.IsDisplayOnly))
    {
<div class="chart-menu">
    <a href="javascript://void(0);" onclick="onMyTasks();">
        <div class="chart-menu-item">
            <div class="chart-menu-icon"><i class="chart-icon-size fa fa-magnifying-glass fa-fw"></i></div>
            <div class="chart-menu-text">Search</div>
        </div>
    </a>
    @if (Convert.ToBoolean(ViewBag.IsManageAOR))
    {
        <a href="javascript://void(0);" onclick="onManageAOR();">
            <div class="chart-menu-item">
                <div class="chart-menu-icon"><i class="chart-icon-size fa fa-briefcase fa-fw"></i></div>
                <div class="chart-menu-text">Manage AOR</div>
            </div>
        </a>
    }

    @if (Convert.ToBoolean(ViewBag.IsManagePermissions))
    {
        <a href="javascript://void(0);" onclick="onManageRootPermissions();">
            <div class="chart-menu-item">
                <div class="chart-menu-icon"><i class="chart-icon-size fa fa-sitemap fa-fw"></i></div>
                <div class="chart-menu-text">Manage Hierarchy Root Permission</div>
            </div>
        </a>
    }

    @if (Convert.ToBoolean(ViewBag.IsManageChangeRequest))
    {
        <a href="javascript://void(0);" onclick="onChangeRequest();">
            <div class="chart-menu-item">
                <div class="chart-menu-icon"><i class="chart-icon-size fa fa-sitemap fa-fw"></i></div>
                <div class="chart-menu-text">Change Request</div>
            </div>
        </a>
    }

    <a href="javascript://void(0);" onclick="onMyTasks();">
        <div class="chart-menu-item">
            <div class="chart-menu-icon"><i class="chart-icon-size fa fa-tasks fa-fw"></i></div>
            <div class="chart-menu-text">My Tasks</div>
        </div>
    </a>
    @if (Convert.ToBoolean(ViewBag.IsManageDownload))
    {
        <a href="javascript://void(0);" onclick="onDownloadFile();">
            <div class="chart-menu-item">
                <div class="chart-menu-icon"><i class="chart-icon-size fa fa-file-excel fa-fw"></i></div>
                <div class="chart-menu-text">Download</div>

            </div>
        </a>
        <a href="javascript://void(0);" onclick="onDownloadBPFile();">
            <div class="chart-menu-item">
                <div class="chart-menu-icon"><i class="chart-icon-size fa fa-file-excel fa-fw"></i></div>
                <div class="chart-menu-text">Download Business Partner Mapping</div>

            </div>
        </a>
    }

</div>
    }

    <div class="tree" id="wrapper" style="min-width:100%;padding-left:80px;">
        <ul class="0">
            <li class="root-li" lvl='0' id="@Model.Id">
            </li>
        </ul>
    </div>
    
    <i class="fa fa-eye-slash" onclick="onHideMap(this)" style="right: 5px; position: fixed; cursor: pointer; top: 69px;"></i>
    
</div>

<script>
    function pagemapload() {
        pagemap(document.querySelector('#map'), {
            viewport: null,
            styles: {
                'div': 'rgba(0,0,0,0.08)',
                //'h1,a': 'rgba(0,0,0,0.10)',
                //'h2,h3,h4': 'rgba(0,0,0,0.08)'
            },
            back: 'rgba(0,0,0,0.02)',
            view: 'rgba(0,0,0,0.05)',
            drag: 'rgba(0,0,0,0.10)',
            interval: 2000
        });   
    }
    
</script>