@inject IStringLocalizer<CMS.UI.Web.Areas.DMS.Controllers.DocumentPermissionController> Resource
@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@*@using Kendo.Mvc.UI;*@
@model DocumentPermissionViewModel

@{

    Layout = "~/Areas/Core/Views/Shared/_PopupLayout.cshtml";
    //Layout = null;
}

<style>
    .product {
        float: left;
        position: relative;
        height: 30px;
        padding-left: 3px;
        font-size: 16px;
    }

    .kgrdPDM {
        width: 100% !important;
    }
</style>
<script>

    function onDataBound(e) {
        
        //Selects all edit buttons
        $("#kgrdPermisstion tbody tr .k-grid-Edit").each(function () {
            var currentDataItem = $("#kgrdPermisstion").data("kendoGrid").dataItem($(this).closest("tr"));

            //Check in the current dataItem if the row is editable
            if (currentDataItem.IsInherited == true) {
                $(this).remove();
            }


        })

        //Selects all delete buttons
        $("#kgrdPermisstion tbody tr .k-grid-Delete").each(function () {
            var currentDataItem = $("#kgrdPermisstion").data("kendoGrid").dataItem($(this).closest("tr"));

            //Check in the current dataItem if the row is deletable
            if (currentDataItem.IsInherited == true) {
                $(this).remove();
            }
        })
    }
    function onclickExternal() {
        @*var note = '@Model.NoteId';
        $.ajax({
            type: "POST",
            url: "/nts/noteshared/GetLink",
            data: { 'noteId': note },

            success: function (data) {

                if (data.success) {

                    $("#divCreateLink").hide();
                    $("#ExpiryDate").data("kendoDatePicker").readonly();
                    $("#divlink").show();
                    $("#Link").val(data.Url);
                    $("#ReferenceId").val(data.data.ReferenceId);
                    $("#DivUpdate").hide();
                    $("#DivEdit").show();
                }
                else {
                    $("#divCreateLink").show();
                    $("#ExpiryDate").data("kendoDatePicker").readonly(false);
                    $("#DivEdit").hide();
                    $("#divlink").hide();
                    $("#DivUpdate").hide();
                }
                if (data.data.LinkExpiryDate != null && data.data.LinkExpiryDate != "") {
                    $("#ExpiryDate").val(data.data.LinkExpiryDate);
                }


            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert(xhr.status);
                alert(thrownError);
            },
            dataType: "json",
        });*@

        }

    $(document).ready(function () {
        //$("#divlink").hide();
        // $("#DivEdit").hide();
        //    $("#DivUpdate").hide();

        //document.getElementById("listView1").style.border = "none";
        //document.getElementById("listView1").style.marginBottom = "10px";

        $("#tabstrip").kendoTabStrip({
            animation: {
                open: {
                    effects: "fadeIn"
                }
            }
        });
        getLinkData();
       // getData1();

        var pId = '@Model.ParentId' == null ? '@Model.WorkspaceId' : '@Model.ParentId';

        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Dms/Document/ReadFolderHierarchyData?parentId=" + pId +"&noteId="+'@Model.NoteId',
                    dataType: "json"
                }
            },
        });

        $("#listView").kendoListView({
            dataSource: dataSource,
            template: kendo.template($("#template").html())
        });

    });


    function Refresh() {
        $("#kgrdLink").data("kendoGrid").dataSource.read();
    }

    function OnAddLink() {
        var win = GetMainWindow();
        win.iframeOpenUrl ="/DMS/DocumentPermission/ExternalShare?noteId=@Model.NoteId&parentId=@Model.ParentId&workspaceId=@Model.WorkspaceId&documentName=@Model.DocumentName&fileId=@Model.FileId";
        win.OpenWindow({ Title: "Create Link", Width: 800, Height:1000 });
        return false;


    }
    function onDisablePermission(inheritance)
    {
        ShowLoader('#tabstrip');       
        //alert(inheritance);
        $.ajax({
            url: '/Dms/DocumentPermission/DisableParentPermission?id=@Model.NoteId&InheritanceStatus=' + inheritance,
            type: 'POST',
            data: {},
            dataType: 'json',
            success: function (result) {
                //  $("#kgrdPermisstion").data("kendoGrid").dataSource.read();
                window.location.reload();
                HideLoader('#tabstrip');
                if (inheritance) {
                    kendo.alert("Permissions Enabled Successfully");
                }
                else {
                    kendo.alert("@Resource["PermissionsDisabledSuccessfully"]");
                }


                //getData1();
            },
            error: function (ert) {
                // $("#kgrdPermisstion").data("kendoGrid").dataSource.read();
                window.location.reload();
                HideLoader('#tabstrip');
                kendo.alert("Failed");
            }
        });
    }


    function OnRemoveLink(id) {
        
       // e.preventDefault();
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //var referenceId = $("#ReferenceId").val();
        var flag = confirm('Do you really want to delete the Link?');
        if (flag) {
            $.ajax({
                type: "POST",
                url: "/DMS/DocumentPermission/DeleteLink",
                //data: { 'noteId': dataItem.Id },
                data: { 'noteId': id },

                success: function (data) {
                    if (data.success) {
                        //$("#divlink").hide();
                        //$("#divCreateLink").show();
                        //$("#DivEdit").hide();
                        //$("#DivUpdate").hide();
                        //$("#ExpiryDate").val("");
                        //$("#ExpiryDate").data("kendoDatePicker").readonly(false);
                        ShowNotification("Link Deleted Successfully!");
                        $("#kgrdLink").data("kendoGrid").dataSource.read();

                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(xhr.status);
                    alert(thrownError);
                },
                dataType: "json",
            });
        }
        return false;
    }


    function OnCreateTag() {
        // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));


        var win = GetMainWindow();

        win.iframeOpenUrl = "/Dms/DocumentPermission/ManagePermission?NodeId=@Model.NoteId";
        win.OpenWindow({ Title: '@Html.Raw(Resource["AddPermission"])', Width: 600, Height: 700 });
        return false;
    }
    function onEditOnCreateTag(id) {

      //  e.preventDefault();
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
      //  var id = dataItem.Id;
        var win = GetMainWindow();
        //var portalId = $('#GlobalPortalId').val();
        //var TagCategoryId = $('#hiddenCategoryid').val();

        win.iframeOpenUrl = "/Dms/DocumentPermission/ManagePermission?Id=" + id + "&NodeId=@Model.NoteId";
        win.OpenWindow({ Title: '@Html.Raw(Resource["EditPermission"])', Width: 600, Height: 700 });
    }



    function OnAfterTagCreate() {

       // $("#kgrdPermisstion").data("kendoGrid").dataSource.read();
        getData1();
    }
    function OnDeleteTag(id) {       
        var flag = confirm('@SharedResource["Areyousurethatyouwanttoproceed?"]');
        
        //alert("..Delete");
       // e.preventDefault();
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        if (flag) {            
           ShowLoader($('#tabstrip'));
            $.ajax({
                //url: '@Url.Action("DeletePermission", "DocumentPermission", new { @area="Dms"})?Id=' + dataItem.Id ,
                url: '@Url.Action("DeletePermission", "DocumentPermission", new { @area="Dms"})?Id=' + id ,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {                   
                    HideLoader($('#tabstrip'));
                    if (result) {
                        getData1();
                       // $("#kgrdPermisstion").data("kendoGrid").dataSource.read();
                        kendo.alert("@SharedResource["DeletedSuccessfully"]");
                    } else {
                      //  $("#kgrdPermisstion").data("kendoGrid").dataSource.read();
                        getData1();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    //
                  //  $("#kgrdPermisstion").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }

    function OnAfterCreateuser() {
        var datas = Getdata();
      //  $("#kgrdPermisstion").data("kendoGrid").dataSource.read(datas);
        getData1();
        var winparent = window.parent.GetMainWindow();
        winparent.RefreshFileManager();
    }
    function Getdata() {

        var id = '@Model.NoteId';
        var search = { noteId: id, };
        return search;
    }

    function FilterData() {

        var data = Getdata;
      //  getData1();
      //  $("#kgrdPermisstion").data("kendoGrid").dataSource.read(data);


    }

     function OnListViewDataBound(e)
    {
        var abc = document.createElement("div")
        abc.setAttribute("class", "product");
            abc.innerHTML = "<a>"+'@Model.DocumentName'+" </a></div>"
         var el = document.getElementById("listView");
         
         el.children[0].appendChild(abc);

    }
     var statusType = '@Html.Raw(EnumExtension.EnumToJson(typeof(DmsPermissionTypeEnum)))';
    var statusTypeObj = JSON.parse(statusType);

      var statusAccess = '@Html.Raw(EnumExtension.EnumToJson(typeof(DmsAccessEnum)))';
    var statusAccessObj = JSON.parse(statusAccess);

      var statusApplies = '@Html.Raw(EnumExtension.EnumToJson(typeof(DmsAppliesToEnum)))';
    var statusAppliesObj = JSON.parse(statusApplies);

    var columnDefs = [
        {
            headerName: "Actions",
            field: "Id",
            //valueGetter : params => {
            //    return "<div  class='btn-group grid-menu' id='tree-menuBin' data-idvalue='" + params.data.Id + "  ' data-inheritted='" + params.data.IsInherited + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            //    //params.data.Id + params.data.PermissionType;
            //},
            cellRenderer: params => {
                if (params.data.IsInherited || params.data.IsInheritedFromChild) {
                    return  ""

                }
                else if ('@Model.CanManagePermission') {
                    return "<div  class='btn-group grid-menu' id='tree-menuBin' data-idvalue='" + params.data.Id + "' data-inheritted='" + params.data.IsInherited + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"

                }
            }
        },
        {
            headerName: '@Resource["Type"]',
            field: "PermissionType",
            cellRenderer: params => {
                return statusTypeObj[params.value]; //only for enum
            }
        },
        {
            headerName: '@Resource["User/Permission Group"]',
            field: "PermittedUserId"
        },
        {
            headerName: '@Resource["Access"]', field: "Access",
            cellRenderer: params => {
                return statusAccessObj[params.value]; //only for enum
            }
        },
        {
            headerName: '@Resource["AppliesTo"]', field: "AppliesTo",
            cellRenderer: params => {
                return statusAppliesObj[params.value]; //only for enum
            }
        },
        {
            headerName: '@Resource["InheritedFrom"]',  field: "InheritedFrom",
        },

    ];

    $(function () {

        getData1();

        $.contextMenu('update');
        $('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-menuBin',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                //var inherit = $trigger.data('inheritted');

                //var portalName = $trigger.data('portal-name');
               // console.log(inherit);
                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        onEditOnCreateTag(id);
                                        break;

                                    case 'delete':
                                        OnDeleteTag(id);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-edit" },
                                "delete": { name: "Delete", icon: "fas fa-trash" },


                            }
                        };

                    default:
                }
            }
        });


    });

    function getData1() {
       document.getElementById("PermissionGrid").innerHTML = "";
       gridConfig(
           "PermissionGrid",
           "/DMS/DocumentPermission/GetPermissionDetails1?noteId=@Model.NoteId",
           columnDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
    }

     var columnLinkDefs = [
        {
            headerName: "Actions",
            field: "Id",
            //cellRenderer: params => {
            //    return "<button type='button' class='btn btn-danger' onclick='OnRemoveLink(" + params.data.Id + ");'><i class='fas fa-trash'></i>&nbsp Delete</button>"
            //}
        },
        {
            headerName: "Link",
            field: "Link",
        },
        {
            headerName: "From",
            field: "From"
        },
        {
            headerName: "To", field: "To",
        },
        {
            headerName: "ExpiryDate", field: "ExpiryDate",
        },

    ];

    function getLinkData() {
        if (document.getElementById("LinkGrid") != undefined && document.getElementById("LinkGrid") != null) {
            document.getElementById("LinkGrid").innerHTML = "";
            gridConfig(
           "LinkGrid",
           "/DMS/DocumentPermission/GetDocumentShareDetailsGrid?noteId=@Model.NoteId",
           columnLinkDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
        }

    }


</script>
<div id="tabstrip">
    <ul>
        <li class="k-state-active">
            Permission/Share
        </li>
        @if (Model.IsDocument.IsTrue())
        {
            <li @*onclick="onclickExternal();"*@>
                Share Externaly
            </li>

        }
    </ul>
        <span class="ManagePermission">&nbsp;</span>
        <div class="ManagePermission">


            @if (Model.WorkspaceId.IsNotNull())
            {
                <div class="col-xs-7">
                    @*@(Html.Kendo().ListView<Synergy.App.ViewModel.FolderViewModel>()
                              .Name("listView")
                              .TagName("div")
                              .ClientTemplateId("template")
                              //.Events(events => events
                              //.DataBound("OnListViewDataBound"))
                              .DataSource(dataSource => dataSource
                              .Ajax()
                              .Read(read => read.Action("ReadFolderHierarchyData", "Document", new { area = "Dms", parentId = Model.ParentId == null ? Model.WorkspaceId : Model.ParentId,noteId=Model.NoteId }))
                              .ServerOperation(false))
                    )*@

                    <div id="listView"></div>
                    <script type="text/x-kendo-tmpl" id="template">
                        <div class="product">
                            <a href="javascript: void(0);">#:Name# > </a>
                        </div>
                    </script>
                </div>

            }

        <div class="row">

            @if (Model.DisablePermissionInheritance.HasValue && Model.DisablePermissionInheritance.Value == true)
            {
                <button type="button" class="btn btn-primary" onclick="onDisablePermission(false)" style="margin-left:20px;">@Resource["EnableInheritance"]</button>
            }
            else
            {
                <button type="button" class="btn btn-primary" onclick="onDisablePermission(true)" style="margin-left:20px;">@Resource["DisableInheritance"]</button>
            }
            @if (Model.CanManagePermission || true)
            {
                <button type="button" class="btn btn-primary" onclick="OnCreateTag()" style="margin-left:10px;">@Resource["AddPermission"]</button>
            }

        <div class="col-md-12">
           <div id="PermissionGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

            @*@(Html.Kendo().Grid<DocumentPermissionViewModel>
    ().Name("kgrdPermisstion").HtmlAttributes(new { @class = "kgrdPDM" })
    .Columns(col =>
    {
        if(Model.CanManagePermission)
        {
            col.Command(command =>
            {
                command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("onEditOnCreateTag").HtmlAttributes(new { @class = "action-icon", @title = "Edit" });
                command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteTag").HtmlAttributes(new { @class = "action-icon", @title = "Delete" });


            }).Title(SharedResource["Action"]).Width(150);
        }

        //col.Bound(c => c.Id);
        col.Bound(c => c.PermissionType).Title(@Resource["Type"]);
        col.Bound(c => c.PermittedUserId).Title(@Resource["User/Permission Group"]);
        col.Bound(c => c.Access).Title(@Resource["Access"]);
        col.Bound(c => c.AppliesTo).Title(@Resource["AppliesTo"]);
        col.Bound(c => c.InheritedFrom).Title(@Resource["InheritedFrom"]);
        //col.Bound(c => c.NoteSubject).Title("Tag Name");




    })
    //.ToolBar(toolbar =>
    //{
    //    toolbar.Custom().Text("Add Permission").Name("btnAdd").IconClass("fa fas fa-plus").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreateTag();" });
    //})
    .Scrollable(x => x.Enabled(true))

    .Sortable(srt => srt.Enabled(true))
    .Selectable(select => select.Enabled(false))
    .Filterable(f => f.Extra(false)
    .Operators(o => o.ForString(s => s.Clear()
    .Contains("Contains")
    .IsEqualTo("Is equal to")
    )))
     .Events(e => e.DataBound("onDataBound"))
    .Resizable(resize => resize.Columns(true))
    .Pageable(pageable => pageable
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5))
    .AutoBind(true)
    .DataSource(
    dataSource => dataSource
    .Ajax()
    .PageSize(10)
    .Read(read => read.Action("GetPermissionDetails", "DocumentPermission", new { area="DMS"}).Data("Getdata"))
      .Model(m =>
      {
          m.Id(model => model.Id);
          m.Id(model => model.NoteId);


      }))
    )*@
        </div>

        </div>
        </div>

        <span class="Sharing">&nbsp;</span>
        <div class="Sharing">
            @if (Model.IsDocument.IsTrue())
            {
                if (Model.FileId.IsNotNullAndNotEmpty()) {<button type='button' class='btn btn-primary' onclick='OnAddLink();'><i class='fa fas fa-plus'></i>&nbsp;Create New Link</button>

                }<br /><br />
                <div id="LinkGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
                @*<div>
                    @(Html.Kendo().Grid<NoteLinkShareViewModel>
                                    ().Name("kgrdLink")
                                    .Columns(col =>
                                    {
                                        col.Bound(c => c.Link).Filterable(flt => flt.Multi(true).Search(true)).Width(150);
                                        col.Bound(c => c.From).Filterable(flt => flt.Multi(true).Search(true)).Width(150);
                                        col.Bound(c => c.To).Filterable(flt => flt.Multi(true).Search(true)).Width(300);
                                        col.Bound(c => c.ExpiryDate).Filterable(flt => flt.Multi(true).Search(true)).Width(150).Format("{0:dd MMM yyyy}");
                                        col.Command(c => c.Custom("Delete").HtmlAttributes(new { @class = "k-primary" }).Text("Delete").Click("OnRemoveLink")).Width(160);

                                    })
                                    .ToolBar(toolbar =>
                                    {
                                        toolbar.Custom().Text("Create New Link").Name("btnAdd").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnAddLink();" });
                                    })
                                                                        //.Events(e => e.DataBound("OnDataBound"))
                                                                        .Scrollable(x => x.Enabled(false))
                                                                        .Sortable(srt => srt.Enabled(true))
                                                                        .Selectable(select => select.Enabled(false))
                                                                        .Filterable(f => f.Extra(false)
                                                                         .Operators(o => o.ForString(s => s.Clear()
                                                                          .Contains("Contains")
                                                                          .IsEqualTo("Is equal to")
                                                                        )))
                                                                        .Pageable(pageable => pageable.Refresh(true).PageSizes(true).ButtonCount(5))
                                                                        .AutoBind(true)
                                                                        .DataSource(
                                                                        dataSource => dataSource
                                                                        .Ajax()
                                                                        .PageSize(10)


                                                                        .Read(read => read.Action("GetDocumentShareDetails", "DocumentPermission", new { area = "DMS", noteId = Model.NoteId }))
                                                                        .Model(model => model.Id(p => p.Id))
                                                                                )



        )
                </div>*@
                }
        </div>


</div>