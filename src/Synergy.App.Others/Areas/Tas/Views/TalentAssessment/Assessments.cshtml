
@using Synergy.App.ViewModel;
@*@using Kendo.Mvc.UI;*@
@using Synergy.App.Common;
@*@using Kendo.Mvc.Extensions;*@
@model AssessmentViewModel
@{
    ViewData["Title"] = "Assessments";
    //Layout = "/Areas/Cms/Views/Shared/_LayoutCms.cshtml";
    Layout = null;
}
<style>
    .kgrdSalaryInfoStyle {
        width: 100% !important;
    }

    .panel-heading {
        font-size: 1.3em;
        cursor: pointer;
        padding-top: 7px !important;
        padding-bottom: 7px !important;
    }

    .panel {
        margin-top: 10px;
        border-color: #ddd;
        margin-bottom: 20px;
        background-color: #fff;
        border: 1px solid transparent;
        border-radius: 4px;
        -webkit-box-shadow: 0 1px 1px rgb(0 0 0 / 5%);
        box-shadow: 0 1px 1px rgb(0 0 0 / 5%);
    }

    .panel-heading:hover {
        background-color: #f1f1f1;
    }

    .panel-filter {
        border-color: #428bca;
    }

        .panel-filter > .panel-heading {
            color: #1a3750;
            background-color: #428bca;
            border-color: #428bca;
        }

    .btn-filter-reset {
        color: #fff;
        background-color: #428bca;
        border-color: #428bca;
    }
</style>
<script>
    $(document).ready(function () {
        $("#type").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Text",
            dataValueField: "Value",
            dataSource: [
                { Text : "Question", Value : "01"},
                { Text : "Option", Value : "02"}
            ]
        });
    });
</script>
<script type="text/javascript">

    function OnCreateAssessment() {
        
        portalId = $("#GlobalPortalId").val();
        var prms = encodeURIComponent('ownerUserId=' + '@Model.ActiveUserId');

        var url = '/Cms/Page?lo=Popup&pageType=Service&cbm=OnAfterServiceCreate&source=Create&dataAction=Create&templateCodes=TAS_ASSESSMENT&portalId=' + portalId + '&prms=' + prms;
        @*var url = '@Url.Action("NtsServicePage", "NtsService", new { @area = "Cms" })?templateid=' + tempid + '&templateCodes=' + tempCode+'&lo=Popup&cbm=OnAfterServiceCreate';*@
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: "Create Assessment", Width: 1000, Height: 600 });
        return false;
    }

    function OpenService(id,code,tempCode) {
        // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        
        var id = id;
        var source = '@RequestSourceEnum.Versioning.ToString()';
        var action = '@DataActionEnum.Edit.ToString()';
            //var pagename = "NtsServicePage";
        //if (code === 'SERVICE_STATUS_DRAFT') {
        //        source = "Edit";
        //        action = "Edit";
        //}
        var portalId = window.parent.$('#GlobalPortalId').val();

        var win = GetMainWindow();
        var url = '/Cms/Page?lo=Popup&pageType=Service&cbm=OnAfterServiceCreate&source=' + source + '&dataAction=' + action + '&templateCodes=' + tempCode + '&portalId=' + portalId + '&recordId=' + id;
        win.iframeOpenUrl = url;@*'@Url.Action("NtsServicePage", "NtsService", new { @area = "Cms" })?lo=Popup&cbm=OnAfterServiceCreate&serviceId=' + id + '&dataAction=' + action + '&portalId=' + portalId+'&pageName=NtsServiceTest';*@
        win.OpenWindow({ Title: '@Html.Raw(SharedResource["Service"])', Width: 1200, Height: 600 });
        return false;
    }

    function OnAfterServiceCreate() {
        getAssessmentData(null, null);
       // $("#kgrdAssessment").data("kendoGrid").dataSource.read();
    }
    function Delete(noteId) {

        kendo.confirm("Are you sure that you want to delete the selected item?").then(function () {
            $.ajax({
                type: "POST",
                url: "/TAS/TalentAssessment/DeleteAssessment?Id=" + noteId,

                success: function (data) {

                    kendo.alert("Assessment Deleted Successfully");
                    getAssessmentData(null, null);
                    //$("#kgrdAssessment").data("kendoGrid").dataSource.read();
                },
                dataType: "json",
            });
        }, function () {

        });
    }

    function OnCopyAssessment(assId) {
        var win = GetMainWindow();
        win.iframeOpenUrl = "/TAS/TalentAssessment/CopyAssessment?assessmentId=" + assId;
        win.OpenWindow({ Title: 'Copy Assessment', Width: 450, Height: 450 });
        return false;
    }

    function OnManageQuestions(assId, assTypeId) {
        var win = GetMainWindow();
        win.iframeOpenUrl = "/TAS/TalentAssessment/ManageQuestions?assessmentId=" + assId + "&assessmentTypeId=" + assTypeId;
        win.OpenWindow({ Title: 'Manage Questions', Width: 1400, Height: 800 });
        return false;
    }

    function OnTryout(assId, assType) {
        
        var url = "/TAS/TalentAssessment/Tryout?Id=" + assId + "&LanguageCode=ENGLISH&type=" + assType;
        LoadPartailView(url, $('#cms-content'));
    }

    //context menu--------
    $(function () {
        $.contextMenu({
            selector: '#tree-menu',
            trigger: 'left',
            build: function ($trigger, e) {

                console.log($trigger);
                var id = $trigger.data('idvalue');
                var serid = $trigger.data('sid');
                var noteid = $trigger.data('noteid');
                var scode = $trigger.data('code');
                var tempCode = $trigger.data('temcode');
                var type = $trigger.data('asstype');
                var typeid = $trigger.data('asstypeid');
                return {
                    callback: function (key, options) {
                        switch (key) {
                            case 'edit':
                                OpenService(serid, scode, tempCode);
                                break;
                            case 'copy':
                                OnCopyAssessment(id);
                                break;
                            case 'delete':
                                Delete(noteid);
                                break;
                            case 'manage':
                                OnManageQuestions(id, typeid);
                                break;
                            case 'tryout':
                                OnTryout(id, type);
                                break;
                            default:
                        }
                    },
                    items: {
                        "edit": { name: "Edit", icon: "fas fa-pencil" },
                        "copy": { name: "Copy", icon: "far fa-copy" },
                        "delete": { name: "Delete", icon: "fas fa-trash" },
                        "manage": { name: "Manage Questions", icon: "fas fa-cog" },
                        "tryout": { name: "Tryout", icon: "fas fa-play-circle" },
                        @*"gradeRating": { name: "@Html.Raw(Resource["ManageGradeRating"])", icon: "fas fa-star-half-alt" },*@
                    }
                };
            }
        });

    });

    function onSearch() {

        var srchtype = $("#type").data("kendoDropDownList").text();
        var srchtxt = $("#srchText").val();
        var search = {
            type : srchtype, searchtext : srchtxt
        };
        getAssessmentData(srchtype, srchtxt);
       // $("#kgrdAssessment").data("kendoGrid").dataSource.read(search);
    }
    function onReset() {
        $("#type").data("kendoDropDownList").value("");
        $("#srchText").val("");
        getAssessmentData("", "");
       // $("#kgrdAssessment").data("kendoGrid").dataSource.read();
    }

</script>
@*<h3>@ViewBag.Title</h3>*@

<div class="row">
    <div class="col-12">
        <div class="panel panel-filter">
            <div class="panel-heading">Filter</div>
            <div class="panel-body">
                <div class="row" style="padding:5px;">

                    <div class="col-4">
                        @*@Resource["TaskOwner"]*@
                        @*@(Html.Kendo().DropDownList().Name("type")
                             .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                             .DataTextField("Text")
                             .DataValueField("Value")
                             //.Events(e => e.Change("onChangeTaskOwner"))
                             .HtmlAttributes(new { @style ="width:80%;"  })
                             .BindTo(new List<SelectListItem>() {
                                                            new SelectListItem() { Text = "Question", Value = "01"},
                                                            new SelectListItem() { Text = "Option", Value = "02"}
                              })
                            )*@
                        <input id="type" style="width: 80%;" />

                    </div>
                    <div class="col-4">
                        @*@(Html.Kendo().TextBox().Name("srchText").Placeholder("Enter search text").HtmlAttributes(new { @style = "width:80%;" }))*@
                        <input type="text" id="srchText" name="srchText" placeholder="Enter search text" class="form-control" style="width:80%" />
                    </div>

                    <div class="col-4" style="">
                        <button class="btn btn-filter-reset" onclick="onSearch()" title="ResetFilter">Search</button>
                        <button class="btn btn-filter-reset" onclick="onReset()" title="ResetFilter">Reset</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    var columnDefs = [
        {
            headerName: "Action",
            field: "Id",         
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menu' data-idvalue='" + params.data.Id + "' data-sid='" + params.data.ServiceId + "' data-noteid='" + params.data.NoteId + "' data-code='" + params.data.ServiceStatusCode + "' data-temcode='" + params.data.TemplateCode + "' data-asstype='" + params.data.AssessmentType + "' data-asstypeid='" + params.data.AssessmentTypeId + "'><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            headerName: "Assessment Name",
            field: "AssessmentName",
        },
        {
            field: "AssessmentType",
            headerName: "Type",
        },
        {
            field: "ServiceNo",
            headerName: "Assessment Id",
        },
        {
            headerName: "Created By",
            field: "CreatedBy",
        },

      
        {
            headerName: "Created On",
            field: "CreatedDate",
            cellRenderer: params => {
              //  
                var date = new Date(params.value);
                return date.getDate() + "." + (date.getMonth() + 1) + "." + date.getFullYear();
            }
        },
        {
            headerName: "Modified On",
            field: "LastUpdatedDate",
            cellRenderer: params => {

                var date = new Date(params.value);
                return date.getDate() + "." + (date.getMonth() + 1) + "." + date.getFullYear();
            }
        },
      

    ];

    $(function () {

        getAssessmentData("","");

    });

    function getAssessmentData(srchtype, srchtxt) {
        document.getElementById("kgrdAssessment").innerHTML = "";
        gridConfig(
            "kgrdAssessment",
            "/Tas/TalentAssessment/ReadAssessmentData?type=" + srchtype + "&searchtext=" + srchtxt,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>
<div class="row">
    <div class="col-md-12">
        <button class="btn btn-primary" onclick="OnCreateAssessment()" title="Create New Assessment">Create New Assessment</button>
        <br />
        <div id="kgrdAssessment" style="width:100%;height:550px" class="ag-theme-alpine"></div>
        @*@(Html.Kendo().Grid<AssessmentViewModel>
        ().Name("kgrdAssessment")
        .Columns(col =>
        {
            //col.Command(command =>
            //{
            //    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("onEditCalendar").HtmlAttributes(new { @class = "action-icon", @title = "Edit" });
            //    // command.Custom("Manage Salary Elements").Text("<i class='fa fas fa-cog'></i>").Click("OnManageSalaryElements").HtmlAttributes(new { @class = "action-icon", @title = "Manage Salary Elements" });
            //}).Title("Action").Width(150);
            col.Bound(c => c.Id).ClientTemplate("<div class='btn-group grid-menu' id='tree-menu' data-idvalue=\"#:Id#\" data-sid=\"#:ServiceId#\" data-noteid=\"#:NoteId#\" data-code=\"#:ServiceStatusCode#\" data-temcode=\"#:TemplateCode#\" data-asstype=\"#:AssessmentType#\" data-asstypeid=\"#:AssessmentTypeId#\"><i class='fas fa-ellipsis-v'></i></div>").Width(150).Title("Action"/*"" + SharedResource["Action"] + ""*/)/*.HeaderHtmlAttributes(new { title = "Actions" })*/;
            col.Bound(c=> c.AssessmentName).Title("Assessment Name");
            col.Bound(c => c.AssessmentType).Title("Type");
            col.Bound(c => c.ServiceNo).Title("Assessment ID");
            col.Bound(c => c.CreatedBy).Title("Created By");
            col.Bound(c => c.CreatedDate).Title("Created On").Format(ApplicationConstant.DateAndTime.DefaultDateFormat);
            col.Bound(c => c.LastUpdatedDate).Title("Modified On").Format(ApplicationConstant.DateAndTime.DefaultDateFormat);

        })
        .ToolBar(toolbar =>
        {
            toolbar.Custom().Text("Create New Assessment").Name("btnAdd").IconClass("fa fas fa-plus").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreateAssessment();" });
        })
        .Scrollable(x => x.Enabled(true))
        .Sortable(srt => srt.Enabled(true))
        .Selectable(select => select.Enabled(false))
        .Filterable(f => f.Extra(false)
        .Operators(o => o.ForString(s => s.Clear()
        .Contains("Contains")
        .IsEqualTo("Is equal to")
        )))
        .Resizable(resize => resize.Columns(true))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .AutoBind(true)
        .DataSource(
        dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Read(read => read.Action("ReadAssessmentData", "TalentAssessment", new { Area="TAS"}))
        .Model(model => model.Id("Id")))
        )*@
    </div>
</div>

