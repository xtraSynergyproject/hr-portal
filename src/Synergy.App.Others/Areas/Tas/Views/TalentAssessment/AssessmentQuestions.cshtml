@*@using Kendo.Mvc.UI;*@
@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using Synergy.App.Business;
@model AssessmentQuestionsViewModel
@{
    Layout = ViewBag.Layout ?? null;
}
<style>
    .btn-default {
        background: #e4e7eb;
        margin-top: 5px;
    }

    .k-editable-area {
        height: 150px;
    }

    .job_criteria {
        margin-top: 10px;
    }

    .fixed-content {
        top: 0;
        bottom: 0;
        position: sticky;
        height: 633px;
        overflow-y: scroll;
        overflow-x: hidden;
    }

    table {
        width: 100% !important;
    }
</style>
<script>
    $(document).ready(function () {
        $("#TopicId").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "NoteSubject",
            dataValueField: "Id",
            value: "@Model.TopicId",
            height: 300,
            filter: "contains",
            autoBind: true,
            dataSource: {
                transport: {
                    read: {
                        url: "/Tas/TalentAssessment/GetTopicList",
                    }
                }
            }
        });

        $("#IndicatorId").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@Model.IndicatorId",
            height: 300,
            filter: "contains",
            autoBind: true,
            dataSource: {
                transport: {
                    read: {
                        url: "/Tas/TalentAssessment/GetIndicatorList",
                    }
                }
            }
        });

        $("#CompentencyLevelId").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@Model.CompentencyLevelId",
            height: 300,
            filter: "contains",
            autoBind: true,
            dataSource: {
                transport: {
                    read: {
                        url: "/Tas/TalentAssessment/GetCompetencyLevelList",
                    }
                }
            }
        });


        $("#AssessmentTypeId").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@Model.AssessmentTypeId",
            height: 300,
            filter: "contains",
            autoBind: true,
            dataSource: {
                transport: {
                    read: {
                        url: "/Cms/query/GetLOVIdNameList?lovType=ASSESSMENT_TYPE",
                    }
                }
            }
        });
    });

    function ShowErrors(err) {
        $(".text-danger").removeClass("validation-summary-valid");
        $(".text-danger").addClass("validation-summary-errors");
        //var msg = ExtractError(err);
        $(".text-danger ul").html(err.error);
    }
    var onAjaxSuccess = function (res) {

         if (res.success) {
            ShowNotification("@SharedResource["SavedSuccessfully"]", "success");
             var portalId = $('#GlobalPortalId').val();
            // var customUrl = encodeURIComponent('id=' + res.result.Id);
            // var url = '/Cms/Page?templateCodes=TAS_QUESTION&portalId=' + portalId + '&customUrl=' + customUrl;
            // LoadCmsPartialView(url, "Custom", false, "", "","","","", $("#QuestionDiv"))
             window.location.href = "/Tas/TalentAssessment/AssessmentQuestions?noteId=" + res.result.NoteId + "&lo=Popup";
             window.parent.referesh();
            // LoadPartailView(url, $("#QuestionDiv"));
         }
        else {
             $(".text-danger").removeClass("validation-summary-valid");
             $(".text-danger").addClass("validation-summary-errors");
             $(".text-danger").html(res.error);
             HideLoader($('#update'));
        }

    };
    function onGridSave(arg) {


        //if (arg.model.OptionType =="") {
        //    arg.preventDefault();
        //    alert("Please select Option Type");


        //    return false;
        //}
        //if (arg.model.CriteriaType == "") {
        //    arg.preventDefault();
        //    alert("Please Select Criteria Type");

        //    //
        //    return false;
        //}
        //if (arg.model.CriteriaType != "") {

        //    $.ajax({
        //        type: "GET",
        //        dataType: "json",
        //        url: "/Recruitment/JobDescription/GetCriteriaNameById?id=" + arg.model.CriteriaType + '&type=CRITERIATYPE',
        //        success: function (name) {
        //            //alert(tablename);

        //            arg.model.CriteriaTypeName = name;
        //            tempSavedRecords = $('#GridJobCriteria').data('kendoGrid').dataSource.data();
        //            tempSavedRecords = tempSavedRecords.toJSON();
        //        },
        //    });

        //}

    }
    function onAddNewChoice()
    {
         var Id="@Guid.NewGuid().ToString()";
        $("#GridOptions").jsGrid("insertItem", {  Option: "New choice",
                OptionArabic: "New choice",
                IsRightAnswer: false,
                Score: 0.0,
                AnswerKey: "",
                ParentNoteId: "@Model.NoteId",
                DataAction: "@DataActionEnum.Create",
                Id: Id,
                //isNew: true,
            OptionType: "@Convert.ToInt32(OptionTypeEnum.Option)"
        }).done(function ()
        {
            $("#GridOptions").data("JSGrid").updateItem();
        });
        @*var dataSource = $("#GridOptions").data("kendoGrid").dataSource;

        dataSource.add(
            {
                Option: "New choice",
                OptionArabic: "New choice",
                IsRightAnswer: false,
                Score: 0.0,
                AnswerKey: "",
                ParentNoteId: "@Model.NoteId",
                DataAction: "@DataActionEnum.Create",
                Id: Id,
                //isNew: true,
                OptionType: "@Convert.ToInt32(OptionTypeEnum.Option)"
            }
        );
        dataSource.sync();
        var grid = $('#GridOptions').data('kendoGrid');
        grid.saveChanges();*@
        HideLoader($('#QuestionDiv'));
    }
    function onAddAllOfAboveChoice()
    {

        $("#GridOptions").jsGrid("insertItem", {  Option: "All Of the Above",
                OptionArabic: "All Of the Above",
                IsRightAnswer: false,
                Score: 0.0,
                AnswerKey: "",
                ParentNoteId: "@Model.NoteId",
                DataAction: "@DataActionEnum.Create",
                Id: "@Guid.NewGuid().ToString()",
                OptionType: "@Convert.ToInt32(OptionTypeEnum.AllOfAbove)"
        }).done(function ()
        {
            $("#GridOptions").data("JSGrid").updateItem();
        });
         @*var dataSource = $("#GridOptions").data("kendoGrid").dataSource;
        dataSource.add(
            {
                Option: "All Of the Above",
                OptionArabic: "All Of the Above",
                IsRightAnswer: false,
                Score: 0.0,
                AnswerKey: "",
                ParentNoteId: "@Model.NoteId",
                DataAction: "@DataActionEnum.Create",
                Id: "@Guid.NewGuid().ToString()",
                OptionType: "@Convert.ToInt32(OptionTypeEnum.AllOfAbove)"
            }
        );
        dataSource.sync();
        $('#GridOptions').data('kendoGrid').saveChanges();*@
        HideLoader($('#QuestionDiv'));

    }
    function onAddNoneOfAboveChoice()
    {
         @*var dataSource = $("#GridOptions").data("kendoGrid").dataSource;
        dataSource.add(
            {
                Option: "None Of the Above",
                OptionArabic: "None Of the Above",
                IsRightAnswer: false,
                Score: 0.0,
                AnswerKey: "",
                ParentNoteId: "@Model.NoteId",
                DataAction: "@DataActionEnum.Create",
                Id: "@Guid.NewGuid().ToString()",
                OptionType: "@Convert.ToInt32(OptionTypeEnum.NoneOfAbove)"
            }
        );
        dataSource.sync();
        $('#GridOptions').data('kendoGrid').saveChanges();*@
        HideLoader($('#QuestionDiv'));
         $("#GridOptions").jsGrid("insertItem", {   Option: "None Of the Above",
                OptionArabic: "None Of the Above",
                IsRightAnswer: false,
                Score: 0.0,
                AnswerKey: "",
                ParentNoteId: "@Model.NoteId",
                DataAction: "@DataActionEnum.Create",
                Id: "@Guid.NewGuid().ToString()",
                OptionType: "@Convert.ToInt32(OptionTypeEnum.NoneOfAbove)"
        }).done(function ()
        {
            $("#GridOptions").data("JSGrid").updateItem();
        });
    }

    function onSave(e)
    {
       ShowLoader($('#QuestionDiv'));
        if ($('#Question').val() == "") {
            $(".text-danger").removeClass("validation-summary-valid");
            $(".text-danger").addClass("validation-summary-errors");
            msg = "Question is required <br/>";
            $(".text-danger").html(msg);
           HideLoader($('#QuestionDiv'));
            e.preventDefault();
            return false;
        }
        if ($('#QuestionArabic').val() == "") {
            $(".text-danger").removeClass("validation-summary-valid");
            $(".text-danger").addClass("validation-summary-errors");
            msg = "Question Arabic is required <br/>";
            $(".text-danger").html(msg);
            HideLoader($('#QuestionDiv'));
            e.preventDefault();
            return false;
        }

        if ($('#CompentencyLevelId').val() == "") {
            $(".text-danger").removeClass("validation-summary-valid");
            $(".text-danger").addClass("validation-summary-errors");
            msg = "Compentency Level is required <br/>";
            $(".text-danger").html(msg);
            HideLoader($('#QuestionDiv'));
            e.preventDefault();
            return false;
        }

        if ("@Model.DataAction" == "@DataActionEnum.Edit")
        {

          //  var cgrid1 = $("#GridOptions").data("kendoGrid");
            var cgrid1 = $("#GridOptions").data("JSGrid");
            var detail = JSON.stringify(cgrid1.data);
            $("#Options").val(detail);
           // var ccount = cgrid1.dataSource.data().length;
           // if (ccount > 0) {
            //    var detail = JSON.stringify(cgrid1.dataSource.data());
             //   $("#Options").val(detail);
           // }
        }

    }

    function onFileUploadSuccess(e) {

        if (e.response.success) {
            $("#QuestionAttachmentId").val(e.response.fileId);
            var newUrl = "/cms/Document/GetFileMongo?fileId=" + $("#QuestionAttachmentId").val();
            $("#downloadattachment").attr("href", newUrl);
            // set file id to hdden fileid proprty
            //$.ajax({
            //    url: "/user/ChangeUserProfilePhoto?photoId=" + e.response.fileId,
            //    type: "GET",
            //    contentType: "application/json",
            //    dataType: "JSON",
            //    success: function (response) {
            //        //
            //        $(".avatar-myProfile").attr("src", "/cms/Document/GetImageMongo?id=" + e.response.fileId);

            //    }
            //});

        }
        else {

        }
        return true;
    }
    function onArabicFileUploadSuccess(e) {

        if (e.response.success) {
            $("#QuestionArabicAttachmentId").val(e.response.fileId);
            var newUrl = "/cms/Document/GetFileMongo?fileId=" + $("#QuestionArabicAttachmentId").val();
            $("#downloadattachmentArabic").attr("href", newUrl);
            // set file id to hdden fileid proprty
            //$.ajax({
            //    url: "/user/ChangeUserProfilePhoto?photoId=" + e.response.fileId,
            //    type: "GET",
            //    contentType: "application/json",
            //    dataType: "JSON",
            //    success: function (response) {
            //        //
            //        $(".avatar-myProfile").attr("src", "/cms/Document/GetImageMongo?id=" + e.response.fileId);

            //    }
            //});

        }
        else {

        }
        return true;
    }
    function ViewAttachment(attachmentId)
    {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ViewAttachment", "Task", new { @area= "Cms" })?fileId=' + attachmentId;
        win.OpenWindow({ Title: 'View Attachment', Width: 1000, Height: 1000 });
        return false;
    }
</script>
<div class="row" id="QuestionDiv">
    @if (Model.DataAction == DataActionEnum.Edit)
    {
        <div class="col-3 card fixed-content">
            @*<div id="toolbar"></div>*@
            <button class="btn btn-default" onclick="onAddNewChoice()">
                Add New choice
            </button>
            <button class="btn btn-default" onclick="onAddAllOfAboveChoice()">
                Add "All of the Above" choice
            </button>
            <button class="btn btn-default" onclick="onAddNoneOfAboveChoice()">
                Add "None of the Above" choice
            </button>
        </div>

    }
    <div @*class="col-9 card"*@ id="maindiv">
        <form asp-controller="TalentAssessment" asp-action="ManageQuestions" method="post" class="form-horizontal" id="myForm"
              data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
              data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
              data-ajax="true" data-ajax-method="POST">
            <div class="text-danger" asp-validation-summary="All"></div>
            <input type="submit" class="btn btn-primary" value="Save" id="submitBtn" onclick="onSave(event)" />
            <div class="row" style="padding:10px;">
                <div class="col-lg-12 label-div" style=" padding-bottom: 5px;">
                    Topic<span style="color:red">&nbsp;*</span>
                </div>
                <div class="col-md-6">
                    @*@(Html.Kendo().DropDownListFor(x=>x.TopicId)
                                         .DataSource(source =>
                                         {
                                             source.Read(read =>
                                             {
                                                 read.Action("GetTopicList", "TalentAssessment", new { area = "Tas" });
                                             });
                                         })

                                         .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption).Height(300)
                                         .Filter(FilterType.Contains)
                                         .DataTextField("NoteSubject")
                                         .DataValueField("Id")
                                         .HtmlAttributes(new { @class = "form-control", @style = "width:400px", @readonly = "readonly" })
                        )*@
                    <input asp-for="TopicId" id="TopicId" class="form-control" style="width: 400px;" readonly />

                </div>
                <div class="col-lg-12 label-div" style=" padding-bottom: 5px;">
                    Indicator<span style="color:red">&nbsp;*</span>
                </div>
                <div class="col-md-6">
                    @*@(Html.Kendo().DropDownListFor(x=>x.IndicatorId)
                                         .DataSource(source =>
                                         {
                                             source.Read(read =>
                                             {
                                                 read.Action("GetIndicatorList", "TalentAssessment", new { area = "Tas" });
                                             });
                                         })

                                         .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption).Height(300)
                                         .Filter(FilterType.Contains)
                                         .DataTextField("Name")
                                         .DataValueField("Id")
                                         .HtmlAttributes(new { @class = "form-control", @style = "width:400px" })
                        )*@
                    <input asp-for="IndicatorId" id="IndicatorId" class="form-control" style="width: 400px;" />

                </div>

                <div class="col-lg-12 label-div" style=" padding-bottom: 5px;">
                    Competency Level<span style="color:red">&nbsp;*</span>
                </div>
                <div class="col-md-6">
                    @*@(Html.Kendo().DropDownListFor(x=>x.CompentencyLevelId)
                                         .DataSource(source =>
                                         {
                                             source.Read(read =>
                                             {
                                                 read.Action("GetCompetencyLevelList", "TalentAssessment", new { area = "Tas" });
                                             });
                                         })

                                         .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption).Height(300)
                                         .Filter(FilterType.Contains)
                                         .DataTextField("Name")
                                         .DataValueField("Id")
                                         .HtmlAttributes(new { @class = "form-control", @style = "width:400px" })
                        )*@
                    <input asp-for="CompentencyLevelId" id="CompentencyLevelId" class="form-control" style="width: 400px;" />

                </div>

                <div class="col-lg-12 label-div" style=" padding-bottom: 5px;">
                    Assessment Type<span style="color:red">&nbsp;*</span>
                </div>
                <div class="col-md-6">
                    @*@(Html.Kendo().DropDownListFor(x=>x.AssessmentTypeId)
                                     .DataSource(source =>
                                     {
                                         source.Read(read =>
                                         {
                                             read.Action("GetLOVIdNameList", "query", new { area = "Cms", @lovType="ASSESSMENT_TYPE" });
                                         });
                                     })
                                     .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption).Height(300)
                                     .Filter(FilterType.Contains)
                                     .DataTextField("Name")
                                     .DataValueField("Id")
                                     .HtmlAttributes(new { @class = "form-control", @style = "width:400px" })
                        )*@
                    <input asp-for="AssessmentTypeId" id="AssessmentTypeId" class="form-control" style="width: 400px;" />

                </div>

                <div class="col-12 pad-10">
                    <input type="checkbox" asp-for="EnableComment" id="EnableComment" />
                    <label for="EnableComment">Enable Comment</label>
                </div>

                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <div>
                            <label for="Question">Question</label>
                            <span style="float:right;">
                                @*@(Html.Kendo().CheckBox().Name("enableHtml").Label("Enable HTML"))*@
                                <input type="checkbox" id="enableHtml" />
                                <label>Enable HTML</label>
                            </span>
                        </div>
                        <div>
                            @*@(Html.Kendo().EditorFor(x => x.Question).Value(Html.Raw(Model.Question.HtmlDecode()).ToString())
                                .HtmlAttributes(new { @style = "width: 100%;", aria_label = "editor" })
                                .StyleSheets(css => css.Add(Url.Content("~/css/editorStyles.css")))
                                    .Tools(tools => tools
                                    .Clear()
                                    .Formatting()
                                    .Bold().Italic().Underline().Strikethrough()
                                    .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
                                    .InsertUnorderedList().InsertOrderedList()
                                    //.Outdent().Indent()
                                    .CreateLink().Unlink()
                                    //.TableEditing()
                                    .ViewHtml()
                                    .FontName()
                                    .FontSize()
                                    .ForeColor().BackColor()
                                    )
                                    )*@
                        </div>

                    </div>
                </div>
                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <div>
                            <label for="QuestionArabic">Question Arabic</label>
                            @*@(Html.Kendo().EditorFor(x => x.QuestionArabic).Value(Html.Raw(Model.QuestionArabic.HtmlDecode()).ToString())
                                .HtmlAttributes(new { @style = "width: 100%;", aria_label = "editor" })
                                .StyleSheets(css => css.Add(Url.Content("~/css/editorStyles.css"))
                                )
                                    .Tools(tools => tools
                                    .Clear()
                                    .Formatting()
                                    .Bold().Italic().Underline().Strikethrough()
                                    .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
                                    .InsertUnorderedList().InsertOrderedList()
                                    //.Outdent().Indent()
                                    .CreateLink().Unlink()
                                    //.TableEditing()
                                    .ViewHtml()
                                    .FontName()
                                    .FontSize()
                                    .ForeColor().BackColor()
                                    )
                                    )*@
                        </div>
                    </div>
                </div>
                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <div>
                            <label for="QuestionDescription">Question Description</label>
                            @*@(Html.Kendo().EditorFor(x => x.QuestionDescription).Value(Html.Raw(Model.QuestionDescription.HtmlDecode()).ToString())
                                .HtmlAttributes(new { @style = "width: 100%;", aria_label = "editor" })
                                .StyleSheets(css => css.Add(Url.Content("~/css/editorStyles.css"))
                                )
                                    .Tools(tools => tools
                                    .Clear()
                                    .Formatting()
                                    .Bold().Italic().Underline().Strikethrough()
                                    .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
                                    .InsertUnorderedList().InsertOrderedList()
                                    //.Outdent().Indent()
                                    .CreateLink().Unlink()
                                    //.TableEditing()
                                    .ViewHtml()
                                    .FontName()
                                    .FontSize()
                                    .ForeColor().BackColor()
                                    )
                                    )*@
                        </div>
                    </div>
                </div>
                <div class="col-12 pad-10">
                    <div>
                        <label for="QuestionDescriptionArabic">Question Description Arabic</label>
                        @*@(Html.Kendo().EditorFor(x => x.QuestionDescriptionArabic).Value(Html.Raw(Model.QuestionDescriptionArabic.HtmlDecode()).ToString())
                            .HtmlAttributes(new { @style = "width: 100%;", aria_label = "editor" })
                            .StyleSheets(css => css.Add(Url.Content("~/css/editorStyles.css"))
                            )
                                .Tools(tools => tools
                                .Clear()
                                .Formatting()
                                .Bold().Italic().Underline().Strikethrough()
                                .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
                                .InsertUnorderedList().InsertOrderedList()
                                //.Outdent().Indent()
                                .CreateLink().Unlink()
                                //.TableEditing()
                                .ViewHtml()
                                .FontName()
                                .FontSize()
                                .ForeColor().BackColor()
                                )
                                )*@
                    </div>
                </div>
                <div class="col-12 pad-10">
                    <label for="QuestionAttachment">Description Image (English)</label>
                    @*@(Html.Kendo().Upload().Multiple(false)
                            .Name("file")
                            .Async(a => a
                            .Save("SaveFile", "Document", new { @area = "cms" })
                            .AutoUpload(true)
                            )
                            .Events(e => e.Success("onFileUploadSuccess")
                            )
                                //.Files(files =>
                                //{
                                //    if (Model != null && Model.ContractAttachmentSelectedFile != null)
                                //    {
                                //        files.Add().Name(Model.ContractAttachmentSelectedFile.FileName).Extension(Model.ContractAttachmentSelectedFile.FileExtension).Size(Model.ContractAttachmentSelectedFile.ContentLength);
                                //    }
                                //})
                                //.Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".png" }).MaxFileSize(2097152))
                                .HtmlAttributes(new { @class = "hr-xx-large" })
                        )*@
                    @if (Model.QuestionAttachmentId.IsNotNullAndNotEmpty())
                    {
                        <a href="/cms/Document/GetFileMongo?fileId=@Model.QuestionAttachmentId" target="_blank" id="downloadattachment"><i class="fas fa-download" title="Download"></i></a>
                        @*<a href="#" onclick="ViewAttachment('@Model.CoverLetterId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                        <i class="fas fa-eye view_attach" title="Preview" onclick="ViewAttachment('@Model.QuestionAttachmentId');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                    }
                </div>
                <div class="col-12 pad-10">
                    <label for="QuestionAttachment">Description Image (Arabic)</label>
                    @*@(Html.Kendo().Upload().Multiple(false)
                            .Name("AttachmentValue1")
                            .Async(a => a
                            .Save("Save1", "Document", new { @area = "cms" })
                            .AutoUpload(true)
                            )
                            .Events(e => e.Success("onArabicFileUploadSuccess")
                            )
                                //.Files(files =>
                                //{
                                //    if (Model != null && Model.ContractAttachmentSelectedFile != null)
                                //    {
                                //        files.Add().Name(Model.ContractAttachmentSelectedFile.FileName).Extension(Model.ContractAttachmentSelectedFile.FileExtension).Size(Model.ContractAttachmentSelectedFile.ContentLength);
                                //    }
                                //})
                                //.Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".png" }).MaxFileSize(2097152))
                                .HtmlAttributes(new { @class = "hr-xx-large" })
                        )*@
                    @if (Model.QuestionArabicAttachmentId.IsNotNullAndNotEmpty())
                    {
                        <a href="/cms/Document/GetFileMongo?fileId=@Model.QuestionArabicAttachmentId" target="_blank" id="downloadattachmentaArabic"><i class="fas fa-download" title="Download"></i></a>
                        @*<a href="#" onclick="ViewAttachment('@Model.CoverLetterId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                        <i class="fas fa-eye view_attach" title="Preview" onclick="ViewAttachment('@Model.QuestionArabicAttachmentId');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                    }
                </div>
            </div>
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.DataAction)
            @Html.HiddenFor(x => x.NoteId)
            @Html.HiddenFor(x => x.Json)
            @Html.HiddenFor(x => x.DataJson)
            @Html.HiddenFor(x => x.CompanyId)
            @Html.HiddenFor(x => x.CreatedBy)
            @Html.HiddenFor(x => x.CreatedDate)
            @Html.HiddenFor(x => x.LastUpdatedBy)
            @Html.HiddenFor(x => x.LastUpdatedDate)
            @Html.HiddenFor(x => x.Options)
            @Html.HiddenFor(x => x.QuestionAttachmentId)
            @Html.HiddenFor(x => x.QuestionArabicAttachmentId)
            @Html.HiddenFor(x => x.TopicId)
            @Html.HiddenFor(x => x.CompentencyLevelId)
            @if (Model.DataAction == DataActionEnum.Edit)
            {
                <div class="row">

                    <div class="col-sm-12 col-md-12 col-lg-12 col-body-1-1 pad-10">
                        @*<input type="submit" class="btn btn-primary" value="Save" id="submitBtnOption" onclick="onSave(event)" />*@
                        <div class="row job_criteria" style="margin-left:0px;margin-right:20px;">
                            <div class="col"><span class="job_criteria_span">Options</span></div>
                        </div>
                        <div class="row row-body-1" style="margin-left:0px;margin-right:20px;">
                            <div class="col col-body-1-1">
                                <div class="row">
                                    <div class="col visible">
                                        <div id="GridOptions"></div>
                                        @*@(Html.Kendo().Grid<AssessmentQuestionsOptionViewModel>()

                                            .Name("GridOptions")



                                            .Columns(columns =>
                                            {

                                                columns.Command(command => {
                                                    command.Destroy().Text(" ");

                                                }).Width(120);
                                                columns.Bound(c => c.OptionId).Visible(false);
                                                columns.Bound(c => c.Option);

                                                columns.Bound(c => c.OptionArabic);
                                                columns.Bound(c => c.IsRightAnswer);
                                                columns.Bound(c => c.Score);
                                                columns.Bound(c => c.AnswerKey);
                                                columns.Bound(c => c.OptionType);/*.EditorTemplateName("JobAdvtCriteriaType").ClientTemplateId("criteriatype_template")*/;
                                                columns.Bound(c => c.SequenceOrder);


                                            })
                                            //.Events(e => e.Save("onGridSave"))

                                            .Editable(editable => editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true)

                                                                ).Resizable(x=>x.Columns(true))
                                             .Scrollable(x => x.Enabled(true))
                                                        .Sortable(srt => srt.Enabled(true))
                                                        .Selectable(select => select.Enabled(false))
                                                        .Filterable(f => f.Extra(false)
                                                                                            .Operators(o => o.ForString(s => s.Clear()
                                                                                            .Contains("Contains")
                                                                                            .IsEqualTo("Is equal to")
                                                                                        )))
                                                        .Pageable(pageable => pageable
                                                        .Refresh(true)

                                                        .PageSizes(true)
                                                        .ButtonCount(5))
                                                        .AutoBind(true)
                                                        .DataSource(
                                                        dataSource => dataSource
                                                        .Ajax()
                                                        .PageSize(10)
                                                        .Batch(true)
                                                .ServerOperation(false)

                                                         .Read(read => read.Action("ReadQuestionOptions", "TalentAssessment", new { questionNoteId = Model.NoteId,area="Tas" }))
                                                        //.Update(update => update.Action("Update", "TalentAssessment"))
                                                        .Model(model =>
                                                        {
                                                            model.Id(p => p.OptionId);
                                                            model.Field(p => p.OptionType).Editable(false);
                                                        }
                                                        ))
                                                  )*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </form>


    </div>
</div>
<script>


    $("#GridOptions").jsGrid({
        width: "100%",
        height: "600px",

        inserting: false,
        editing: true,
        sorting: true,
        paging: true,
        autoload: true,
        pageSize: 14,
        pageButtonCount: 5,
        deleteConfirm: "Do you really want to delete client?",

        //data: clients,
        controller: {
            loadData: function (filter) {
                return $.ajax({
                    type: "GET",
                    url: "/tas/TalentAssessment/ReadQuestionOptions?questionNoteId=@Model.NoteId",
                    data: filter,
                    dataType: "json"
                });
            },

            updateItem: function (item) {

            },
            deleteItem: function (item)
            {
                //OnDeleteQuestion(item.NoteId);
            }
        },
        onItemEditing: function (e) {
            if (e.grid._container.find(".jsgrid-edit-row")[0] != undefined) {
                //
                e.grid.updateItem();
            }
                                },

        fields: [
            { name: "Option", type: "text" },
            { name: "OptionArabic", type: "text", },
            { name: "IsRightAnswer", type: "checkbox", },
            { name: "Score", type: "number", },
            { name: "AnswerKey", type: "text", },
            {
                name: "OptionType", type: "text", editing: false, itemTemplate: function (value)
                {
                    if (value == 0) {
                        return "Option";
                    }
                    else if (value == 1) {
                        return "All Of Above";
                    }
                    else
                    {
                        return "None Of Above";
                    }
                }
            },
            { type: "control" ,editButton:false    },

        ]
    });


</script>
<script>
    $(document).ready(function () {

        if ('@Model.DataAction' == '@DataActionEnum.Create') {
            $("#maindiv").addClass("col-12 card");
        }
        else
        {
            $("#maindiv").addClass("col-9 card");
        }
        $(".k-editor-toolbar-wrap").hide();
        if ($("#enableHtml").checked != true) {
            $(".k-editor-toolbar-wrap").hide();
        }

        $("#enableHtml").click(function () {
            if (this.checked) {
                $(".k-editor-toolbar-wrap").show();
            }
            else {
                $(".k-editor-toolbar-wrap").hide();
            }
        });
     //   var grid = $("#GridOptions").data("kendoGrid");
        //$("#GridOptions").data('kendoGrid').table.kendoSortable({
        //    filter: ">tbody >tr:not('.k-grid-edit-row')",
        //    hint: $.noop,
        //    cursor: "move",
        //    placeholder: function (element) {
        //        return element.clone().addClass("k-state-hover").css("opacity", 0.65);
        //    },
        //    container: "#GridOptions tbody",
        //    change: function (e) {
        //        var skip = $("#GridOptions").data('kendoGrid').dataSource.skip(),
        //            oldIndex = e.oldIndex + skip,
        //            newIndex = e.newIndex + skip,
        //            data = $("#GridOptions").data('kendoGrid').dataSource.data(),
        //            dataItem = $("#GridOptions").data('kendoGrid').dataSource.getByUid(e.item.data("uid"));

        //        $("#GridOptions").data('kendoGrid').dataSource.pushDestroy(dataItem);
        //        $("#GridOptions").data('kendoGrid').dataSource.insert(newIndex, dataItem);
        //    }
        //});
    });



</script>