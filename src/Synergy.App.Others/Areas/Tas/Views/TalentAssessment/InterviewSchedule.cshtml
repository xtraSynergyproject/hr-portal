@using Synergy.App.ViewModel;
@*@using Kendo.Mvc.UI;*@
@using Synergy.App.Common;
@*@using Kendo.Mvc.Extensions;*@
@{
    ViewBag.Title = "Manage Assessment Schedule";
    //Layout = "/Areas/Cms/Views/Shared/_LayoutCms.cshtml";
    Layout = null;
}


<style>

    ::-webkit-scrollbar {
        width: 10px;
        background-color: #F5F5F5;
    }
    /* basic positioning */
    .legend {
        list-style: none;
    }

        .legend li {
            float: left;
            margin-right: 10px;
        }

        .legend span {
            border: 1px solid #ccc;
            float: left;
            width: 12px;
            height: 12px;
            margin: 2px;
        }
        /* your colors */
        .legend .superawesome {
            background-color: #ff00ff;
        }

        .legend .awesome {
            background-color: #00ffff;
        }

        .legend .kindaawesome {
            background-color: #0000ff;
        }

        .legend .notawesome {
            background-color: #000000;
        }

    .k-scheduler .k-scheduler-table td, .k-scheduler .k-scheduler-table th {
        /*box-sizing: content-box;*/
        height: 100px;
        /*width:50px*/
        background-color: #ffff !important;
        color: #000000 !important;
    }

    .k-widget.k-tooltip {
        border-color: #92c100;
        background-color: #92c100;
        color: #fff;
    }

    /*.k-event {
        height: auto !important;
    }*/

    .k-task {
        color: black;
    }

    .event-template img {
        float: left;
        margin: 0 8px;
    }

    body, h1, h2, h3 {
        margin: 0px;
    }

    .k-window {
        /*height: 500px;
            border-color: rgba(0,0,0,.2);
            box-shadow: 1px 1px 7px 1px rgba(128,128,128,.2);
            background-color: #fff;*/
    }

    /*.k-widget {
                width:100%;
            }*/

    .k-dropdown {
        width: 100%
    }

    .k-event, .k-task-complete {
        border-color: white;
        background: white;
        color: black;
    }

    .k-icon k-i-reload {
    }

    .k-toolbar, .panelheader, .k-grid-pager {
        background-color: #ffff !important;
    }
</style>

<script>
    var cal, resizeThrottled;
    var useCreationPopup = true;
    var useDetailPopup = true;
    var datePicker, selectedCalendar;

    function getCalendarList() {
        
        var data = FilterScheduler();
        $.ajax({
            type: "GET",
            data: data,
            url: "/Tas/TalentAssessment/ReadCalendarInterviewScheduleDataTui?type=" + data.type + "&jobTitle=" + data.jobTitle + "&proctor=" + data.proctor + "&interviewer=" + data.interviewer + "&title=" + data.title + "&candidate=" + data.candidate,
            dataType: 'json',
            success: function (res) {
                //
                //var $calEl = $('#calendar').tuiCalendar({
                //    defaultView: 'month',
                //    taskView: true,
                //    template: {
                //        monthDayname: function (dayname) {
                //            return '<span class="calendar-week-dayname-name">' + dayname.label + '</span>';
                //        }
                //    }
                //});
                //var calendarInstance = $calEl.data('tuiCalendar');
                ////for (var i = 0; i <= res.length - 1; i++) {
                ////    var data = res[i];
              //  calendarInstance.createSchedules(res.Value);
                //}
                //document.getElementById("scheduler").value = JSON.stringify(res.Value);
                setSchedules(res.Value);
            },
        });





    }

    function setSchedules(value) {
        
        cal.clear();
        //generateSchedule(cal.getViewName(), cal.getDateRangeStart(), cal.getDateRangeEnd());
        ScheduleList = value;
       cal.createSchedules(ScheduleList);
        refreshScheduleVisibility();
    }

    function refreshScheduleVisibility() {
        var calendarElements = Array.prototype.slice.call(document.querySelectorAll('#calendarList input'));

        CalendarList.forEach(function (calendar) {
            cal.toggleSchedules(calendar.id, !calendar.checked, false);
        });

        cal.render(true);

        calendarElements.forEach(function (input) {
            var span = input.nextElementSibling;
            span.style.backgroundColor = input.checked ? span.style.borderColor : 'yellow';
        });
    }

    $(document).ready(function () {

        $("#filterType1").hide();

        $("#Candidate").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            autoBind: true,
            autoClose: false,
            height: 300,
            dataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/Tas/TalentAssessment/GetAssessmentUserList",
                    }
                },
            }),
        });

        $("#Job").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Name",
            filter: "contains",
            autoBind: true,
            autoClose: false,
            height: 300,
            dataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/Tas/TalentAssessment/GetJobTitle",
                    }
                },
            }),
        });

        $("#interviewer").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            autoBind: true,
            autoClose: false,
            height: 300,
            dataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        dataType: "json",
                        url: "/Cms/Team/GetIdNameListByGroupCode",
                        data: TeamFilter,
                    }
                },
            }),
        });

        $("#proctor").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            autoBind: true,
            autoClose: false,
            height: 300,
            dataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/Tas/TalentAssessment/GetAssessmentProctorList",
                    }
                },
            }),
        });

        $("#Type").kendoDropDownList({
            optionLabel: "Select Assessment...",
            dataTextField: "Name",
            dataValueField: "EnumId",
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/Home/GetEnumIdNameList?enumType=AssessmentScheduleTypeEnum",
                    }
                }
            }
        });

        setTimeout(function () { getCalendarList(); }, 3000);

       
    });




    function CloseSchedule(res) {

        var scheduler = $("#scheduler").data("kendoScheduler");
        scheduler.dataSource.read();
        //alert(res.success);
        ShowNotification("Saved Successfully!");
    }

    function onDataBound(e) {
        var eventElement;
        var event;
        var data = e.sender.options.dataSource._data;
        var view = e.sender.options.dataSource._view;
        for (var idx = 0, length = data.length; idx < length; idx++) {
            event = data[idx];

            //get event element
            eventElement = $("[data-uid=" + event.uid + "]"); //view.element.find("[data-uid=" + event.uid + "]");
            //set the backgroud of the element
            eventElement.css("background-color", event.Color);
        }
    }

    function changeFilterType() {
    }

    function filterData() {
        var val = document.getElementById("filterType").value;
        return {
            filterBy: val
        };
    }

    function onChangeOfFilter() {

        localStorage.setItem('scheduleFilter',  JSON.stringify({
                type: $("#Type").data("kendoDropDownList").value(),
                jobTitle: $("#Job").data("kendoMultiSelect").value(),
                proctor: $("#proctor").data("kendoMultiSelect").value(),
                interviewer: $("#interviewer").data("kendoMultiSelect").value(),
                //title: document.getElementById("title").value,
                candidate: $("#Candidate").data("kendoMultiSelect").value(),
            }));
    /*ministry: $("#Ministry").data("kendoMultiSelect").value(),*/
        $("#scheduler").data("kendoScheduler").dataSource.read();
    }

    function FilterScheduler() {
        
        if ('@ViewBag.UserRole' == "ADMIN") {
            var filtersApplied = JSON.parse(localStorage.getItem('scheduleFilter'));
            if (filtersApplied == null) {
                filtersApplied = {
                    type: "",
                    jobTitle: "",
                    proctor: "",
                    interviewer: "",
                    title: "",
                    candidate: "",
                }
            } else {
                if ('@ViewBag.UserRole' == "ADMIN") {
                    $("#Type").data("kendoDropDownList").value(filtersApplied.type);
                    $("#Job").data("kendoMultiSelect").value(filtersApplied.jobTitle);
                    $("#proctor").data("kendoMultiSelect").value(filtersApplied.proctor);
                    $("#interviewer").data("kendoMultiSelect").value(filtersApplied.interviewer);
                    $("#Candidate").data("kendoMultiSelect").value(filtersApplied.candidate);
                }
            }
            //ministry: ""
            //$("#Ministry").data("kendoMultiSelect").value(filtersApplied.ministry);

            if ('@ViewBag.UserRole' == "ADMIN") {
                return {
                    type: $("#Type").data("kendoDropDownList").value(),
                    jobTitle: $("#Job").data("kendoMultiSelect").value(),
                    proctor: $("#proctor").data("kendoMultiSelect").value(),
                    interviewer: $("#interviewer").data("kendoMultiSelect").value(),
                  //  title: document.getElementById("title").value,
                    candidate: $("#Candidate").data("kendoMultiSelect").value(),
                }
            } else {
                return {
                    type: null,
                    jobTitle: null,
                    proctor: null,
                    interviewer: null,
                    title: null,
                    candidate: null,
                }
            }
        } else {
            return;
            //ministry: $("#Ministry").data("kendoMultiSelect").value(),
            //    ministry: null
             //return {
                    //type: null,
                    //jobTitle: null,
                    //proctor: null,
                    //interviewer: null,
                    //title: null,
                    //candidate: null,
                    //ministry: null
                //}
        }
    }
</script>

<script type="text/javascript">



    function onfilterByLegend(title) {
        document.getElementById("title").value = title;
        $("#scheduler").data("kendoScheduler").dataSource.read();
    }

    function clearFilter() {
        $("#Type").data("kendoDropDownList").value("");
        $("#Job").data("kendoMultiSelect").value("");
        $("#proctor").data("kendoMultiSelect").value("");
        $("#interviewer").data("kendoMultiSelect").value("");
        $("#Candidate").data("kendoMultiSelect").value("");
        /*$("#Ministry").data("kendoMultiSelect").value("");*/
            document.getElementById("title").value = "";
          localStorage.removeItem('scheduleFilter');
        $("#scheduler").data("kendoScheduler").dataSource.read();
    }

    function getColor(data, e) {
          return data.Color;
    }

    function resizeEnd(e) {
        if ('@ViewBag.UserRole' == "ADMIN") {
            update(e);
        } else {
            ShowNotification("You do not have a permission to modify");
             $("#scheduler").data("kendoScheduler").dataSource.read();
        }
    }

    function save(e) {
    }

      var editor = $("#editor");
    var template = kendo.template($("#customEditorTemplate").html());
    var scheduler = $("#scheduler").data("kendoScheduler");

    function saveEvent(e) {
      if ('@ViewBag.UserRole' == "ADMIN") {
        } else {
            ShowNotification("You do not have a permission to modify");
             $("#scheduler").data("kendoScheduler").dataSource.read();
        }
    }

       function TeamFilter() {
            return { 'groupCode': 'ASSESSMENT_INTERVIEW_PANEL' };
        }

    function update(e) {
        var data = {
            "title": e.event.title,
            "description": e.event.description,
            "start": e.start.toJSON(),
            "end": e.end.toJSON(),
            "id": e.event.id,
            "scheduleId": e.event.scheduleId
        };
         var url = "/assessment/assessment/AddUpdateCalendarEvents?isDrag=true"
         $.ajax({
            type: "POST",
            data: data,
            url: url,
            dataType: 'json',
            success: function (res) {
                if (res.success) {
                    var win = GetMainWindow();
                    win.CloseWindow();
                    return false;
                    ShowNotification("Saved Successfully!");
                    window.parent.refreshExcel();
                }
             },
            error: function (e) {
                var win = GetMainWindow();
                win.CloseWindow();
                return false;
                    window.parent.refreshExcel();
             }
        });
            return false;
    }

    function edit(e) {
        
         e.preventDefault(); //prevent popup editing
        var dataSource = this.dataSource;
        var event = e.event;
        if (event.isNew()) {
            if ('@ViewBag.UserRole' == "ADMIN") {
                var sd = kendo.toString(event.start, '@ApplicationConstant.Database.JQueryDateFormat');




                var url = '/tas/talentassessment/ViewCalendarEvent?start='+sd;
                var win = GetMainWindow();
                win.iframeOpenUrl = url;
                win.OpenWindow({ Title: 'Create New Schedule', Width: 1200, Height: 800});
            }
        } else {
            if (event.CandidateId == null) {
                event.CandidateId = 0;
            }

            var url = '/tas/talentassessment/ViewCalendarEvent?id=' + event.Id;
            var win = GetMainWindow();
            win.iframeOpenUrl = url;
            win.OpenWindow({ Title: 'Edit Schedule', Width: 1200, Height: 800 });
          }
    }



      function editEvent(event) {
      editor.find("#save").click(function() {
        update(e);
      });

      editor.find("#cancel").click(function() {
       update(e);
      });
    }

      function destroyEditor() {
      kendo.destroy(editor);
      editor.find("button").off();
      editor.html("");
    }

    function remove(e) {
        if ('@ViewBag.UserRole' == "ADMIN") {
            $.ajax({
                url: '/Tas/talentassessment/DeleteSchedule?id=' + e.event.id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    $("#scheduler").data("kendoScheduler").dataSource.read();
                    kendo.alert("Slot removed Successfully.");
                },
                error: function (ert) {
                    $("#scheduler").data("kendoScheduler").dataSource.read();
                    kendo.alert("Slot removed Successfully.");
                }
            });
            return false;
        } else {
            ShowNotification("You do not have a permission to modify");
             $("#scheduler").data("kendoScheduler").dataSource.read();
        }
    }

    function moveEnd(e) {
        if ('@ViewBag.UserRole' == "ADMIN") {
                update(e);
        } else {
            ShowNotification("You do not have a permission to modify");
             $("#scheduler").data("kendoScheduler").dataSource.read();
        }
    }

    function navigate(obj) {
        localStorage.setItem("scheduler_navigate", JSON.stringify({
            date: obj.date,
            view: obj.view,
        }));
    }

    function RefreshPage() {

    }


    $(document).ready(function () {
        //$("#scheduler").kendoTooltip({
        //    filter: ".k-event:not(.k-event-drag-hint)",
        //    position: "top",
        //    width: 250,
        //    content: kendo.template($('#template').html())
        //});

        //var scheduler_navigate = JSON.parse(localStorage.getItem("scheduler_navigate"));
        //if (scheduler_navigate) {
        //    var scheduler = $("#scheduler").data("kendoScheduler");
        //    scheduler.view(scheduler_navigate.view);
        //}

    })
</script>

<script id="customEditorTemplate" type="text/x-kendo-template">
    <div class="k-edit-label"><label for="title">Title</label></div>
    <div data-container-for="title" class="k-edit-field">
        <input type="text" class="k-textbox" name="title" required="required" data-bind="value:title">
    </div>
    <div class="k-edit-label">
        <label for="start">Start</label>
    </div>
    <div data-container-for="start" class="k-edit-field">
        <input type="text"
               data-role="datetimepicker"
               data-interval="15"
               data-type="date"
               data-bind="value:start,invisible:isAllDay"
               name="start" />
        <input type="text" data-type="date" data-role="datepicker" data-bind="value:start,visible:isAllDay" name="start" />
        <span data-bind="text: startTimezone"></span>
        <span data-for="start" class="k-invalid-msg" style="display: none;"></span>
    </div>
    <div class="k-edit-label"><label for="end">End</label></div>
    <div data-container-for="end" class="k-edit-field">
        <input type="text" data-type="date" data-role="datetimepicker" data-bind="value:end,invisible:isAllDay" name="end" data-datecompare-msg="End date should be greater than or equal to the start date" />
        <input type="text" data-type="date" data-role="datepicker" data-bind="value:end,visible:isAllDay" name="end" data-datecompare-msg="End date should be greater than or equal to the start date" />
        <span data-bind="text: endTimezone"></span>
        <span data-bind="text: startTimezone, invisible: endTimezone"></span>
        <span data-for="end" class="k-invalid-msg" style="display: none;"></span>
    </div>
    <div class="k-edit-label"><label for="isAllDay">All day event</label></div>
    <div data-container-for="isAllDay" class="k-edit-field">
        <input type="checkbox" name="isAllDay" data-type="boolean" data-bind="checked:isAllDay">
    </div>
    <div class="k-edit-label"><label for="recurrenceRule">Repeat</label></div>
    <div data-container-for="recurrenceRule" class="k-edit-field">
        <div data-bind="value:recurrenceRule" name="recurrenceRule" data-role="recurrenceeditor"></div>
    </div>
    <div class="k-edit-label"><label for="description">Description</label></div>
    <div data-container-for="description" class="k-edit-field">
        <textarea name="description" class="k-textbox" data-bind="value:description"></textarea>
    </div>
    <div class="k-edit-label"><label for="ownerId">Owner</label></div>
    <div data-container-for="ownerId" class="k-edit-field">
        <select id="ownerId" data-bind="value:ownerId" data-role="dropdownlist"
                data-value-field="value" data-text-field="text">
            <option value="1">Alex</option>
            <option value="2">Bob</option>
            <option value="3">Charlie</option>
        </select>
    </div>
</script>

<br />
@if (ViewBag.UserRole == "ADMIN")
{
    <div class="row" style="height:30px">

        <div class="col-3">
            @*@(Html.Kendo().MultiSelect()
                .Name("Candidate")
                .AutoClose(false)
                .Placeholder("Select Candidate...")
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetAssessmentUserList", "TalentAssessment", new { @area= "Tas" });
                    });
                })
                .DataTextField("Name")
                .DataValueField("Id")
                .AutoBind(true)
                //.HtmlAttributes(new { @class = "hr-large" })
                .Height(300)
                )*@

            <select id="Candidate" data-placeholder="Select Candidate..."></select>
            <span>&nbsp;</span>
        </div>
        <div class="col-3">
            @*@(Html.Kendo().MultiSelect()
                .Name("Job")
                .AutoClose(false)
                .Placeholder("Select Job Title...")
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetJobTitle", "TalentAssessment", new { @area = "Tas" });
                    });

                })
                .DataTextField("Name")
                .DataValueField("Name")
                .AutoBind(true)
                //.HtmlAttributes(new { @class = "hr-large" })
                .Height(300)
                    )*@
            <select id="Job" data-placeholder="Select Job Title..."></select>
            <span>&nbsp;</span>
        </div>
        @*<div class="col-3">

                @(Html.Kendo().MultiSelect()
            .Name("Ministry")
            .AutoClose(false)
            .Placeholder("Select Ministry...")
            .DataSource(source =>
            {
                source.Read(read =>
                {
                    read.Action("GetAssessmentSponserList", "TalentAssessment", new { @area = "Tas" });
                });

            })
            .DataTextField("Name")
            .DataValueField("Id")
            .AutoBind(true)
            //.HtmlAttributes(new { @class = "hr-large" })
            .Height(300)
                )
                <span>&nbsp;</span>
            </div>*@
        <div class="col-3">

            @*@(Html.Kendo().MultiSelect()
                .Name("interviewer")
                .AutoClose(false)
                .Placeholder("Select Interviewer...")
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetIdNameListByGroupCode", "Team", new { area = "Cms" }).Data("TeamFilter");
                    });

                })
                .DataTextField("Name")
                .DataValueField("Id")
                .AutoBind(true)
                //.HtmlAttributes(new { @class = "hr-large" })
                .Height(300)
                    )*@

            <select id="interviewer" data-placeholder="Select Interviewer..."></select>
            <span>&nbsp;</span>
        </div>

        <div class="col-3">
            @*@(Html.Kendo().MultiSelect()
                .Name("proctor")
                .AutoClose(false)
                .Placeholder("Select Proctor...")
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetAssessmentProctorList", "TalentAssessment", new { @area = "Tas" });
                    });

                })
                .DataTextField("Name")
                .DataValueField("Id")
                .AutoBind(true)
                //.HtmlAttributes(new { @class = "hr-large" })
                .Height(300)
                        )*@
            <select id="proctor" data-placeholder="Select Proctor..."></select>

        </div>
    </div>


    <br />

    <div class="row" style="height:30px">


        <div class="col-3">
            @*@(Html.Kendo().DropDownList()
                                      .Name("Type")
                                      //.Height(350)
                                      .ValuePrimitive(true)
                                      .DataTextField("Name")
                                      .DataValueField("EnumId")
                                      .Filter("contains")
                                      .OptionLabel("Select Assessment...")
                                      //.Filter(FilterType.Contains)
                                      .HtmlAttributes(new { @class = "hr-large" })
                                      .DataSource(source =>
                                                    {
                                                    source.Read(read =>
                                                        {
                                                         read.Action("GetEnumIdNameList", "Home", new { area = "", enumType = "AssessmentScheduleTypeEnum" });
                                                     });
                                        })
                )*@
            <input id="Type" class="hr-large" />

        </div>
        <div class="col-3"></div>
        <div class="col-6" style="text-align:end">
            <button class="btn btn-primary" onclick="onChangeOfFilter()">Filter</button><span>&nbsp;</span>
            <button class="btn btn-danger" onclick="clearFilter()">Clear</button><span>&nbsp;</span>
            @*<button class="btn btn-primary" onclick="setAssessment()">Manage Assessment Set</button>*@
        </div>
    </div>
}

@*@if (ViewBag.IsLegendVisible)
    {
    <ul class="legend">
        @foreach (var l in ViewBag.Legend)
        {
            <li> <span style="width:10px;height:10px;background-color:red"></span>&nbsp;&nbsp; @l.Name</li>
            <li><span style="background-color:@l.Code"></span> <a style="cursor:pointer" onclick="onfilterByLegend('@l.Name')">@l.Name</a></li>
        }
    </ul>
    }*@
<br />
<br />
<br />

@*@(Html.Kendo().Scheduler<AssessmentCalendarViewModel>()
                .Name("scheduler")
                .StartTime(new DateTime(2020, 09, 15, 7, 0, 0))
                .EndTime(new DateTime(2020, 09, 15, 19, 0, 0))
                //.Height(2000)
                .EventTemplateId("event-template")
                //.Editable(e => e.TemplateId("customEditorTemplate"))
                .Pdf(pdf => pdf
                    .FileName("Assessment Scheduler Export.pdf")
                    .ProxyURL(Url.Action("Pdf_Export_Save", "Scheduler"))
                )
                .Views(views =>
                {
                    views.DayView();
                    views.WeekView();
                    views.MonthView();
                    views.AgendaView();
                    views.TimelineView();
                })
                .Events(e => e.Navigate("navigate").Save("save").Edit("edit").Remove("remove").MoveEnd("moveEnd").ResizeEnd("resizeEnd").DataBound("onDataBound"))
        .Toolbar(t => t.Pdf())
        .DataSource(d => d
                    .Model(m =>
                    {
                        m.Id(f => f.Id);
                        m.Field(f => f.Title).DefaultValue("No title");
                    })
            .Read(read => read.Action("ReadCalendarInterviewScheduleData", "TalentAssessment", new { @area = "Tas" }).Data("FilterScheduler"))

        ).Events(e => { e.Save("saveEvent"); })
    )*@
@*<div>
        <span id="menu-navi">
            <button type="button" class="btn btn-default btn-sm move-today" data-action="move-today">Today</button>
            <button type="button" class="btn btn-default btn-sm move-day" data-action="move-prev">
                <i class="calendar-icon ic-arrow-line-left" data-action="move-prev"></i>
            </button>
            <button type="button" class="btn btn-default btn-sm move-day" data-action="move-next">
                <i class="calendar-icon ic-arrow-line-right" data-action="move-next"></i>
            </button>
        </span>
        <span id="renderRange" class="render-range"></span>
    </div>

    <div>
        <div id="calendar" style="height: 800px;"></div>
    </div>

    <span style="display:none" id="date"></span>
    <span style="display:none" id="view"></span>
    <span style="display:none" id="action"></span>
    <span style="display:none" id="title"></span>*@


@*@{
    await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_Scheduler.cshtml", new ScheduleViewModel
    {
        Id = "calender",
        CallbackMethod = ""
    });
}
<input type="hidden" id="scheduler" />*@

<input type="hidden" id="calender" />

<script id="event-template" type="text/x-kendo-template">
    <div class="movie-template" style="background-color:#:Color#">
    <span style="font-weight:bold">#: SlotTypeText # : #:AssessmentTypeName# - #:AssessmentName#</span>
        <p>
            #: kendo.toString(start, "hh:mm") # - #: kendo.toString(end, "hh:mm") #
        </p>
        <span style="font-weight:bold">#: AssessmentTypeShort # - #: title#</span>
        <br />
        <span>#: CandidateName #</span>
        <br />
        <span>#: JobTitle #</span>
        <br />
        <span>#: UrlShort #</span>
    </div>
</script>

@*<span>#: MinistryName #</span>
    <br />*@


<script id="template" type="text/x-kendo-template">
    #var element = target;#
    #var uid = element.attr("data-uid");#
    #var scheduler = target.closest("[data-role=scheduler]").data("kendoScheduler");#
    #var model = scheduler.occurrenceByUid(uid);#

    #if(model) {#
    <div style="background-color:#=model.color#">
    <strong>#=model.SlotTypeText# : #:model.AssessmentTypeName# - #:model.AssessmentName#</strong>
    <br/>
        #: kendo.toString(model.start, "hh:mm") # - #: kendo.toString(model.end, "hh:mm") #
        <br />
        <strong>#=model.description#:</strong> #: model.title#
        <br />
        <strong>Candidate Name:</strong>&nbsp; #=model.CandidateName#
        <br />
        <strong>Email:</strong>&nbsp; #=model.Email#
        <br />
        <strong>Job Title:</strong>&nbsp; #=model.JobTitle#
        <br />
        <strong>Mobile No:</strong>&nbsp; #=model.MobileNo#
        <br />
    </div>
    #} else {#
    <strong>No event data is available</strong>
    #}#
</script>

@*<strong>Ministry Name:</strong>&nbsp; #=model.MinistryName#
    <br />*@

