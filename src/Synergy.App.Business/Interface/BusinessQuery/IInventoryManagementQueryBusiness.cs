using Synergy.App.Common;
using Synergy.App.DataModel;
using Synergy.App.ViewModel;
using Synergy.App.ViewModel.IMS;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Synergy.App.Business
{
    public interface IInventoryManagementQueryBusiness : IBusinessBase<ServiceViewModel, NtsService>
    {
        Task<IList<DirectSalesViewModel>> GetDirectSalesData(DirectSalesSearchViewModel model);
        Task<IList<ItemsViewModel>> GetDirectSaleItemsData(string directSalesId);
        Task<DirectSalesViewModel> GetDirectSalesData(string serviceId);
        Task<RequisitionViewModel> GetRequisitionData(string serviceId);
        Task<IList<RequisitionViewModel>> GetRequisitionDataByItemHead(string itemHead, string Customer, string status, string From, string To, string requisitionIds = null);
        Task<RequisitionViewModel> GetRequisitionDataByServiceId(string serviceId);
        Task<RequisitionViewModel> GetRequisitionDataById(string Id);
        Task<ItemsViewModel> GetItemsUnitDetailsByItemId(string itemId);
        Task<IList<ItemsViewModel>> GetItemsListData(ItemsSearchViewModel search);
        Task<IList<ItemsViewModel>> GetRequisistionItemsData(string requisitionId);
        Task<IList<IdNameViewModel>> GetItemCategoryByItemTypeId(string itemTypeId);
        Task<IList<IdNameViewModel>> GetItemSubCategoryByItemCategoryId(string itemCategoryId);
        Task<IList<IdNameViewModel>> GetItemByItemSubCategoryId(string itemSubCategoryId);
        Task<IList<RequisitionIssueItemsViewModel>> GetRequisistionItemsToIssue(string requisitionId);
        Task<IList<RequisitionIssueItemsViewModel>> GetRequisistionIssueItems(string issueServiceId, ImsIssueTypeEnum issueType);
        Task<IList<IssueRequisitionViewModel>> GetRequisistionIssue(string requisitionServiceId, ImsIssueTypeEnum issuetype);
        Task<IList<RequisitionViewModel>> GetIssueRequisitionData(string itemHead, string From, string To);
        Task<ItemsViewModel> GetItemsDetails(string id);
        Task<List<POItemsViewModel>> GetRequisistionItemsByRequisitionId(string requisitionIds,bool isValidate=false);
        Task<IList<RequisitionIssueItemsViewModel>> GetRequisistionIssueItemsByRequisitionId(string requisitionServiceId);
        Task<IList<RequisitionIssueItemsViewModel>> GetRequisitionIssueItemsByIssueRefId(string issueRefId);
        Task<IList<DeliveryNoteViewModel>> GetDeliveryNoteData(string itemHead, string From, string To);
        Task<DeliveryNoteReportViewModel> GetDeliveryNoteReportData(string deliveryNoteId);
        Task<PurchaseOrderReportViewModel> GetPurchaseOrderReportData(string purchaseOrderId);
        Task<ReceivedNoteReportViewModel> GetReceivedNoteReportData(string receivedNoteId);
        Task<PurchaseInvoiceReportViewModel> GetPurchaseInvoiceReportData(string purchaseInvoiceId);
        Task<List<InvoiceItemViewModel>> GetPurchaseInvoiceItemsList(string purchaseInvoiceId);
        Task<List<GoodsReceiptItemViewModel>> GetGoodReceiptItemsList(string receiptId);
        Task<List<DeliveryItemViewModel>> GetDeliveryItemsList(string deliveryNoteId);
        Task<List<IdNameViewModel>> GetInvertoryFinancialYearIdNameList();
        Task<List<PurchaseInvoiceReportViewModel>> GetReportInvoiceDetailsData(DateTime fromDate, DateTime toDate);
        Task<List<RequisitionIssueItemsViewModel>> GetReportIssueTypeData(DateTime fromDate, DateTime toDate, string issueTypeId, string departmentId, string employeeId, string issueToTypeId);
        Task<List<ItemStockViewModel>> GetReportItemHistoryData(DateTime fromDate, DateTime toDate, string warehouseId, string itemTypeId, string itemCategoryId, string itemSubCategoryId, string itemId);
        Task<List<StockTransferViewModel>> GetReportItemTransferData(DateTime fromDate, DateTime toDate, string warehouseId, string itemTypeId, string itemCategoryId, string itemSubCategoryId, string itemId);
        Task<List<PurchaseOrderViewModel>> GetReportPurchaseOrderStatusData(DateTime fromDate, DateTime toDate, string statusId);
        Task<List<PurchaseOrderViewModel>> GetReportOrderBookData();
        Task<List<OrderSummaryViewModel>> GetReportOrderStatusData(string financialYearId);
        Task<List<RequisitionViewModel>> GetReportRequisitionByStatusData(DateTime fromDate, DateTime toDate, string typeId, string customerId, string statusId);
        Task<List<RequisitionViewModel>> GetReportRequisitionByDetailsData(DateTime fromDate, DateTime toDate, string typeId, string customerId, string statusId);
        Task<List<GoodsReceiptViewModel>> GetReportReceivedFromPOData(DateTime fromDate, DateTime toDate, string vendorId);
        Task<List<VendorCategoryViewModel>> GetReportVendorCategoryData(string vendorId, string categoryId, string subCategoryId);
        Task<List<PurchaseReturnViewModel>> GetReportReturnToVendorData(DateTime fromDate, DateTime toDate, string vendorId);
        Task<IList<VendorViewModel>> GetVendorList(string countryId, string stateId, string cityId, string name);
        Task<VendorViewModel> GetVendorDetailsById(string vendorId);
        Task<ItemShelfViewModel> GetItemShelfDetailsById(string itemShelfId);
        Task<List<ContactsViewModel>> ReadVendorContactsData(string vendorId);
        Task<List<VendorCategoryViewModel>> ReadVendorCategoryData(string vendorId);
        Task<List<ItemShelfViewModel>> ReadItemShelfCategoryData(string itemShelfId);
        Task<List<VendorCategoryViewModel>> ReadCategoryNotInVendorCategoryData(string vendorId);
        Task<List<ItemShelfViewModel>> ReadCategoryNotInItemShelfCategoryData(string itemShelfId);
        Task DeleteContacts(string Id);
        Task<List<ItemShelfViewModel>> ReadShelfList();
        Task<ItemShelfViewModel> GetItemShelfDetail(string noteId);
        Task DeleteVendorCategories(string Id);
        Task DeleteItemShelfCategories(string Id);
        Task<IList<CustomerViewModel>> GetCustomerList(string countryId, string stateId, string cityId, string name);
        Task<CustomerViewModel> GetCustomerDetailsById(string customerId);
        Task<List<ContactsViewModel>> ReadCustomerContactsData(string customerId);
        Task<List<IdNameViewModel>> GetItemCodeMappingList();
        Task<List<ItemStockViewModel>> ReadItemStockData(string itemTypeId, string itemCategory, string itemSubCategory, string warehouseId);
        Task<ItemStockViewModel> GetUnitItemData(string Id);
        Task<ItemStockViewModel> GetItemHeaderData(string Id, string warehouseId);
        Task DeleteCustomerContacts(string Id);
        Task<List<PurchaseOrderViewModel>> GetVendorPOList(string itemHead = null, string vendorId = null, string statusId = null, string From = null, string To = null);
        Task<double> GetPOValueByPOId(string POId);
        Task<ItemsViewModel> GetRequisitionItemById(string Id);
        Task<POItemsViewModel> GetPOItemById(string Id);
        Task<IList<GoodsReceiptItemViewModel>> GetPOItemsByPOId(string poId);
        Task<IList<GoodsReceiptItemViewModel>> GetGoodReceiptItemsByReceiptId(string receiptId);
        Task<List<PurchaseOrderViewModel>> ReadPOData(string ItemHead, string Vendor, string From, string To);
        Task UpdatePOValueInPO(string POId, double POValue);
        // Task<List<PurchaseOrderViewModel>> GetVendorPOList();
        Task<List<POItemsViewModel>> ReadPOItemsData(string poId);
        Task DeletePOItem(string poId);
        Task<IList<PurchaseOrderViewModel>> GetPOItemsData(string poId);
        Task<PurchaseOrderViewModel> GetPOData(string serviceId);
        Task<List<POTermsAndConditionsViewModel>> ReadPOTermsData(string poId);
        Task<IList<GoodsReceiptViewModel>> ReadDeliveryChallanData(string ItemHead, string Vendor, string From, string To, string poId, ImsReceiptTypeEnum? receiptType);
        Task<IList<DirectSalesViewModel>> FilterDirectSalesData(DirectSalesSearchViewModel search);
        Task<ItemStockViewModel> CheckItemStockExists(string itemId, string warehouseId);
        Task<double> GetClosingBalance(string itemId, string warehouseId);
        Task UpdateStockClosingBalance(string itemId, string warehouseId, double closingBalance);       
        Task<List<RequisitionIssueItemsViewModel>> GetGoodReceiptItemsToIssue(string requisitionItemId, string itemId, string warehouseId ,ImsReceiptTypeEnum receiptType);
        Task<IList<GoodsReceiptViewModel>> GetChallanDetailsbyPOId(string poId);

        Task<GoodsReceiptItemViewModel> GetGoodReceiptItemDetails(string receiptId);
        Task UpdateInvoiceNoinGR(string Id, string invoiceNo);
        Task<string> GetGoodReceiptItemIdByPoItemId(string id);
        //Task<string> GetPoIdByGoodReceiptId(string id);
        Task<RequisitionIssueItemsViewModel> GetRequisistionIssueItemsById(string requisitionIssueItemId);
        Task<IList<StockTransferViewModel>> GetItemTransferredList(string from, string to, string challanNo);
        Task<List<ScheduleInvoiceViewModel>> GetRequisitiononFilters(string ItemHead, string From, string To);
        Task<List<ItemStockViewModel>> ReadItemListByStock(string itemTypeId, string itemCategory, string itemSubCategory, string warehouseId);
        Task<List<ItemStockViewModel>> ReadItemCurrentStockData(string warehouseId, string itemTypeId, string itemCategoryId, string itemSubCategoryId, string itemId);
        Task<IList<StockTransferViewModel>> GetTransferItemsList(string stockTransferId);
        Task<List<POInvoiceViewModel>> GetPOInvoiceDetailsList(string poId);
        Task<POInvoiceViewModel> InvoiceNoExists(string invoiceNo);
        Task<GoodsReceiptItemViewModel> GetGoodReceiptItemById(string id);
        Task<List<SerialNoViewModel>> GetSerailNoByHeaderIdandReferenceId(string referenceId, string hearderId);
        Task<double> GetTotalQtyInHandCount();
        Task<double> GetTotalQtyTobeRecievedCount();
        Task<double> GetTotalAllItem();
        Task<double> GetTotalLowStockItems();
        Task<double> GetTotalAllItemGroupItems();
        Task<double> GetTotalItemsInHand();
        Task<double> GetTotalItemsToReceive();
        Task<IList<IdNameViewModel>> GetTopSellingsItem(DateTime startDate, DateTime endDate);
        Task<double> GetPurchaseOrderQtyOrdered(DateTime startDate, DateTime endDate);
        Task<double> GetPurchaseOrderTotaCost(DateTime startDate, DateTime endDate);
        Task<List<ItemStockViewModel>> ReadStockEntriesData(string itemId, string warehouseId, DateTime? FromDate, DateTime? ToDate);
        Task<IList<SalesOrder>> GetSalesOrderSummaryChart(DateTime startDate, DateTime endDate, InventoryDataFilterEnum filter);
        Task<double> GetDirectSalesAmountSummaryChart(object startDate, object endDate, InventoryDataFilterEnum filter);
        Task updateSerialNosToIssued(string serialNoIds);
        Task<ItemStockViewModel> GetStockDetailsById(string stockId);
        Task<ItemStockViewModel> GetStockDataByNoteId(string stockNoteId);
        Task<List<ItemsViewModel>> GetActiveItemsFilterBySubCategory(string subCategoryId);
        Task<IList<DirectSalesViewModel>> GetDirectSalesList();
        Task<IList<SalesReturnViewModel>> GetSalesReturnList(string cusId, string From, string To, string serNo);
        Task<SalesReturnViewModel> GetSalesReturnData(string serId);
        Task<IList<SalesReturnViewModel>> GetSalesReturnItemsList(string salesReturnId);
        Task<IList<StockAdjustmentViewModel>> GetStockAdjustmentList();
        Task<IList<StockAdjustmentItemViewModel>> GetStockAdjustmentItemsData(string stockAdjustmentId);
        Task<IList<PurchaseReturnViewModel>> GetPurchaseReturnList(string cusId, string From, string To, string serNo);
        Task<PurchaseReturnViewModel> GetPurchaseReturnData(string serId);
        Task<List<SalesOrder>> GetItemValueByCategory();
        Task<List<SalesOrder>> GetItemValueByWarehouse();
        Task<StockAdjustmentViewModel> GetStockAdjustmentById(string stockAdjustmentId);
        Task<GoodsReceiptViewModel> GetGoodsReceiptById(string id);
        Task<IList<GoodsReceiptViewModel>> ReadGoodsReceiptData(string GoodsReceiptReferenceId, ImsReceiptTypeEnum receiptType);
        Task<List<PurchaseOrderViewModel>> GetPurchaseOrderList();
        Task<PurchaseOrderViewModel> GetPurchaseOrderData(string serviceId);
        Task<List<ItemsViewModel>> GetPurchaseOrderItemsList(string purchaseId);
        Task<List<PurchaseReturnViewModel>> GetPurchaseReturnItemsList(string purchaseReturnId);
        Task<GoodsReceiptViewModel> GetGoodsReceiptDataBySerId(string goodsReceiptServiceId);
        Task<IList<RequisitionIssueItemsViewModel>> GetRequisistionIssueItemsToDeliver(string requisitionId);
        Task UpdateDeliveryNoteAcknowledgement(string deliveryNoteId, string fileId);
        Task<DeliveryNoteViewModel> GetDeliveryNoteById(string deliveryNoteId);
        Task<List<ScheduleInvoiceViewModel>> ReadScheduleInvoice(string customerId);
        Task<StockTransferViewModel> GetTransferById(string stockTransferId);
        Task<IList<SalesReturnViewModel>> GetPurchaseReturnItemsData(string serviceId);
        Task<List<ItemsViewModel>> GetCRPFRequisitionItemList(string serviceId);
    }
}
