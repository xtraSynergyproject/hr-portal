@using Synergy.App.ViewModel;
@{
    ViewData["Title"] = "Formula";
    Layout = "~/Areas/Core/Views/Shared/_PopupLayout.cshtml";
}
@model JSCFormulaViewModel

@*<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.1/semantic.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.13.0/themes/prism.min.css">
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.9/css/all.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.1/components/icon.min.css">*@
<link rel="stylesheet" href="~/css/formula/ui.css">
<link rel="stylesheet" href="~/css/formula/style.css">
<link rel="stylesheet" type="text/css" href="~/css/formula/formulize.css">
<style>
    .formulize-custom {
        margin: 10px !important;
    }
</style>
<script>

    $(document).ready(function () {
        $("#FormulaType").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
           // optionLabel:"--Select--",
            value: '@Model.FormulaType',
            filter: "contains",
            select:onchange,
           // dataBound:onchange,
            dataSource: {
                transport: {
                    read: {
                        url: "/Cms/LOV/GetListOfValueList?Type=JSC_PROPERTY_TYPE",
                    }
                }
            }
        });
        @*$("#EffectiveFromDate").kendoDatePicker({
            format: "yyyy/MM/dd",
            value: '@Model.EffectiveFromDate',
        });*@
        @*$("#EffectiveToDate").kendoDatePicker({
            format: "yyyy/MM/dd",
            value: '@Model.EffectiveToDate',
        });*@
    });
</script>
<div id="wrapper">
    <form asp-area="EGov" asp-controller="SmartCity" asp-action="ManageFormula" method="post" class="form-horizontal" id="myForm">
        <div class="text-danger" asp-validation-summary="All"></div>
        <div class="row" style="padding:10px;">
            <div class="col-4 pad-10">
                <div class="form-label-group">
                    <div>
                        <label for="FormulaType">Formula Type</label>
                    </div>

                    <input asp-for="FormulaType" class="form-control" style="width:80%" required="required" />
                    @*<div>
            <label for="EffectiveFromDate">Effective From Date</label>
        </div>

        <input asp-for="EffectiveFromDate" class="form-control" style="width:80%" required="required" />*@

                </div>
            </div>
            @*<div class="col-4 pad-10">
                <div class="form-label-group">
                    <div>
                        <label for="EffectiveToDate">Effective To Date</label>
                    </div>

                    <input asp-for="EffectiveToDate" class="form-control" style="width:80%" required="required" />

                </div>
            </div>*@
        </div>
        <hr />
        <div class="row">
            <div class="col-3 pad-10">
             
                    <div class="row ui piled segment center">
                        @*@{ var i = 1;}*@
                        @foreach (var item in Model.CustomList)
                        {

                            <a href="#" class="formulize-custom" data-value="@item.Code" data-test="@item.Name">@item.Name</a>

                        }

                    </div>
                
            </div>
            <div class="col-9 pad-10">
                <div class="article">

                    <div class="formulize formulize-advanced"></div>
                </div>
            </div>


            </div>
            <hr />
            <br />
            <div class="cms-slidebar-footer">
                <button type="button" class="btn btn-light" onclick="closeNavMemberGroup();">Close</button>
                <button type="submit" class="btn btn-primary" style="margin-right:20px;" onclick="onFormSave(event)">Save</button>
            </div>

            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.DataAction)
            @Html.HiddenFor(x => x.Formula)
            @*@Html.HiddenFor(x => x.FormulaType)*@
            @Html.HiddenFor(x => x.EffectiveFromDate)
            @Html.HiddenFor(x => x.EffectiveToDate)
</form>
</div>


@*<script type="text/javascript" src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.1/semantic.min.js"></script>*@
<script type="text/javascript" src="~/js/formula/formulize.umd.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
       // alert("ready called!!");
        if ('@ViewBag.Success' == "True") {

            closeNavMemberGroup();

        }
    });
    function onFormSave(e) {
        $('.formulize-advanced').getData(function (data) {
            $('.formulize-get-json .formulize-get-json-data')
            //.html(getHtmlFromJson(data)).closest('.formulize-get-json').addClass('filled');
            debugger;
            var json = getHtmlFromJson(data);
            $("#Formula").val(json);
        });
      // $("#Formula").val(json);

    }

    function getTextHtml(text) {
        return text.split('').map(function (char) {
            return '<span class="formula-expression-char">' + char + '</span>';
        });
    }

    function getHtmlFromJson(data) {
        if (typeof data !== 'object') {
            alert(getTextHtml(data));
        }

        var json = JSON.stringify(data);//.replace(/\n/g, "/%b/");
        return json;
        //return Prism.highlight(json, Prism.languages.json)
        //    .replace(/\/%b\//mg, '<br />')
        //    .replace(/\/%t\//mg, '&nbsp;&nbsp;&nbsp;&nbsp;');
    }
    function closeNavMemberGroup() {

        var win = GetMainWindow();
        /*win.CloseWindow({ MethodName: "testS"});*/
        win.CloseWindow();
        return false;
    }
    $(function () {
        // Plugin version confirmation.
        $('.version strong').text('v' + formulize.getVersion());

        var $formula = $('.formulize').formulize({
            pipe: {
                parse: function (elem) {
                    var $elem = $(elem);
                    if ($elem.data('value'))
                        return {
                            value: $elem.data('value'),
                            test: $elem.data('test')
                        };
                    else return $elem.text();
                }
            }
        });
        var data = {};
        //    operator: '+',
        //    operand1: {
        //        operator: '+',
        //        operand1: { value: { type: 'unit', unit: 1 } },
        //        operand2: { value: { type: 'unit', unit: 2 } }
        //    },
        //    operand2: { value: { type: 'unit', unit: 3 } }
        //};
        $formula.setData(data);
        var dataText = '@Html.Raw(Model.FormulaText)';

        var items = dataText.split('|');
        const advancedFormulize = $formula.filter('.formulize-advanced').data('$formulize');
        for (var i = 0; i < items.length; i++) {
            var data = items[i];
            if (data.indexOf('~') != -1) {
                var custom = data.split('~');
                advancedFormulize.insert($('<span class="formulize-item formulize-custom" data-value="' + custom[0] + '", data-test="' + custom[1] + '">' + custom[1]+'</span>'));
            }
            else {
                advancedFormulize.insert(data);
            }

            //advancedFormulize.insert($('<span class="formulize-item formulize-custom" data-value="2", data-test="2">custom item</span>'));

        }

        @*//const obj = JSON.parse('@Model.Formula');
        if ('@Model.Formula' != null && '@Model.Formula' != '') {
            var myJSONstring = '@Model.Formula';
            myJSONstring = myJSONstring.replace(/&quot;/ig, '"');
            myJSONstring = myJSONstring.replace(/&#x2B;/ig, '+');

            const obj = JSON.parse(myJSONstring);
            $formula.setData(obj);
        }
        else {
            $formula.setData(data);
        }*@



        $('.formulize-custom')
            .draggable({
                revert: 'invalid',
                helper: 'clone',
                cancel: '',
                scroll: false
            });

        $('.formulize-advanced').droppable({
            drop: function (event, ui) {
                var $element = ui.draggable.clone();
                var position = {
                    x: event.offsetX,
                    y: event.offsetY
                };
                var formulaUI = $(this).data('$formulize');
                formulaUI.insert($element, position);
            }
        });

        $('.btn-get-data')
            .on('click', function (event) {
                event.preventDefault();
                $('.formulize-advanced').getData(function (data) {
                    $('.formulize-get-json .formulize-get-json-data')
                        .html(getHtmlFromJson(data)).closest('.formulize-get-json').addClass('filled');
                });
            });

        $('.menu .item').tab();
    });
</script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.13.0/prism.min.js"></script>
<script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.13.0/components/prism-javascript.min.js"></script>
<script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.13.0/components/prism-typescript.min.js"></script>
<script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.13.0/components/prism-json.min.js"></script>
<script type="text/javascript" src="https://twemoji.maxcdn.com/2/twemoji.min.js?2.5"></script>

