@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using Kendo.Mvc.UI;

@model PayrollRunViewModel
@{
    Layout = null;// "~/Views/Shared/_LayoutPopup.cshtml";
}

<style>
    .label-div {
        font-weight: bold;
    }

    .row {
        margin-left: 0px !important;
        margin-right: 0px !important;
    }
</style>
<script>
     var columnDefs = [
        {
            field: "PersonNo",
        },
        { field: "PersonName" },
        { field: "DateOfJoin" },
        { field: "OrganizationName" },
        { field: "JobName" }


    ];

    $(function () {

        getPayrollPersonInList();
    });
    @* "@Url.Action("ReadPayrollRunListData", "PayrollRun", new { payrollGroupId=Model.PayrollGroupId,payrollId=Model.PayrollBatchId,payrollRunId=Model.Id,payrollState=Model.PayrollStateEnd,yearMonth=Model.YearMonth})",*@
    function getPayrollPersonInList() {
        document.getElementById("kgrdPayrollPersonInList").innerHTML = "";
        gridConfig(
            "kgrdPayrollPersonInList",
            "/Pay/PayrollRun/ReadPayrollRunListData?payrollGroupId=@Model.PayrollGroupId&payrollId=@Model.PayrollBatchId&payrollRunId=@Model.Id&payrollState=@Model.PayrollStateEnd&yearMonth=@Model.YearMonth",
          
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>

<form asp-controller="PayrollRun" asp-action="Manage" class="form-horizontal" id="myForm" data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
      data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
      data-ajax="true" data-ajax-method="POST">
    <div class="text-danger" asp-validation-summary="All" style="font-size:14px;"></div>

    <div id="appWrapper">
        <script type="text/javascript">

            function OnPayrollPersonDataBound() {
                $(".person-checkbox").bind("change", function (e) {
                    if (this.checked) {
                        $(this).prop('checked', true);
                        $(this).closest("tr").addClass("k-state-selected");
                    }
                    else {
                        $(this).prop('checked', false);
                        $(this).closest("tr").removeClass("k-state-selected");
                    }
                    OnPayrollPersonRowSelection(e.target);
                });
            }

        </script>
        <div class="row no-gutter hr-pad-top-10">

            <div class="form-group col-xs-12 col-sm-4">
                <div class="col-lg-12 label-div">
                    Payroll Group Name
                </div>
                <div class="col-lg-12">
                    @Html.DisplayFor(m => m.PayrollGroupName)
                </div>
            </div>
            <div class="form-group col-xs-12 col-sm-4">
                <div class="col-lg-12 label-div">
                    Payroll Start Date
                </div>
                <div class="col-lg-9">
                    @*@Html.DisplayFor(m => m.PayrollStartDate)*@
                    @Convert.ToDateTime(Model.PayrollStartDate).ToString(ApplicationConstant.DateAndTime.DefaultJqueryDateFormat)
                </div>
            </div>
            <div class="form-group col-xs-12 col-sm-4">
                <div class="col-lg-12 label-div">
                    Payroll State
                </div>
                <div class="col-lg-9">
                    @Html.DisplayFor(m => m.PayrollStateEnd)
                    @Html.HiddenFor(m => m.PayrollStateEnd)
                </div>
            </div>
            <div class="form-group col-xs-12 col-sm-4">
                <div class="col-lg-12 label-div">
                    Name
                </div>
                <div class="col-lg-12">
                    @Html.DisplayFor(m => m.Name)
                    @Html.HiddenFor(m => m.Name)
                </div>
            </div>

            <div class="form-group col-xs-12 col-sm-4">
                <div class="col-lg-12 label-div">
                    Payroll End Date
                </div>
                <div class="col-lg-9">
                    @*@Html.DisplayFor(m => m.PayrollEndDate)*@
                    @Convert.ToDateTime(Model.PayrollEndDate).ToString(ApplicationConstant.DateAndTime.DefaultJqueryDateFormat)

                </div>
            </div>
            <div class="form-group col-xs-12 col-sm-4">
                <div class="col-lg-12 label-div">
                    Execution Status
                </div>
                <div class="col-lg-9">
                    @if (Model.ExecutionStatus == PayrollExecutionStatusEnum.NotStarted)
                    {
                        <span class="label label-default">@Model.ExecutionStatus</span>
                    }
                    else if (Model.ExecutionStatus == PayrollExecutionStatusEnum.Submitted)
                    {
                        <span class="label label-info">@Model.ExecutionStatus</span>
                    }
                    else if (Model.ExecutionStatus == PayrollExecutionStatusEnum.InProgress)
                    {
                        <span class="label label-warning">@Model.ExecutionStatus</span>
                    }
                    else if (Model.ExecutionStatus == PayrollExecutionStatusEnum.Completed)
                    {
                        <span class="label label-success">@Model.ExecutionStatus</span>
                    }
                    else if (Model.ExecutionStatus == PayrollExecutionStatusEnum.Error)
                    {
                        <span class="label label-danger">@Model.ExecutionStatus</span>
                    }

                    @Html.HiddenFor(m => m.ExecutionStatus)
                </div>
            </div>
            <div class="form-group col-xs-12">
                <div class="col-xs-12">
                    @if (Model.ExecutionStatus == PayrollExecutionStatusEnum.Submitted || Model.ExecutionStatus == PayrollExecutionStatusEnum.InProgress)
                    {
                        <span style="padding:0px 10px 0px 10px;float:left;font-size:16px;border-radius:3px;background-color:#d9534f;color:#fff;" class="label">This payroll is submitted and still executing in the background. Please wait for completion of execution</span>
                        <div style="float:left"><span title="Refresh" style="font-size:18px;padding-left:10px;padding-top:3px;cursor:pointer;" id="btnAddToPayroll" onclick="return Refresh();"><i class="fas fa-sync-alt"></i></span></div>

                    }
                </div>
            </div>

            @if (Model.PayrollStateEnd != PayrollStateEnum.NotStarted)
            {
                <div class="row no-gutter hr-pad-top-10">
                    @if (Model.PayrollStateEnd == PayrollStateEnum.RollBack)
                    {
                        if (Model.ExecutionStatus != @PayrollExecutionStatusEnum.Submitted && Model.ExecutionStatus != @PayrollExecutionStatusEnum.InProgress)
                        {
                            <div style='float:left;'><button type='submit' id='btnExecutePayroll' class='btn btn-sm btn-primary' onclick="BindData('ExecutePayroll');">Execute Payroll</button>&nbsp;</div>
                        }

                    }
                    else if (Model.PayrollStateEnd == PayrollStateEnum.ExecutePayroll)
                    {
                        if (Model.ExecutionStatus != @PayrollExecutionStatusEnum.Submitted && Model.ExecutionStatus != @PayrollExecutionStatusEnum.InProgress)
                        {
                            <div style='float:left;'><button type='submit' id='btnExecutePayroll' class='btn btn-sm btn-primary' onclick="BindData('ExecutePayroll')">Execute Payroll</button>&nbsp;</div>
                        }
                        if (Model.ExecutionStatus != PayrollExecutionStatusEnum.Submitted && Model.ExecutionStatus != PayrollExecutionStatusEnum.InProgress)
                        {
                            <div style='float:left;'><button type='submit' id='btnRollbackPayroll' class='btn btn-sm btn-danger' onclick=" BindData('RollBack');">Rollback</button>&nbsp;</div>

                        }
                        if (Model.ExecutionStatus != PayrollExecutionStatusEnum.Submitted && Model.ExecutionStatus != PayrollExecutionStatusEnum.InProgress)
                        {
                            <div style='float:left;'><button type='submit' id='btnInitiatePayrollService' class='btn btn-sm btn-info' onclick=\"return BindData('ClosePayroll');\">Close Payroll</button>&nbsp;</div>
                        }
                        <div style='padding-left:20px; padding-top:5px; float:left; color:black;font-size:18px;'> List of employees in this payroll </div>

                    }
                    else
                    {
                        <p style='padding-left:20px;padding-top:5px;float:left;color:black;font-size:18px;'>List of employees in this payroll</p>
                    }

                    @*@(Html.Kendo().Grid<PayrollSalaryElementViewModel>
                ().Name("kgrdPayrollPersonInList")
                .Columns(col =>
                {
                    col.Bound(c => c.PersonNo).Title("Employee No").Width(150);
                    col.Bound(c => c.PersonName).Width(250);
                    col.Bound(c => c.DateOfJoin).Width(200);
                    col.Bound(c => c.OrganizationName).Width(200);
                    col.Bound(c => c.JobName).Width(200);
                })
                .ToolBar(toolbar =>
                {
                    if (Model.PayrollStateEnd == PayrollStateEnum.RollBack)
                    {
                        toolbar.ClientTemplate("#if ('" + @Model.ExecutionStatus + "' != '" + @PayrollExecutionStatusEnum.Submitted + "' && '" + @Model.ExecutionStatus + "' != '" + @PayrollExecutionStatusEnum.InProgress + "') {#<div style='float:left;'><button type='submit' id='btnExecutePayroll' class='btn btn-sm btn-primary' onclick=\"return BindData('ExecutePayroll');\">Execute Payroll</button>&nbsp;</div>#}#");
                    }
                    else if (Model.PayrollStateEnd == PayrollStateEnum.ExecutePayroll)
                    {
                        toolbar.ClientTemplate("#if ('" + @Model.ExecutionStatus + "' != '" + @PayrollExecutionStatusEnum.Submitted + "' && '" + @Model.ExecutionStatus + "' != '" + @PayrollExecutionStatusEnum.InProgress + "') {#<div style='float:left;'><button type='submit' id='btnExecutePayroll' class='btn btn-sm btn-primary' onclick=\"return BindData('ExecutePayroll');\">Execute Payroll</button>&nbsp;</div>#}#"
                            + "#if ('" + @Model.ExecutionStatus + "' != '" + @PayrollExecutionStatusEnum.Submitted + "' && '" + @Model.ExecutionStatus + "' != '" + @PayrollExecutionStatusEnum.InProgress + "') {#<div style='float:left;'><button type='submit' id='btnRollbackPayroll' class='btn btn-sm btn-danger' onclick=\"return BindData('RollBack');\">Rollback</button>&nbsp;</div>#}#"
                            + "#if ('" + @Model.ExecutionStatus + "' != '" + @PayrollExecutionStatusEnum.Submitted + "' && '" + @Model.ExecutionStatus + "' != '" + @PayrollExecutionStatusEnum.InProgress + "') {#<div style='float:left;'><button type='submit' id='btnInitiatePayrollService' class='btn btn-sm btn-info' onclick=\"return BindData('ClosePayroll');\">Close Payroll</button>&nbsp;</div>#}#" +
                            "<div style='padding-left:20px; padding-top:5px; float:left; color:black;font-size:18px;'> List of employees in this payroll </div>");

                    }
                    else
                    {
                        toolbar.ClientTemplate("<p style='padding-left:20px;padding-top:5px;float:left;color:black;font-size:18px;'>List of employees in this payroll</p>");
                    }
                })
                //.Events(e => e.DataBound("OnPayrollPersonDataBound"))
                .Scrollable(x => x.Enabled(true).Height(350))
                .Sortable(srt => srt.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Excel(e => e.FileName("Export.xlsx").AllPages(true))
                .Filterable(f => f.Extra(false)
                .Operators(o => o.ForString(s => s.Clear()
                .Contains("Contains")
                .IsEqualTo("Is equal to")
                )))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(10))
                .AutoBind(true)
                .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(20)
                .Read(read => read.Action("ReadPayrollRunListData", "PayrollRun", new { payrollGroupId = Model.PayrollGroupId, payrollId = Model.PayrollBatchId, payrollRunId = Model.Id, payrollState = Model.PayrollStateEnd, yearMonth = Model.YearMonth }))
                .Model(model => model.Id(p => p.PersonId)))
                )*@
                </div>
                <div id="kgrdPayrollPersonInList" style="width: 100%;height:550px" class="ag-theme-alpine">

                </div>
            }


            @if (Model.PayrollStateEnd == PayrollStateEnum.NotStarted || Model.PayrollStateEnd == PayrollStateEnum.ExecutePayroll || Model.PayrollStateEnd == PayrollStateEnum.RollBack)
            {
                <div class="row no-gutter hr-pad-top-10">
                    @if (Model.PayrollStateEnd == PayrollStateEnum.NotStarted)
                    {
                        //toolbar.ClientTemplate("<button id='btnExecutePayroll' class='btn btn-primary' onclick=\"return BindData('ExecutePayroll');\">Execute Payroll</button><span>Please select employees from below list to add them to current payroll run.</span>");
                        if (Model.ExecutionStatus != PayrollExecutionStatusEnum.Submitted && Model.ExecutionStatus != PayrollExecutionStatusEnum.InProgress)
                        {
                            <div style='float:left;'><button type='submit' id='btnExecutePayroll' class='btn btn-sm btn-primary' onclick="BindData('ExecutePayroll');">Execute Payroll</button>&nbsp;</div>
                        }
                        <div style='padding-left:20px; padding-top:5px; float:left; color:black;font-size:18px;'>Please select employees from below list to add them to current payroll run.</div>
                    }
                    else if (Model.PayrollStateEnd == PayrollStateEnum.ExecutePayroll || Model.PayrollStateEnd == PayrollStateEnum.RollBack)
                    {
                        if (Model.ExecutionStatus != PayrollExecutionStatusEnum.Submitted && Model.ExecutionStatus != PayrollExecutionStatusEnum.InProgress)
                        {
                            <div style='float:left;'>  <button type='submit' id='btnAddToPayroll' class='btn btn-sm btn-primary' onclick="BindData('AddToPayroll');">Add To Payroll</button></div>
                        }
                        <div style='padding-left:20px; padding-top:5px; float:left; color:black;font-size:18px;'>Please select employees from below list to add them to current payroll run.</div>
                    }
                    <div id="kgrdPayrollPersonNotInList"></div>
                    <script>


                $("#kgrdPayrollPersonNotInList").jsGrid({
                    width: "100%",
                    height: "600px",

                    inserting: false,
                    editing: true,
                    sorting: true,
                    paging: true,
                    autoload: true,
                    pageSize: 14,
                    pageButtonCount: 5,
                    deleteConfirm: "Do you really want to delete client?",

                    //data: clients,
                    controller: {
                        loadData: function (filter) {
                            return $.ajax({
                                type: "GET",
                                url: "/pay/PayrollRun/ReadPayrollRunPersonData?payrollGroupId=@Model.PayrollGroupId&payrollId=@Model.PayrollBatchId&payrollRunId=@Model.Id&payrollState=@Model.PayrollStateEnd&yearMonth=@Model.YearMonth",
                data: filter,
                dataType: "json"
            });
        },
        updateItem: function (item) {

        },
    },
    onItemEditing: function (e) {
        if (e.grid._container.find(".jsgrid-edit-row")[0] != undefined) {

            e.grid.updateItem();
        }
    },
    fields: [
        { name: "Select", type: "checkbox", width: 60 },
        { name: "PersonNo", type: "text", width: 150, editing: false },
        { name: "PersonName", type: "text", width: 250, editing: false },
        { name: "DateOfJoin", type: "text", width: 200, editing: false },
        { name: "OrganizationName", type: "text", width: 200, editing: false },
        { name: "JobName", type: "text", width: 200, editing: false },


    ]
});
                    </script>
                    @*@(Html.Kendo().Grid<PayrollSalaryElementViewModel>
                        ().Name("kgrdPayrollPersonNotInList")
                        .Columns(col =>
                        {
                            col.Select().Width(40);
                            col.Bound(c => c.PersonNo).Title("Employee No").Width(150);
                            col.Bound(c => c.PersonName).Width(250);
                            col.Bound(c => c.DateOfJoin).Width(200);
                            col.Bound(c => c.OrganizationName).Width(200);
                            col.Bound(c => c.JobName).Width(200);

                        })
                        .ToolBar(toolbar =>
                        {
                            if (Model.PayrollStateEnd == PayrollStateEnum.NotStarted)
                            {
                                //toolbar.ClientTemplate("<button id='btnExecutePayroll' class='btn btn-primary' onclick=\"return BindData('ExecutePayroll');\">Execute Payroll</button><span>Please select employees from below list to add them to current payroll run.</span>");
                                toolbar.ClientTemplate("#if ('" + @Model.ExecutionStatus + "' != '" + @PayrollExecutionStatusEnum.Submitted + "' && '" + @Model.ExecutionStatus + "' != '" + @PayrollExecutionStatusEnum.InProgress + "') {#<div style='float:left;'><button type='submit' id='btnExecutePayroll' class='btn btn-sm btn-primary' onclick=\"return BindData('ExecutePayroll');\">Execute Payroll</button>&nbsp;</div>#}#" +
                                        "<div style='padding-left:20px; padding-top:5px; float:left; color:black;font-size:18px;'>Please select employees from below list to add them to current payroll run.</div>");
                            }
                            else if (Model.PayrollStateEnd == PayrollStateEnum.ExecutePayroll || Model.PayrollStateEnd == PayrollStateEnum.RollBack)
                            {
                                toolbar.ClientTemplate("#if ('" + @Model.ExecutionStatus + "' != '" + @PayrollExecutionStatusEnum.Submitted + "' && '" + @Model.ExecutionStatus + "' != '" + @PayrollExecutionStatusEnum.InProgress + "') {#<div style='float:left;'>  <button type='submit' id='btnAddToPayroll' class='btn btn-sm btn-primary' onclick=\"return BindData('AddToPayroll');\">Add To Payroll</button></div>#}#" +
                                         "<div style='padding-left:20px; padding-top:5px; float:left; color:black;font-size:18px;'>Please select employees from below list to add them to current payroll run.</div>");
                            }
                        })
                        //.Events(e => e.DataBound("OnPayrollPersonDataBound"))
                        .Scrollable(x => x.Enabled(true).Height(350))
                        .Sortable(srt => srt.Enabled(true))
                        .Selectable(select => select.Enabled(false))
                        .Excel(e => e.FileName("Export.xlsx").AllPages(true))
                        .Filterable(f => f.Extra(false)
                        .Operators(o => o.ForString(s => s.Clear()
                        .Contains("Contains")
                    )))
                    .Pageable(pageable => pageable
                    .Refresh(true)
                    .PageSizes(true)
                    .ButtonCount(10))
                    .AutoBind(true)
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    .Read(read => read.Action("ReadPayrollRunPersonData", "PayrollRun", new { payrollGroupId = Model.PayrollGroupId, payrollId = Model.PayrollBatchId, payrollRunId = Model.Id, payrollState = Model.PayrollStateEnd, yearMonth = Model.YearMonth }))
                    .Model(model => model.Id(p => p.PersonId))
                    )
                )*@
                </div>
            }

            @Html.HiddenFor(x => x.DataAction)
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.PayrollBatchId)
            @Html.HiddenFor(x => x.PersonsNotInList)
            @Html.HiddenFor(x => x.PersonsInList)
            @Html.HiddenFor(x => x.PayrollStateStart)
            @Html.HiddenFor(x => x.PayrollStateEnd)
            @Html.HiddenFor(x => x.ExecutionStartDate)
            @Html.HiddenFor(x => x.ExecutionEndDate)
            @Html.HiddenFor(x => x.PayRollNo)
            @Html.HiddenFor(x => x.PayrollRunDate)
            @Html.HiddenFor(x => x.PayrollGroupId)
            @Html.HiddenFor(x => x.YearMonth)
            @Html.HiddenFor(x => x.TotalEarning)
            @Html.HiddenFor(x => x.TotalDeduction)
            @Html.HiddenFor(x => x.NetAmount)
            @Html.HiddenFor(x => x.TotalProcessed)
            @Html.HiddenFor(x => x.TotalSucceeded)
            @Html.HiddenFor(x => x.NoteId)
        </div>
    </div>

</form>


<script id="customer-item-template" type="text/x-kendo-template">
    <div style="background-color:aliceblue;padding:5px;">
        <h5 class="k-state-default" style="color:darkorange;">#:Name#</h5>
        <h6 class="k-state-default">#:OrganizationName#</h6>
        <h6 class="k-state-default">#:JobName#</h6>
    </div>
</script>

<script type="text/javascript">
    $(document).ready(function () {

        //$(".person-checkboxAll").bind("change", function (e) {
        //                if ($(this).is(":checked")) {
        //        $('.person-checkbox').prop('checked', true);
        //        $(".person-checkbox").closest("tr").addClass("k-state-selected");
        //                } else {
        //        $('.person-checkbox').prop('checked', false);
        //        $(".person-checkbox").closest("tr").removeClass("k-state-selected");
        //                }
        //            });
                });

                //$('input.checkbox[type=checkbox]').each(function (e) {
                //    alert(this.checked    )
                //    if (this.checked) {
                //        $(element).prop('checked', false);
                //        $(this).closest("tr").addClass("k-state-selected");
                //    }
                //    //else {
                //    //    $(element).prop('checked', true);
                //    //    $(element).closest("tr").removeClass("k-state-selected");
                //    //}
                //});
                function OnPayrollPersonRowSelection(element) {
                    var isChecked = $(element).is(':checked');

                    if (isChecked) {
                $(element).prop('checked', true);
                $(element).closest("tr").addClass("k-state-selected");
                    }
                    else {
                $(element).prop('checked', false);
                $(element).closest("tr").removeClass("k-state-selected");
                    }
                    var numChkBoxes = $('#kgrdPayrollPersonNotInList input[type=checkbox][class=person-checkbox]').length;
                    var numChkBoxesChecked = $('#kgrdPayrollPersonNotInList tbody input:checkbox:checked').length;
                    if (numChkBoxes == numChkBoxesChecked && numChkBoxes > 0) {
                $('.person-checkboxAll').prop('checked', true);
                    }
                    else {

                $('.person-checkboxAll').prop('checked', false);
                    }

            }

            var onAjaxSuccess = function (res) {

                if (res.success) {

                    //alert("ajax sucess02");
                    if (res.operation == '@DataActionEnum.Create') {
                        ShowNotification("Payroll created Successfully", "success");
                    }
                    else if (res.operation == '@DataActionEnum.Edit') {
                        ShowNotification("Payroll updated Successfully", "success");
                    }
                    else if (res.operation == "@DataActionEnum.Edit") {
                        if (response.state == "@PayrollStateEnum.AddToPayroll") {
                            alert('Selected employees added to the current payroll');
                            $("#kgrdPayrollPersonNotInList").data("kendoGrid").dataSource.read({ payrollGroupId: '@Model.PayrollGroupId', payrollId: '@Model.PayrollBatchId', payrollRunId: '@Model.Id', payrollState: '@Model.PayrollStateEnd', yearMonth: '@Model.YearMonth' });
                            @*$("#kgrdPayrollPersonInList").data("kendoGrid").dataSource.read({ payrollGroupId: '@Model.PayrollGroupId', payrollId: '@Model.PayrollBatchId', payrollRunId: '@Model.Id', payrollState: '@Model.PayrollStateEnd', yearMonth: '@Model.YearMonth' });*@
                            getPayrollPersonInList();
                            return false;
                        }
                        else if (res.state == "@PayrollStateEnum.ExecutePayroll") {
                            ShowNotification("Payroll execution request submitted successfully", "success");
                        }
                        else if (res.state == "@PayrollStateEnum.InitiateService") {
                            ShowNotification("Payroll service initiated successfully", "success");
                        }
                        else if (res.state == "@PayrollStateEnum.RollBack") {
                            ShowNotification("Payroll rollback request submitted successfully", "success");
                        }
                        else {
                            ShowNotification("Payroll updated Successfully", "success");
                        }
                    }
                    else if (res.operation == "@DataActionEnum.Delete") {
                        ShowNotification("Payroll deleted Successfully", "success");
                    }

                    window.location.href = window.location.href;
                    var win = GetMainWindow();
                    win.parent.$("#kgrdPayrollBatch").data("kendoGrid").dataSource.read();
                }
        else {
            showError(res.error);
        }
    };

    function OnCancel() {
                    window.parent.Close(false);
                    return true;
                }
    @*function OpenPayrollService() {
        var encodedUrl = encodeURIComponent('/pay/payrollrunresult?payrollRunId='+@Model.Id+'&payrollId='+@Model.PayrollBatchId);
        window.open('/nts/service/manage?serviceId='@Model.PayrollRunServiceId'&ru=' + encodedUrl, '_self');
        return false;
    }*@
    function Refresh() {
        window.location.href = window.location.href;
    }
    function ShowErrors(err) {
        $(".hr-v-summary").removeClass("validation-summary-valid");
        $(".hr-v-summary").addClass("validation-summary-errors");
        var msg = ExtractError(err);
        $(".hr-v-summary ul").html(msg);
    }
    function AddToPayroll() {
        var pgrid = $("#kgrdPayrollPersonNotInList").data("kendoGrid");
        var personIds = '';
        pgrid.tbody.find("input:checked").closest("tr").each(function (index) {
            personIds = personIds + pgrid.dataItem(this).PersonId + ',';
        });
        if (personIds == '' || personIds == ',') {
            alert("Please Select atleast one employee from the list");
        }
        else {
            $.ajax({
                url: "@Url.Action("AddPersonToPayrollRun", "PayrollRun")",
                type: 'POST',
                data: {
                    payrollRunId: '@Model.Id',
                    persons: personIds,
                    payRunNoteId:'@Model.NoteId'
                },
                success: function (data) {
                    $("#kgrdPayrollPersonNotInList").data("kendoGrid").dataSource.read({ payrollGroupId: '@Model.PayrollGroupId', payrollId: '@Model.PayrollBatchId', payrollRunId: '@Model.Id', payrollState: '@Model.PayrollStateEnd', yearMonth: '@Model.YearMonth' });
                    @*$("#kgrdPayrollPersonInList").data("kendoGrid").dataSource.read({ payrollGroupId: '@Model.PayrollGroupId', payrollId: '@Model.PayrollBatchId', payrollRunId: '@Model.Id', payrollState: '@Model.PayrollStateEnd', yearMonth: '@Model.YearMonth' });*@
                    getPayrollPersonInList();
                    $("#btnInitiatePayrollService").hide();
                    return false;
                }
            });
            return false;
        }

    }
    function BindData(val, freeze) {
        
        var pgrid = $("#kgrdPayrollPersonNotInList").data("JSGrid")
        if (pgrid._editingRow != null) {
            pgrid.updateItem();
        }    
        if (val == '@PayrollStateEnum.ClosePayroll') {
            if (!confirm('Are you sure you want to close this payroll? You cannot undo this process. Please confirm')) {
                return false;
            }
        }
        else  if (val == '@PayrollStateEnum.RollBack') {
            if (!confirm('Are you sure you want to rollback this payroll?')) {
                return false;
            }
        }
        else  if (val == '@PayrollStateEnum.ExecutePayroll') {
            if (!confirm('Are you sure you want to execute this payroll?')) {
                return false;
            }
        }

        $("#PayrollStateStart").val(val);
        $("#PayrollStateEnd").val(val);
        
        //var pgrid = $("#kgrdPayrollPersonNotInList").data("kendoGrid");
        //if (pgrid != null && pgrid != 'undefined') {

        //    var personIds = '';
        //    pgrid.tbody.find("input:checked").closest("tr").each(function (index) {
        //        personIds = personIds + pgrid.dataItem(this).PersonId + ',';
        //    });
        //    $("#PersonsNotInList").val(personIds);
        //}
        var personIds = '';
        for (var i = 0; i < pgrid.data.length; i++) {
            if (pgrid.data[i].Select == true) {
                personIds = personIds + pgrid.data[i].PersonId + ',';
                //selectedDataItems.push(entityGrid.data[i]);

            }

        }
        $("#PersonsNotInList").val(personIds);
        alert(personIds);
        //var lgrid = $("#kgrdPayrollPersonInList").data("kendoGrid");
        //if (lgrid != null && lgrid != 'undefined') {
        //    var data = lgrid.dataSource.data();
        //    var listIds = '';
        //    $.each(data, function (i, row) {
        //        listIds = listIds + row.PersonId + ',';
        //    });
        //    $("#PersonsInList").val(listIds);
        //}
        var listIds = '';
        gridOptions.api.forEachNode((rowNode, index) => {
            listIds = listIds + rowNode.data.PersonId + ',';
        });
        $("#PersonsInList").val(listIds);
        if (val == '@PayrollStateEnum.AddToPayroll' && personIds == '') {
            alert('Please select atleast one employee from the list');
            return false;
        }
        return false;
        //return true;
    }
</script>
