@using Synergy.App.Common;
@using Synergy.App.ViewModel
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@{
    ViewData["Title"] = "Editor";
    Layout = "/Views/Shared/_EditorLayout.cshtml";
    //Layout = "/Views/Shared/_Reference.cshtml";
}
<style>
    .gjs-pn-commands, .gjs-pn-views, .gjs-pn-options {
        /*height: 48px;*/
    }

    .gjs-pn-devices-c .gjs-pn-buttons {
        align-items: unset;
    }

    .gjs-pn-views-container {
        /*top:48px;*/
    }

    .fa {
        font-size: 18px !important;
    }
</style>
<div id="gjs" style="height:0px; overflow:hidden;">
    <div class="row">
        <div class="cell">
            <div data-gjs-type="text" draggable="true" data-highlightable="1" class="" contenteditable="false" style="padding:10px;">
                Insert your text here
            </div>
        </div>
    </div>
    <style>
        .panel {
            width: 90%;
            max-width: 700px;
            border-radius: 3px;
            padding: 30px 20px;
            margin: 150px auto 0px;
            background-color: #d983a6;
            box-shadow: 0px 3px 10px 0px rgba(0,0,0,0.25);
            color: rgba(255,255,255,0.75);
            font: caption;
            font-weight: 100;
        }

        .welcome {
            text-align: center;
            font-weight: 100;
            margin: 0px;
        }

        .logo {
            width: 70px;
            height: 70px;
            vertical-align: middle;
        }

            .logo path {
                pointer-events: none;
                fill: none;
                stroke-linecap: round;
                stroke-width: 7;
                stroke: #fff
            }

        .big-title {
            text-align: center;
            font-size: 3.5rem;
            margin: 15px 0;
        }

        .description {
            text-align: justify;
            font-size: 1rem;
            line-height: 1.5rem;
        }
    </style>
</div>
<input type="hidden" id="NoteId" />
<input type="hidden" id="DataAction" />
<script type="text/javascript">
    @{
         string baseurl = ApplicationConstant.AppSettings.ApplicationBaseUrl(Configuration);

    }

    var editor = grapesjs.init({
        showOffsets: 1,
        noticeOnUnload: 0,
        container: '#gjs',
        height: '100%',
        fromElement: true,
        storageManager: { autoload: false, autosave: false },
        plugins: ['gjs-preset-webpage', 'grapesjs-component-code-editor', 'grapesjs-plugin-carousel'],
        pluginsOpts: {
            'gjs-preset-webpage': {
                // options
            },
            'grapesjs-component-code-editor': {
                // options
            },
            'grapesjs-plugin-carousel': {
                interval: 5000,
                autoplay: true,
                gridsCategory: 'Extra',
                prefixName:'bst-carousel'
            }
        }
    });

    editor.Panels.getPanels().models[1].buttons.add({
        id: 'open-code',
        className: 'fa fa-file-code-o',
        command: 'open-code',
        attributes: { title: 'Open Code' },
        //togglable: false,
        active: false,
    })
    editor.Panels.getPanels().models[3].buttons.add([
        {
            id: 'save',
            className: 'fa fa-save',
            command: '',
            attributes: {
                title: 'Save', id: 'save', onclick: 'onSave()'
            },
            //togglable: false,
            active: false,
        },
        {
        id: 'glink-as-btn',
        className: 'fa fa-link',
        command: '',
        attributes: {
            title: 'Copy Link', id: 'glink-as-btn' },
        //togglable: false,
        active: false,
        },{
            id: 'gallery-as-btn',
            className: 'fa fa-image',
            command: '',
            attributes: { title: 'Image Gallery', id: 'gallery-as-btn', onclick:"onOpenGallery()" },
            //togglable: false,
            active: false,
        }])
    editor.BlockManager.add('TextBlock', {
        label: 'Text Block',
        attributes: { class: 'gjs-fonts gjs-f-text' },
        category: 'Basic',
        content: `<div class="row">
  <div class="cell">
    <div  data-gjs-type="text" draggable="true" data-highlightable="1" class="" contenteditable="false" style="padding:10px;">Insert your text here
    </div>
  </div>
</div>`
     })

    editor.DomComponents.addType('test-component', {
        extend:'link',
        model: {

            defaults: {
                testprop: 1,
            },
            init() {
                var url = '/Cms/Editor/AddExistingPage?compId=' + this.cid;
                var win = GetMainWindow();
                win.iframeOpenUrl = url;
                win.OpenWindow({ Title: 'Select Page', Width: 750, Height: 450 });
            },
            updated(property, value, prevValue) {
                //console.log('Local hook: model.updated',
                    //'property', property, 'value', value, 'prevValue', prevValue);
            },
            removed() {
                //console.log('Local hook: model.removed');
            },
            handlePropChange() {
                //console.log('The value of testprop', this.get('testprop'));
            }
        },
        view: {
            init() {
                //console.log('Local hook: view.init');
            },
            onRender({ el }) {
                //
                //const btn = document.createElement('button');
                //btn.value = '+';
                //// This is just an example, AVOID adding events on inner elements,
                //// use `events` for these cases
                //btn.addEventListener('click', () => { });
                //el.appendChild(btn);
            },

        },
    });


    // A block for the custom component
    editor.BlockManager.add('test-component', {
        label: 'Custom Link',
        attributes: { class: 'fa fa-link' },
        category: 'Basic',
        content: '<a data-gjs-type="test-component" onclick="bookPageNavigation(this)"   draggable="false" data-highlightable="1" bookid="1" pageid="1">Link</a>',
    });

    
    function onSave() {        
        kendo.ui.progress($('#gjs'), true);
        var json = JSON.stringify(editor.getComponents());
        var style = JSON.stringify(editor.getStyle());
        var html = JSON.stringify(editor.getHtml());
        var css = JSON.stringify(editor.getCss());
        var win = GetMainWindow();
        win.CloseWindow({
            MethodName: '@ViewBag.cbm', Prms: { df: '@ViewBag.DisplayFiled', jf: '@ViewBag.JsonField', hf: '@ViewBag.HtmlField', sf: '@ViewBag.StyleField', cf: '@ViewBag.CssField', json: json, html: html, style: style,css:css }
            });
        return false;
    }
    $(document).ready(function () {
        var m = GetMainWindow();
        var p = m.GetParentWindow();
        document.getElementById("NoteId").value = '@ViewBag.Id';
        //var sds = $("input[name$='CategoryName']", p.document);
        //var jf = p.document.getElementsByName("data[@ViewBag.JsonField]")[0];
        var hf = p.document.getElementsByName("data[@ViewBag.HtmlField]")[0];
        //var cf = p.document.getElementsByName("data[@ViewBag.CssField]")[0];
        var sf = p.document.getElementsByName("data[@ViewBag.StyleField]")[0];
        editor.setComponents(JSON.parse(hf.value));
        editor.setStyle(JSON.parse(sf.value));
    });

     var clipboard = new ClipboardJS('#glink-as-btn', {
        text: function () {
             var id = document.getElementById("NoteId").value;
            var url = "@baseurl" + "cms/editor/render?enc=" + EncryptParams('id=' + id);
            alert("Link Copied.")
            return url;
        },
    });
    function onOpenGallery() {
        var id = document.getElementById("NoteId").value;
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("gallery", "Editor", new { @area= "Cms" })?id='+id;
        win.OpenWindow({ Title: 'Image Gallery', Width: 925, Height: 700});
        return false;
    }

</script>



