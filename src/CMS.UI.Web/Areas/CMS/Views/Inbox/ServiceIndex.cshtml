@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using Kendo.Mvc.UI;
@using Kendo.Mvc.Extensions;

@{
    ViewData["Title"] = "Services";
    Layout = null;
}
<script>
        function OnDeleteListOfValue(e) {
        var flag = confirm('Do you really want to delete the ListOfValue?');
        //alert("..Delete");
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        if (flag) {
            $.ajax({
                url:'@Url.Action("Delete", "LOV", new { @area= "Cms" })?Id=' + dataItem.id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        $("#ListOfValuegrid").data("kendoGrid").dataSource.read();
                        kendo.alert("ListOfValue Deleted Successfully.");
                    } else {
                        $("#ListOfValuegrid").data("kendoGrid").dataSource.read();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    //
                    $("#ListOfValuegrid").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }
      function OnCreateListOfValue() {

        
            var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Create", "LOV", new { @area="Cms"})';
          win.OpenWindow({ Title: 'Manage ListOfValue', Width: 450, Height: 850 });
        return false;

    }
    function OnView(id) {
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var source = '@RequestSourceEnum.View.ToString()';
        var action = '@DataActionEnum.View.ToString()';
        var portalId = window.parent.$('#GlobalPortalId').val();
        var win = GetMainWindow();
        var url = '/Cms/Page?lo=Popup&pageType=Service&source=' + source + '&dataAction=' + action + '&templateCodes=@ViewBag.TemplateCode&portalId=' + portalId + '&recordId=' + id;
        win.iframeOpenUrl = url;@*'@Url.Action("NtsServicePage", "NtsService", new { @area = "Cms" })?lo=Popup&cbm=OnAfterServiceCreate&serviceId=' + id + '&dataAction=' + action + '&portalId=' + portalId+'&pageName=NtsServiceTest';*@
        win.OpenWindow({ Title: '@Html.Raw(SharedResource["Service"])', Width: 1200, Height: 600 });
    }


</script>

<script>

    
    var columnDefs = [
        {
            field: "ServiceSubject",
           
        },
           {
               field: "ServiceNo",
           },
           {
               field: "ServiceStatusName",

           },
           {
               field: "OwnerUserUserName",
               headerName:"Owner"
           },
       
       
        {
            field: "StartDate",
            cellRenderer: params => {

                var date = new Date(params.value);
                return date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
            }
        },
       
        {
            field: "DueDate",
            cellRenderer: params => {

                var date = new Date(params.value);
                return date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
            }
        },
       
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBin11' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        getServiceData();

      

        $.contextMenu({
            selector: '#tree-menuBin',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'view':
                                        OnView(id);
                                        break;

                                    case 'delete':
                                      
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "view": { name: "View", icon: "fas fa-eye" },
                              


                            }
                        };


                }
            }
        });


    });

    function getServiceData() {
        document.getElementById("ListOfValuegrid").innerHTML = "";
        gridConfig(
            "ListOfValuegrid",
            "/cms/Inbox/ReadData?templateCode=@ViewBag.TemplateCode&statusName=@ViewBag.StatusName",
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>
<div>
    <h4>@ViewBag.Title</h4>

    <hr />

    <div class="row">
        <div class="col-12">
            <br /><br />
            <div id="ListOfValuegrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
            @*@(Html.Kendo().Grid<ServiceViewModel>
        ()
        .Name("ListOfValuegrid")


        .Columns(columns =>

        {
            columns.Command(command =>
            {
                command.Custom("View").Text("<i class='fa fas fa-eye'></i>").Click("OnView").HtmlAttributes(new { @class = "action-icon" });
                //command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteListOfValue").HtmlAttributes(new { @class = "action-icon" });
            }).Title("Action").Width(100);

            columns.Bound(c => c.ServiceSubject);
            columns.Bound(c => c.ServiceNo);
            columns.Bound(c => c.ServiceStatusName);
            columns.Bound(c => c.OwnerUserUserName).Title("Owner");
            columns.Bound(c => c.StartDate).Format("{0:dd MMM yyyy}");
            columns.Bound(c => c.DueDate).Format("{0:dd MMM yyyy}");


        })
        .Scrollable(x => x.Enabled(false))
                    .Sortable(srt => srt.Enabled(true))
                    .Selectable(select => select.Enabled(false))
                    .Filterable(f => f.Extra(false)
                    .Operators(o => o.ForString(s => s.Clear()
                    .Contains("Contains")
                    .IsEqualTo("Is equal to")
                    )))
                    .Pageable(pageable => pageable
                    .Refresh(true)

                    .PageSizes(true)
                    .ButtonCount(5))
                    .AutoBind(true)
                    .DataSource(
                    dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    //.Events(events => events.Error("OnError"))
                    .Read(read => read.Action("ReadServiceData", "Inbox",new { templateCode=ViewBag.TemplateCode,statusName= ViewBag.StatusName }))
                    .Model(model => model.Id(p => p.Id))
                    )
              )*@

        </div>
    </div>
</div>
