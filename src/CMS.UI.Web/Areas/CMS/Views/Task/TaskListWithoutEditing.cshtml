@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using Syncfusion.EJ2;
@model RecTaskViewModel
@{
    ViewBag.Title = "All Tasks";
    Layout = "~/Areas/CMS/Views/Shared/_LayoutCms1.cshtml";
    //Layout = "/Views/Shared/_PopupLayout.cshtml";
    //Layout = null;
}
<script type="text/javascript">
    function onGridSaveCriteria(arg) {

    }
    function onDownload(id) {
        url = '/cms/Document/GetFileMongo?fileId=' + id;
        window.open(url, '_blank');
        return false;
    }
    $(document).ready(function () {

       // ShowLoader();
        @*
        if ('@ViewBag.DataSourceHeader.DropdownDisplay1' != null && '@ViewBag.DataSourceHeader.DropdownDisplay1' != "") {
            $.ajax({
                type: "GET",
                url: '@ViewBag.DataSourceHeader.DropdownValueMethod1&viewData=DataSource1',
                dataType: "json",
                success: function (result) {

                },
                error: function (xhr, httpStatusMessage, customErrorMessage) {
                    alert(customErrorMessage);

                }
            });
        }

        if ('@ViewBag.DataSourceHeader.DropdownDisplay2' != null && '@ViewBag.DataSourceHeader.DropdownDisplay2' != "") {
            $.ajax({
                type: "GET",
                url: '@ViewBag.DataSourceHeader.DropdownValueMethod2&viewData=DataSource2',
                dataType: "json",
                success: function (result) {

                },
                error: function (xhr, httpStatusMessage, customErrorMessage) {
                    alert(customErrorMessage);

                }
            });
        }

        if ('@ViewBag.DataSourceHeader.DropdownDisplay3' != null && '@ViewBag.DataSourceHeader.DropdownDisplay3' != "") {
            $.ajax({
                type: "GET",
                url: '@ViewBag.DataSourceHeader.DropdownValueMethod3&viewData=DataSource3',
                dataType: "json",
                success: function (result) {

                },
                error: function (xhr, httpStatusMessage, customErrorMessage) {
                    alert(customErrorMessage);

                }
            });
        }

        if ('@ViewBag.DataSourceHeader.DropdownDisplay4' != null && '@ViewBag.DataSourceHeader.DropdownDisplay4' != "") {
            $.ajax({
                type: "GET",
                url: '@ViewBag.DataSourceHeader.DropdownValueMethod4&viewData=DataSource4',
                dataType: "json",
                success: function (result) {

                },
                error: function (xhr, httpStatusMessage, customErrorMessage) {
                    alert(customErrorMessage);

                }
            });
        }
        if ('@ViewBag.DataSourceHeader.DropdownDisplay5' != null && '@ViewBag.DataSourceHeader.DropdownDisplay5' != "") {
            $.ajax({
                type: "GET",
                url: '@ViewBag.DataSourceHeader.DropdownValueMethod5&viewData=DataSource5',
                dataType: "json",
                success: function (result) {

                },
                error: function (xhr, httpStatusMessage, customErrorMessage) {
                    alert(customErrorMessage);

                }
            });
        }
        if ('@ViewBag.DataSourceHeader.DropdownDisplay6' != null && '@ViewBag.DataSourceHeader.DropdownDisplay6' != "") {
            $.ajax({
                type: "GET",
                url: '@ViewBag.DataSourceHeader.DropdownValueMethod6&viewData=DataSource6',
                dataType: "json",
                success: function (result) {

                },
                error: function (xhr, httpStatusMessage, customErrorMessage) {
                    alert(customErrorMessage);

                }
            });
        }
        if ('@ViewBag.DataSourceHeader.DropdownDisplay7' != null && '@ViewBag.DataSourceHeader.DropdownDisplay7' != "") {
            $.ajax({
                type: "GET",
                url: '@ViewBag.DataSourceHeader.DropdownValueMethod7&viewData=DataSource7',
                dataType: "json",
                success: function (result) {

                },
                error: function (xhr, httpStatusMessage, customErrorMessage) {
                    alert(customErrorMessage);

                }
            });
        }
        if ('@ViewBag.DataSourceHeader.DropdownDisplay8' != null && '@ViewBag.DataSourceHeader.DropdownDisplay8' != "") {
            $.ajax({
                type: "GET",
                url: '@ViewBag.DataSourceHeader.DropdownValueMethod8&viewData=DataSource8',
                dataType: "json",
                success: function (result) {

                },
                error: function (xhr, httpStatusMessage, customErrorMessage) {
                    alert(customErrorMessage);

                }
            });
        }
         if ('@ViewBag.DataSourceHeader.DropdownDisplay9' != null && '@ViewBag.DataSourceHeader.DropdownDisplay9' != "") {
            $.ajax({
                type: "GET",
                url: '@ViewBag.DataSourceHeader.DropdownValueMethod9&viewData=DataSource9',
                dataType: "json",
                success: function (result) {

                },
                error: function (xhr, httpStatusMessage, customErrorMessage) {
                    alert(customErrorMessage);

                }
            });
        }
        if('@ViewBag.DataSourceHeader.DropdownDisplay10' != null && '@ViewBag.DataSourceHeader.DropdownDisplay10' != "") {
            $.ajax({
                type: "GET",
                url: '@ViewBag.DataSourceHeader.DropdownValueMethod10&viewData=DataSource10',
                dataType: "json",
                success: function (result) {

                },
                error: function (xhr, httpStatusMessage, customErrorMessage) {
                    alert(customErrorMessage);

                }
            });
        }*@


    });
</script>

@if (ViewBag.DataSource != null)
{
    <div class="main">
        <script type="text/x-jsrender" id="columnTemplate">
            <div onclick="onDownload('${AttachmentCode2}')" style="cursor:pointer" title="Click here to download">
                <span style="font-size: 18px;text-align: center;color: dodgerblue" id="Av2">
                    ${AttachmentValue2}
                </span>
            </div>
        </script>

        @{
            var DropDownList3 = new Syncfusion.EJ2.DropDowns.DropDownList()
            {
                DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod3 + @"&viewData=DataSource3" },
                Query = "new ej.data.Query()",
                Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            };
        }
        @{ var DropDownList1 = new Syncfusion.EJ2.DropDowns.DropDownList()
            {
                DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod1 + @"&viewData=DataSource1" },
                Query = "new ej.data.Query()",
                Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            };

            var DropDownList2 = new Syncfusion.EJ2.DropDowns.DropDownList()
            {
                DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod2 },
                Query = "new ej.data.Query()",
                Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            };



            var DropDownList4 = new Syncfusion.EJ2.DropDowns.DropDownList()
            {
                DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod4 },
                Query = "new ej.data.Query()",
                Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            };

            var DropDownList5 = new Syncfusion.EJ2.DropDowns.DropDownList()
            {
                DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod5 },
                Query = "new ej.data.Query()",
                Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            };

            var DropDownList6 = new Syncfusion.EJ2.DropDowns.DropDownList()
            {
                DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod6 },
                Query = "new ej.data.Query()",
                Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            };

            var DropDownList7 = new Syncfusion.EJ2.DropDowns.DropDownList()
            {
                DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod7 },
                Query = "new ej.data.Query()",
                Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            };

            var DropDownList8 = new Syncfusion.EJ2.DropDowns.DropDownList()
            {
                DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod8 },
                Query = "new ej.data.Query()",
                Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            };

            var DropDownList9 = new Syncfusion.EJ2.DropDowns.DropDownList()
            {
                DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod9 },
                Query = "new ej.data.Query()",
                Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            };

            var DropDownList10 = new Syncfusion.EJ2.DropDowns.DropDownList()
            {
                DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod10 },
                Query = "new ej.data.Query()",
                Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            };
        }
        @{

            var DropDownListAction = new Syncfusion.EJ2.DropDowns.DropDownList()
            {
                DataSource = new List<IdNameViewModel>() { new IdNameViewModel { Id = "2", Name = "Complete" }, new IdNameViewModel { Id = "7", Name = "Reject" }, new IdNameViewModel { Id = "24", Name = "NotApplicable" } },
                //DataSource = (IEnumerable<object>)ViewBag.DataSource1,
                Query = "new ej.data.Query()",
                Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            };
            var DropDownListUser = new Syncfusion.EJ2.DropDowns.DropDownList()
            {
                //DataSource = new List<IdNameViewModel>() { new IdNameViewModel { Id = "2", Name = "Complete" }, new IdNameViewModel { Id = "7", Name = "Reject" }, new IdNameViewModel { Id = "24", Name = "NotApplicable" } },
                DataSource = (IEnumerable<object>)ViewBag.DataSourceUser,
                Query = "new ej.data.Query()",
                Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            };
        }


        @*<h4 style="color:Highlight">@ViewBag.DataSourceHeader.Subject</h4>*@
        @Html.EJS().Grid("Grid").DataSource((IEnumerable<object>)ViewBag.DataSource).AllowFiltering(true).Height(300).ActionComplete("actionComplete").ActionBegin("actionBegin").Columns(col =>
    {
        col.Type("checkbox").Width("50").Add();
        col.Field("GridTemplateAction").HeaderText("Action").ValueAccessor("DisplayDescription").EditType("dropdownedit").Edit(new { @params = DropDownListAction }).Width("200").ValidationRules(new { required = true }).Add();
        col.Field("TextValue1").AllowFiltering(true).AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit1).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).
                   Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" &&
                   !(ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DateTimePicker ||
                   ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_HyperLink || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_HtmlArea || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_Hidden)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay1 }).Add();
        col.Field("TextValue2").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit2).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).
                Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" &&
                !(ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DateTimePicker ||
                ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay2 }).Add();
        col.Field("TextValue3").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit3).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).
             Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" &&
             !(ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DateTimePicker ||
             ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay3 }).Add();
        col.Field("TextValue4").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit4).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).
                        Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" &&
                        !(ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DateTimePicker ||
                        ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay4 }).Add();
        col.Field("TextValue5").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit5).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).
                           Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" &&
                           !(ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DateTimePicker ||
                           ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay5 }).Add();
        col.Field("TextValue6").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit6).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).
                               Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" &&
                               !(ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DateTimePicker ||
                               ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay6 }).Add();
        col.Field("TextValue7").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit7).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).
                              Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" &&
                              !(ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DateTimePicker ||
                              ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay7 }).Add();
        col.Field("TextValue8").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit8).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).
                                   Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" &&
                                   !(ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DateTimePicker ||
                                   ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay8 }).Add();
        col.Field("TextValue9").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit9).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).
                                       Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" &&
                                       !(ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DateTimePicker ||
                                       ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay9 }).Add();
        col.Field("TextValue10").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit10).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).
                                           Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" &&
                                           !(ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DateTimePicker ||
                                           ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_HyperLink || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_HtmlArea || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_Hidden)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay10 }).Add();


        col.Field("TaskNo").AllowFiltering(true).IsPrimaryKey(true).HeaderText("TaskNo").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();

        col.Field("Subject").HeaderText("Subject").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
        col.Field("CandidateName").HeaderText("Candidate Name").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
        col.Field("JobName").HeaderText("Position").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
        col.Field("OrgUnitName").HeaderText("Org Unit").Width("150").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
        col.Field("GaecNo").HeaderText("GAEC No").Width("150").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();



        col.Field("StartDate").HeaderText("StartDate").AllowEditing(false).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).Add();




        col.Field("AssigneeUserId").AllowEditing(false).HeaderText("AssigneeUserName").ValueAccessor("DisplayDescription").EditType("dropdownedit").Edit(new { @params = DropDownListUser }).Width("200").Add(); ;



        col.Field("DropdownValue1").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit1).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay1).Visible(ViewBag.DataSourceHeader.DropdownDisplay1 != null && ViewBag.DataSourceHeader.DropdownDisplay1 != "").EditType("dropdownedit").Edit(new { @params = DropDownList1 }).Width("200").Add();


        col.Field("DropdownValue2").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit2).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay2).Visible(ViewBag.DataSourceHeader.DropdownDisplay2 != null && ViewBag.DataSourceHeader.DropdownDisplay2 != "").EditType("dropdownedit").Edit(new { @params = DropDownList2 }).Width("200").Add();


        col.Field("DropdownValue3").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit3).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay3).Visible(ViewBag.DataSourceHeader.DropdownDisplay3 != null && ViewBag.DataSourceHeader.DropdownDisplay3 != "").EditType("dropdownedit").Edit(new { @params = DropDownList3 }).Width("200").Add();


        col.Field("DropdownValue4").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit4).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay4).Visible(ViewBag.DataSourceHeader.DropdownDisplay4 != null && ViewBag.DataSourceHeader.DropdownDisplay4 != "").EditType("dropdownedit").Edit(new { @params = DropDownList4 }).Width("200").Add();


        col.Field("DropdownValue5").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit5).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay5).Visible(ViewBag.DataSourceHeader.DropdownDisplay5 != null && ViewBag.DataSourceHeader.DropdownDisplay5 != "").EditType("dropdownedit").Edit(new { @params = DropDownList5 }).Width("200").Add();


        col.Field("DropdownValue6").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit6).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay6).Visible(ViewBag.DataSourceHeader.DropdownDisplay6 != null && ViewBag.DataSourceHeader.DropdownDisplay6 != "").EditType("dropdownedit").Edit(new { @params = DropDownList6 }).Width("200").Add();



        col.Field("DropdownValue7").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit7).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay7).Visible(ViewBag.DataSourceHeader.DropdownDisplay7 != null && ViewBag.DataSourceHeader.DropdownDisplay7 != "").EditType("dropdownedit").Edit(new { @params = DropDownList7 }).Width("200").Add();


        col.Field("DropdownValue8").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit8).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay8).Visible(ViewBag.DataSourceHeader.DropdownDisplay8 != null && ViewBag.DataSourceHeader.DropdownDisplay8 != "").EditType("dropdownedit").Edit(new { @params = DropDownList8 }).Width("200").Add();


        col.Field("DropdownValue9").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit9).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay9).Visible(ViewBag.DataSourceHeader.DropdownDisplay9 != null && ViewBag.DataSourceHeader.DropdownDisplay9 != "").EditType("dropdownedit").Edit(new { @params = DropDownList9 }).Width("200").Add();


        col.Field("DropdownValue10").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit10).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay10).Visible(ViewBag.DataSourceHeader.DropdownDisplay10 != null && ViewBag.DataSourceHeader.DropdownDisplay10 != "").EditType("dropdownedit").Edit(new { @params = DropDownList10 }).Width("200").Add();

        col.Field("DatePickerValue1").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit1).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay1 }).Add();

        col.Field("DatePickerValue1").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit1).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay1 }).Add();

        col.Field("AttachmentValue1").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit1).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_Attachment).Edit(new { create = "create1", read = "read1", write = "write1" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay1 }).Add();
        col.Field("TextBoxLink1").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).Template("<a href='${TextBoxLink1}' target='_blank'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink1", write = "writeLink1" }).Width("200").Add();
        col.Field("DatePickerValue2").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit2).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay2 }).Add();

        col.Field("DatePickerValue2").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit2).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay2 }).Add();

        col.Field("AttachmentValue2").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit2).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_Attachment).Edit(new { create = "create2", read = "read2", write = "write2" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay2 }).Add();
        col.Field("TextBoxLink2").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).Template("<a href='${TextBoxLink2}' target='_blank'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink2", write = "writeLink2" }).Width("200").Add();
        col.Field("DatePickerValue3").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit3).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay3 }).Add();

        col.Field("DatePickerValue3").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit3).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay3 }).Add();

        col.Field("AttachmentValue3").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit3).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_Attachment).Edit(new { create = "create3", read = "read3", write = "write3" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay3 }).Add();
        col.Field("TextBoxLink3").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).Template("<a href='${TextBoxLink3}' target='_blank'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink3", write = "writeLink3" }).Width("200").Add();
        col.Field("DatePickerValue4").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit4).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay4 }).Add();

        col.Field("DatePickerValue4").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit4).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay4 }).Add();

        col.Field("AttachmentValue4").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit4).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_Attachment).Edit(new { create = "create4", read = "read4", write = "write4" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay4 }).Add();
        col.Field("TextBoxLink4").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).Template("<a href='${TextBoxLink4}' target='_blank'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink4", write = "writeLink4" }).Width("200").Add();
        col.Field("DatePickerValue5").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit5).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay5 }).Add();

        col.Field("DatePickerValue5").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit5).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay5 }).Add();

        col.Field("AttachmentValue5").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit5).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_Attachment).Edit(new { create = "create5", read = "read5", write = "write5" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay5 }).Add();
        col.Field("TextBoxLink5").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).Template("<a href='${TextBoxLink5}' target='_blank'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink5", write = "writeLink5" }).Width("200").Add();
        col.Field("DatePickerValue6").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit6).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay6 }).Add();

        col.Field("DatePickerValue6").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit6).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay6 }).Add();

        col.Field("AttachmentValue6").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit6).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_Attachment).Edit(new { create = "create6", read = "read6", write = "write6" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay6 }).Add();
        col.Field("TextBoxLink6").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).Template("<a href='${TextBoxLink6}' target='_blank'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink6", write = "writeLink6" }).Width("200").Add();
        col.Field("DatePickerValue7").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit7).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay7 }).Add();

        col.Field("DatePickerValue7").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit7).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay7 }).Add();

        col.Field("AttachmentValue7").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit7).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_Attachment).Edit(new { create = "create7", read = "read7", write = "write7" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay7 }).Add();
        col.Field("TextBoxLink7").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).Template("<a href='${TextBoxLink7}' target='_blank'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink7", write = "writeLink7" }).Width("200").Add();
        col.Field("DatePickerValue8").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit8).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay8 }).Add();

        col.Field("DatePickerValue8").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit8).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay8 }).Add();

        col.Field("AttachmentValue8").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit8).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_Attachment).Edit(new { create = "create8", read = "read8", write = "write8" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay8 }).Add();
        col.Field("TextBoxLink8").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).Template("<a href='${TextBoxLink8}' target='_blank'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink8", write = "writeLink8" }).Width("200").Add();
        col.Field("DatePickerValue9").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit9).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay9 }).Add();

        col.Field("DatePickerValue9").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit9).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay9 }).Add();

        col.Field("AttachmentValue9").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit9).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_Attachment).Edit(new { create = "create9", read = "read9", write = "write9" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay9 }).Add();
        col.Field("TextBoxLink9").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).Template("<a href='${TextBoxLink9}' target='_blank'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink9", write = "writeLink9" }).Width("200").Add();
        col.Field("DatePickerValue10").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit10).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay10 }).Add();

        col.Field("DatePickerValue10").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit10).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay10 }).Add();

        col.Field("AttachmentValue10").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit10).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_Attachment).Edit(new { create = "create10", read = "read10", write = "write10" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay10 }).Add();
        col.Field("TextBoxLink10").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).Template("<a href='${TextBoxLink10}' target='_blank'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink10", write = "writeLink10" }).Width("200").Add();

    }).AllowPaging(true).AllowSorting(true).PageSettings(page => page.PageSize(5)).SelectionSettings(sel => { sel.PersistSelection(true); }).FilterSettings(filter => { filter.Type(Syncfusion.EJ2.Grids.FilterType.Excel); }).EditSettings(edit => { edit.AllowEditing(false).Mode(Syncfusion.EJ2.Grids.EditMode.Normal); }).Toolbar(new List<string>() { "Bulk Approve" }).ToolbarClick("toolbarClick").Render()


    </div>
    @*<div id="container" style="height:400px;display:none">        
        @Html.EJS().Dialog("dialog").Header("Dialog").Content("").Target("#container").Width("250px").Render()
    </div>*@

}

<script>
    function IframePostbackScript() {
        var win = GetMainWindow();
        win.CloseWindow();
        return false;

        window.location.reload();
    };
    function toolbarClick(args) {
        var gridobj = document.getElementById("Grid").ej2_instances[0];
        if (args.item.id === 'Grid_Bulk Approve') {


            var selectedRow = gridobj.getSelectedRecords();//to get the selected rows
            var ids = selectedRow.map(function (e) {
                return e.Id;
            }).join(',');
            //var id = String.join(selectedRow.Id);
            //var ids = "94b9d58c-8a0e-4b2d-bd04-1ec653be1009,d7069f91-d9ae-4974-beff-4e479c6f6796,ba081deb-9ce3-4431-b518-b34fac2d2cdc";
            //var id = "94b9d58c-8a0e-4b2d-bd04-1ec653be1009";
            var id = selectedRow[0].Id;

            //$.ajax({
            //    url: "cms/Task/TaskUdfDetails",
            //    type: 'POST',
            //    async: true,
            //    cache: false,
            //    contentType: 'application/json; charset=utf-8',
            //    dataType: "html",
            //    data: JSON.stringify(selectedRow),
            //    success: function (data) {
            //        $("#container").show();
            //        var dialog = document.getElementById("dialog").ej2_instances[0]
            //        dialog.textContent(data);
            //        dialog.show();

            //        //container.html("");
            //        //container.html(data);
            //        //HideLoader(container);
            //    },
            //    error: function (errData) {
            //        //container.html(errData);
            //        //HideLoader(container);
            //    }
            //});
            //$.ajax({
            //    type: "POST",
            //    url: "cms/Task/TaskUdfDetails",
            //    data: selectedRow, // serializes the form's elements.
            //    success: function (res) {
            //        if (res.success) {
            //            return true;

            //        }
            //        else {

            //            showError(res.error);
            //            return false;
            //        }

            //    }
            //});
            if (id == null && id == "") {
                alert("Select atleast one record");
            }
            else {
                
                 var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("TaskUdfDetails", "Task", new { @area= "Cms" })?taskId=' + id + '&ids=' + ids ;
                win.OpenWindow({ Title: 'Task Details', Width: 1200, Height: 950 });
        return false;
            }



            //console.log(selectedRow);

            //var text = document.getElementById('textbox');

            //var textval = text.value; //to get value inside the textbox

            //console.log(textval);

            //var ajax = new ej.base.Ajax();

            //ajax.type = "POST"

            //ajax.url = "/Home/Description"

            //var moveposition = { textval: textval };

            //ajax.data = JSON.stringify(moveposition);

            //ajax.send();



        }

    }
    var showError = function (error) {
        $("#validation-summary").html(error);
        $("#validation-summary").css("display", "block")
    }
    function actionBegin(args) {
        if (args.requestType === "beginEdit") {
            if (args.rowData.GridRowLock == true) {
                args.cancel = true;
                alert("Already Actioned");
            }
        }
    }
    function DisplayDescription(field, data, column) {

        var coldata = column.edit.params.dataSource;
        for (var i = 0; i < coldata.length; i++) {
            if (data[field]== coldata[i]['Id'])
                return coldata[i]['Name'];
        }
    }

    function actionComplete(args) {

        if (args.requestType === 'save') {
            kendo.confirm("Please, Confirm to save the changes").then(function () {
                ShowLoader($('.main'));
                args.data.DataAction = 2;
                //args.data.GridRowLock = true;
                var ajax = new ej.base.Ajax({
                    url: "/cms/task/manage1", //render the partial view
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(args.data)
                });
                ajax.send().then(function (data) {
                    //$("#dialogTemp").html(data); //Render the edit form with selected record
                    //args.form.elements.namedItem('CustomerID').focus();
                    window.location.href = "/cms/task/tasklist?code=" + args.data.TemplateCode;
                }).catch(function (xhr) {
                    console.log(xhr);
                });
            }, function () {
                    args.cancel = true;
                    window.location.href = "/cms/task/tasklist?code=" + args.data.TemplateCode;
            })
        }
        //if (args.requestType === 'add') {
        //    var ajax = new ej.base.Ajax({
        //        url: "/Home/Addpartial", //render the partial view
        //        type: "POST",
        //        contentType: "application/json",
        //    });
        //    ajax.send().then(function (data) {
        //        $("#dialogTemp").html(data); //Render the edit form with selected record
    }
    var row;
    function createLink1(args) {
        // create target element

        elemLink1 = document.createElement('a');
        return elemLink1;
    }
    function writeLink1(args) {
        if (args.rowData.TextBoxLink1 != "" && args.rowData.TextBoxLink1 != null) {
            elemLink1.textContent = "Click to open";
            elemLink1.target = "_blank"
            elemLink1.href = args.rowData.TextBoxLink1;
        }
    }
    function createLink2(args) {
        // create target element

        elemLink2 = document.createElement('a');
        return elemLink2;
    }
    function writeLink2(args) {
        if (args.rowData.TextBoxLink2 != "" && args.rowData.TextBoxLink2 != null) {
            elemLink1.textContent = "Click to open";
            elemLink1.target = "_blank"
            elemLink1.href = args.rowData.TextBoxLink2;
        }
    }
    function createLink3(args) {
        // create target element

        elemLink3 = document.createElement('a');
        return elemLink3;
    }
    function writeLink3(args) {
        if (args.rowData.TextBoxLink3 != "" && args.rowData.TextBoxLink3 != null) {
            elemLink3.textContent = "Click to open";
            elemLink3.target = "_blank"
            elemLink3.href = args.rowData.TextBoxLink3;
        }
    }
    function createLink4(args) {
        // create target element

        elemLink4 = document.createElement('a');
        return elemLink4;
    }
    function writeLink4(args) {
        if (args.rowData.TextBoxLink4 != "" && args.rowData.TextBoxLink4 != null) {
            elemLink4.textContent = "Click to open";
            elemLink4.target = "_blank"
            elemLink4.href = args.rowData.TextBoxLink4;
        }
    }
    function createLink5(args) {
        // create target element

        elemLink5 = document.createElement('a');
        return elemLink5;
    }
    function writeLink5(args) {
        if (args.rowData.TextBoxLink5 != "" && args.rowData.TextBoxLink5 != null) {
            elemLink5.textContent = "Click to open";
            elemLink5.target = "_blank"
            elemLink5.href = args.rowData.TextBoxLink5;
        }
    }
    function createLink6(args) {
        // create target element

        elemLink6 = document.createElement('a');
        return elemLink6;
    }
    function writeLink6(args) {
        if (args.rowData.TextBoxLink6 != "" && args.rowData.TextBoxLink6 != null) {
            elemLink6.textContent = "Click to open";
            elemLink6.target = "_blank"
            elemLink6.href = args.rowData.TextBoxLink6;
        }
    }
    function createLink7(args) {
        // create target element

        elemLink7 = document.createElement('a');
        return elemLink7;
    }
    function writeLink7(args) {
        if (args.rowData.TextBoxLink7 != "" && args.rowData.TextBoxLink7 != null) {
            elemLink7.textContent = "Click to open";
            elemLink7.target = "_blank"
            elemLink7.href = args.rowData.TextBoxLink7;
        }
    }
    function createLink8(args) {
        // create target element

        elemLink8 = document.createElement('a');
        return elemLink8;
    }
    function writeLink8(args) {
        if (args.rowData.TextBoxLink8 != "" && args.rowData.TextBoxLink8 != null) {
            elemLink8.textContent = "Click to open";
            elemLink8.target = "_blank"
            elemLink8.href = args.rowData.TextBoxLink8;
        }
    }
    function createLink9(args) {
        // create target element

        elemLink9 = document.createElement('a');
        return elemLink9;
    }
    function writeLink9(args) {
        if (args.rowData.TextBoxLink9 != "" && args.rowData.TextBoxLink9 != null) {
            elemLink9.textContent = "Click to open";
            elemLink9.target = "_blank"
            elemLink9.href = args.rowData.TextBoxLink9;
        }
    }
    function createLink10(args) {
        // create target element

        elemLink10 = document.createElement('a');
        return elemLink10;
    }
    function writeLink10(args) {
        if (args.rowData.TextBoxLink10 != "" && args.rowData.TextBoxLink10 != null) {
            elemLink10.textContent = "Click to open";
            elemLink10.target = "_blank"
            elemLink10.href = args.rowData.TextBoxLink10;
        }
    }
    function create1(args) {
        // create target element

        elem1 = document.createElement('input');
        return elem1;
    }

    function write1(args) {
        // EJ2 render Uploader component

        row = args.rowData;

        let uploadObject = new ej.inputs.Uploader({
        asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save1")',

            },
            success: onUploadSuccess1,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem1);
            }
            function onUploadSuccess1(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode1 = statusMessage.split(':')[1].trim();
            }
            }
            function read1(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue1;
            }
            }

            function create2(args) {
            // create target element

            elem2 = document.createElement('input');
            return elem2;
            }
            function write2(args) {
            // EJ2 render Uploader component

            row = args.rowData;

            let uploadObject = new ej.inputs.Uploader({
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save2")',

            },
            success: onUploadSuccess2,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem2);
            }
            function onUploadSuccess2(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode2 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read2(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue2;
            }


            }

            function create3(args) {
            // create target element

            elem3 = document.createElement('input');
            return elem3;
            }
            function write3(args) {
            // EJ2 render Uploader component

            row = args.rowData;

            let uploadObject = new ej.inputs.Uploader({
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save3")',

            },
            success: onUploadSuccess3,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem3);
            }
            function onUploadSuccess3(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode3 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read3(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue3;
            }


            }

            function create4(args) {
            // create target element

            elem4 = document.createElement('input');
            return elem4;
            }
            function write4(args) {
            // EJ2 render Uploader component

            row = args.rowData;

            let uploadObject = new ej.inputs.Uploader({
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save4")',

            },
            success: onUploadSuccess4,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem4);
            }
            function onUploadSuccess4(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode4 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read4(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue4;
            }


            }

            function create5(args) {
            // create target element

            elem5 = document.createElement('input');
            return elem5;
            }
            function write5(args) {
            // EJ2 render Uploader component

            row = args.rowData;

            let uploadObject = new ej.inputs.Uploader({
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save5")',

            },
            success: onUploadSuccess5,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem5);
            }
            function onUploadSuccess5(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode5 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read5(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue5;
            }


            }

            function create6(args) {
            // create target element

            elem6 = document.createElement('input');
            return elem6;
            }
            function write6(args) {
            // EJ2 render Uploader component

            row = args.rowData;

            let uploadObject = new ej.inputs.Uploader({
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save6")',

            },
            success: onUploadSuccess6,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem6);
            }
            function onUploadSuccess6(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode6 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read6(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue6;
            }


            }


            function create7(args) {
            // create target element

            elem7 = document.createElement('input');
            return elem7;
            }
            function write7(args) {
            // EJ2 render Uploader component

            row = args.rowData;

            let uploadObject = new ej.inputs.Uploader({
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save7")',

            },
            success: onUploadSuccess7,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem7);
            }
            function onUploadSuccess7(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode7 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read7(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue7;
            }


            }


            function create8(args) {
            // create target element

            elem8 = document.createElement('input');
            return elem8;
            }
            function write8(args) {
            // EJ2 render Uploader component

            row = args.rowData;

            let uploadObject = new ej.inputs.Uploader({
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save8")',

            },
            success: onUploadSuccess8,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem8);
            }
            function onUploadSuccess8(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode8 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read8(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue8;
            }


            }

            function create9(args) {
            // create target element

            elem9 = document.createElement('input');
            return elem9;
            }
            function write9(args) {
            // EJ2 render Uploader component

            row = args.rowData;

            let uploadObject = new ej.inputs.Uploader({
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save9")',

            },
            success: onUploadSuccess9,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem9);
            }
            function onUploadSuccess9(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode9 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read9(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue9;
            }


            }

            function create10(args) {
            // create target element

            elem10 = document.createElement('input');
            return elem10;
            }
            function write10(args) {
            // EJ2 render Uploader component

            row = args.rowData;

            let uploadObject = new ej.inputs.Uploader({
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save10")',

            },
            success: onUploadSuccess10,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem10);
            }
            function onUploadSuccess10(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode10 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read10(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue10;
            }


            }



</script>