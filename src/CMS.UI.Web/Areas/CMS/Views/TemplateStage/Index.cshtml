@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@model TemplateStageViewModel

@{
    ViewData["Title"] = "Template Stage";
    Layout = null;
}

<script>
    var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(StatusEnum)))';
    var statusObj = JSON.parse(status);
    
    var stageType = '@Html.Raw(EnumExtension.EnumToJson(typeof(TemplateStageTypeEnum)))';
    var stageTypeObj = JSON.parse(stageType);
    var columnDefs = [
        {
            field: "Name",
        },
        { field: "Code" },
        
        {
           field: "Status",
            cellRenderer: params => {
               return statusObj[params.value]; //only for enum
            }
        },
        {
            field: "StageType",
            cellRenderer: params => {
                return stageTypeObj[params.value]; //only for enum
            }
        },
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinTemplateStage' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        getDataTemplateStage();

        //$.contextMenu('update');
        //$('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-menuBinTemplateStage',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        onEdit(id);
                                        break;

                                    case 'delete':
                                        OnDelete(id);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-edit" },
                                "delete": { name: "Delete", icon: "fas fa-trash" },


                            }
                        };


                }
            }
        });


    });
    function OnCreate() {

          var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Create", "TemplateStage", new { @area="Cms"})';
         win.OpenWindow({ Title: 'Manage Template Stage',Width: 600, Height: 600 });
        return false;

    }

    function onEdit(id) {
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Edit", "TemplateStage", new { @area="Cms"})?Id=' + id;
        win.OpenWindow({ Title: 'Manage Template Stage', Width: 600, Height: 600 });
        return false;
    }

    function OnDelete(id) {
        var flag = confirm('Do you really want to delete the Template Stage?');

        if (flag) {
            $.ajax({
                url:'@Url.Action("Delete", "TemplateStage", new { @area="Cms"})?Id=' + id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    
                    if (result.success) {
                        getDataTemplateStage();
                        kendo.alert("Template Stage Deleted Successfully.");
                    } else {
                        getDataTemplateStage();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    getDataTemplateStage();
                }
            });
            return false;
        }
    }

   function getDataTemplateStage() {
       document.getElementById("myGridTemplateStage").innerHTML = "";
       gridConfig(
           "myGridTemplateStage",
           "/cms/templateStage/ReadData",
           columnDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
    }

</script>

<div>
    <h4>@ViewBag.Title</h4>

    <hr />


    <div class="row">
        <div class="col-12">
            <button type='button' class='btn btn-primary' onclick='OnCreate();'><i class='fa fas fa-plus'></i>&nbsp;Create Template Stage</button>
            <br /><br />
            <div id="myGridTemplateStage" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        </div>
    </div>
</div>



@*<script>

    function OnDelete(e) {

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        kendo.confirm("Are you sure, you want to delete? ").then(function () {
            confirmDelete(dataItem.Id);
        }, function () {

        });

    }

    function confirmDelete(id) {
        $.ajax({
            url: '@Url.Action("Delete", "TemplateStage", new { @area="Cms"})?Id=' + id,
            type: "GET",
            contentType: "application/json",
            dataType: "JSON",
            success: function (response) {
                // $('#dlg_DeleteConfirmation').data("kendoDialog").close();
                ShowNotification("Deleted Successfully", "success");
                $("#grid").data("kendoGrid").dataSource.read();
            }
        });


    }

     function OnCreate() {

          var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Create", "TemplateStage", new { @area="Cms"})';
         win.OpenWindow({ Title: 'Manage Template Stage', Width: 450, Height: 800 });
        return false;

    }

    function OnEdit(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Edit", "TemplateStage", new { @area="Cms"})?Id=' + dataItem.Id;
        win.OpenWindow({ Title: 'Manage Template Stage', Width: 450, Height: 800 });
        return false;
    }

</script>


<div>
    <h4>Template Stage</h4>

    <hr />

    <div class="row">
        <div class="col-12">

            @(Html.Kendo().Grid<TemplateStageViewModel>
    ()
    .Name("grid")
    .ToolBar(toolbar =>
    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreate();'><i class='fa fas fa-plus'></i>&nbsp;Create Template Stage</button>"))

    .Columns(columns =>

    {
        columns.Command(command =>
        {
            command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEdit").HtmlAttributes(new { @class = "action-icon" });
            command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon" });
        }).Title("Action").Width(100);

        columns.Bound(c => c.Name);
        columns.Bound(c => c.Code);
        columns.Bound(c => c.Status);
        columns.Bound(c => c.StageType).Title("TemplateType");

    })
    .Scrollable(x => x.Enabled(false))
                .Sortable(srt => srt.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                                    .Operators(o => o.ForString(s => s.Clear()
                                                    .Contains("Contains")
                                                    .IsEqualTo("Is equal to")
                                                )))
                .Pageable(pageable => pageable
                .Refresh(true)

                .PageSizes(true)
                .ButtonCount(5))
                .AutoBind(true)
                .DataSource(
                dataSource => dataSource
                .Ajax()
                .PageSize(10)
                //.Events(events => events.Error("OnError"))
                .Read(read => read.Action("ReadData", "TemplateStage"))
                .Model(model => model.Id(p => p.Id))
                )
          )

        </div>
    </div>
</div>*@
