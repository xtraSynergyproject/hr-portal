@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@model DashboardItemMasterViewModel
@{
    ViewData["Title"] = "Dashboard Item";
    Layout = "/Views/Shared/_PopupLayout.cshtml";
}



<style>
    .cms-footer {
        position: unset !important;
        background-color: unset !important;
    }

    .k-grid-header {
        display: none !important;
    }

    .k-grid-pager {
        display: none !important;
    }

    #Grid .k-grid-edit {
        display: none !important;
    }
    #TimeDimensionsGrid .k-grid-edit {
        display: none !important;
    }
</style>
<script>


    $(document).ready(function () {
        $('.html-chart-content').richText();
        $("#chartTypeId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            select: onSelect,
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: "/CMS/BusinessAnalytics/GetChartTemplateList",
                    }
                }
            }
        });


            if ($("#chartMetadata").val() == "") {
                //var metadata = "measures: [],dimensions: [],segment: [],filters: []";
                var metadata = "measures: [],dimensions: [],filters: [],timeDimensions:[]";
                $("#chartMetadata").val(metadata);
            }
        if ($("#onChartClickFunction").val() == "") {
            var chartClickFunction = " function OnSeriesClick(args) {}";
            $("#onChartClickFunction").val(chartClickFunction);
        }

    });
    function onSelect(e) {
        if (e.dataItem) {
            var dataItem = e.dataItem;
            $.ajax({
                url: '@Url.Action("GetChartTemplate", "BusinessAnalytics", new { @area="CMS"})?id=' + dataItem.Id,
                                        type: 'GET',
                success: function (result) {
                    if (result != null && result.Code != null) {
                                                $("#dimesionNoteDiv").show();
                                                $("#dimNote").html(result.Code);
                                            }
                                            else {
                        $("#dimesionNoteDiv").hide();
                                            }
                                        },
                                        error: function (ert) {

                                        }
                                    });
        }

    };
    function OnClear() {
        $("#Grid").data("kendoGrid").dataSource.data([]);
        var chartMetadata = $("#chartMetadata").val();
        var result = chartMetadata.split('],');
        //var finalResult = result[0] + "]," + result[1] + "]," + result[2] + "],filters: []";
        var finalResult = result[0] + "]," + result[1] + "],filters: []," + result[3];
        $("#chartMetadata").val(finalResult);
    }
    function OnTimeDimensionsClear() {
        $("#TimeDimensionsGrid").data("kendoGrid").dataSource.data([]);
        var chartMetadata = $("#chartMetadata").val();
        var result = chartMetadata.split('],');
        //var finalResult = result[0] + "]," + result[1] + "]," + result[2] + "],filters: []";
        var finalResult = result[0] + "]," + result[1] + "]," + result[2] + "],timeDimensions: []";
        $("#chartMetadata").val(finalResult);
    }
    var onAjaxSuccess = function (res) {
        console.log(res.id);
        if (res.success) {
            if ('@Model.DataAction'=='@DataActionEnum.Create')
            {
                ShowNotification("Saved Successfully", "success");
                var library = $('#isLibrary').val();
                closeNavMember(res.name, res.id, library);
            }
            if ('@Model.DataAction'=='@DataActionEnum.Edit')
            {
                ShowNotification("Updated Successfully", "success");
                var library = $('#isLibrary').val();
                closeNavMemberEdit(res.name, res.id, library);
            }
            //if ('@Model.Layout'== '' || '@Model.Layout'==null) {
            //    refreshTreeview();
            //}
            //else {
            //    closeNavMember(res.name);
            //}

            

        }
        else {
            showError(res.error);
        }
        HideLoader($('#template-content'));
    };


    function OnError(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    var showError = function (error) {

        //#validation-summary-manageform
        $("#validation-summary").html(error);
        $("#validation-summary").css("display", "block")
    }
    function onFilterGridSave(arg) {
        var filters = "filters: [";
        var datasource = $("#Grid").data("kendoGrid").dataSource.data();
        for (var i = 0; i < datasource.length; i++) {
            var item = datasource[i];
            var filter = "{\"member\": \"" + item.FilterField + "\",\"operator\": \"" + item.FilterOperator + "\",\"values\": [" + item.FilterText+"]},";
            filters += filter;
        }
        filters += "]";
        var chartMetadata = $("#chartMetadata").val();
        var result = chartMetadata.split('],');
        //var finalResult = result[0] + "]," + result[1] + "]," + result[2] + "]," + filters;
        var finalResult = result[0] + "]," + result[1] + "]," + filters + "," + result[3];
        $("#chartMetadata").val(finalResult);


    }
    function onChangeMeasures() {        
        $("#Dimensions").data("kendoMultiSelect").dataSource.read();
        $("#Xaxis").data("kendoDropDownList").dataSource.read();
        $("#Yaxis").data("kendoDropDownList").dataSource.read();
        $("#Count").data("kendoDropDownList").dataSource.read();
        var str = "";  
        var items = $("#Measures").data("kendoMultiSelect").dataItems();
        for (var i = 0; i < items.length; i++) {
            var item = "\"" + items[i].name + "\"";
            if (i == items.length - 1) {
                str = str + item;
            }
            else {
                str = str + item + ",";
            }

        }
        var chartMetadata = $("#chartMetadata").val();
        var result = chartMetadata.split('],');
        //var finalResult = "measures: [" + str + "]," + result[1] + "]," + result[2] + "]," + result[3];
        var finalResult = "measures: [" + str + "]," + result[1] + "]," + result[2] + "]," + result[3];
        $("#chartMetadata").val(finalResult);

    }
    function onChangeDimensions() {
        var str = "";
        var items = $("#Dimensions").data("kendoMultiSelect").dataItems();
        for (var i = 0; i < items.length; i++) {
            var item = "\"" + items[i].name + "\"";
            if (i == items.length - 1) {
                str = str + item;
            }
            else {
                str = str + item + ",";
            }

        }
        var chartMetadata = $("#chartMetadata").val();
        var result = chartMetadata.split('],');
        //var finalResult = result[0] + "]," + "dimensions: [" + str + "]," + result[2] + "]," + result[3];
        var finalResult = result[0] + "]," + "dimensions: [" + str + "]," + result[2] + "]," + result[3] ;
        $("#chartMetadata").val(finalResult);

    }
    //function onChangeSegment() {
    //    var str = "";
    //    var items = $("#Segment").data("kendoMultiSelect").dataItems();
    //    for (var i = 0; i < items.length; i++) {
    //        var item = "\"" + items[i].name + "\"";
    //        if (i == items.length - 1) {
    //            str = str + item;
    //        }
    //        else {
    //            str = str + item + ",";
    //        }

    //    }
    //    var chartMetadata = $("#chartMetadata").val();
    //    var result = chartMetadata.split('],');
    //    var finalResult = result[0] + "]," + result[1] + "]," + "segment: [" + str + "],"+ result[3];
    //    $("#chartMetadata").val(finalResult);

    //}
    function SaveData() {
        var grid = JSON.stringify($("#Grid").data("kendoGrid").dataSource.data());
        $("#filterField").val(grid);
        var timeDimensionsGrid = JSON.stringify($("#TimeDimensionsGrid").data("kendoGrid").dataSource.data());
        $("#timeDimensionsField").val(timeDimensionsGrid);
        var measuresItems = $("#Measures").data("kendoMultiSelect").dataItems();
        var measures = "";
        for (var i = 0; i < measuresItems.length; i++) {
            if (i == measuresItems.length - 1) {
                measures += measuresItems[i].name;
            }
            else {
                measures += measuresItems[i].name + ",";
            }

        }
        $("#measuresField").val(measures);
        var dimensionsItems = $("#Dimensions").data("kendoMultiSelect").dataItems();
        var dimensions = "";
        for (var i = 0; i < dimensionsItems.length; i++) {
            if (i == dimensionsItems.length - 1) {
                dimensions += dimensionsItems[i].name;
            }
            else {
                dimensions += dimensionsItems[i].name + ",";
            }

        }
        $("#dimensionsField").val(dimensions);
        var segmentItems = $("#Segment").data("kendoMultiSelect").dataItems();
        var segment = "";
        for (var i = 0; i < segmentItems.length; i++) {
            if (i == segmentItems.length - 1) {
                segment += segmentItems[i].name;
            }
            else {
                segment += segmentItems[i].name + ",";
            }

        }
        $("#segmentsField").val(segment);



    }

    function closeNavMember(name, id, library) {
        var win = GetMainWindow();
        //createdElement
        win.CloseWindow({ MethodName: "createdElement", Prms: { name, id, library } });
        /*win.location.reload();*/
        return false;
    }

    function closeNavMemberEdit(name, id, library) {

        var win = GetMainWindow();
        win.CloseWindow({ MethodName: "editElement", Prms: { name, id, library} });
        return false;
    }


    function OnPreview(name) {
        var url = "/CMS/BusinessAnalytics/DrillDownReport?chartName=" + name ;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: "Preview", Width: 1200, Height: 650 });
        return false;
    }
    function onTimeDimensionGridSave(arg) {        
        var filters = "timeDimensions: [";
        var datasource = $("#TimeDimensionsGrid").data("kendoGrid").dataSource.data();
        for (var i = 0; i < datasource.length; i++) {
            var item = datasource[i];
            var filter = "{\"dimension\": \"" + item.TimeDimensionField + "\",\"granularity\": \"" + item.RangeBy + "\",\"dateRange\": [" + item.TimeParams + "]},";
            filters += filter;
        }
        filters += "]";
        var chartMetadata = $("#chartMetadata").val();
        var result = chartMetadata.split('],');
        //var finalResult = result[0] + "]," + result[1] + "]," + result[2] + "]," + filters;
        var finalResult = result[0] + "]," + result[1] + "]," + result[2] + "]," + filters;
        $("#chartMetadata").val(finalResult);        

    }
    function FilterDimDLL() {
        var mes = $("#Measures").data("kendoMultiSelect").value()[0];       
        return {
            measure: mes
        };
    }
</script>


<div class="row  pad-10 no-gutters">
    <div class="container card-header" style="padding:10px;">
        <div class="tab-content">
            <div id="general" class="tab-pane  in active" role="tabpanel" aria-labelledby="design-tab">

                <div style="margin-top: 5px;padding-left: 20px;padding-right: 20px;width: 100%;">

                    <form asp-controller="BusinessAnalytics" asp-action="ManageGridStackDashboardItemNote" class="form-horizontal"
                          data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
                          data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
                          data-ajax="true" data-ajax-method="POST">
                        <div id="validation-summary" class="text-danger" asp-validation-summary="All"></div>


                        @if (Model.NoteId.IsNotNullAndNotEmpty())
                        {
                            <button type="button" class="btn btn-primary" onclick="OnPreview('@Model.NoteSubject')" title="Preview"><i class="fa fa-eye"></i></button>
                        }
                    <div class="row" style="padding:10px;">

                        <div class="row col-12 pad-10">
                            <div class="col-12">
                                <h4>Dashboard Item Master</h4>
                                <hr />
                            </div>

                        </div>

                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label for="Name">Name<span class="required" style="color:red;">*</span></label>
                            </div>
                            <div class="col-9">
                                <input asp-for="NoteSubject" type="text" class="form-control" placeholder="Name" autocomplete="off" />

                                @*@if (Model.DataAction == DataActionEnum.Create)
                {

                }
                else
                {
                    <input asp-for="NoteSubject" type="text" class="form-control" placeholder="Name" autocomplete="off" readonly />

                }*@

                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label for="chartTypeId">Chart Template<span class="required" style="color:red;">*</span></label>
                            </div>
                            <div class="col-9">

                                @*@(Html.Kendo().DropDownListFor(x=>x.chartTypeId)
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                        read.Action("GetChartTemplateList", "BusinessAnalytics");
                    });
                        })
                    .OptionLabel("Select")
                    .HtmlAttributes(new { @class = "", @style = "width:100%"})
                )*@

                                <input asp-for="chartTypeId" id="chartTypeId" style="width:100%" />

                            </div>
                        </div>
                        <div class="row col-12 pad-10" id="dimesionNoteDiv" style="display:none">
                            <div class="col-12">
                                <b>Chart References</b><br>
                                <span id="dimNote">

                                </span>

                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label>Measures</label>
                            </div>
                            <div class="col-9">
                                @(Html.Kendo().MultiSelect()
                                       .Name("Measures")
                                       .Placeholder("Select Measures...")
                                       .DataTextField("title")
                                       .DataValueField("name")
                                       .Events(e => e.Change("onChangeMeasures"))
                                       .DataSource(source =>
                                       {
                                           source.Read(read =>
                                           {
                                               read.Action("GetMeasuresData", "BusinessAnalytics");
                                           })
                                           .ServerFiltering(true);
                                       })
                                       //.BindTo(Model.measures)
                                       .Value(Model.measuresArray)
                                     .HtmlAttributes(new { @class = "", @style = "width:100%"})
                                    )

                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label>Dimensions</label>
                            </div>
                            <div class="col-9">
                                @(Html.Kendo().MultiSelect()
                                       .Name("Dimensions")
                                       .Placeholder("Select Dimensions...")
                                       .DataTextField("title")
                                       .DataValueField("name")
                                       .Events(e => e.Change("onChangeDimensions"))
                                       .DataSource(source =>
                                       {
                                           source.Read(read =>
                                           {
                                               read.Action("GetDimensionsData", "BusinessAnalytics").Data("FilterDimDLL");
                                           })
                                           .ServerFiltering(true);
                                       })
                                       //.BindTo(Model.dimensions)
                                       .Value(Model.dimensionsArray)
                                     .HtmlAttributes(new { @class = "", @style = "width:100%"})
                                    )

                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label>Segment</label>
                            </div>
                            <div class="col-9">
                                @(Html.Kendo().MultiSelect()
                                       .Name("Segment")
                                       .Placeholder("Select Segment...")
                                       .DataTextField("title")
                                       .DataValueField("name")
                                       //.Events(e => e.Change("onChangeSegment"))
                                       .BindTo(Model.segments)
                                       .Value(Model.segmentsArray)
                                     .HtmlAttributes(new { @class = "", @style = "width:100%"})
                                    )

                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label>X Axis</label>
                            </div>
                            <div class="col-9">
                                @(Html.Kendo().DropDownListFor(x=>x.Xaxis)
                                    .DataTextField("title")
                                    .DataValueField("name")
                                     //.BindTo(Model.dimensions)
                                     .DataSource(source =>
                                     {
                                         source.Read(read =>
                                         {
                                             read.Action("GetDimensionsData", "BusinessAnalytics").Data("FilterDimDLL");
                                         })
                                         .ServerFiltering(true);
                                     })
                                    .Value(Model.Xaxis)
                                    .OptionLabel("Select")
                                    .Filter("contains")
                                    .HtmlAttributes(new { @class = "", @style = "width:100%"})
                                )
                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label>Y Axis</label>
                            </div>
                            <div class="col-9">
                                @(Html.Kendo().DropDownListFor(x=>x.Yaxis)
                                    .DataTextField("title")
                                    .DataValueField("name")
                                     //.BindTo(Model.dimensions)
                                     .DataSource(source =>
                                     {
                                         source.Read(read =>
                                         {
                                             read.Action("GetDimensionsData", "BusinessAnalytics").Data("FilterDimDLL");
                                         })
                                         .ServerFiltering(true);
                                     })
                                    .Value(Model.Yaxis)
                                    .OptionLabel("Select")
                                    .Filter("contains")
                                    .HtmlAttributes(new { @class = "", @style = "width:100%"})
                                )

                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label>Count</label>
                            </div>
                            <div class="col-9">
                                @(Html.Kendo().DropDownListFor(x=>x.Count)
                                    .DataTextField("title")
                                    .DataValueField("name")
                                     //.BindTo(Model.dimensions)
                                     .DataSource(source =>
                                     {
                                         source.Read(read =>
                                         {
                                             read.Action("GetDimensionsData", "BusinessAnalytics").Data("FilterDimDLL");
                                         })
                                         .ServerFiltering(true);
                                     })
                                    .Value(Model.Count)
                                    .OptionLabel("Select")
                                    .Filter("contains")
                                    .HtmlAttributes(new { @class = "", @style = "width:100%"})
                                )

                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label for="mapUrl">Map Url</label>
                            </div>
                            <div class="col-9">
                                <input asp-for="mapUrl" type="text" class="form-control" placeholder="" autocomplete="off" />
                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label for="mapLayer">Map Layer</label>
                            </div>
                            <div class="col-9">
                                <input asp-for="mapLayer" type="text" class="form-control" placeholder="" autocomplete="off" />
                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label for="ThemeMode">Theme Mode</label>
                            </div>
                            <div class="col-9">
                                @(Html.Kendo().DropDownList()
                                  .Name("ThemeMode")
                                  .DataTextField("Text")
                                  .DataValueField("Value")
                                  //.OptionLabel("Select")
                                  .BindTo(new List<SelectListItem>() {
                                      new SelectListItem() {
                                          Text = "Light",
                                          Value = "light"
                                      },
                                      new SelectListItem() {
                                          Text = "Dark",
                                          Value = "dark"
                                      }
                                  })
                                  .Value(Model.ThemeMode)
                                  .HtmlAttributes(new { style = "width: 100%" })
                            )
                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label for="Palette">Palette</label>
                            </div>
                            <div class="col-9">
                                @(Html.Kendo().DropDownList()
                                  .Name("Palette")
                                  .DataTextField("Text")
                                  .DataValueField("Value")
                                  //.OptionLabel("Select")
                                  .BindTo(new List<SelectListItem>() {
                                      new SelectListItem() {
                                          Text = "Palette 1",
                                          Value = "palette1"
                                      },
                                      new SelectListItem() {
                                          Text = "Palette 2",
                                          Value = "palette2"
                                      },
                                      new SelectListItem() {
                                          Text = "Palette 3",
                                          Value = "palette3"
                                      },
                                      new SelectListItem() {
                                          Text = "Palette 4",
                                          Value = "palette4"
                                      },
                                      new SelectListItem() {
                                          Text = "Palette 5",
                                          Value = "palette5"
                                      },
                                      new SelectListItem() {
                                          Text = "Palette 6",
                                          Value = "palette6"
                                      },
                                      new SelectListItem() {
                                          Text = "Palette 7",
                                          Value = "palette7"
                                      },
                                      new SelectListItem() {
                                          Text = "Palette 8",
                                          Value = "palette8"
                                      },
                                      new SelectListItem() {
                                          Text = "Palette 9",
                                          Value = "palette9"
                                      },
                                      new SelectListItem() {
                                          Text = "Palette 10",
                                          Value = "palette10"
                                      }
                                  })
                                  .Value(Model.Palette)
                                .HtmlAttributes(new { style = "width: 100%" })
                            )
                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label for="MonocromeColor">Monocrome if yes Color</label>
                            </div>
                            <div class="col-9">
                                <input asp-for="MonocromeColor" type="text" class="form-control" placeholder="#4ECDC4" autocomplete="off" />
                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label for="DynamicMetadata">Dynamic Metadata</label>
                            </div>
                            <div class="col-9">
                                <input asp-for="DynamicMetadata" type="checkbox" />
                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label for="isLibrary">Is Library</label>
                            </div>
                            <div class="col-9">
                                <input asp-for="isLibrary" type="checkbox" />
                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-12">
                                <b>Parameter References</b><br>
                                <span>
                                    * Static value  => use  ""  for static value ex: "Test"
                                    <br>* Parameter variable  => use  {}  for parameter value ex: {firstName}
                                    <br>* Note Task and Service  => use  ^^NtsId^^  for parameter value
                                    <br>* Session variable  => use  ^^ ^^  for Session variable ex:  ^^UserId^^
                                    <br>* All Session variable  => ^^UserId^^  ||  ^^UserUniqueId^^  ||  ^^Name^^  ||  ^^CompanyId^^  ||  ^^CompanyCode^^  ||  ^^CompanyName^^
                                    ||  ^^Email^^  ||  ^^JobTitle^^  ||  ^^PhotoId^^  ||  ^^IsSystemAdmin^^  ||  ^^IsGuestUser^^  ||  ^^UserRoleIds^^  ||
                                    ^^UserRoleCodes^^  ||  ^^PortalTheme^^  ||  ^^UserPortals^^  ||  ^^PortalId^^  ||  ^^CurrentDate^^  ||  ^^CurrentDateTime^^  ||
                                    ^^LoggedInAsType^^  ||  ^^LoggedInAsByUserId^^  ||  ^^LoggedInAsByUserName^^  ||  ^^LegalEntityId^^  ||  ^^CultureName^^
                                </span>

                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-12">
                                <label>Time Dimensions</label>
                            </div>
                            <div class="col-12" id="timeDimensions">

                                @(Html.Kendo().Grid<DashboardItemTimeDimensionViewModel>()
.Name("TimeDimensionsGrid")

.ToolBar(toolbar =>
{
    toolbar.Create().Text("Add Time Dimensions");
    toolbar.Custom().Text("Clear").HtmlAttributes(new { id = "customCommand", href = "javascript:OnTimeDimensionsClear();" });
})

.Columns(columns =>
{

    columns.Command(command => {
        command.Edit().Text(" ").UpdateText(" ").CancelText(" ");
        //command.Destroy().Text(" ");
    }).Width(70);

    columns.Bound(c => c.TimeDimensionField).EditorTemplateName("FilterField")/*.EditorViewData(new { dimensions = Model.dimensions })*/.ClientTemplateId("TimeDimensionField_template").Width(180);
    columns.Bound(c => c.RangeType).EditorTemplateName("RangeType").ClientTemplateId("RangeType_template").Width(100);
    columns.Bound(c => c.TimeParams).Width(80);
    columns.Bound(c => c.DefaultValue).Width(80);
    columns.Bound(c => c.RangeBy).EditorTemplateName("RangeBy").ClientTemplateId("RangeBy_template").Width(100);


})
.Events(e => e.Save("onTimeDimensionGridSave").Edit("onTimeDimensionGridSave"))

                        .Editable(editable => editable.Mode(GridEditMode.InLine)

                        )
                        .Scrollable(x => x.Enabled(false))
                        .Sortable(srt => srt.Enabled(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                    .Operators(o => o.ForString(s => s.Clear()
                                    .Contains("Contains")
                                    .IsEqualTo("Is equal to")
                                )))
                        .Pageable(pageable => pageable
                        .Refresh(true)

                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(
                        dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                        .Batch(true)
                        .ServerOperation(false)

                        .Read(read => read.Action("GetTimeDimensions", "BusinessAnalytics",new {id=Model.NoteId }))

                        .Model(model =>
                        {
                            model.Id(p => p.TimeDimensionField);

                        })
                        ))

                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-12">
                                <label>Filters</label>
                            </div>
                            <div class="col-12" id="filter">

                                @(Html.Kendo().Grid<DashboardItemFilterViewModel>()
                        .Name("Grid")

                        .ToolBar(toolbar =>
                        {
                            toolbar.Create().Text("Add Filter");
                            toolbar.Custom().Text("Clear").HtmlAttributes(new { id = "customCommand", href = "javascript:OnClear();" });
                        })

                        .Columns(columns =>
                        {

                            columns.Command(command => {
                                command.Edit().Text(" ").UpdateText(" ").CancelText(" ");
                                //command.Destroy().Text(" ");
                            }).Width(70);

                            columns.Bound(c => c.FilterField).EditorTemplateName("FilterField")/*.EditorViewData(new {dimensions=Model.dimensions })*/.ClientTemplateId("FilterField_template").Width(180);
                            columns.Bound(c => c.FilterOperator).EditorTemplateName("FilterOperator").ClientTemplateId("FilterOperator_template").Width(100);
                            columns.Bound(c => c.FilterText).Width(80);
                            columns.Bound(c => c.DefaultValue).Width(80);


                        })
                        .Events(e => e.Save("onFilterGridSave"))

                        .Editable(editable => editable.Mode(GridEditMode.InLine)

                        )
                        .Scrollable(x => x.Enabled(false))
                        .Sortable(srt => srt.Enabled(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                    .Operators(o => o.ForString(s => s.Clear()
                                    .Contains("Contains")
                                    .IsEqualTo("Is equal to")
                                )))
                        .Pageable(pageable => pageable
                        .Refresh(true)

                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(
                        dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                        .Batch(true)
                        .ServerOperation(false)

                        .Read(read => read.Action("GetFilters", "BusinessAnalytics",new {id=Model.NoteId }))

                        .Model(model =>
                        {
                            model.Id(p => p.FilterField);

                        })
                        ))

                            </div>
                        </div>


                        <div class="row col-12 pad-10">
                            <div class="col-12">
                                <b>Get Form io component References</b><br>
                                <span>
                                    * $('[name="data[project]"]')[0].firstChild.value;"
                                    <br>
                                </span>
                                <b>chart Refresh References</b><br>
                                <span>
                                    var param=encodeURIComponent("Variable=XYZ");
                                    <br>
                                    refreshChart("Dashboard Item Name",param);
                                    <br>
                                </span>
                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label for="onChartClickFunction">On Chart Click Function</label>
                            </div>
                            <div class="col-9">
                                <textarea asp-for="onChartClickFunction" type="text" rows="15" class="form-control"></textarea>
                            </div>
                        </div>

                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label for="chartMetadata">Chart Metadata@*<span class="required" style="color:red;">*</span>*@</label>
                            </div>
                            <div class="col-9">
                                @if (Model.DataAction == DataActionEnum.Create)
                                {
                                    <textarea asp-for="chartMetadata" type="text" rows="15" class="form-control"></textarea>

                                }
                                else
                                {
                                    <textarea asp-for="chartMetadata" type="text" rows="15" class="form-control" readonly></textarea>

                                }
                            </div>
                        </div>
                        <div class="row col-12 pad-10">
                            <div class="col-3">
                                <label for="NoteDescription">Chart Html</label>
                            </div>
                            <div class="col-9">
                                <div class="page-wrapper box-content">
                                    <textarea class="html-chart-content" asp-for="NoteDescription" id="NoteDescription"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>

                        <div class="cms-footer">
                            <input type="submit" class="btn btn-primary" value="Save" onclick="SaveData()" />
                        </div>

                        @Html.HiddenFor(x => x.Id)
                        @Html.HiddenFor(x => x.ParentNoteId)
                        @Html.HiddenFor(x => x.DataAction)
                        @Html.HiddenFor(x => x.NoteId)
                        @Html.HiddenFor(x => x.chartTypeId)
                        @Html.HiddenFor(x => x.chartMetadata)
                        @Html.HiddenFor(x => x.measuresField)
                        @Html.HiddenFor(x => x.dimensionsField)
                        @Html.HiddenFor(x => x.segmentsField)
                        @Html.HiddenFor(x => x.timeDimensionsField)
                        @Html.HiddenFor(x => x.filterField)
                        @Html.HiddenFor(x => x.width)
                        @Html.HiddenFor(x => x.height)
                        @Html.HiddenFor(x => x.Json)
                        @Html.HiddenFor(x => x.DataJson)
                        @Html.HiddenFor(x => x.CompanyId)
                        @Html.HiddenFor(x => x.CreatedBy)
                        @Html.HiddenFor(x => x.CreatedDate)
                        @Html.HiddenFor(x => x.LastUpdatedBy)
                        @Html.HiddenFor(x => x.LastUpdatedDate)

                    </form>
                </div>
            </div>
        </div>

    </div>
</div>

<script id="FilterOperator_template" type="text/x-kendo-template">
    #=data.FilterOperator#
</script>
<script id="FilterField_template" type="text/x-kendo-template">
    #=data.FilterField#
</script>

<script id="TimeDimensionField_template" type="text/x-kendo-template">
    #=data.TimeDimensionField#
</script>
<script id="RangeType_template" type="text/x-kendo-template">
    #=data.RangeType#
</script>
<script id="RangeBy_template" type="text/x-kendo-template">
    #=data.RangeBy#
</script>









