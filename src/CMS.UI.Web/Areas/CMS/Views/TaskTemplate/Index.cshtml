@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@model RecTaskTemplateViewModel
@{
    ViewData["Title"] = "Task Template";
    Layout = "/Areas/Cms/Views/Shared/_LayoutCms.cshtml";
}
<script>
     var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(NtsTypeEnum)))';
    var statusObj = JSON.parse(status);
      var status1 = '@Html.Raw(EnumExtension.EnumToJson(typeof(AssignToTypeEnum)))';
    var statusObj1 = JSON.parse(status1);

    var columnDefs = [
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinTaskTemplate' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            field: "TemplateCode",
        },
        {
            field: "Subject",
        },
        {
            field: "Description",
        },


        {
            field: "NtsType",
            cellRenderer: params => {
                return statusObj[params.value];
            }
        },
          {
              field: "ServiceDetailsHeight",

        },

        {
            field: "AssignToType",
            cellRenderer: params => {
                return statusObj1[params.value];
            }
        },
        {
            field: "AssignedToUserId",
        }
    ];

    $(function () {

        getDataTaskTemplate();

        $.contextMenu({
            selector: '#tree-menuBinTaskTemplate',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');



                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditTaskTemplate(id);
                                        break;



                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-edit" },



                            }
                        };


                }
            }
        });

    });



     



    function OnCreateTaskTemplate() {
        window.location.href = "/Cms/TaskTemplate/Manage";
    }
    function OnEditTaskTemplate(id) {


  window.location.href = "/Cms/TaskTemplate/Manage?Id=" + id;

        }
    function getDataTaskTemplate() {
        document.getElementById("TaskTemplategrid").innerHTML = "";
       gridConfig(
           "TaskTemplategrid",
           "/cms/TaskTemplate/ReadTaskTemplateData",
           columnDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
    }

</script>
<div>
    <h4>@ViewBag.Title</h4>

    <hr />
    <div class="row">
        <div class="col-12">
            <button type='button' class='btn btn-primary' onclick='OnCreateTaskTemplate();'><i class='fa fas fa-plus'></i>&nbsp;Create Task Template</button>
            <br /><br />
            <div id="TaskTemplategrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        </div>
    </div>

    @*<div class="row">
            <div class="col-12">

                @(Html.Kendo().Grid<RecTaskTemplateViewModel>
        ()
        .Name("TaskTemplategrid")
        .ToolBar(toolbar =>
        toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateTaskTemplate();'><i class='fa fas fa-plus'></i>&nbsp;Create Task Template</button>"))


        .Columns(columns =>
        {

            columns.Command(command =>
            {
                command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditTaskTemplate").HtmlAttributes(new { @class = "action-icon" });
                // command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteTeam").HtmlAttributes(new { @class = "action-icon" });
            }).Title("Action").Width(100);
            columns.Bound(c => c.TemplateCode);
            columns.Bound(c => c.Subject);
            columns.Bound(c => c.Description);
            columns.Bound(c => c.NtsType);
            columns.Bound(c => c.ServiceDetailsHeight);
            columns.Bound(c => c.AssignToType);
            columns.Bound(c => c.AssignedToUserId);



        })
         .Scrollable(x => x.Enabled(false))
                    .Sortable(srt => srt.Enabled(true))
                    .Selectable(select => select.Enabled(false))
                    .Filterable(f => f.Extra(false)
                                                        .Operators(o => o.ForString(s => s.Clear()
                                                        .Contains("Contains")
                                                        .IsEqualTo("Is equal to")
                                                    )))
                    .Pageable(pageable => pageable
                    .Refresh(true)

                    .PageSizes(true)
                    .ButtonCount(5))
                    .AutoBind(true)
                    .DataSource(
                    dataSource => dataSource
                    .Ajax()
                    .PageSize(10)
                    //.Events(events => events.Error("OnError"))
                    .Read(read => read.Action("ReadTaskTemplateData", "TaskTemplate",new { area="cms"}))
                    .Model(model => model.Id(p => p.Id))
                    )
              )
            </div>
        </div>*@

</div>

