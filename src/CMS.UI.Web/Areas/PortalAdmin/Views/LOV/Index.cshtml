@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using Kendo.Mvc.UI;
@using Kendo.Mvc.Extensions;
@model ListOfValueViewModel

@{
    ViewData["Title"] = "LOV";
    Layout = null;
}
<script>
   // uploadFile();

    function uploadFile() {
        $("#iconFile").dmUploader({ //
            url: '/Cms/LOV/ImportLOVs',
            multiple: false,
            extFilter: ["csv"],
            maxFileSize: 3000000, // 3 Megs 
            onDragEnter: function () {
                // Happens when dragging something over the DnD area
                this.addClass('active');
            },
            onDragLeave: function () {
                this.removeClass('active');
            },
            onInit: function () {
            },
            onComplete: function () {
            },
            onNewFile: function (id, file) {
                ui_multi_add_file(id, file);
            },
            onBeforeUpload: function (id) {
                ui_multi_update_file_status(id, 'uploading', 'Uploading...');
                ui_multi_update_file_progress(id, 0, '', true);
            },
            onUploadCanceled: function (id) {
                ui_multi_update_file_status(id, 'warning', 'Canceled by User');
                ui_multi_update_file_progress(id, 0, 'warning', false);
            },
            onUploadProgress: function (id, percent) {
                ui_multi_update_file_progress(id, percent);
            },
            onUploadSuccess: function (id, data) {
                //upload callback
                var responsevalue = "";
                var responsevalue1 = "";
                if (data.result.length > 0) {
                    for (var i = 0; i < data.result.length; i++) {
                        responsevalue += data.result[i] + "<br/>";
                        responsevalue1 += data.result[i] + "\\n";
                    }
                    kendo.alert(responsevalue).title("Alert!");
                    getLOVData();
                    //window.location.href = "/Sal/Lead/DownloadErrorLogs?messages=" + responsevalue1;
                    //$('#ListOfValuegrid').data('kendoGrid').dataSource.read();
                    //  $('#ListOfValuegrid').data('kendoGrid').refresh();
                    //var upload = $("#files").data("kendoUpload");
                    //upload.clearAllFiles();
                    $("#iconFile").dmUploader("reset");
                }
                else {
                    responsevalue = "Data Inserted Successfully";
                    kendo.alert(responsevalue).title("Alert!");
                    // window.location.href = "/Sal/Lead/DownloadErrorLogs?messages=" + responsevalue;
                    // $('#ListOfValuegrid').data('kendoGrid').dataSource.read();
                    // $('#ListOfValuegrid').data('kendoGrid').refresh();
                    getLOVData();
                    //var upload = $("#files").data("kendoUpload");
                    //upload.clearAllFiles();
                    $("#iconFile").dmUploader("reset");

                }

                ui_multi_update_file_status(id, 'success', 'Upload Complete');
                ui_multi_update_file_progress(id, 100, 'success', false);
            },
            onUploadError: function (id, xhr, status, message) {
                ui_multi_update_file_status(id, 'danger', message);
                ui_multi_update_file_progress(id, 0, 'danger', false);
            },
            onFallbackMode: function () {
            },
            onFileSizeError: function (file) {
            }
        });
    }

    function DownloadSampleFile()
    {
        location.href = "/cms/LOV/DownloadLOVSampleFile";
    }
    function onFileUploadSuccess(e) {
        
        var responsevalue = "";
        var responsevalue1 = "";
        if (e.result.length > 0) {
            for (var i = 0; i < e.result.length; i++) {
                responsevalue += e.result[i] + "<br/>";
                responsevalue1 += e.result[i] + "\\n";
            }
            kendo.alert(responsevalue).title("Alert!");
            getLOVData();
            //window.location.href = "/Sal/Lead/DownloadErrorLogs?messages=" + responsevalue1;
            //$('#ListOfValuegrid').data('kendoGrid').dataSource.read();
          //  $('#ListOfValuegrid').data('kendoGrid').refresh();
            var upload = $("#files").data("kendoUpload");
            upload.clearAllFiles();

        }
        else {
            responsevalue = "Data Inserted Successfully";
            kendo.alert(responsevalue).title("Alert!");
           // window.location.href = "/Sal/Lead/DownloadErrorLogs?messages=" + responsevalue;
           // $('#ListOfValuegrid').data('kendoGrid').dataSource.read();
            // $('#ListOfValuegrid').data('kendoGrid').refresh();
            getLOVData();
            var upload = $("#files").data("kendoUpload");
            upload.clearAllFiles();

        }

    }
        function OnDeleteListOfValue(e) {
        var flag = confirm('Do you really want to delete the ListOfValue?');
        //alert("..Delete");
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        if (flag) {
            $.ajax({
                url:'@Url.Action("Delete", "LOV", new { @area= "Cms" })?Id=' + dataItem.id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        getLOVData();
                       // $("#ListOfValuegrid").data("kendoGrid").dataSource.read();
                        kendo.alert("ListOfValue Deleted Successfully.");
                    } else {
                        getLOVData();
                       // $("#ListOfValuegrid").data("kendoGrid").dataSource.read();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    getLOVData();
                   // $("#ListOfValuegrid").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }
      function OnCreateListOfValue() {

              var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Create", "LOV", new { @area="Cms"})';
          win.OpenWindow({ Title: 'Manage ListOfValue', Width: 450, Height: 850 });
        return false;

    }
    function OnEditListOfValue(id) {
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        
          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Edit", "LOV", new { @area="Cms"})?Id=' +id;
          win.OpenWindow({ Title: 'Manage ListOfValue', Width: 450, Height: 850 });
        return false;
    }


</script>
<script>

     var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(StatusEnum)))';
    var statusObj = JSON.parse(status);

    var columnDefs = [
        {
            field: "LOVType",

        },
           {
            field: "Name",
           },
           {
               field: "Code",

           },
           {
               field: "Description",
           },

        {
            field: "SequenceOrder",
        },
        {
            field: "Status",
            cellRenderer: params => {
                return statusObj[params.value]; //only for enum
            }
        },
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-lovBin' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        getLOVData();

       // $.contextMenu('update');
      //  $('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-lovBin',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditListOfValue(id);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-edit" },


                            }
                        };


                }
            }
        });


    });

    function getLOVData() {
        document.getElementById("ListOfValuegrid").innerHTML = "";
        gridConfig(
            "ListOfValuegrid",
            "/PortalAdmin/LOV/ReadData",
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>

<div>
    <h4>@ViewBag.Title</h4>

    <hr />

    <div class="row">
        <div class="row col-12">
            <div class="col-9">
                @*@(Html.Kendo().Upload().Multiple(false)
                                    .Name("files")
                                    .Messages(x=>x.Select("Bulk upload Lov details"))
                                    .Async(a => a
                                    .Save("ImportLOVs", "LOV",new { area="Cms"})
                                    .AutoUpload(true)
                                    )
                                    .Events(events => events
                                    .Success("onFileUploadSuccess")
                                    //.Error("OnLeadUploadError")
                                    )
                                    .Validation(validation => validation.AllowedExtensions(new string[] { ".csv" }))
        )*@
                <!--<div class="row">
    <div class="col">
        <div id="iconFile" class="dm-uploader">
            <h6 class=" text-muted">Drag &amp; drop files here</h6>

            <div class="btn btn-primary btn-block ">
                <span>Open the file Browser</span>
                <input type="file" title='Click to add Files' />
            </div>
        </div>

    </div>-->
                @*if multiple use this*@

                @*<div class="col">
            <div class="card h-100">
                <div class="card-header">
                    File List
                </div>
                <ul class="list-unstyled p-2 d-flex flex-column col" id="files">
                    <li id="nofiles" class="text-muted text-center empty">No files uploaded.</li>
                </ul>
            </div>
        </div>*@
                @*if multiple use this*@
                @*</div>*@

                @{
                    await Html.RenderPartialAsync("~/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel
                    {
                        PostUrl = "/cms/LOV/ImportLOVs",
                        CallbackMethod = "onFileUploadSuccess",
                        Property = "import"
                    });
                }
                <input type="hidden" id="import" />

            </div>
            <div class="col-3">
                <button class="btn btn-primary" onclick="DownloadSampleFile()">Download Sample File</button>
            </div>
        </div>
        <div class="col-12">
            <button type='button' class='btn btn-primary' onclick='OnCreateListOfValue();'><i class='fa fas fa-plus'></i>&nbsp;Create ListOfValue</button>
            <br /><br />
            <div id="ListOfValuegrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
            @*@(Html.Kendo().Grid<LOVViewModel>
                ()
                .Name("ListOfValuegrid")
                .ToolBar(toolbar =>
                toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateListOfValue();'><i class='fa fas fa-plus'></i>&nbsp;Create ListOfValue</button>"))

                .Columns(columns =>

                {
                    columns.Command(command =>
                    {
                        command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditListOfValue").HtmlAttributes(new { @class = "action-icon" });

                    }).Title("Action").Width(100);

                    columns.Bound(c => c.LOVType);
                    columns.Bound(c => c.Name);
                    columns.Bound(c => c.Description);
                    columns.Bound(c => c.Code);
                    columns.Bound(c => c.Status);
                    columns.Bound(c => c.SequenceOrder);

                })
                .Scrollable(x => x.Enabled(false))
                            .Sortable(srt => srt.Enabled(true))
                            .Selectable(select => select.Enabled(false))
                            .Filterable(f => f.Extra(false)
                            .Operators(o => o.ForString(s => s.Clear()
                            .Contains("Contains")
                            .IsEqualTo("Is equal to")
                            )))
                            .Pageable(pageable => pageable
                            .Refresh(true)

                            .PageSizes(true)
                            .ButtonCount(5))
                            .AutoBind(true)
                            .DataSource(
                            dataSource => dataSource
                            .Ajax()
                            .PageSize(20)
                            //.Events(events => events.Error("OnError"))
                            .Read(read => read.Action("ReadData", "LOV"))
                            .Model(model => model.Id(p => p.Id))
                            )
                      )*@

        </div>
    </div>
</div>

