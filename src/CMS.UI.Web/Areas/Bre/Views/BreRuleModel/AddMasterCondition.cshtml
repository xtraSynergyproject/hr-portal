@using Kendo.Mvc.UI;
@using Synergy.App.Common;

@model Synergy.App.ViewModel.BusinessRuleModelViewModel
@{
    ViewData["Title"] = "Create Business Rule";
    Layout = "/Views/Shared/_PopupLayout.cshtml";

}
<form asp-controller="BreRuleModel" asp-action="CreateBusinessRuleCondition"
      data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
      data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
      data-ajax="true" data-ajax-method="POST"
      method="post" class="form-horizontal">
    <div class="text-danger" asp-validation-summary="All"></div>
    <div class="row" style="padding:10px;">
        <div class="row col-sm-12">
            <div class="col-3">
                <div>
                    <label for="FieldSourceType" @*style="margin-top: -20px !important;"*@>Field Source Type</label>

                    @*@(Html.Kendo().DropDownListFor(x=>x.FieldSourceType)
          // .Name("FieldSourceType")
          .DataTextField("Name")
          .DataValueField("Id")
          .Events(e => e.Change("change"))
           .DataSource(source =>
           {
               source.Read(read =>
               {
                   read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "BreMetadataTypeEnum", exculdeItem1 = "MasterData", exculdeItem2="TableMeta" });
               });
           })
      .Value(Model.FieldSourceType.ToString())
          .HtmlAttributes(new { style = "width: 100%" })
    )*@
                    <input asp-for="FieldSourceType" id="FieldSourceType" style="width:100%" />


                </div>
                <div class="form-label-group" id="constdiv" style="display:none">
                    <input asp-for="Field" class="form-control" placeholder="Name" type="text" autocomplete="off" />
                    <label for="Field">Field</label>
                </div>
                <div id="inputdiv" @*style="display:none"*@>
                    @*@(Html.Kendo().TreeView()
        .Name("inputtreeview").HtmlAttributes(new { @class = "treeview1" ,@style="width:300px"})
        .DataTextField("Name")
         .Events(e => e.DataBound("OnInputTreeViewBound"))
        .TemplateId("treeview-template1")
        .Checkboxes(checkboxes => checkboxes
                .Name("InputField")
                .CheckChildren(false)
                 .TemplateId("checkbox-template")
            )
         .Events(events => events
        .Check("onCheck")
    )
        .DataSource(dataSource => dataSource
            .Read(read => read
                 .Action("BreInputData", "Bre", new { templateId = Model.TemplateId })
            )
        )
    )*@
                    <script id="treeview-template1" type="text/kendo-ui-template">
                    #: item.Name #
                    @*<span data-id="#:item.id#" data-type="#:item.ItemType#" class="tree-menu1"><i class="fa fa-ellipsis-h"></i></span>*@

                    </script>
                    <script type="text/kendo-template" id="checkbox-template">
                            #if(item.hasChildren == false){#  <input type='checkbox' #= item.checked ? 'checked' : '' #>#}#
                            @*<input type='checkbox' name='checkedFiles[#= item.id #]' value='true' />*@
                    </script>
                </div>

            </div>
            <div class="col-3">
                <label for="OperatorStr" @*style="margin-top: -20px !important;"*@>Operator</label>
                <br />
                @*@(Html.Kendo().DropDownListFor(model => model.OperatorType)
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Action("GetEnumIdNameList", "Home",new { @area = "", enumType = "EqualityOperationEnum"});
                                            });
                                        })
                                        //.OptionLabel(@Constant.PlaceHolder_SelectOption)
                                        .DataTextField("Name")
                                        .DataValueField("Id")
                                        .Value(Model.OperatorType.ToString())
                                        //.Filter(FilterType.Contains)
                                        .HtmlAttributes(new { @class = "form-control",  @style = "height: auto !important;" }))*@

                <input asp-for="OperatorType" id="OperatorType" class="form-control" style="height: auto !important;" />

            </div>
            <div class="col-3">
                <div>
                    <label for="ValueSourceType" @*style="margin-top: -20px !important;"*@>Value Source Type</label>

                    @*@(Html.Kendo().DropDownListFor(x => x.ValueSourceType)
              // .Name("ValueSourceType")
              .DataTextField("Name")
              .DataValueField("Id")
              .Events(e => e.Change("Valuechange"))
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "BreMetadataTypeEnum" , exculdeItem1= "MasterData" });
                    });
                })
              .Value(Model.ValueSourceType.ToString())
              .HtmlAttributes(new { style = "width: 100%" })
        )*@
                    <input asp-for="ValueSourceType" id="ValueSourceType" style="width:100%" />

                </div>
                <div class="form-label-group" id="valueconstdiv" style="display:none">
                    <input asp-for="Value" class="form-control" placeholder="Value" type="text" autocomplete="off">
                    <label for="Value">Value</label>
                </div>
                <div id="valueinputdiv" @*style="display:none"*@>
                    @*@(Html.Kendo().TreeView()
        .Name("ValueInputtreeview").HtmlAttributes(new { @class = "treeview1", @style = "width:300px" })
        .DataTextField("Name")
        .Events(e => e.DataBound("OnValueInputTreeViewBound"))
        .TemplateId("treeview-template2")
        .Checkboxes(checkboxes => checkboxes
                .Name("ValueInputField")
                .CheckChildren(false)
                .TemplateId("checkbox1-template")
            )
         .Events(events => events
        .Check("onValueInputCheck")
    )
        .DataSource(dataSource => dataSource
            .Read(read => read
                 .Action("BreInputData", "Bre", new { templateId = Model.TemplateId })
            )
        )
    )*@
                    <script id="treeview-template2" type="text/kendo-ui-template">
                        #: item.Name #
                        @*<span data-id="#:item.id#" data-type="#:item.ItemType#" class="tree-menu1"><i class="fa fa-ellipsis-h"></i></span>*@

                    </script>
                    <script type="text/kendo-template" id="checkbox1-template">
                            #if(item.hasChildren == false){#  <input type='checkbox' #= item.checked ? 'checked' : '' #>#}#
                            @*<input type='checkbox' name='checkedFiles[#= item.id #]' value='true' />*@
                    </script>
                </div>

                <div id="valuetablemetadiv" style="display:none">
                    @*@(Html.Kendo().TreeView()
        .Name("ValueTabletreeview").HtmlAttributes(new { @class = "treeview1", @style = "width:300px" })
        .DataTextField("Name")
        .Events(e => e.DataBound("OnValueTableTreeViewBound"))
        .TemplateId("treeview-template3")
        .Checkboxes(checkboxes => checkboxes
                .Name("ValueInputField")
                .CheckChildren(false)
                .TemplateId("checkbox2-template")
            )
         .Events(events => events
        .Check("onValuetableCheck")
    )
        .DataSource(dataSource => dataSource
            .Read(read => read
                 .Action("BreTableData", "Bre", new { tableMetadataId = Model.TableMetaId, templateType=ViewBag.TemplateType })
            )
        )
    )*@
                    <script id="treeview-template3" type="text/kendo-ui-template">
                        #: item.Name #
                        @*<span data-id="#:item.id#" data-type="#:item.ItemType#" class="tree-menu1"><i class="fa fa-ellipsis-h"></i></span>*@

                    </script>
                    <script type="text/kendo-template" id="checkbox2-template">
                            #if(item.hasChildren == false){#  <input type='checkbox' #= item.checked ? 'checked' : '' #>#}#
                            @*<input type='checkbox' name='checkedFiles[#= item.id #]' value='true' />*@
                    </script>
                </div>

            </div>
            <div class="col-3" style="margin-top: 33px;">
                <button type="submit" class="btn btn-success" id="btnSave">Save</button>
            </div>
        </div>
        @*<div class="col-sm-12">
                <button type="submit" class="btn btn-success" id="btnSave">Save</button>
            </div>*@
    </div>
    @Html.HiddenFor(x => x.BusinessRuleNodeId)
    @Html.HiddenFor(x => x.BreMasterTableMetadataId)
    @Html.HiddenFor(x => x.BusinessRuleSource)
    @Html.HiddenFor(x => x.BusinessRuleType)
    @Html.HiddenFor(x => x.ParentId)
    @Html.HiddenFor(x => x.DataAction)
    @Html.HiddenFor(x => x.Condition)
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.RuleId)
    @Html.HiddenFor(x => x.Field)
    @Html.HiddenFor(x => x.FieldId)
    @Html.HiddenFor(x => x.Value)
    @Html.HiddenFor(x => x.ValueId)
    @Html.HiddenFor(x => x.FieldSourceType)
    @Html.HiddenFor(x => x.ValueSourceType)
    @Html.HiddenFor(x => x.TemplateId)
    @Html.HiddenFor(x => x.ParentFieldId)
    @Html.HiddenFor(x => x.ParentValueId)
    @Html.HiddenFor(x => x.FieldDataType)
    @Html.HiddenFor(x => x.ValueDataType)
</form>

<script>
    $(document).ready(function () {
        $("#FieldSourceType").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@(Model.FieldSourceType.IsNotNull()?(int)((BreMetadataTypeEnum)Enum.Parse(typeof(BreMetadataTypeEnum), Model.FieldSourceType.ToString())): Model.FieldSourceType.ToString())",
            filter: "contains",
            autoBind: true,
            change: change,
            dataSource: {
                transport: {
                    read: {
                        url: "@Url.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "BreMetadataTypeEnum", exculdeItem1 = "MasterData", exculdeItem2="TableMeta" })",
                    }
                }
            }
        });

        $("#OperatorType").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@(Model.OperatorType.IsNotNull()?(int)((EqualityOperationEnum)Enum.Parse(typeof(EqualityOperationEnum), Model.OperatorType.ToString())): Model.OperatorType.ToString())",
            filter: "contains",
            autoBind: true,
            dataSource: {
                transport: {
                    read: {
                    url: "@Url.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "EqualityOperationEnum" })",
                    }
                }
            }
        });

        $("#ValueSourceType").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@(Model.ValueSourceType.IsNotNull()?(int)((BreMetadataTypeEnum)Enum.Parse(typeof(BreMetadataTypeEnum), Model.ValueSourceType.ToString())): Model.ValueSourceType.ToString())",
            filter: "contains",
            autoBind: true,
            change: Valuechange,
            dataSource: {
                transport: {
                    read: {
                    url: "@Url.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "BreMetadataTypeEnum", exculdeItem1 = "MasterData" })",
                    }
                }
            }
        });
    });
     var onAjaxSuccess = function (res) {
        if (res.success) {

            ShowNotification("Saved Successfully", "success");
            //window.parent.$("#treeview").data("kendoTreeView").dataSource.read({  nodeId:'@Model.BusinessRuleNodeId' });

            var win = GetMainWindow();
            win.CloseWindow({ MethodName:"reloadtreeview"});
            return false;

        }
        else {
            showError(res.error);
        }
    };



    $(document).ready(function () {

        $("#treeview .k-checkbox input").eq(0).attr("disabled", true)



     if ('@Model.DataAction' == "@DataActionEnum.Edit")
     {
       //  alert("edit");
         if ('@Model.ValueSourceType' == "@BreMetadataTypeEnum.InputData") {
          //   alert("inp");
            // $("#radio_4").prop("checked", true);
             $("#valueinputdiv").show();
             $("#valueconstdiv").hide().prop('required', false);
             $("#valuetablemetadiv").hide();
            // $("#ValueSourceType").val("InputData");
           //  $("#Value").val("");
         }
         else if ('@Model.ValueSourceType' == "@BreMetadataTypeEnum.TableMeta"){
            // $("#Value").val("");
             $("#valueinputdiv").hide();
             $("#valueconstdiv").hide();
             $("#valuetablemetadiv").show();
         }
         else
         {
           //  alert("cond");
           //  $("#radio_6").prop("checked", true);
             $("#valueinputdiv").hide();
             $("#valueconstdiv").show();
          //   $("#valuemasterdiv").hide();
            // $("#ValueSourceType").val("Constant");
             $("#ValueId").val("");
         }
         if ('@Model.FieldSourceType' == "@BreMetadataTypeEnum.InputData") {
             //$("#radio_1").prop("checked", true);
              $("#inputdiv").show();
              $("#constdiv").hide().prop('required', false);
            //  $("#masterdiv").hide();
              //$("#FieldSourceType").val("InputData");
           //  $("#Field").val("");

         }

         else
         {
             //$("#radio_3").prop("checked", true);
              $("#inputdiv").hide();
              $("#constdiv").show();
           //   $("#masterdiv").hide();
              //$("#FieldSourceType").val("Constant");
              $("#FieldId").val("");
         }
        }
    });


    function change() {

        var type = this.text();
        if (type == "@BreMetadataTypeEnum.InputData") {
            $("#inputdiv").show();
            $("#constdiv").hide().prop('required', false);
          //  $("#masterdiv").hide();
            //$("#FieldSourceType").val("InputData");
          $("#Field").val("");

        }

        else {
            $("#Field").val("");
            $("#inputdiv").hide();
            $("#constdiv").show();
        //    $("#masterdiv").hide();
          //  $("#FieldSourceType").val("Constant");
            $("#FieldId").val("");
        }
    }

    function OnInputTreeViewBound(e) {
        var rootNodes = $("#inputtreeview").data("kendoTreeView").dataSource.data();
        traverse(rootNodes, function (node) {
            if (node.id == $("#FieldId").val()) {
                $("#FieldDataType").val(node.DataType);
                $("#ParentFieldId").val(node.ParentId);
                node.set("checked", true);
            }
        });
    }
    function OnValueInputTreeViewBound(e) {
        var rootNodes = $("#ValueInputtreeview").data("kendoTreeView").dataSource.data();
        traverse(rootNodes, function (node) {
            if (node.id == $("#ValueId").val()) {
                $("#ParentValueId").val(node.ParentId);
                $("#ValueDataType").val(node.DataType);
                node.set("checked", true);
            }
        });
    }

    function OnValueTableTreeViewBound(e) {
        var rootNodes = $("#ValueTabletreeview").data("kendoTreeView").dataSource.data();
        traverse(rootNodes, function (node) {
            if (node.id == $("#ValueId").val()) {
                node.set("checked", true);
            }
        });
    }

    function OnMasterTreeViewBound(e) {
        var rootNodes = $("#mastertreeview").data("kendoTreeView").dataSource.data();
        traverse(rootNodes, function (node) {
            if (node.id == $("#FieldId").val()) {
                node.set("checked", true);
            }
        });
    }
    function OnValueMasterTreeViewBound(e) {
        var rootNodes = $("#ValueMastertreeview").data("kendoTreeView").dataSource.data();
        traverse(rootNodes, function (node) {
            if (node.id == $("#ValueId").val()) {
                node.set("checked", true);
            }
        });
    }

    function Valuechange() {
        var type = this.text();
        if (type == "@BreMetadataTypeEnum.InputData") {
            $("#valueinputdiv").show();
            $("#valueconstdiv").hide().prop('required', false);
            $("#valuetablemetadiv").hide();
            //$("#ValueSourceType").val("InputData");
            $("#Value").val("");
            $("#ValueId").val("");
        }

        else if (type == "@BreMetadataTypeEnum.Constant") {
            $("#Value").val("");
            $("#valueinputdiv").hide();
            $("#valueconstdiv").show();
            $("#valuetablemetadiv").hide();
            // $("#ValueSourceType").val("Constant");
            $("#ValueId").val("");
        }
        else {
            $("#Value").val("");
            $("#valueinputdiv").hide();
            $("#valueconstdiv").hide();
            $("#valuetablemetadiv").show();
            // $("#ValueSourceType").val("Constant");
            $("#Value").val("");
            $("#ValueId").val("");
        }
    }




    $("#btnSave").click(function (e) {
        if ($("#FieldSourceType").val() == "Constant")
        {
            if ($("#Field").val() == "")
            {
                alert("Field is required");
                $(".text-danger").removeClass("validation-summary-valid");
                $(".text-danger").addClass("validation-summary-errors");
                $(".text-danger ul").html("Field is required");
                e.preventDefault();
            }
            else {
                $(".text-danger").removeClass("validation-summary-errors");
                $(".text-danger").addClass("validation-summary-valid");
                $(".text-danger ul").html('');
            }
        }
        if ($("#ValueSourceType").val() == "Constant") {
            if ($("#Value").val() == "") {
                alert("Value is required");
                $(".text-danger").removeClass("validation-summary-valid");
                $(".text-danger").addClass("validation-summary-errors");
                $(".text-danger ul").append("<br/> Value is required");
                e.preventDefault();
            }
            else
            {
                $(".text-danger").removeClass("validation-summary-errors");
                $(".text-danger").addClass("validation-summary-valid");
                $(".text-danger ul").html('');
            }
        }
    });
    function onCheck(e) {
        var dataItem = this.dataItem(e.node);
        $("#FieldId").val(dataItem.id);
        $("#ParentFieldId").val(dataItem.ParentId);
        $("#Field").val(dataItem.Name);
        $("#FieldDataType").val(dataItem.FieldDataType);
        var rootNodes = $("#inputtreeview").getKendoTreeView().dataSource.data();
        traverse(rootNodes, function (node) {
            if (node != dataItem) {
                node.set("checked", false);
            }
        });
    }
    function onMasterCheck(e) {
        var dataItem = this.dataItem(e.node);
        $("#FieldId").val(dataItem.id);
        var rootNodes = $("#mastertreeview").getKendoTreeView().dataSource.data();
        traverse(rootNodes, function (node) {
            if (node != dataItem) {
                node.set("checked", false);
            }
        });
    }
    function onValueInputCheck(e) {

        var dataItem = this.dataItem(e.node);
        $("#ValueId").val(dataItem.id);
        $("#ParentValueId").val(dataItem.ParentId);
        $("#Value").val(dataItem.Name);
        $("#ValueDataType").val(dataItem.FieldDataType);
        var rootNodes = $("#ValueInputtreeview").getKendoTreeView().dataSource.data();
        traverse(rootNodes, function (node) {
            if (node != dataItem) {
                node.set("checked", false);
            }
        });
    }

    function onValuetableCheck(e) {

        var dataItem = this.dataItem(e.node);
        $("#ValueId").val(dataItem.id);
        $("#Value").val(dataItem.Name);
        $("#ParentValueId").val(dataItem.ParentId);
        var rootNodes = $("#ValueTabletreeview").getKendoTreeView().dataSource.data();
        traverse(rootNodes, function (node) {
            if (node != dataItem) {
                node.set("checked", false);
            }
        });
    }
    function onValueMasterCheck(e) {
        var dataItem = this.dataItem(e.node);
        $("#ValueId").val(dataItem.id);
        var rootNodes = $("#ValueMastertreeview").getKendoTreeView().dataSource.data();
        traverse(rootNodes, function (node) {
            if (node != dataItem) {
                node.set("checked", false);
            }
        });
    }
    function traverse(nodes, callback) {
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var children = node.hasChildren && node.children.data();
            callback(node);
            if (children) {
                traverse(children, callback);
            }
        }
    }
</script>

@*<script>
     if ('@Model.DataAction' == "@DataActionEnum.Edit")
    {
         if ('@Model.ValueSourceType' == "@BreMetadataTypeEnum.InputData") {
             $("#radio_4").prop("checked", true);
             $("#valueinputdiv").show();
             $("#valueconstdiv").hide().prop('required', false);
             $("#ValueSourceType").val("InputData");
             $("#Value").val("");
         }
         else
         {
             $("#radio_6").prop("checked", true);
             $("#valueinputdiv").hide();
             $("#valueconstdiv").show();

             $("#ValueSourceType").val("Constant");
             $("#ValueId").val("");
         }

    }


    function OnDataBound(e) {
        var rootNodes = $("#Fieldtreeview").data("kendoTreeView").dataSource.data();
        traverse(rootNodes, function (node) {
            if (node.DisplayName == $("#Field").val()) {
                node.set("checked", true);
            }
        });
    }
    function OnValueInputTreeViewBound(e) {
        var rootNodes = $("#ValueInputtreeview").data("kendoTreeView").dataSource.data();
        traverse(rootNodes, function (node) {
            if (node.id == $("#ValueId").val()) {
                node.set("checked", true);
            }
        });
    }

    $('input[type=radio][name=ValueSourceType]').change(function () {
        if ($('input[name=ValueSourceType]:checked').val() == "InputData") {
            $("#valueinputdiv").show();
            $("#valueconstdiv").hide().prop('required', false);
            $("#ValueSourceType").val("InputData");
            $("#Value").val("");
        }
        else {
            $("#valueinputdiv").hide();
            $("#valueconstdiv").show();
            $("#ValueSourceType").val("Constant");
            $("#ValueId").val("");
        }
    });
    $("#btnSave").click(function (e) {

        if ($('input[name=ValueSourceType]:checked').val() == "Constant") {
            if ($("#Value").val() == "") {
                alert("Value is required");
                $(".text-danger").removeClass("validation-summary-valid");
                $(".text-danger").addClass("validation-summary-errors");
                $(".text-danger ul").append("<br/> Value is required");
                e.preventDefault();
            }
            else
            {
                $(".text-danger").removeClass("validation-summary-errors");
                $(".text-danger").addClass("validation-summary-valid");
                $(".text-danger ul").html('');
            }
        }
    });
    function onCheck(e) {
        var dataItem = this.dataItem(e.node);
        $("#Field").val(dataItem.DisplayName);
        var rootNodes = $("#Fieldtreeview").getKendoTreeView().dataSource.data();
        traverse(rootNodes, function (node) {
            if (node != dataItem) {
                node.set("checked", false);
            }
        });
    }

    function onValueInputCheck(e) {
        var dataItem = this.dataItem(e.node);
        $("#ValueId").val(dataItem.id);
        var rootNodes = $("#ValueInputtreeview").getKendoTreeView().dataSource.data();
        traverse(rootNodes, function (node) {
            if (node != dataItem) {
                node.set("checked", false);
            }
        });
    }

    function traverse(nodes, callback) {
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var children = node.hasChildren && node.children.data();
            callback(node);
            if (children) {
                traverse(children, callback);
            }
        }
    }
</script>*@