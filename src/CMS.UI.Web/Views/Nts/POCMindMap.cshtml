@using Syncfusion.EJ2;

@section ControlsSection{
    <div class="col-lg-8 control-section">
        <ejs-diagram id="diagram" width="100%" height="500px" getNodeDefaults="@ViewBag.getNodeDefaults" getConnectorDefaults="@ViewBag.getConnectorDefaults" created="diagramCreated">
            <e-diagram-snapsettings constraints="None"></e-diagram-snapsettings>
            <e-diagram-datasourcesettings id="Name" parentId="ReportingPersons" dataSource="new DataManager() { Data = (List<ComplexHierarchicalDataDetails>)ViewBag.Nodes }"></e-diagram-datasourcesettings>
            <e-diagram-layout type="ComplexHierarchicalTree" horizontalSpacing="40" verticalSpacing="40" connectionPointOrigin="DifferentPoint" margin="ViewBag.marginValue"></e-diagram-layout>
        </ejs-diagram>
    </div>
    <div class="col-lg-4 property-section">
        <div class="property-panel-header">
            Layout Settings
        </div>
        <div class="row property-panel-content" id="appearance" style="padding-top: 10px">
            <div class="row row-header">
                Orientation
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style  e-selected-style" id="topToBottom" style="background-image: url('@Url.Content("~/images//diagram/common-orientation/toptobottom.png")'); margin-right: 3px">
                </div>
                <div class="image-pattern-style" id="bottomToTop" style="background-image: url('@Url.Content("~/images//diagram/common-orientation/bottomtotop.png")'); margin: 0px 3px">
                </div>
                <div class="image-pattern-style" id="leftToRight" style="background-image: url('@Url.Content("~/images//diagram/common-orientation/lefttoright.png")'); margin-right: 3px">
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="image-pattern-style" id="rightToLeft" style="background-image: url('@Url.Content("~/images//diagram/common-orientation/righttoleft.png")'); margin: 0px 3px">
                </div>
            </div>
        </div>
        <div class="row property-panel-content" style="padding-top: 10px">
            <div class="row row-header">
                Behavior
            </div>
            <div class="row" style="padding-top: 8px">
                <div style="display: table;height: 35px; padding-left: 0px" class="col-xs-5">
                    <div style="display: table-cell; vertical-align: middle">Margin X</div>
                </div>
                <div class="col-xs-7">
                    <ejs-numerictextbox id="marginLeft" format="##.##" change="marginLeftChange" width="120px" min="20" max="60" step="2" value="10"></ejs-numerictextbox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div style="display: table;height: 35px; padding-left: 0px" class="col-xs-5">
                    <div style="display: table-cell; vertical-align: middle">Margin Y</div>
                </div>
                <div class="col-xs-7">
                    <ejs-numerictextbox id="marginTop" format="##.##" change="marginTopChange" width="120px" min="20" max="60" step="2" value="50"></ejs-numerictextbox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div style="display: table;height: 35px; padding-left: 0px" class="col-xs-5">
                    <div style="display: table-cell; vertical-align: middle">Horizontal Spacing</div>
                </div>
                <div class="col-xs-7">
                    <ejs-numerictextbox id="hSpacing" format="##.##" change="hSpacingChange" width="120px" min="20" max="60" step="2" value="40"></ejs-numerictextbox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div style="display: table;height: 35px; padding-left: 0px" class="col-xs-5">
                    <div style="display: table-cell; vertical-align: middle">Vertical Spacing</div>
                </div>
                <div class="col-xs-7">
                    <ejs-numerictextbox id="vSpacing" format="##.##" change="vSpacingChange" width="120px" min="20" max="60" step="2" value="40"></ejs-numerictextbox>
                </div>
            </div>
            <div class="row" style="padding-top: 10px">
                <ejs-checkbox id="checked" checked="true" label="Prevent Connector Overlapping" change="onChangeData"></ejs-checkbox>
            </div>
        </div>
    </div>

    <script>

        function diagramCreated() {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.tool = ej.diagrams.DiagramTools.ZoomPan;
            diagram.dataBind();
        }
        function hSpacingChange(args) {
            updateLayoutSettings("horizontalSpacing", args.value);
        }
        function vSpacingChange(args) {
            updateLayoutSettings("verticalSpacing", args.value);
        }
        function marginTopChange(args) {
            updateLayoutSettings("marginTop", args.value);
        }
        function marginLeftChange(args) {
            updateLayoutSettings("marginLeft", args.value);
        }

        function updateLayoutSettings(propertyName, propertyValue) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            propertyValue = Number(propertyValue);
            switch (propertyName) {
                case "horizontalSpacing":
                    diagram.layout.horizontalSpacing = propertyValue;
                    break;
                case "verticalSpacing":
                    diagram.layout.verticalSpacing = propertyValue;
                    break;
                case "marginLeft":
                    diagram.layout.margin.left = propertyValue;
                    break;
                case "marginTop":
                    diagram.layout.margin.top = propertyValue;
                    break;
            }
            diagram.dataBind();
        }

        function connectorDefaults(connector, diagram) {
            connector.type = 'Orthogonal';
            connector.cornerRadius = 7;
            connector.targetDecorator.height = 7;
            connector.targetDecorator.width = 7;
            connector.style.strokeColor = '#6d6d6d';
            return connector;
        }

        function nodeDefaults(obj, diagram) {
            obj.style = { fill: obj.data.Color, strokeColor: 'none', strokeWidth: 2 };
            obj.width = 40; obj.height = 40;
            //Initialize shape
            obj.shape = { type: 'Basic', shape: 'Rectangle', cornerRadius: 7 };
            return obj;
        }

        function onChangeData(args) {
            var diagram = document.getElementById("diagram").ej2_instances[0];
            diagram.layout.connectionPointOrigin = args.checked ? "DifferentPoint" : "SamePoint";
        }

    </script>
}