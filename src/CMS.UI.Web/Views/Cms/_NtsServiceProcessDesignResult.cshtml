@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@{
    ViewData["Title"] = "Portal";
    Layout = "/Views/Shared/_PopupLayout.cshtml";
}
@inject Synergy.App.Common.IUserContext _userContext
@model ComponentResultViewModel
<style>
    .taskNo {
        color: #007bff !important;
    }
    
    .k-upload {
        width: 100%;
    }

    .SYN-Main-wrapper {
        width: 700px;
        height: auto;
        padding: 0;
        margin: 20px auto;
        box-shadow: 4px 4px 10px #CBD0CE;
        border-radius: 6px;
    }

    .SYN-upload-row {
        width: 96%;
        padding: 0;
        margin: 4px auto;
        background-color: #10B0ED;
        border-radius: 6px;
    }

    .SYN-ico-pdf {
        width: 96%;
        padding: 20px;
        margin: 0 auto;
    }

    .SYN-ico-action {
        padding: 26px 4px;
        margin: 4px;
        float: left;
    }

    .SYN-ico-action-eye {
        padding: 26px 4px;
        margin: 4px;
        float: left;
        color: blue;
        cursor: pointer;
    }

    .SYN-ico-action-down {
        padding: 26px 4px;
        margin: 4px;
        float: left;
        color: greenyellow;
        cursor: pointer;
    }

    .SYN-ico-action-del {
        padding: 26px 4px;
        margin: 4px;
        float: left;
        color: red;
        cursor: pointer;
    }

    .SYN-tag-field {
        padding: 0;
        margin: 0;
        font-size: 14px;
        color: #939598;
    }

    .SYN-txt-field {
        padding: 0;
        margin: 0;
    }

    .SYN-row-gap {
        padding: 0;
        margin: 12px 0;
    }

    .SYN-dummy-row {
        width: 96%;
        padding: 4px;
        margin: 4px auto;
    }

    .SYN-list-box {
        width: 96%;
        padding: 0;
        margin: 4px auto;
        background-color: #ffffff;
        border-radius: 6px;
        border: 1px solid #C4C4C4;
    }

    .SYN-sub-docName {
        padding: 2px 0 2px 0;
        font-size: 14px;
    }

    .SYN-sub-white-txt {
        padding: 2px 0 2px 12px;
        font-size: 14px;
    }

    .SYN-inn-title-row {
        width: 96%;
        padding: 0;
        margin: 4px auto;
        background-color: #353535;
        border-radius: 6px;
        color: #fff;
    }

    .SYN-ico-close {
        width: 96%;
        padding: 6px;
        margin: 6px auto;
        height: auto;
    }

    .SYN-ico-expand {
        width: 96%;
        padding: 6px;
        margin: 6px auto;
        height: auto;
    }

    .SYN-inn-row {
        width: 96%;
        padding: 0;
        margin: 4px auto;
    }

    .SYN-sub-title {
        font-weight: 500;
        font-size: 14px;
    }

    .SYN-white-text {
        font-weight: 500;
        font-size: 16px;
        color: #fff;
    }

    .SYN-main-title {
        font-weight: 500;
        font-size: 16px;
        padding: 16px 0;
    }

    .k-button {
        border-color: #353535;
        color: #fff;
        background-color: #353535;
    }

    .k-upload .k-dropzone {
        border-color: #dee2e6;
        color: #bababa;
        background-color: #10B0ED;
    }

        .k-upload .k-dropzone .k-dropzone-hint, .k-upload .k-dropzone .k-upload-status {
            color: #ffff;
        }
</style>

<script>
    function OpenTask(taskId, tempCode) {
        
        var id = taskId;
            var source = '@RequestSourceEnum.View.ToString()';
            var action = '@DataActionEnum.View.ToString()';
        var pagename = "NtsTaskPage";
        var portalId = "@_userContext.PortalId";

           var url = '/Cms/Page?lo=Popup&pageType=Task&source=' + source + '&dataAction=' + action + '&templateCodes=' + tempCode + '&portalId=' + portalId + '&recordId=' + id;
        var win = GetMainWindow();
           win.iframeOpenUrl = url;
        win.OpenWindow({ Title:  '@Html.Raw(SharedResource["Task"])', Width: 1200, Height: 600 });
        return false;
    }
    $(function () {

        

    });
    $(document).ready(function () {

        getData();

    });

    var columnDefs = [

        {  headerName: "Component Type", field: "ComponentType", },

        { headerName: "Component Status Name", field: "ComponentStatusName" },
        { headerName: "Service Subject", field: "ServiceSubject" },

        {
            field: "TaskNo", headerName: "Task No",
            cellRenderer: params => {
                if (params.data.TaskId != null) {
                    return "<a href='javascript:OpenTask(\"" + params.data.TaskId + "\",\"" + params.data.TemplateMasterCode + "\");' class='taskNo'>" + params.data.TaskNo + "</a>";
                }
            }
        },
        { field: "Assignee", headerName: "Assignee", },
        { field: "Start Date", headerName: "StartDate", },
        { field: "End Date", headerName: "EndDate", },
        { field: "Error", headerName: "Error", }
    ];

    function getData() {
        var serId = '@Model.NtsServiceId';
        document.getElementById("Modulegrid").innerHTML = "";
        gridConfig(
            "Modulegrid",
            "/Cms/ReadComponentResultData?serviceId=" + serId,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>


<div style="margin-top: 5px;padding-left: 20px;padding-right: 20px;width: 100%;">

    <div class="row">
        <div class="col-12">
            <div id="Modulegrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        </div>
        @*<div class="col-12">

            @(Html.Kendo().Grid<ComponentResultViewModel>
    ()
    .Name("Modulegrid")
    //.ToolBar(toolbar =>
    //toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateModule();'><i class='fa fas fa-plus'></i>&nbsp;Create Module</button>"))

    .Columns(columns =>

    {
        //columns.Command(command =>
        //{
        //    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditModule").HtmlAttributes(new { @class = "action-icon" });
        //    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteModule").HtmlAttributes(new { @class = "action-icon" });
        //}).Title("Action").Width(100);

        columns.Bound(c => c.ComponentType);
        columns.Bound(c => c.ComponentStatusName);
        columns.Bound(c => c.ServiceSubject);
        columns.Bound(c => c.TaskNo).ClientTemplate("#if(TaskId!=null){#<a href='\\#' onclick='OpenTask(\"#:TaskId#\",\"#:TemplateMasterCode#\")' class='taskNo'>#:TaskNo#</a>#}#");
        columns.Bound(c => c.Assignee);
        columns.Bound(c => c.StartDate);
        columns.Bound(c => c.EndDate);
        columns.Bound(c => c.Error);

    })

    .Scrollable(x => x.Enabled(false))
                .Sortable(srt => srt.Enabled(true))
                .Scrollable(x=>x.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                                    .Operators(o => o.ForString(s => s.Clear()
                                                    .Contains("Contains")
                                                    .IsEqualTo("Is equal to")
                                                )))
                .Pageable(pageable => pageable
                .Refresh(true)

                .PageSizes(true)
                .ButtonCount(5))
                .AutoBind(true)
                .DataSource(
                dataSource => dataSource
                .Ajax()
                .PageSize(20)
                //.Events(events => events.Error("OnError"))
                .Read(read => read.Action("ReadComponentResultData", "Cms", new { serviceId = Model.NtsServiceId }))
                .Model(model => model.Id(p => p.Id))
                )
          )

        </div>*@
    </div>
</div>


