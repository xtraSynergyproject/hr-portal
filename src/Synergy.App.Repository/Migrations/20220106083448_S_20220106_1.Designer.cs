// <auto-generated />
using System;
using Synergy.App.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Synergy.App.Repository.Migrations
{
    [DbContext(typeof(PostgreDbContext))]
    [Migration("20220106083448_S_20220106_1")]
    partial class S_20220106_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Npgsql:DefaultColumnCollation", "cms_collation_ci")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Synergy.App.DataModel.AdhocTaskComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<int>("AssigneeType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("NtsTaskId");

                    b.ToTable("AdhocTaskComponent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.AdhocTaskComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<int>("AssigneeType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("NtsTaskId");

                    b.ToTable("AdhocTaskComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Agency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Agency", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Application", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AcademicCertificateId")
                        .HasColumnType("text");

                    b.Property<string>("AccommodationId")
                        .HasColumnType("text");

                    b.Property<string>("ActualExperience")
                        .HasColumnType("text");

                    b.Property<string>("ActualITSkills")
                        .HasColumnType("text");

                    b.Property<string>("ActualQualification")
                        .HasColumnType("text");

                    b.Property<string>("ActualSpecialization")
                        .HasColumnType("text");

                    b.Property<string>("ActualTechnical")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<long?>("Age")
                        .HasColumnType("bigint");

                    b.Property<string>("AgencyId")
                        .HasColumnType("text");

                    b.Property<long?>("AnnualLeave")
                        .HasColumnType("bigint");

                    b.Property<string>("AnyOtherLanguage")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationNo")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationState")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AppliedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AppointmentRemarks")
                        .HasColumnType("text");

                    b.Property<string>("BatchId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CertificateCourse")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhoneHome")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhoneLocal")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CountriesWorked")
                        .HasColumnType("text");

                    b.Property<string>("CoverLetterId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrentAddress")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressCity")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressCountryId")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressHouse")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressState")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressStreet")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfArrival")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DescribeHowHeSuits")
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .HasColumnType("text");

                    b.Property<string>("DivisionId")
                        .HasColumnType("text");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("text");

                    b.Property<bool?>("EDApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("EDComment")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedCurrency")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedSalary")
                        .HasColumnType("text");

                    b.Property<string>("ExtraCurricular")
                        .HasColumnType("text");

                    b.Property<string>("FieldOfExposure")
                        .HasColumnType("text");

                    b.Property<string>("FinalOfferReference")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("GaecNo")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool?>("HRHeadApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("HRHeadComment")
                        .HasColumnType("text");

                    b.Property<string>("HeardAboutUsFrom")
                        .HasColumnType("text");

                    b.Property<string>("HiringManagerRemarks")
                        .HasColumnType("text");

                    b.Property<bool?>("HodApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("HodComment")
                        .HasColumnType("text");

                    b.Property<string>("InterviewByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InterviewDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InterviewSelectionFeedback")
                        .HasColumnType("integer");

                    b.Property<string>("InterviewVenue")
                        .HasColumnType("text");

                    b.Property<bool>("IsCopyofAcademicCertificates")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopyofIDPassport")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopyofOtherCertificates")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopyofQID")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatestOfferLetterSalarySlip")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLocalCandidate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMostRecentCV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMostRecentColorPhoto")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTrainee")
                        .HasColumnType("boolean");

                    b.Property<string>("JobAdvertisementId")
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("JobNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("JoiningNotLaterThan")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LeaveCycle")
                        .HasColumnType("text");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ManagerJobTitleAndNoOfSubordinate")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NationalityId")
                        .HasColumnType("text");

                    b.Property<string>("NatureOfWork")
                        .HasColumnType("text");

                    b.Property<string>("NetSalary")
                        .HasColumnType("text");

                    b.Property<string>("NetSalaryCurrency")
                        .HasColumnType("text");

                    b.Property<string>("NewPostJustification")
                        .HasColumnType("text");

                    b.Property<string>("NextOfKin")
                        .HasColumnType("text");

                    b.Property<string>("NextOfKinEmail")
                        .HasColumnType("text");

                    b.Property<string>("NextOfKinPhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("NextOfKinRelationship")
                        .HasColumnType("text");

                    b.Property<int?>("NoOfChildren")
                        .HasColumnType("integer");

                    b.Property<string>("NoticePeriod")
                        .HasColumnType("text");

                    b.Property<string>("OfferDesigination")
                        .HasColumnType("text");

                    b.Property<string>("OfferGrade")
                        .HasColumnType("text");

                    b.Property<string>("OfferSignedBy")
                        .HasColumnType("text");

                    b.Property<string>("OptionForAnotherPosition")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationWorked")
                        .HasColumnType("text");

                    b.Property<string>("OtherAllowances")
                        .HasColumnType("text");

                    b.Property<string>("OtherAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("OtherBenefits")
                        .HasColumnType("text");

                    b.Property<string>("OtherCertificateId")
                        .HasColumnType("text");

                    b.Property<string>("OtherCountryVisa")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OtherCountryVisaExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OtherCountryVisaType")
                        .HasColumnType("text");

                    b.Property<string>("OtherDesignation")
                        .HasColumnType("text");

                    b.Property<string>("OtherNextOfKin")
                        .HasColumnType("text");

                    b.Property<string>("OtherNextOfKinEmail")
                        .HasColumnType("text");

                    b.Property<string>("OtherNextOfKinPhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("OtherNextOfKinRelationship")
                        .HasColumnType("text");

                    b.Property<string>("OtherVisaType")
                        .HasColumnType("text");

                    b.Property<string>("PassportAttachmentId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PassportExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PassportIssueCountryId")
                        .HasColumnType("text");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<string>("PassportStatusId")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressCity")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressCountryId")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressHouse")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressState")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("PhotoId")
                        .HasColumnType("text");

                    b.Property<bool?>("PlanningApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("PlanningComment")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PositionsWorked")
                        .HasColumnType("text");

                    b.Property<string>("QIDAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("QatarId")
                        .HasColumnType("text");

                    b.Property<string>("QatarNocAvailable")
                        .HasColumnType("text");

                    b.Property<string>("QatarNocNotAvailableReason")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("ReportingToId")
                        .HasColumnType("text");

                    b.Property<string>("RequirementExperience")
                        .HasColumnType("text");

                    b.Property<string>("RequirementITSkills")
                        .HasColumnType("text");

                    b.Property<string>("RequirementQualification")
                        .HasColumnType("text");

                    b.Property<string>("RequirementSpecialization")
                        .HasColumnType("text");

                    b.Property<string>("RequirementTechnical")
                        .HasColumnType("text");

                    b.Property<string>("ResumeId")
                        .HasColumnType("text");

                    b.Property<string>("SalaryOnAppointment")
                        .HasColumnType("text");

                    b.Property<bool?>("SalaryRevision")
                        .HasColumnType("boolean");

                    b.Property<double?>("SalaryRevisionAmount")
                        .HasColumnType("double precision");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.Property<string>("SelectedThroughId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceCompletion")
                        .HasColumnType("bigint");

                    b.Property<string>("Signature")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SignatureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SourceFrom")
                        .HasColumnType("text");

                    b.Property<string>("Sourcing")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeRequiredToJoin")
                        .HasColumnType("integer");

                    b.Property<string>("TitleId")
                        .HasColumnType("text");

                    b.Property<double?>("TotalWorkExperience")
                        .HasColumnType("double precision");

                    b.Property<string>("TrainingsUndergone")
                        .HasColumnType("text");

                    b.Property<string>("TravelOriginAndDestination")
                        .HasColumnType("text");

                    b.Property<string>("VehicleTransport")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("VisaCategory")
                        .HasColumnType("text");

                    b.Property<string>("VisaCountry")
                        .HasColumnType("text");

                    b.Property<DateTime?>("VisaExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VisaType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("WitnessDate1")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("WitnessDate2")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WitnessDesignation1")
                        .HasColumnType("text");

                    b.Property<string>("WitnessDesignation2")
                        .HasColumnType("text");

                    b.Property<string>("WitnessGAEC1")
                        .HasColumnType("text");

                    b.Property<string>("WitnessGAEC2")
                        .HasColumnType("text");

                    b.Property<string>("WitnessName1")
                        .HasColumnType("text");

                    b.Property<string>("WitnessName2")
                        .HasColumnType("text");

                    b.Property<string>("WorkerBatchId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.HasIndex("JobAdvertisementId");

                    b.ToTable("Application", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationAccess", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessType")
                        .HasColumnType("integer");

                    b.Property<string>("ClientIP")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ApplicationAccess");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationBeneficiary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<double?>("Ratio")
                        .HasColumnType("double precision");

                    b.Property<string>("Relationship")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ApplicationBeneficiary", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationComputerProficiency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProficiencyLevel")
                        .HasColumnType("text");

                    b.Property<string>("Program")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationComputerProficiency", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationDrivingLicense", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LicenseType")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ValidUpTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationDrivingLicense", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationEducational", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<string>("EducationType")
                        .HasColumnType("text");

                    b.Property<string>("Institute")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Marks")
                        .HasColumnType("text");

                    b.Property<string>("OtherEducationType")
                        .HasColumnType("text");

                    b.Property<string>("OtherQualification")
                        .HasColumnType("text");

                    b.Property<string>("OtherSpecialization")
                        .HasColumnType("text");

                    b.Property<string>("PassingYear")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("QualificationId")
                        .HasColumnType("text");

                    b.Property<int>("QualificationType")
                        .HasColumnType("integer");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SpecializationId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationEducational", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationError", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<int>("HttpCode")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAjaxCall")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ApplicationError");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationExperience", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("Employer")
                        .HasColumnType("text");

                    b.Property<DateTime?>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationExperience", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationExperienceByCountry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationExperienceByCountry", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationExperienceByJob", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationExperienceByJob", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationExperienceByOther", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("OtherTypeId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ApplicationExperienceByOther", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationExperienceBySector", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Industry")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationExperienceBySector", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationJobCriteria", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Criteria")
                        .HasColumnType("text");

                    b.Property<string>("CriteriaType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ListOfValueTypeId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("Weightage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationJobCriteria", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationLanguageProficiency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProficiencyLevel")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationLanguageProficiency", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationProject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("Client")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ConstructionPeriodFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ConstructionPeriodTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Consultant")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationProject", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationReferences", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationReferences", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationSalaryDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("IndianSalary")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<double?>("NetSalary")
                        .HasColumnType("double precision");

                    b.Property<double?>("OtherAllowances")
                        .HasColumnType("double precision");

                    b.Property<double?>("OverseasSalary")
                        .HasColumnType("double precision");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationSalaryDetail", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ApplicationState", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationStateComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationStateId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ApplicationStateId");

                    b.ToTable("ApplicationStateComment", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationStateTrack", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationStateId")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationStatusCode")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationStatusId")
                        .HasColumnType("text");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskReferenceId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStateId");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("ChangedBy");

                    b.ToTable("ApplicationStateTrack", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatus", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationeExperienceByNature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NatureOfWork")
                        .HasColumnType("text");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationeExperienceByNature", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.AppointmentApprovalRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AcceptedSalary")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ApproverAction")
                        .HasColumnType("integer");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FamilyStatus")
                        .HasColumnType("text");

                    b.Property<string>("InterviewConductedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InterviewDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InterviewVenue")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JustificationCommentForNewPost")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LeaveCycle")
                        .HasColumnType("text");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("OtherBenefits")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PositionToWhichSelected")
                        .HasColumnType("text");

                    b.Property<string>("RemarksByHr")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("SelectedAgainstVacanceOrNewPost")
                        .HasColumnType("text");

                    b.Property<string>("SelectedCandidate")
                        .HasColumnType("text");

                    b.Property<string>("SelectedSource")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("AppointmentApprovalRequest", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Batch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BatchStatus")
                        .HasColumnType("text");

                    b.Property<int?>("BatchType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HeadOfDepartment")
                        .HasColumnType("text");

                    b.Property<string>("HiringManager")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetBatchCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TargetHiringDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Batch", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BreMasterColumnMetadata", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<int>("BreInputDataType")
                        .HasColumnType("integer");

                    b.Property<string>("BreMasterTableMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BreMasterColumnMetadata");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BreMasterTableMetadata", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("BreInputDataType")
                        .HasColumnType("integer");

                    b.Property<string>("BusinessRuleId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("OperationValue")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TableMetadataId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BreMasterTableMetadata");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BreResult", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("BreExecuteMethodType")
                        .HasColumnType("integer");

                    b.Property<string>("BusinessRuleNodeId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomMethodScript")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string[]>("Message")
                        .HasColumnType("text[]");

                    b.Property<string>("MethodName")
                        .HasColumnType("text");

                    b.Property<string>("MethodNamespace")
                        .HasColumnType("text");

                    b.Property<string>("MethodParamJson")
                        .HasColumnType("text");

                    b.Property<bool?>("MethodReturnValue")
                        .HasColumnType("boolean");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<bool?>("ReturnIfMethodReturns")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ReturnWithMessage")
                        .HasColumnType("boolean");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BreResult");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessArea", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EnumTest")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BusinessArea");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BusinessData");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessExecutionComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("BusinessExecutionComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessLogicComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("BusinessLogicComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessRule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionId")
                        .HasColumnType("text");

                    b.Property<int>("BusinessLogicExecutionType")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DiagramData")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("BusinessRule");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessRuleConnector", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BusinessRuleId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForTrue")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFromDecision")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TargetId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BusinessRuleConnector");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessRuleGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BusinessRuleGroup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessRuleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BreMasterTableMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("BusinessRuleNodeId")
                        .HasColumnType("text");

                    b.Property<int>("BusinessRuleSource")
                        .HasColumnType("integer");

                    b.Property<int>("BusinessRuleType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<int?>("Condition")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DecisionScriptComponentId")
                        .HasColumnType("text");

                    b.Property<string>("Field")
                        .HasColumnType("text");

                    b.Property<string>("FieldId")
                        .HasColumnType("text");

                    b.Property<int?>("FieldSourceType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("OperationBackendValue")
                        .HasColumnType("text");

                    b.Property<string>("OperationValue")
                        .HasColumnType("text");

                    b.Property<int?>("OperatorType")
                        .HasColumnType("integer");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("ValueField")
                        .HasColumnType("text");

                    b.Property<string>("ValueId")
                        .HasColumnType("text");

                    b.Property<int?>("ValueSourceType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BusinessRuleModel");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessRuleNode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BusinessRuleId")
                        .HasColumnType("text");

                    b.Property<int?>("BusinessRuleLogicType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStarter")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OperationValue")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BusinessRuleNode");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessSection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("BusinessSection");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateComputerProficiency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProficiencyLevel")
                        .HasColumnType("text");

                    b.Property<string>("Program")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateComputerProficiency", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateDrivingLicense", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LicenseType")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ValidUpTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateDrivingLicense", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateEducational", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<string>("EducationType")
                        .HasColumnType("text");

                    b.Property<string>("Institute")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Marks")
                        .HasColumnType("text");

                    b.Property<string>("OtherEducationType")
                        .HasColumnType("text");

                    b.Property<string>("OtherQualification")
                        .HasColumnType("text");

                    b.Property<string>("OtherSpecialization")
                        .HasColumnType("text");

                    b.Property<string>("PassingYear")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("QualificationId")
                        .HasColumnType("text");

                    b.Property<int>("QualificationType")
                        .HasColumnType("integer");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SpecializationId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateEducational", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateEvaluation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EvaluationName")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationScale1")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationScale2")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationScale3")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEvaluationScale1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEvaluationScale2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEvaluationScale3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Marks")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("CandidateEvaluation", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateExperience", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("Employer")
                        .HasColumnType("text");

                    b.Property<DateTime?>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateExperience", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateExperienceByCountry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateExperienceByCountry", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateExperienceByJob", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateExperienceByJob", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateExperienceByNature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NatureOfWork")
                        .HasColumnType("text");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateExperienceByNature", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateExperienceByOther", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("OtherTypeId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateExperienceByOther", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateExperienceBySector", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Industry")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateExperienceBySector", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateLanguageProficiency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProficiencyLevel")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateLanguageProficiency", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AcademicCertificateId")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<long?>("Age")
                        .HasColumnType("bigint");

                    b.Property<string>("AgencyId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("text");

                    b.Property<string[]>("BookMarks")
                        .HasColumnType("text[]");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhoneHome")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhoneLocal")
                        .HasColumnType("text");

                    b.Property<string>("CoverLetterId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrentAddress")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressCity")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressCountryId")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressHouse")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressState")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedCurrency")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedSalary")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("HeardAboutUsFrom")
                        .HasColumnType("text");

                    b.Property<bool>("IsCopyofAcademicCertificates")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopyofIDPassport")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopyofOtherCertificates")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopyofQID")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatestOfferLetterSalarySlip")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMostRecentCV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMostRecentColorPhoto")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("ManagerJobTitleAndNoOfSubordinate")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NationalityId")
                        .HasColumnType("text");

                    b.Property<string>("NetSalary")
                        .HasColumnType("text");

                    b.Property<string>("NetSalaryCurrency")
                        .HasColumnType("text");

                    b.Property<int?>("NoOfChildren")
                        .HasColumnType("integer");

                    b.Property<string>("NoticePeriod")
                        .HasColumnType("text");

                    b.Property<string>("OptionForAnotherPosition")
                        .HasColumnType("text");

                    b.Property<string>("OtherAllowances")
                        .HasColumnType("text");

                    b.Property<string>("OtherCertificateId")
                        .HasColumnType("text");

                    b.Property<string>("OtherCountryVisa")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OtherCountryVisaExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OtherCountryVisaType")
                        .HasColumnType("text");

                    b.Property<string>("OtherDesignation")
                        .HasColumnType("text");

                    b.Property<string>("OtherVisaType")
                        .HasColumnType("text");

                    b.Property<string>("PassportAttachmentId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PassportExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PassportIssueCountryId")
                        .HasColumnType("text");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<string>("PassportStatusId")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressCity")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressCountryId")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressHouse")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressState")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("PhotoId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("QIDAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("QatarId")
                        .HasColumnType("text");

                    b.Property<string>("QatarNocAvailable")
                        .HasColumnType("text");

                    b.Property<string>("QatarNocNotAvailableReason")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("ResumeId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("Signature")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SignatureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SourceFrom")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeRequiredToJoin")
                        .HasColumnType("integer");

                    b.Property<string>("TitleId")
                        .HasColumnType("text");

                    b.Property<double?>("TotalWorkExperience")
                        .HasColumnType("double precision");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("VisaCountry")
                        .HasColumnType("text");

                    b.Property<DateTime?>("VisaExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VisaType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CandidateProfile", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateProject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("Client")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ConstructionPeriodFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ConstructionPeriodTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Consultant")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateProject", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateReferences", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateReferences", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateSalaryDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("IndianSalary")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<double?>("NetSalary")
                        .HasColumnType("double precision");

                    b.Property<double?>("OtherAllowances")
                        .HasColumnType("double precision");

                    b.Property<double?>("OverseasSalary")
                        .HasColumnType("double precision");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateSalaryDetail", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ColumnMetadata", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string[]>("EditableBy")
                        .HasColumnType("text[]");

                    b.Property<string[]>("EditableContext")
                        .HasColumnType("text[]");

                    b.Property<string>("ForeignKeyColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyColumnName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyConstraintName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyDisplayColumnAlias")
                        .HasColumnType("text");

                    b.Property<int>("ForeignKeyDisplayColumnDataType")
                        .HasColumnType("integer");

                    b.Property<string>("ForeignKeyDisplayColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyDisplayColumnLabelName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyDisplayColumnName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyDisplayColumnReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyTableId")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyTableName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyTableSchemaName")
                        .HasColumnType("text");

                    b.Property<bool>("HideForeignKeyTableColumns")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefaultDisplayColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKey")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHiddenColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLogColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultiValueColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimaryKey")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUdfColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUniqueColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVirtualColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVirtualForeignKey")
                        .HasColumnType("boolean");

                    b.Property<string>("LabelName")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceTableName")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceTableSchemaName")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowInForeignKeyReference")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TableMetadataId")
                        .HasColumnType("text");

                    b.Property<int>("UdfUIType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string[]>("ViewableBy")
                        .HasColumnType("text[]");

                    b.Property<string[]>("ViewableContext")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyColumnId");

                    b.HasIndex("ForeignKeyDisplayColumnId");

                    b.HasIndex("ForeignKeyTableId");

                    b.HasIndex("TableMetadataId");

                    b.ToTable("ColumnMetadata");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ColumnMetadataLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string[]>("EditableBy")
                        .HasColumnType("text[]");

                    b.Property<string[]>("EditableContext")
                        .HasColumnType("text[]");

                    b.Property<string>("ForeignKeyColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyColumnName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyConstraintName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyDisplayColumnAlias")
                        .HasColumnType("text");

                    b.Property<int>("ForeignKeyDisplayColumnDataType")
                        .HasColumnType("integer");

                    b.Property<string>("ForeignKeyDisplayColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyDisplayColumnLabelName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyDisplayColumnName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyDisplayColumnReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyTableId")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyTableName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyTableSchemaName")
                        .HasColumnType("text");

                    b.Property<bool>("HideForeignKeyTableColumns")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefaultDisplayColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKey")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHiddenColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLogColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultiValueColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimaryKey")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUdfColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUniqueColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVirtualColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVirtualForeignKey")
                        .HasColumnType("boolean");

                    b.Property<string>("LabelName")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceTableName")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceTableSchemaName")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowInForeignKeyReference")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TableMetadataId")
                        .HasColumnType("text");

                    b.Property<int>("UdfUIType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string[]>("ViewableBy")
                        .HasColumnType("text[]");

                    b.Property<string[]>("ViewableContext")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyColumnId");

                    b.HasIndex("ForeignKeyDisplayColumnId");

                    b.HasIndex("ForeignKeyTableId");

                    b.HasIndex("TableMetadataId");

                    b.ToTable("ColumnMetadataLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonMobile")
                        .HasColumnType("text");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CultureInfo")
                        .HasColumnType("text");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("text");

                    b.Property<string>("DateFormat")
                        .HasColumnType("text");

                    b.Property<string>("DateTimeFormat")
                        .HasColumnType("text");

                    b.Property<string>("DefaultEmailTemplate")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSyncDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LetterFooterId")
                        .HasColumnType("text");

                    b.Property<string>("LetterHeaderId")
                        .HasColumnType("text");

                    b.Property<string>("LicenseKey")
                        .HasColumnType("text");

                    b.Property<string[]>("LicensedPortalIds")
                        .HasColumnType("text[]");

                    b.Property<string>("LogoFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLocal")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactMobile")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactMobile")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactPhone")
                        .HasColumnType("text");

                    b.Property<bool?>("SendCompanyWelcome")
                        .HasColumnType("boolean");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SmsGateway")
                        .HasColumnType("text");

                    b.Property<string>("SmsPassword")
                        .HasColumnType("text");

                    b.Property<string>("SmsSenderName")
                        .HasColumnType("text");

                    b.Property<string>("SmsUserId")
                        .HasColumnType("text");

                    b.Property<string>("SmtpFromId")
                        .HasColumnType("text");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("text");

                    b.Property<string>("SmtpPassword")
                        .HasColumnType("text");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("integer");

                    b.Property<string>("SmtpSenderName")
                        .HasColumnType("text");

                    b.Property<string>("SmtpUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CompanyLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonMobile")
                        .HasColumnType("text");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CultureInfo")
                        .HasColumnType("text");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("text");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DateFormat")
                        .HasColumnType("text");

                    b.Property<string>("DateTimeFormat")
                        .HasColumnType("text");

                    b.Property<string>("DefaultEmailTemplate")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSyncDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LetterFooterId")
                        .HasColumnType("text");

                    b.Property<string>("LetterHeaderId")
                        .HasColumnType("text");

                    b.Property<string>("LicenseKey")
                        .HasColumnType("text");

                    b.Property<string[]>("LicensedPortalIds")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLocal")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactMobile")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactMobile")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactPhone")
                        .HasColumnType("text");

                    b.Property<bool?>("SendCompanyWelcome")
                        .HasColumnType("boolean");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SmsGateway")
                        .HasColumnType("text");

                    b.Property<string>("SmsPassword")
                        .HasColumnType("text");

                    b.Property<string>("SmsSenderName")
                        .HasColumnType("text");

                    b.Property<string>("SmsUserId")
                        .HasColumnType("text");

                    b.Property<string>("SmtpFromId")
                        .HasColumnType("text");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("text");

                    b.Property<string>("SmtpPassword")
                        .HasColumnType("text");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("integer");

                    b.Property<string>("SmtpSenderName")
                        .HasColumnType("text");

                    b.Property<string>("SmtpUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CompanyLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CompleteEventComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("CompleteEventComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Component", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<int>("ComponentType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CssClass")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProcessDesignId");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<int>("ComponentType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CssClass")
                        .HasColumnType("text");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProcessDesignId");

                    b.ToTable("ComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ComponentParent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ParentId");

                    b.ToTable("ComponentParent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ComponentParentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ParentId");

                    b.ToTable("ComponentParentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ComponentResult", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentStatusId")
                        .HasColumnType("text");

                    b.Property<int>("ComponentType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsServiceId")
                        .HasColumnType("text");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignResultId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ComponentStatusId");

                    b.HasIndex("NtsServiceId");

                    b.HasIndex("NtsTaskId");

                    b.HasIndex("ProcessDesignId");

                    b.HasIndex("ProcessDesignResultId");

                    b.ToTable("ComponentResult");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ComponentResultLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentStatusId")
                        .HasColumnType("text");

                    b.Property<int>("ComponentType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsServiceId")
                        .HasColumnType("text");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignResultId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ComponentStatusId");

                    b.HasIndex("NtsServiceId");

                    b.HasIndex("NtsTaskId");

                    b.HasIndex("ProcessDesignId");

                    b.HasIndex("ProcessDesignResultId");

                    b.ToTable("ComponentResultLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ContextVariable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("FullyQualifiedName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ContextVariable");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ContextVariableLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("FullyQualifiedName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ContextVariableLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CustomIndexPageColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomColumnType")
                        .HasColumnType("integer");

                    b.Property<string>("CustomData")
                        .HasColumnType("text");

                    b.Property<string>("CustomIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("DisplayFormat")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsCustomColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("CustomIndexPageTemplateId");

                    b.ToTable("CustomIndexPageColumn");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CustomIndexPageColumnLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomColumnType")
                        .HasColumnType("integer");

                    b.Property<string>("CustomData")
                        .HasColumnType("text");

                    b.Property<string>("CustomIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayFormat")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsCustomColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("CustomIndexPageTemplateId");

                    b.ToTable("CustomIndexPageColumnLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CustomIndexPageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateSelectionPopupTitle")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.ToTable("CustomIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CustomIndexPageTemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateSelectionPopupTitle")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.ToTable("CustomIndexPageTemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CustomTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionName")
                        .HasColumnType("text");

                    b.Property<string>("AreaName")
                        .HasColumnType("text");

                    b.Property<string>("BackgroundFileId")
                        .HasColumnType("text");

                    b.Property<string>("BannerFileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ControllerName")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomTemplateLoadingType")
                        .HasColumnType("integer");

                    b.Property<int>("CustomTemplateType")
                        .HasColumnType("integer");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDashboard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVCodeEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVDescriptionEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVDescriptionMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVIamgeEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVIamgeMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVParentEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVParentMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVStatusEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVStatusMandatory")
                        .HasColumnType("boolean");

                    b.Property<string>("JavascriptName")
                        .HasColumnType("text");

                    b.Property<string>("JavascriptParam")
                        .HasColumnType("text");

                    b.Property<string>("LOVCodeLabel")
                        .HasColumnType("text");

                    b.Property<string>("LOVDescriptionLabel")
                        .HasColumnType("text");

                    b.Property<string>("LOVImageLabel")
                        .HasColumnType("text");

                    b.Property<string>("LOVNameLabel")
                        .HasColumnType("text");

                    b.Property<string>("LOVParentLabel")
                        .HasColumnType("text");

                    b.Property<string>("LOVStatusLabel")
                        .HasColumnType("text");

                    b.Property<string>("LOVTitle")
                        .HasColumnType("text");

                    b.Property<string>("LOVTypeId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Parameter")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateColor")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LOVTypeId");

                    b.HasIndex("TemplateId");

                    b.ToTable("CustomTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CustomTemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionName")
                        .HasColumnType("text");

                    b.Property<string>("AreaName")
                        .HasColumnType("text");

                    b.Property<string>("BackgroundFileId")
                        .HasColumnType("text");

                    b.Property<string>("BannerFileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ControllerName")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CustomTemplateLoadingType")
                        .HasColumnType("integer");

                    b.Property<int>("CustomTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDashboard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVCodeEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVDescriptionEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVDescriptionMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVIamgeEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVIamgeMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVParentEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVParentMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVStatusEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLOVStatusMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("JavascriptName")
                        .HasColumnType("text");

                    b.Property<string>("JavascriptParam")
                        .HasColumnType("text");

                    b.Property<string>("LOVCodeLabel")
                        .HasColumnType("text");

                    b.Property<string>("LOVDescriptionLabel")
                        .HasColumnType("text");

                    b.Property<string>("LOVImageLabel")
                        .HasColumnType("text");

                    b.Property<string>("LOVNameLabel")
                        .HasColumnType("text");

                    b.Property<string>("LOVParentLabel")
                        .HasColumnType("text");

                    b.Property<string>("LOVStatusLabel")
                        .HasColumnType("text");

                    b.Property<string>("LOVTitle")
                        .HasColumnType("text");

                    b.Property<string>("LOVTypeId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Parameter")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateColor")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LOVTypeId");

                    b.HasIndex("TemplateId");

                    b.ToTable("CustomTemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.DataIntegration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CollectionDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("CollectionName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Schema")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DataIntegration");
                });

            modelBuilder.Entity("Synergy.App.DataModel.DecisionScriptComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("BusinessRuleLogicType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("OperationValue")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("DecisionScriptComponent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.DecisionScriptComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("BusinessRuleLogicType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("OperationValue")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("DecisionScriptComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<byte[]>("Content")
                        .HasColumnType("bytea");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Synergy.App.DataModel.DocumentPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Access")
                        .HasColumnType("integer");

                    b.Property<int>("AppliesTo")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InheritedFrom")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInherited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInheritedFromChild")
                        .HasColumnType("boolean");

                    b.Property<bool>("Isowner")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NoteId")
                        .HasColumnType("text");

                    b.Property<int>("PermissionType")
                        .HasColumnType("integer");

                    b.Property<string>("PermittedUserGroupId")
                        .HasColumnType("text");

                    b.Property<string>("PermittedUserId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("PermittedUserGroupId");

                    b.HasIndex("PermittedUserId");

                    b.ToTable("DocumentPermission");
                });

            modelBuilder.Entity("Synergy.App.DataModel.DocumentPermissionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Access")
                        .HasColumnType("integer");

                    b.Property<int>("AppliesTo")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("InheritedFrom")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInherited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInheritedFromChild")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("Isowner")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NoteId")
                        .HasColumnType("text");

                    b.Property<int>("PermissionType")
                        .HasColumnType("integer");

                    b.Property<string>("PermittedUserGroupId")
                        .HasColumnType("text");

                    b.Property<string>("PermittedUserId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("PermittedUserGroupId");

                    b.HasIndex("PermittedUserId");

                    b.ToTable("DocumentPermissionLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.EditorLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomValidationMessage")
                        .HasColumnType("text");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EditorTypeId")
                        .HasColumnType("text");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LabelName")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("MaximumValue")
                        .HasColumnType("text");

                    b.Property<string>("MinimumValue")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("ValidationRegEx")
                        .HasColumnType("text");

                    b.Property<int>("ValidationType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EditorLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.EditorTypeLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<int>("ControlType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EditorCategory")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EditorTypeLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Email", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentBase64")
                        .HasColumnType("text");

                    b.Property<string[]>("AttachmentIds")
                        .HasColumnType("text[]");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("text");

                    b.Property<string>("BCC")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("CC")
                        .HasColumnType("text");

                    b.Property<int?>("CalendarInvitationType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DisableDefaultEmailTemplate")
                        .HasColumnType("boolean");

                    b.Property<int>("EmailStatus")
                        .HasColumnType("integer");

                    b.Property<string>("EmailUniqueId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<bool>("IsAsync")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncludeAttachment")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceTemplateCode")
                        .HasColumnType("text");

                    b.Property<int?>("ReferenceType")
                        .HasColumnType("integer");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("SendToOriginalRecipient")
                        .HasColumnType("boolean");

                    b.Property<string>("SenderName")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceNo")
                        .HasColumnType("bigint");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowOriginalSender")
                        .HasColumnType("boolean");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("text");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("integer");

                    b.Property<string>("SmtpUserId")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("Synergy.App.DataModel.EmailComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("Attachments")
                        .HasColumnType("text[]");

                    b.Property<string>("Bcc")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("CC")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ReceipientEmail")
                        .HasColumnType("text");

                    b.Property<int>("ReceipientType")
                        .HasColumnType("integer");

                    b.Property<string>("ReceipientUserId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("text");

                    b.Property<string>("SenderName")
                        .HasColumnType("text");

                    b.Property<int>("SenderNameBindingType")
                        .HasColumnType("integer");

                    b.Property<string>("SenderNameVariable")
                        .HasColumnType("text");

                    b.Property<int>("SenderNameVariableType")
                        .HasColumnType("integer");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("EmailComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.EmailLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentBase64")
                        .HasColumnType("text");

                    b.Property<string[]>("AttachmentIds")
                        .HasColumnType("text[]");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("text");

                    b.Property<string>("BCC")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("CC")
                        .HasColumnType("text");

                    b.Property<int?>("CalendarInvitationType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("DisableDefaultEmailTemplate")
                        .HasColumnType("boolean");

                    b.Property<int>("EmailStatus")
                        .HasColumnType("integer");

                    b.Property<string>("EmailUniqueId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<bool>("IsAsync")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncludeAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceTemplateCode")
                        .HasColumnType("text");

                    b.Property<int?>("ReferenceType")
                        .HasColumnType("integer");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("SendToOriginalRecipient")
                        .HasColumnType("boolean");

                    b.Property<string>("SenderName")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceNo")
                        .HasColumnType("bigint");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowOriginalSender")
                        .HasColumnType("boolean");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("text");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("integer");

                    b.Property<string>("SmtpUserId")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EmailLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.EmailSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("text");

                    b.Property<string>("SmtpPassword")
                        .HasColumnType("text");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("integer");

                    b.Property<string>("SmtpSenderName")
                        .HasColumnType("text");

                    b.Property<string>("SmtpUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EmailSetting", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ExecutionScriptComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("ExecutionScriptComponent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ExecutionScriptComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("ExecutionScriptComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FalseComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("FalseComponent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FalseComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("FalseComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.File", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AnnotationsText")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentDescription")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentType")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContentBase64")
                        .HasColumnType("text");

                    b.Property<long>("ContentLength")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileExtractedText")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFileViewableFormat")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .HasColumnType("text");

                    b.Property<string>("MongoFileId")
                        .HasColumnType("text");

                    b.Property<string>("MongoPreviewFileId")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int?>("ReferenceTypeCode")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceTypeId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SnapshotMongoId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FileLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AnnotationsText")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentDescription")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentType")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContentBase64")
                        .HasColumnType("text");

                    b.Property<long>("ContentLength")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileExtractedText")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFileViewableFormat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("MongoFileId")
                        .HasColumnType("text");

                    b.Property<string>("MongoPreviewFileId")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<int?>("ReferenceTypeCode")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceTypeId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SnapshotMongoId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("FileLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FormIndexPageColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayFormat")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("FormIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("FormIndexPageTemplateId");

                    b.ToTable("FormIndexPageColumn");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FormIndexPageColumnLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayFormat")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("FormIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("FormIndexPageTemplateId");

                    b.ToTable("FormIndexPageColumnLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FormIndexPageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexPageTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ParentReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.ToTable("FormIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FormIndexPageTemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexPageTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ParentReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.ToTable("FormIndexPageTemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FormTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<int>("CreateReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EditReturnType")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveButton")
                        .HasColumnType("boolean");

                    b.Property<int>("FormType")
                        .HasColumnType("integer");

                    b.Property<string>("IndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PostScript")
                        .HasColumnType("text");

                    b.Property<string>("PreScript")
                        .HasColumnType("text");

                    b.Property<string>("SaveButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IndexPageTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("FormTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FormTemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<int>("CreateReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<int>("EditReturnType")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveButton")
                        .HasColumnType("boolean");

                    b.Property<int>("FormType")
                        .HasColumnType("integer");

                    b.Property<string>("IndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PostScript")
                        .HasColumnType("text");

                    b.Property<string>("PreScript")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("SaveButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IndexPageTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("FormTemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.GrantAccess", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GrantStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GrantAccess");
                });

            modelBuilder.Entity("Synergy.App.DataModel.GrantAccessLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GrantStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GrantAccessLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.HeadOfDepartment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("DesignationId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("GAECNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HeadOfDepartment", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.HeadOfDepartmentOrganization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HeadOfDepartmentId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HeadOfDepartmentId");

                    b.ToTable("HeadOfDepartmentOrganization", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.HierarchyMaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("HierarchyType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Level1Name")
                        .HasColumnType("text");

                    b.Property<string>("Level2Name")
                        .HasColumnType("text");

                    b.Property<string>("Level3Name")
                        .HasColumnType("text");

                    b.Property<string>("Level4Name")
                        .HasColumnType("text");

                    b.Property<string>("Level5Name")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RootNodeId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("HierarchyMaster");
                });

            modelBuilder.Entity("Synergy.App.DataModel.HierarchyMasterLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("HierarchyType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Level1Name")
                        .HasColumnType("text");

                    b.Property<string>("Level2Name")
                        .HasColumnType("text");

                    b.Property<string>("Level3Name")
                        .HasColumnType("text");

                    b.Property<string>("Level4Name")
                        .HasColumnType("text");

                    b.Property<string>("Level5Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("RootNodeId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("HierarchyMasterLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.HiringManager", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("DesignationId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("GAECNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HiringManager", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.HiringManagerOrganization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HiringManagerId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HiringManagerId");

                    b.ToTable("HiringManagerOrganization", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.JobAdvertisement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionId")
                        .HasColumnType("text");

                    b.Property<string[]>("AgencyId")
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("Experience")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("NationalityId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NeededDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("NoOfPosition")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("JobAdvertisement", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.JobAdvertisementTrack", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("Experience")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobAdvertisementId")
                        .HasColumnType("text");

                    b.Property<string>("JobAdvertisementStatus")
                        .HasColumnType("text");

                    b.Property<string>("JobCategory")
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("NationalityId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NeededDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("NoOfPosition")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("JobAdvertisementTrack", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.JobCriteria", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Criteria")
                        .HasColumnType("text");

                    b.Property<string>("CriteriaType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobAdvertisementId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ListOfValueTypeId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("Weightage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobAdvertisementId");

                    b.ToTable("JobCriteria", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.JobCriteriaTrack", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Criteria")
                        .HasColumnType("text");

                    b.Property<string>("CriteriaType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobAdvertisementTrackId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("Weightage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("JobCriteriaTrack", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.JobDescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("Experience")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("JobDescription", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.JobDescriptionCriteria", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Criteria")
                        .HasColumnType("text");

                    b.Property<string>("CriteriaType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobDescriptionId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ListOfValueTypeId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("Weightage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobDescriptionId");

                    b.ToTable("JobDescriptionCriteria", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.LOV", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GroupCode")
                        .HasColumnType("text");

                    b.Property<string>("IconCss")
                        .HasColumnType("text");

                    b.Property<string>("ImageId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LOVType")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("LOV");
                });

            modelBuilder.Entity("Synergy.App.DataModel.LOVLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GroupCode")
                        .HasColumnType("text");

                    b.Property<string>("IconCss")
                        .HasColumnType("text");

                    b.Property<string>("ImageId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LOVType")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("LOVLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.LegalEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<double>("BasicSalaryPercentage")
                        .HasColumnType("double precision");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonMobile")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CultureInfo")
                        .HasColumnType("text");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("text");

                    b.Property<string>("DateFormat")
                        .HasColumnType("text");

                    b.Property<string>("DateTimeFormat")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<double>("HousingAllowancePercentage")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LicenseKey")
                        .HasColumnType("text");

                    b.Property<string>("LogoFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLocal")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactMobile")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactMobile")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactPhone")
                        .HasColumnType("text");

                    b.Property<bool?>("SendCompanyWelcome")
                        .HasColumnType("boolean");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<double>("TransportAllowancePercentage")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LegalEntity");
                });

            modelBuilder.Entity("Synergy.App.DataModel.LegalEntityLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<double>("BasicSalaryPercentage")
                        .HasColumnType("double precision");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonMobile")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CultureInfo")
                        .HasColumnType("text");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("text");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DateFormat")
                        .HasColumnType("text");

                    b.Property<string>("DateTimeFormat")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<double>("HousingAllowancePercentage")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LicenseKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLocal")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactMobile")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactMobile")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactPhone")
                        .HasColumnType("text");

                    b.Property<bool?>("SendCompanyWelcome")
                        .HasColumnType("boolean");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<double>("TransportAllowancePercentage")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LegalEntityLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ListOfValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("EnableDescription")
                        .HasColumnType("boolean");

                    b.Property<string>("IconCss")
                        .HasColumnType("text");

                    b.Property<string>("ImageId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ListOfValueType")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int?>("ReferenceTypeCode")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceTypeId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ListOfValue", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ManpowerRecruitmentSummary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<long?>("Available")
                        .HasColumnType("bigint");

                    b.Property<long?>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<long?>("Planning")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("Requirement")
                        .HasColumnType("bigint");

                    b.Property<long?>("Seperation")
                        .HasColumnType("bigint");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("Transfer")
                        .HasColumnType("bigint");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ManpowerRecruitmentSummary", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ManpowerRecruitmentSummaryVersion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<long?>("Available")
                        .HasColumnType("bigint");

                    b.Property<long?>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ManpowerRecruitmentSummaryId")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<long?>("Planning")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("Requirement")
                        .HasColumnType("bigint");

                    b.Property<long?>("Seperation")
                        .HasColumnType("bigint");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("Transfer")
                        .HasColumnType("bigint");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ManpowerRecruitmentSummaryId");

                    b.ToTable("ManpowerRecruitmentSummaryVersion", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ManpowerSummaryComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ManpowerRecruitmentSummaryId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ManpowerRecruitmentSummaryId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("ManpowerSummaryComment", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.MemberGroupLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("GroupPortals")
                        .HasColumnType("text[]");

                    b.Property<int>("GroupStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("MemberGroupLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.MemberLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string[]>("MemberGroups")
                        .HasColumnType("text[]");

                    b.Property<string[]>("MemberPortals")
                        .HasColumnType("text[]");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("SynergyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("MemberLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.MenuGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("ExpandHelpPanel")
                        .HasColumnType("boolean");

                    b.Property<string>("IconColor")
                        .HasColumnType("text");

                    b.Property<string>("IconCss")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("MenuGroupDetails")
                        .HasColumnType("text");

                    b.Property<string>("MenuGroupIconFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubModuleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubModuleLogId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.HasIndex("SubModuleId");

                    b.HasIndex("SubModuleLogId");

                    b.ToTable("MenuGroup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.MenuGroupDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("MenuGroupId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MenuGroupId");

                    b.ToTable("MenuGroupDetails");
                });

            modelBuilder.Entity("Synergy.App.DataModel.MenuGroupDetailsLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("MenuGroupId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MenuGroupId");

                    b.ToTable("MenuGroupDetailsLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.MenuGroupLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("ExpandHelpPanel")
                        .HasColumnType("boolean");

                    b.Property<string>("IconColor")
                        .HasColumnType("text");

                    b.Property<string>("IconCss")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("MenuGroupDetails")
                        .HasColumnType("text");

                    b.Property<string>("MenuGroupIconFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubModuleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.HasIndex("SubModuleId");

                    b.ToTable("MenuGroupLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Module", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ModuleLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ModuleLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NoteIndexPageColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayFormat")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NoteIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("NoteIndexPageTemplateId");

                    b.ToTable("NoteIndexPageColumn");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NoteIndexPageColumnLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayFormat")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NoteIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("NoteIndexPageTemplateId");

                    b.ToTable("NoteIndexPageColumnLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NoteIndexPageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyNoteSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyNoteTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideIndexHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSummaryTabs")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexPageTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ParentReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RequestButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NoteIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NoteIndexPageTemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyNoteSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyNoteTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideIndexHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSummaryTabs")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexPageTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ParentReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("RequestButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NoteIndexPageTemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NoteTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ActionButtonPosition")
                        .HasColumnType("integer");

                    b.Property<string[]>("AdhocNoteTemplateIds")
                        .HasColumnType("text[]");

                    b.Property<string[]>("AdhocServiceTemplateIds")
                        .HasColumnType("text[]");

                    b.Property<string[]>("AdhocTaskTemplateIds")
                        .HasColumnType("text[]");

                    b.Property<bool>("AllowPastStartDate")
                        .HasColumnType("boolean");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("BackgroundFileId")
                        .HasColumnType("text");

                    b.Property<string>("BannerFileId")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreateReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DataPermissionColumnId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionMappingUdfId")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionText")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionUdfMappingColumn")
                        .HasColumnType("text");

                    b.Property<bool>("DisableVersioning")
                        .HasColumnType("boolean");

                    b.Property<int>("EditReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("EmailCopyTemplateCode")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCancelButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDataPermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableInlineComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableLegalEntityFilter")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableNoteNumberManual")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePrintButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveAsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSequenceOrder")
                        .HasColumnType("boolean");

                    b.Property<int>("FormType")
                        .HasColumnType("integer");

                    b.Property<bool>("HideBanner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDescription")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideExpiryDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HidePriority")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideStartDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSubject")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideToolbar")
                        .HasColumnType("boolean");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsCancelReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleteReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescriptionMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNumberNotMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectUnique")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUdfTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NoteIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("NoteNoText")
                        .HasColumnType("text");

                    b.Property<int?>("NoteTemplateType")
                        .HasColumnType("integer");

                    b.Property<string>("NotificationSubject")
                        .HasColumnType("text");

                    b.Property<int>("NumberGenerationType")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerUserText")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PostScript")
                        .HasColumnType("text");

                    b.Property<string>("PreScript")
                        .HasColumnType("text");

                    b.Property<string>("PrintButtonText")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<string>("RequestedByUserText")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftText")
                        .HasColumnType("text");

                    b.Property<string>("SaveNewVersionButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveNewVersionButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("SubjectMappingUdfId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectText")
                        .HasColumnType("text");

                    b.Property<string>("SubjectUdfMappingColumn")
                        .HasColumnType("text");

                    b.Property<string>("TemplateColor")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteIndexPageTemplateId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NoteTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NoteTemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ActionButtonPosition")
                        .HasColumnType("integer");

                    b.Property<string[]>("AdhocNoteTemplateIds")
                        .HasColumnType("text[]");

                    b.Property<string[]>("AdhocServiceTemplateIds")
                        .HasColumnType("text[]");

                    b.Property<string[]>("AdhocTaskTemplateIds")
                        .HasColumnType("text[]");

                    b.Property<bool>("AllowPastStartDate")
                        .HasColumnType("boolean");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("BackgroundFileId")
                        .HasColumnType("text");

                    b.Property<string>("BannerFileId")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreateReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DataPermissionColumnId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionMappingUdfId")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionText")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionUdfMappingColumn")
                        .HasColumnType("text");

                    b.Property<bool>("DisableVersioning")
                        .HasColumnType("boolean");

                    b.Property<int>("EditReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("EmailCopyTemplateCode")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCancelButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDataPermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableInlineComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableLegalEntityFilter")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableNoteNumberManual")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePrintButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveAsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSequenceOrder")
                        .HasColumnType("boolean");

                    b.Property<int>("FormType")
                        .HasColumnType("integer");

                    b.Property<bool>("HideBanner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDescription")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideExpiryDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HidePriority")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideStartDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSubject")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideToolbar")
                        .HasColumnType("boolean");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsCancelReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleteReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescriptionMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNumberNotMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectUnique")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUdfTemplate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NoteIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("NoteNoText")
                        .HasColumnType("text");

                    b.Property<int?>("NoteTemplateType")
                        .HasColumnType("integer");

                    b.Property<string>("NotificationSubject")
                        .HasColumnType("text");

                    b.Property<int>("NumberGenerationType")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerUserText")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PostScript")
                        .HasColumnType("text");

                    b.Property<string>("PreScript")
                        .HasColumnType("text");

                    b.Property<string>("PrintButtonText")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("RequestedByUserText")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftText")
                        .HasColumnType("text");

                    b.Property<string>("SaveNewVersionButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveNewVersionButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("SubjectMappingUdfId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectText")
                        .HasColumnType("text");

                    b.Property<string>("SubjectUdfMappingColumn")
                        .HasColumnType("text");

                    b.Property<string>("TemplateColor")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteIndexPageTemplateId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NoteTemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ActionStatus")
                        .HasColumnType("integer");

                    b.Property<string>("AttachmentBase64")
                        .HasColumnType("text");

                    b.Property<string[]>("AttachmentIds")
                        .HasColumnType("text[]");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("text");

                    b.Property<string>("BCC")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("CC")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DisableDefaultEmailTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<string>("FromUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAutoArchive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int?>("ModuleName")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NotificationDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NotificationStatus")
                        .HasColumnType("integer");

                    b.Property<string>("NotificationTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<bool>("NotifyByEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotifyBySms")
                        .HasColumnType("boolean");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int>("ReadStatus")
                        .HasColumnType("integer");

                    b.Property<int>("ReferenceType")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceTypeId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceTypeNo")
                        .HasColumnType("text");

                    b.Property<bool>("SendAlways")
                        .HasColumnType("boolean");

                    b.Property<string>("SenderName")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowOriginalSender")
                        .HasColumnType("boolean");

                    b.Property<string>("SmsText")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .HasColumnType("text");

                    b.Property<string>("ToUserId")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTemplateId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NotificationLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ActionStatus")
                        .HasColumnType("integer");

                    b.Property<string>("AttachmentBase64")
                        .HasColumnType("text");

                    b.Property<string[]>("AttachmentIds")
                        .HasColumnType("text[]");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("text");

                    b.Property<string>("BCC")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("CC")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("DisableDefaultEmailTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<string>("FromUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAutoArchive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("ModuleName")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NotificationDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NotificationStatus")
                        .HasColumnType("integer");

                    b.Property<string>("NotificationTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<bool>("NotifyByEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotifyBySms")
                        .HasColumnType("boolean");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int>("ReadStatus")
                        .HasColumnType("integer");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<int>("ReferenceType")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceTypeId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceTypeNo")
                        .HasColumnType("text");

                    b.Property<bool>("SendAlways")
                        .HasColumnType("boolean");

                    b.Property<string>("SenderName")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowOriginalSender")
                        .HasColumnType("boolean");

                    b.Property<string>("SmsText")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .HasColumnType("text");

                    b.Property<string>("ToUserId")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTemplateId");

                    b.ToTable("NotificationLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NotificationTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("ActionStatusCodes")
                        .HasColumnType("text[]");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<bool>("AutoApplyOnAllTemplates")
                        .HasColumnType("boolean");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<bool>("CopyFromTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GroupCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NotificationActionId")
                        .HasColumnType("text");

                    b.Property<int>("NotificationTo")
                        .HasColumnType("integer");

                    b.Property<bool>("NotifyByEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotifyBySms")
                        .HasColumnType("boolean");

                    b.Property<int>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("ParentNotificationTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<bool>("SendAlways")
                        .HasColumnType("boolean");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SmsText")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentNotificationTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NotificationTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NotificationTemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("ActionStatusCodes")
                        .HasColumnType("text[]");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<bool>("AutoApplyOnAllTemplates")
                        .HasColumnType("boolean");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<bool>("CopyFromTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("GroupCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NotificationActionId")
                        .HasColumnType("text");

                    b.Property<int>("NotificationTo")
                        .HasColumnType("integer");

                    b.Property<bool>("NotifyByEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotifyBySms")
                        .HasColumnType("boolean");

                    b.Property<int>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("ParentNotificationTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<bool>("SendAlways")
                        .HasColumnType("boolean");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SmsText")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentNotificationTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NotificationTemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NtsCategory");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsCategoryLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NtsCategoryLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NtsGroup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsGroupTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsGroupId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsGroupId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NtsGroupTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsGroupUserGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsGroupId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserGroupId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsGroupId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("NtsGroupUserGroup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsLogPageColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayFormat")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NtsLogPageColumn");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsLogPageColumnLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayFormat")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NtsLogPageColumnLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNote", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CloseComment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("DisablePermissionInheritance")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersioning")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLockedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int?>("LockStatus")
                        .HasColumnType("integer");

                    b.Property<string>("NoteActionId")
                        .HasColumnType("text");

                    b.Property<string>("NoteDescription")
                        .HasColumnType("text");

                    b.Property<string>("NoteEventId")
                        .HasColumnType("text");

                    b.Property<string>("NoteNo")
                        .HasColumnType("text");

                    b.Property<string>("NoteOwnerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("NotePlusId")
                        .HasColumnType("text");

                    b.Property<string>("NotePriorityId")
                        .HasColumnType("text");

                    b.Property<string>("NoteStatusId")
                        .HasColumnType("text");

                    b.Property<string>("NoteSubject")
                        .HasColumnType("text");

                    b.Property<string>("NoteTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentNoteId")
                        .HasColumnType("text");

                    b.Property<string>("ParentServiceId")
                        .HasColumnType("text");

                    b.Property<string>("ParentTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text");

                    b.Property<int>("ReferenceType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServicePlusId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskPlusId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<double?>("UserRating")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteActionId");

                    b.HasIndex("NoteEventId");

                    b.HasIndex("NoteOwnerTypeId");

                    b.HasIndex("NotePriorityId");

                    b.HasIndex("NoteStatusId");

                    b.HasIndex("NoteTemplateId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ParentNoteId");

                    b.HasIndex("ParentServiceId");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NtsNote");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CommentedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CommentedTo")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsNoteId")
                        .HasColumnType("text");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentedByUserId");

                    b.HasIndex("NtsNoteId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("NtsNoteComment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteCommentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CommentedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CommentedTo")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsNoteId")
                        .HasColumnType("text");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentedByUserId");

                    b.HasIndex("NtsNoteId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("NtsNoteCommentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteCommentUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CommentToUserId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsNoteCommentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentToUserId");

                    b.HasIndex("NtsNoteCommentId");

                    b.ToTable("NtsNoteCommentUser");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CloseComment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool?>("DisablePermissionInheritance")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersioning")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLockedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int?>("LockStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NoteActionId")
                        .HasColumnType("text");

                    b.Property<string>("NoteDescription")
                        .HasColumnType("text");

                    b.Property<string>("NoteEventId")
                        .HasColumnType("text");

                    b.Property<string>("NoteNo")
                        .HasColumnType("text");

                    b.Property<string>("NoteOwnerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("NotePlusId")
                        .HasColumnType("text");

                    b.Property<string>("NotePriorityId")
                        .HasColumnType("text");

                    b.Property<string>("NoteStatusId")
                        .HasColumnType("text");

                    b.Property<string>("NoteSubject")
                        .HasColumnType("text");

                    b.Property<string>("NoteTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentNoteId")
                        .HasColumnType("text");

                    b.Property<string>("ParentServiceId")
                        .HasColumnType("text");

                    b.Property<string>("ParentTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text");

                    b.Property<int>("ReferenceType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServicePlusId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskPlusId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<double?>("UserRating")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteActionId");

                    b.HasIndex("NoteEventId");

                    b.HasIndex("NoteOwnerTypeId");

                    b.HasIndex("NotePriorityId");

                    b.HasIndex("NoteStatusId");

                    b.HasIndex("NoteTemplateId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ParentNoteId");

                    b.HasIndex("ParentServiceId");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NtsNoteLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNotePrecedence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NoteId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int>("PrecedenceRelationshipType")
                        .HasColumnType("integer");

                    b.Property<string>("PredecessorId")
                        .HasColumnType("text");

                    b.Property<int>("PredecessorType")
                        .HasColumnType("integer");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("NtsNotePrecedence");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNotePrecedenceLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NoteId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int>("PrecedenceRelationshipType")
                        .HasColumnType("integer");

                    b.Property<string>("PredecessorId")
                        .HasColumnType("text");

                    b.Property<int>("PredecessorType")
                        .HasColumnType("integer");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("NtsNotePrecedenceLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteSequence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<long>("NextId")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SequenceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NtsNoteSequence");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteSequenceLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<long>("NextId")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SequenceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NtsNoteSequenceLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteShared", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NoteSharedWithTypeId")
                        .HasColumnType("text");

                    b.Property<string>("NtsNoteId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SharedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SharedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SharedWithTeamId")
                        .HasColumnType("text");

                    b.Property<string>("SharedWithUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteSharedWithTypeId");

                    b.HasIndex("NtsNoteId");

                    b.HasIndex("SharedByUserId");

                    b.HasIndex("SharedWithTeamId");

                    b.HasIndex("SharedWithUserId");

                    b.ToTable("NtsNoteShared");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteSharedLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NoteSharedWithTypeId")
                        .HasColumnType("text");

                    b.Property<string>("NtsNoteId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SharedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SharedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SharedWithTeamId")
                        .HasColumnType("text");

                    b.Property<string>("SharedWithUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteSharedWithTypeId");

                    b.HasIndex("NtsNoteId");

                    b.HasIndex("SharedByUserId");

                    b.HasIndex("SharedWithTeamId");

                    b.HasIndex("SharedWithUserId");

                    b.ToTable("NtsNoteSharedLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteStatusTrack", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NoteStatusId")
                        .HasColumnType("text");

                    b.Property<string>("NtsNoteId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusChangedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StatusChangedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteStatusId");

                    b.HasIndex("NtsNoteId");

                    b.ToTable("NtsNoteStatusTrack");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteStatusTrackLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NoteStatusId")
                        .HasColumnType("text");

                    b.Property<string>("NtsNoteId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusChangedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StatusChangedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteStatusId");

                    b.HasIndex("NtsNoteId");

                    b.ToTable("NtsNoteStatusTrackLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsRating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsId")
                        .HasColumnType("text");

                    b.Property<int>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RatedByUserId")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("RatingComment")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RatedByUserId");

                    b.ToTable("NtsRating");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsService", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ActualSLA")
                        .HasColumnType("interval");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CloseComment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DelegateReason")
                        .HasColumnType("text");

                    b.Property<bool>("DisableReopen")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReopened")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersioning")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LockStatusId")
                        .HasColumnType("text");

                    b.Property<string>("NextStepTaskComponentId")
                        .HasColumnType("text");

                    b.Property<string>("NotePlusId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerTeamId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentNoteId")
                        .HasColumnType("text");

                    b.Property<string>("ParentServiceId")
                        .HasColumnType("text");

                    b.Property<string>("ParentTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text");

                    b.Property<int>("ReferenceType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReopenReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReopenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceActionId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("text");

                    b.Property<string>("ServiceEventId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceNo")
                        .HasColumnType("text");

                    b.Property<string>("ServiceOwnerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("ServicePlusId")
                        .HasColumnType("text");

                    b.Property<string>("ServicePriorityId")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ServiceSLA")
                        .HasColumnType("interval");

                    b.Property<string>("ServiceStatusId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceSubject")
                        .HasColumnType("text");

                    b.Property<string>("ServiceTemplateId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskPlusId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfNoteId")
                        .HasColumnType("text");

                    b.Property<string>("UdfNoteTableId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<double?>("UserRating")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkflowStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LockStatusId");

                    b.HasIndex("OwnerTeamId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ParentServiceId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("ServiceActionId");

                    b.HasIndex("ServiceEventId");

                    b.HasIndex("ServiceOwnerTypeId");

                    b.HasIndex("ServicePriorityId");

                    b.HasIndex("ServiceStatusId");

                    b.HasIndex("ServiceTemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfNoteId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("NtsService");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CommentedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CommentedTo")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsServiceId")
                        .HasColumnType("text");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentedByUserId");

                    b.HasIndex("NtsServiceId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("NtsServiceComment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceCommentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CommentedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CommentedTo")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsServiceId")
                        .HasColumnType("text");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentedByUserId");

                    b.HasIndex("NtsServiceId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("NtsServiceCommentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceCommentUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CommentToUserId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsServiceCommentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentToUserId");

                    b.HasIndex("NtsServiceCommentId");

                    b.ToTable("NtsServiceCommentUser");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ActualSLA")
                        .HasColumnType("interval");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CloseComment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DelegateReason")
                        .HasColumnType("text");

                    b.Property<bool>("DisableReopen")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReopened")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersioning")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LockStatusId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NextStepTaskComponentId")
                        .HasColumnType("text");

                    b.Property<string>("NotePlusId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerTeamId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentNoteId")
                        .HasColumnType("text");

                    b.Property<string>("ParentServiceId")
                        .HasColumnType("text");

                    b.Property<string>("ParentTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text");

                    b.Property<int>("ReferenceType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReopenReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReopenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceActionId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("text");

                    b.Property<string>("ServiceEventId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceNo")
                        .HasColumnType("text");

                    b.Property<string>("ServiceOwnerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("ServicePlusId")
                        .HasColumnType("text");

                    b.Property<string>("ServicePriorityId")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ServiceSLA")
                        .HasColumnType("interval");

                    b.Property<string>("ServiceStatusId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceSubject")
                        .HasColumnType("text");

                    b.Property<string>("ServiceTemplateId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskPlusId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfNoteId")
                        .HasColumnType("text");

                    b.Property<string>("UdfNoteTableId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<double?>("UserRating")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkflowStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LockStatusId");

                    b.HasIndex("OwnerTeamId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ParentServiceId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("ServiceActionId");

                    b.HasIndex("ServiceEventId");

                    b.HasIndex("ServiceOwnerTypeId");

                    b.HasIndex("ServicePriorityId");

                    b.HasIndex("ServiceStatusId");

                    b.HasIndex("ServiceTemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfNoteId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("NtsServiceLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServicePrecedence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int>("PrecedenceRelationshipType")
                        .HasColumnType("integer");

                    b.Property<string>("PredecessorId")
                        .HasColumnType("text");

                    b.Property<int>("PredecessorType")
                        .HasColumnType("integer");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("NtsServicePrecedence");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServicePrecedenceLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int>("PrecedenceRelationshipType")
                        .HasColumnType("integer");

                    b.Property<string>("PredecessorId")
                        .HasColumnType("text");

                    b.Property<int>("PredecessorType")
                        .HasColumnType("integer");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("NtsServicePrecedenceLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceSequence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<long>("NextId")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SequenceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NtsServiceSequence");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceSequenceLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<long>("NextId")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SequenceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NtsServiceSequenceLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceShared", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsServiceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceSharedWithTypeId")
                        .HasColumnType("text");

                    b.Property<string>("SharedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SharedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SharedWithTeamId")
                        .HasColumnType("text");

                    b.Property<string>("SharedWithUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsServiceId");

                    b.HasIndex("ServiceSharedWithTypeId");

                    b.HasIndex("SharedByUserId");

                    b.HasIndex("SharedWithTeamId");

                    b.HasIndex("SharedWithUserId");

                    b.ToTable("NtsServiceShared");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceSharedLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsServiceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceSharedWithTypeId")
                        .HasColumnType("text");

                    b.Property<string>("SharedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SharedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SharedWithTeamId")
                        .HasColumnType("text");

                    b.Property<string>("SharedWithUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsServiceId");

                    b.HasIndex("ServiceSharedWithTypeId");

                    b.HasIndex("SharedByUserId");

                    b.HasIndex("SharedWithTeamId");

                    b.HasIndex("SharedWithUserId");

                    b.ToTable("NtsServiceSharedLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceStatusTrackLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsServiceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceStatusId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusChangedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StatusChangedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsServiceId");

                    b.HasIndex("ServiceStatusId");

                    b.ToTable("NtsServiceStatusTrackLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsId")
                        .HasColumnType("text");

                    b.Property<int>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TagCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("TagId")
                        .HasColumnType("text");

                    b.Property<string>("TagSourceReferenceId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NtsTag");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTagLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsId")
                        .HasColumnType("text");

                    b.Property<int>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TagCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("TagId")
                        .HasColumnType("text");

                    b.Property<string>("TagSourceReferenceId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NtsTagLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ActualSLA")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AssignedToHierarchyMasterId")
                        .HasColumnType("text");

                    b.Property<int?>("AssignedToHierarchyMasterLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToTypeId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CloseComment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DelegateReason")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReopened")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStepTaskAutoCompleteIfSameAssignee")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersioning")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LockStatusId")
                        .HasColumnType("text");

                    b.Property<string>("NextStepTaskComponentId")
                        .HasColumnType("text");

                    b.Property<string>("NextTaskAssignedToHierarchyMasterId")
                        .HasColumnType("text");

                    b.Property<int?>("NextTaskAssignedToHierarchyMasterLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("NextTaskAssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<string>("NextTaskAssignedToTypeId")
                        .HasColumnType("text");

                    b.Property<string>("NextTaskAssignedToUserId")
                        .HasColumnType("text");

                    b.Property<string>("NextTaskAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("NotePlusId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentNoteId")
                        .HasColumnType("text");

                    b.Property<string>("ParentServiceId")
                        .HasColumnType("text");

                    b.Property<string>("ParentTaskId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PlanDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text");

                    b.Property<int>("ReferenceType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReopenReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReopenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServicePlusId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StepTaskComponentId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskActionId")
                        .HasColumnType("text");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("text");

                    b.Property<string>("TaskEventId")
                        .HasColumnType("text");

                    b.Property<string>("TaskNo")
                        .HasColumnType("text");

                    b.Property<string>("TaskOwnerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("TaskPlusId")
                        .HasColumnType("text");

                    b.Property<string>("TaskPriorityId")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("TaskSLA")
                        .HasColumnType("interval");

                    b.Property<string>("TaskStatusId")
                        .HasColumnType("text");

                    b.Property<string>("TaskSubject")
                        .HasColumnType("text");

                    b.Property<string>("TaskTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfNoteId")
                        .HasColumnType("text");

                    b.Property<string>("UdfNoteTableId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<double?>("UserRating")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToTeamId");

                    b.HasIndex("AssignedToTypeId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("LockStatusId");

                    b.HasIndex("NextTaskAssignedToTeamId");

                    b.HasIndex("NextTaskAssignedToTypeId");

                    b.HasIndex("NextTaskAssignedToUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("TaskActionId");

                    b.HasIndex("TaskEventId");

                    b.HasIndex("TaskOwnerTypeId");

                    b.HasIndex("TaskPriorityId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TaskTemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfNoteId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("NtsTask");

                    b.HasDiscriminator<string>("Discriminator").HasValue("NtsTask");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskAttachmentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsTaskId");

                    b.ToTable("NtsTaskAttachmentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CommentedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CommentedTo")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentedByUserId");

                    b.HasIndex("NtsTaskId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("NtsTaskComment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskCommentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CommentedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CommentedTo")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentedByUserId");

                    b.HasIndex("NtsTaskId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("NtsTaskCommentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskCommentUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CommentToUserId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsTaskCommentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentToUserId");

                    b.HasIndex("NtsTaskCommentId");

                    b.ToTable("NtsTaskCommentUser");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ActualSLA")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AssignedToHierarchyMasterId")
                        .HasColumnType("text");

                    b.Property<int?>("AssignedToHierarchyMasterLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToTypeId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CloseComment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DelegateReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReopened")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStepTaskAutoCompleteIfSameAssignee")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersioning")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LockStatusId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NextStepTaskComponentId")
                        .HasColumnType("text");

                    b.Property<string>("NextTaskAssignedToHierarchyMasterId")
                        .HasColumnType("text");

                    b.Property<int?>("NextTaskAssignedToHierarchyMasterLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("NextTaskAssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<string>("NextTaskAssignedToTypeId")
                        .HasColumnType("text");

                    b.Property<string>("NextTaskAssignedToUserId")
                        .HasColumnType("text");

                    b.Property<string>("NextTaskAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("NotePlusId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentNoteId")
                        .HasColumnType("text");

                    b.Property<string>("ParentServiceId")
                        .HasColumnType("text");

                    b.Property<string>("ParentTaskId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PlanDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text");

                    b.Property<int>("ReferenceType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReopenReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReopenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServicePlusId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StepTaskComponentId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskActionId")
                        .HasColumnType("text");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("text");

                    b.Property<string>("TaskEventId")
                        .HasColumnType("text");

                    b.Property<string>("TaskNo")
                        .HasColumnType("text");

                    b.Property<string>("TaskOwnerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("TaskPlusId")
                        .HasColumnType("text");

                    b.Property<string>("TaskPriorityId")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("TaskSLA")
                        .HasColumnType("interval");

                    b.Property<string>("TaskStatusId")
                        .HasColumnType("text");

                    b.Property<string>("TaskSubject")
                        .HasColumnType("text");

                    b.Property<string>("TaskTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfNoteId")
                        .HasColumnType("text");

                    b.Property<string>("UdfNoteTableId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<double?>("UserRating")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToTeamId");

                    b.HasIndex("AssignedToTypeId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("LockStatusId");

                    b.HasIndex("NextTaskAssignedToTeamId");

                    b.HasIndex("NextTaskAssignedToTypeId");

                    b.HasIndex("NextTaskAssignedToUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("TaskActionId");

                    b.HasIndex("TaskEventId");

                    b.HasIndex("TaskOwnerTypeId");

                    b.HasIndex("TaskPriorityId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TaskTemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfNoteId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("NtsTaskLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskPrecedence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int>("PrecedenceRelationshipType")
                        .HasColumnType("integer");

                    b.Property<string>("PredecessorId")
                        .HasColumnType("text");

                    b.Property<int>("PredecessorType")
                        .HasColumnType("integer");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsTaskId");

                    b.ToTable("NtsTaskPrecedence");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskPrecedenceLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int>("PrecedenceRelationshipType")
                        .HasColumnType("integer");

                    b.Property<string>("PredecessorId")
                        .HasColumnType("text");

                    b.Property<int>("PredecessorType")
                        .HasColumnType("integer");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsTaskId");

                    b.ToTable("NtsTaskPrecedenceLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskSequence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<long>("NextId")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SequenceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SequenceDate")
                        .IsUnique();

                    b.ToTable("NtsTaskSequence");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskSequenceLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<long>("NextId")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SequenceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NtsTaskSequenceLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskShared", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SharedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SharedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SharedWithTeamId")
                        .HasColumnType("text");

                    b.Property<string>("SharedWithUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskSharedWithTypeId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SharedByUserId");

                    b.HasIndex("SharedWithTeamId");

                    b.HasIndex("SharedWithUserId");

                    b.HasIndex("TaskSharedWithTypeId");

                    b.ToTable("NtsTaskShared");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskSharedLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SharedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SharedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SharedWithTeamId")
                        .HasColumnType("text");

                    b.Property<string>("SharedWithUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskSharedWithTypeId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SharedByUserId");

                    b.HasIndex("SharedWithTeamId");

                    b.HasIndex("SharedWithUserId");

                    b.HasIndex("TaskSharedWithTypeId");

                    b.ToTable("NtsTaskSharedLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskStatusTrackLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusChangedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StatusChangedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskActionId")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatusId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsTaskId");

                    b.HasIndex("TaskActionId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("NtsTaskStatusTrackLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskTimeEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("NtsTaskTimeEntry");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskTimeEntryLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("NtsTaskTimeEntryLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.OrganizationDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("Version")
                        .HasColumnType("bigint");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("OrganizationDocument", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Page", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowIfPortalAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("AuthorizationNotRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Css")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("DontShowMenuInThisPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDynamicGridBinding")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExpandHelpPanel")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideInMenu")
                        .HasColumnType("boolean");

                    b.Property<string>("IconColor")
                        .HasColumnType("text");

                    b.Property<string>("IconCss")
                        .HasColumnType("text");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRootPage")
                        .HasColumnType("boolean");

                    b.Property<string>("JsonForm")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Layout")
                        .HasColumnType("text");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("MenuGroupId")
                        .HasColumnType("text");

                    b.Property<string>("MenuName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PageDetails")
                        .HasColumnType("text");

                    b.Property<int>("PageStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PageType")
                        .HasColumnType("integer");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowMenuWhenAuthorized")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowMenuWhenNotAuthorized")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowOutsideMenuGroup")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowTitleInPage")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MenuGroupId");

                    b.HasIndex("PortalId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageDetails");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageDetailsLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageDetailsLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageIndex", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageIndex");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageIndexColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PageIndexId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("PageIndexId");

                    b.ToTable("PageIndexColumn");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageIndexColumnLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PageIndexId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("PageIndexId");

                    b.ToTable("PageIndexColumnLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageIndexLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageIndexLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageMemberGroupLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("MemberGroupId")
                        .HasColumnType("text");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PageMemberGroupLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageMemberLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("MemberId")
                        .HasColumnType("text");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PageMemberLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageNote", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsCategoryId")
                        .HasColumnType("text");

                    b.Property<int[]>("NtsGroupingLevel")
                        .HasColumnType("integer[]");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsCategoryId");

                    b.HasIndex("PageId");

                    b.ToTable("PageNote");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageNoteLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsCategoryId")
                        .HasColumnType("text");

                    b.Property<int[]>("NtsGroupingLevel")
                        .HasColumnType("integer[]");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsCategoryId");

                    b.HasIndex("PageId");

                    b.ToTable("PageNoteLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("PageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageTemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("PageTemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PayrollBatch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AttendanceEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("AttendanceStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BankLetterError")
                        .HasColumnType("integer");

                    b.Property<int>("BankLetterTotal")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ExecutePayrollError")
                        .HasColumnType("integer");

                    b.Property<int>("ExecutePayrollTotal")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("NetAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("PayrollEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PayrollGroupId")
                        .HasColumnType("text");

                    b.Property<DateTime>("PayrollStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PayrollStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PayslipError")
                        .HasColumnType("integer");

                    b.Property<int>("PayslipTotal")
                        .HasColumnType("integer");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int>("RunType")
                        .HasColumnType("integer");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TotalDeduction")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalEarning")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("YearMonth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PayrollBatch");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PayrollRun", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("BankLetterError")
                        .HasColumnType("integer");

                    b.Property<int>("BankLetterTotal")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EOSAccrual")
                        .HasColumnType("integer");

                    b.Property<int>("ExecutePayrollError")
                        .HasColumnType("integer");

                    b.Property<int>("ExecutePayrollTotal")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExecutionEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExecutionStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExecutionStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("FlightTicketAccrual")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExecuteAllEmployee")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int?>("LoanAccrual")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("NetAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("PayRollNo")
                        .HasColumnType("text");

                    b.Property<string>("PayrollBatchId")
                        .HasColumnType("text");

                    b.Property<string>("PayrollPersonId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PayrollRunDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PayrollStateEnd")
                        .HasColumnType("integer");

                    b.Property<int>("PayrollStateStart")
                        .HasColumnType("integer");

                    b.Property<int>("PayslipError")
                        .HasColumnType("integer");

                    b.Property<int>("PayslipTotal")
                        .HasColumnType("integer");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int?>("SickLeaveAccrual")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TotalDeduction")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalEarning")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalProcessed")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSucceeded")
                        .HasColumnType("integer");

                    b.Property<int?>("VacationAccrual")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("YearMonth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PayrollRun");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PayrollTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<double?>("ClosingBalance")
                        .HasColumnType("double precision");

                    b.Property<double?>("ClosingQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("DeductionAmount")
                        .HasColumnType("double precision");

                    b.Property<double?>("DeductionQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("EarningAmount")
                        .HasColumnType("double precision");

                    b.Property<double?>("EarningQuantity")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ElementCategory")
                        .HasColumnType("integer");

                    b.Property<int>("ElementClassification")
                        .HasColumnType("integer");

                    b.Property<int>("ElementType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTransactionClosed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double?>("OpeningBalance")
                        .HasColumnType("double precision");

                    b.Property<double?>("OpeningQuantity")
                        .HasColumnType("double precision");

                    b.Property<long?>("PayrollId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PayrollRunId")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PostedSource")
                        .HasColumnType("integer");

                    b.Property<long>("PostedUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProcessStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rate")
                        .HasColumnType("double precision");

                    b.Property<long?>("ReferenceId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ReferenceNode")
                        .HasColumnType("integer");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Uom")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PayrollTransaction");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string[]>("PageTypes")
                        .HasColumnType("text[]");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string[]>("UserPermissionTypes")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PermissionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string[]>("PageTypes")
                        .HasColumnType("text[]");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string[]>("UserPermissionTypes")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PermissionLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Portal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("AllowedLanguageIds")
                        .HasColumnType("text[]");

                    b.Property<int>("BannerHeight")
                        .HasColumnType("integer");

                    b.Property<string>("BannerId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DomainName")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAccordianMenu")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBreadcrumb")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableLegalEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMultiLanguage")
                        .HasColumnType("boolean");

                    b.Property<string>("FavIconId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Layout")
                        .HasColumnType("text");

                    b.Property<string>("LeftMenuBackColor")
                        .HasColumnType("text");

                    b.Property<string>("LeftMenuForeColor")
                        .HasColumnType("text");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LogoId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalFooterTeext")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int>("PortalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Theme")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("TopBannerBackColor")
                        .HasColumnType("text");

                    b.Property<string>("TopBannerForeColor")
                        .HasColumnType("text");

                    b.Property<string>("UserGuideId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Portal");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PortalLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("AllowedLanguageIds")
                        .HasColumnType("text[]");

                    b.Property<int>("BannerHeight")
                        .HasColumnType("integer");

                    b.Property<string>("BannerId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DomainName")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAccordianMenu")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBreadcrumb")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableLegalEntity")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMultiLanguage")
                        .HasColumnType("boolean");

                    b.Property<string>("FavIconId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Layout")
                        .HasColumnType("text");

                    b.Property<string>("LeftMenuBackColor")
                        .HasColumnType("text");

                    b.Property<string>("LeftMenuForeColor")
                        .HasColumnType("text");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalFooterTeext")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<int>("PortalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Theme")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("TopBannerBackColor")
                        .HasColumnType("text");

                    b.Property<string>("TopBannerForeColor")
                        .HasColumnType("text");

                    b.Property<string>("UserGuideId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PortalLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesign", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionId")
                        .HasColumnType("text");

                    b.Property<int>("BusinessLogicExecutionType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignHtml")
                        .HasColumnType("text");

                    b.Property<int>("ProcessDesignType")
                        .HasColumnType("integer");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ProcessDesign");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesignComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExecutionType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProcessDesignId");

                    b.ToTable("ProcessDesignComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesignLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionId")
                        .HasColumnType("text");

                    b.Property<int>("BusinessLogicExecutionType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignHtml")
                        .HasColumnType("text");

                    b.Property<int>("ProcessDesignType")
                        .HasColumnType("integer");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ProcessDesignLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesignResult", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NtsServiceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignStatusId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsServiceId");

                    b.HasIndex("ProcessDesignId");

                    b.HasIndex("ProcessDesignStatusId");

                    b.ToTable("ProcessDesignResult");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesignResultLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NtsServiceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignStatusId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsServiceId");

                    b.HasIndex("ProcessDesignId");

                    b.HasIndex("ProcessDesignStatusId");

                    b.ToTable("ProcessDesignResultLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesignVariable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProcessDesignId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ProcessDesignVariable");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesignVariableLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProcessDesignId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ProcessDesignVariableLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProjectEmailSetup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSyncDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Pop3Host")
                        .HasColumnType("text");

                    b.Property<int>("Pop3Port")
                        .HasColumnType("integer");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceId")
                        .HasColumnType("text");

                    b.Property<string>("Signature")
                        .HasColumnType("text");

                    b.Property<string>("SmtpFromId")
                        .HasColumnType("text");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("text");

                    b.Property<string>("SmtpPassword")
                        .HasColumnType("text");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("integer");

                    b.Property<string>("SmtpUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectEmailSetup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.RecTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("AssignToType")
                        .HasColumnType("integer");

                    b.Property<string>("AssigneeTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssigneeUserId")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode1")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode10")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode2")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode3")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode4")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode5")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode6")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode7")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode8")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode9")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue1")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue10")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue2")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue3")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue4")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue5")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue6")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue7")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue8")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue9")
                        .HasColumnType("text");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteReason")
                        .HasColumnType("text");

                    b.Property<long?>("CompletedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue1")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue10")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue2")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue3")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue4")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue5")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue6")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue7")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue8")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue9")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DelegateReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DelegatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay1")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay10")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay2")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay3")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay4")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay5")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay6")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay7")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay8")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay9")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplayValue1")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplayValue10")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplayValue2")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplayValue3")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplayValue4")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplayValue5")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplayValue6")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplayValue7")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplayValue8")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplayValue9")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue1")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue10")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue2")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue3")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue4")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue5")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue6")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue7")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue8")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue9")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAssignedInTemplate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTaskAutoComplete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTaskAutoCompleteIfSameAssignee")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int?>("LockStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentVersionNo")
                        .HasColumnType("text");

                    b.Property<long?>("PlanOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RatingComment")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceMasterId")
                        .HasColumnType("text");

                    b.Property<int?>("ReferenceTypeCode")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceTypeId")
                        .HasColumnType("text");

                    b.Property<long?>("RejectedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReopenReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReopenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SLA")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskNo")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatusCode")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatusName")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay1")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay10")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay2")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay3")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay4")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay5")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay6")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay7")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay8")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay9")
                        .HasColumnType("text");

                    b.Property<string>("TextValue1")
                        .HasColumnType("text");

                    b.Property<string>("TextValue10")
                        .HasColumnType("text");

                    b.Property<string>("TextValue2")
                        .HasColumnType("text");

                    b.Property<string>("TextValue3")
                        .HasColumnType("text");

                    b.Property<string>("TextValue4")
                        .HasColumnType("text");

                    b.Property<string>("TextValue5")
                        .HasColumnType("text");

                    b.Property<string>("TextValue6")
                        .HasColumnType("text");

                    b.Property<string>("TextValue7")
                        .HasColumnType("text");

                    b.Property<string>("TextValue8")
                        .HasColumnType("text");

                    b.Property<string>("TextValue9")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeTeamId");

                    b.HasIndex("AssigneeUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RequestedUserId");

                    b.HasIndex("TaskStatus");

                    b.ToTable("RecTask", "public");
                });

            modelBuilder.Entity("Synergy.App.DataModel.RecTaskTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdhocServiceAddButtonText")
                        .HasColumnType("text");

                    b.Property<string>("AdhocServiceHeaderMessage")
                        .HasColumnType("text");

                    b.Property<string>("AdhocServiceHeaderText")
                        .HasColumnType("text");

                    b.Property<string>("AdhocTaskAddButtonText")
                        .HasColumnType("text");

                    b.Property<string>("AdhocTaskHeaderMessage")
                        .HasColumnType("text");

                    b.Property<string>("AdhocTaskHeaderText")
                        .HasColumnType("text");

                    b.Property<bool?>("AdminCanEditUdf")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AdminCanSubmitAndAutoComplete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AllowTemplateChange")
                        .HasColumnType("boolean");

                    b.Property<int?>("AssignToType")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedByQuery")
                        .HasColumnType("text");

                    b.Property<int?>("AssignedQueryType")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<bool>("BackButton")
                        .HasColumnType("boolean");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("BannerId")
                        .HasColumnType("text");

                    b.Property<string>("BannerStyle")
                        .HasColumnType("text");

                    b.Property<bool>("CanAddAdhocTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanAddStepService")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanAddStepTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEditOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRemoveAdhocService")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRemoveAdhocTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRemoveStepService")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRemoveStepTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanViewServiceReference")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanViewVersions")
                        .HasColumnType("boolean");

                    b.Property<bool>("CancelButton")
                        .HasColumnType("boolean");

                    b.Property<string>("CancelButtonText")
                        .HasColumnType("text");

                    b.Property<bool?>("ChangeStatusOnStepChange")
                        .HasColumnType("boolean");

                    b.Property<string>("ClientValidationScript")
                        .HasColumnType("text");

                    b.Property<bool>("CloseButton")
                        .HasColumnType("boolean");

                    b.Property<string>("CloseButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CodeLabelName")
                        .HasColumnType("text");

                    b.Property<bool>("CollapseHeader")
                        .HasColumnType("boolean");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<bool>("CompleteButton")
                        .HasColumnType("boolean");

                    b.Property<string>("CompleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonText")
                        .HasColumnType("text");

                    b.Property<double?>("CompletionPercentage")
                        .HasColumnType("double precision");

                    b.Property<bool?>("CreateInBackGround")
                        .HasColumnType("boolean");

                    b.Property<bool>("CreateNewVersionButton")
                        .HasColumnType("boolean");

                    b.Property<string>("CreateNewVersionButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultView")
                        .HasColumnType("text");

                    b.Property<bool>("DelegateButton")
                        .HasColumnType("boolean");

                    b.Property<string>("DelegateButtonText")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionLabelName")
                        .HasColumnType("text");

                    b.Property<bool?>("DisableAutomaticDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisableMessage")
                        .HasColumnType("boolean");

                    b.Property<bool?>("DisableSharing")
                        .HasColumnType("boolean");

                    b.Property<bool?>("DisableStepTask")
                        .HasColumnType("boolean");

                    b.Property<bool?>("DisplayActionButtonBelow")
                        .HasColumnType("boolean");

                    b.Property<string>("DocumentReadyScript")
                        .HasColumnType("text");

                    b.Property<int?>("DocumentStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("DraftButton")
                        .HasColumnType("boolean");

                    b.Property<string>("DraftButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod1")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod10")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod2")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod3")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod4")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod5")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod6")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod7")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod8")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod9")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DuplicatedFromId")
                        .HasColumnType("bigint");

                    b.Property<string>("EditButtonValidationMethod")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonVisibilityMethod")
                        .HasColumnType("text");

                    b.Property<string>("EmailSettingId")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAdhocService")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableAdhocTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableBanner")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableCode")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableComment")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableDocumentChangeRequest")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableLock")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableParent")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnablePrintButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRejectButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSLAChangeRequest")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveAsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableSequenceNo")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTaskAutoComplete")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTaskNumberManual")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableTeamAsOwner")
                        .HasColumnType("boolean");

                    b.Property<string>("FieldSectionMessage")
                        .HasColumnType("text");

                    b.Property<string>("FieldSectionText")
                        .HasColumnType("text");

                    b.Property<string>("HeaderSectionMessage")
                        .HasColumnType("text");

                    b.Property<string>("HeaderSectionText")
                        .HasColumnType("text");

                    b.Property<bool?>("HideDateAndSLA")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HideDescription")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HideSubject")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IncludeRequesterInOwnerList")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay6")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay7")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay8")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay9")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay6")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay7")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay8")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay9")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAttachmentRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCancelReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsCodeEditable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsCodeRequired")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsCodeUniqueInTemplate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleteReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelegateReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescriptionEditable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescriptionRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("IsDropdownDisplay1")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay10")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay2")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay3")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay4")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay5")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay6")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay7")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay8")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay9")
                        .HasColumnType("text");

                    b.Property<bool>("IsIncludeEmailAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNtsNoManual")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRejectionReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReopenReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay6")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay7")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay8")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay9")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay6")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay7")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay8")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay9")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReturnReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSequenceNoEditable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSequenceNoRequired")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSequenceNoUniqueInTemplate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectEditable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemRating")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTeamAsOwnerMandatory")
                        .HasColumnType("boolean");

                    b.Property<string>("JsonForm")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Layout")
                        .HasColumnType("text");

                    b.Property<int>("LayoutColumnCount")
                        .HasColumnType("integer");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LoadExecutionMethod")
                        .HasColumnType("text");

                    b.Property<int>("ModuleName")
                        .HasColumnType("integer");

                    b.Property<bool>("NotApplicableButton")
                        .HasColumnType("boolean");

                    b.Property<string>("NotificationUrlPattern")
                        .HasColumnType("text");

                    b.Property<string>("NtsNoLabelName")
                        .HasColumnType("text");

                    b.Property<int?>("NtsType")
                        .HasColumnType("integer");

                    b.Property<int?>("OwnerType")
                        .HasColumnType("integer");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PostSubmitExecutionCode")
                        .HasColumnType("text");

                    b.Property<string>("PostSubmitExecutionMethod")
                        .HasColumnType("text");

                    b.Property<string>("PreSubmitExecutionMethod")
                        .HasColumnType("text");

                    b.Property<string>("PrintButtonText")
                        .HasColumnType("text");

                    b.Property<string>("PrintButtonVisibilityMethod")
                        .HasColumnType("text");

                    b.Property<string>("PrintMethodName")
                        .HasColumnType("text");

                    b.Property<bool?>("ReSubmitButton")
                        .HasColumnType("boolean");

                    b.Property<string>("ReSubmitButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("RejectButton")
                        .HasColumnType("boolean");

                    b.Property<string>("RejectButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("RejectButtonText")
                        .HasColumnType("text");

                    b.Property<int?>("ReminderDaysPriorDueDate")
                        .HasColumnType("integer");

                    b.Property<string>("RemoveAdhocServiceButtonText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveAdhocServiceConfirmText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveAdhocServiceSuccessMessage")
                        .HasColumnType("text");

                    b.Property<string>("RemoveAdhocTaskButtonText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveAdhocTaskConfirmText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveAdhocTaskSuccessMessage")
                        .HasColumnType("text");

                    b.Property<string>("RemoveStepServiceButtonText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveStepServiceConfirmText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveStepServiceSuccessMessage")
                        .HasColumnType("text");

                    b.Property<string>("RemoveStepTaskButtonText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveStepTaskConfirmText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveStepTaskSuccessMessage")
                        .HasColumnType("text");

                    b.Property<bool?>("ReopenButton")
                        .HasColumnType("boolean");

                    b.Property<string>("ReopenButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("ReturnButton")
                        .HasColumnType("boolean");

                    b.Property<string>("ReturnButtonText")
                        .HasColumnType("text");

                    b.Property<string>("ReturnTemplateName")
                        .HasColumnType("text");

                    b.Property<string>("ReturnUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("RunPostscriptInBackground")
                        .HasColumnType("boolean");

                    b.Property<string>("SLA")
                        .HasColumnType("text");

                    b.Property<string>("SLACalculationMode")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftText")
                        .HasColumnType("text");

                    b.Property<bool>("SaveButton")
                        .HasColumnType("boolean");

                    b.Property<string>("SaveButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("SaveChangesButton")
                        .HasColumnType("boolean");

                    b.Property<string>("SaveChangesButtonText")
                        .HasColumnType("text");

                    b.Property<string>("SaveChangesButtonVisibilityMethod")
                        .HasColumnType("text");

                    b.Property<string>("SaveNewVersionButtonText")
                        .HasColumnType("text");

                    b.Property<string>("SequenceNoLabelName")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServerValidationScript")
                        .HasColumnType("text");

                    b.Property<string>("ServiceDetailsHeight")
                        .HasColumnType("text");

                    b.Property<bool?>("ServiceOwnerActAsStepTaskAssignee")
                        .HasColumnType("boolean");

                    b.Property<string>("ServiceOwnerText")
                        .HasColumnType("text");

                    b.Property<string>("ServiceReferenceText")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusLabelName")
                        .HasColumnType("text");

                    b.Property<string>("StepSectionMessage")
                        .HasColumnType("text");

                    b.Property<string>("StepSectionText")
                        .HasColumnType("text");

                    b.Property<string>("StepServiceAddButtonText")
                        .HasColumnType("text");

                    b.Property<string>("StepServiceCancelButtonText")
                        .HasColumnType("text");

                    b.Property<string>("StepServiceCreationOptionalLabel")
                        .HasColumnType("text");

                    b.Property<string>("StepTaskAddButtonText")
                        .HasColumnType("text");

                    b.Property<string>("StepTaskCancelButtonText")
                        .HasColumnType("text");

                    b.Property<string>("StepTaskCreationOptionalLabel")
                        .HasColumnType("text");

                    b.Property<string>("StepTemplateIds")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("SubjectLabelName")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonText")
                        .HasColumnType("text");

                    b.Property<string>("TaskIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateMasterId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateOwner")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay1")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay10")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay2")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay3")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay4")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay5")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay6")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay7")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay8")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay9")
                        .HasColumnType("text");

                    b.Property<int?>("TextBoxDisplayType1")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType10")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType2")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType3")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType4")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType5")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType6")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType7")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType8")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType9")
                        .HasColumnType("integer");

                    b.Property<string>("TextBoxLink1")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink10")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink2")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink3")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink4")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink5")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink6")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink7")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink8")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink9")
                        .HasColumnType("text");

                    b.Property<string>("UdfIframeSrc")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskIndexPageTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("RecTaskTemplate", "public");
                });

            modelBuilder.Entity("Synergy.App.DataModel.RecTaskVersion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("AssignToType")
                        .HasColumnType("integer");

                    b.Property<string>("AssigneeTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssigneeUserId")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode1")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode10")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode2")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode3")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode4")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode5")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode6")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode7")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode8")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode9")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue1")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue10")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue2")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue3")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue4")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue5")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue6")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue7")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue8")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue9")
                        .HasColumnType("text");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteReason")
                        .HasColumnType("text");

                    b.Property<long?>("CompletedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue1")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue10")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue2")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue3")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue4")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue5")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue6")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue7")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue8")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue9")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DelegateReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DelegatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay1")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay10")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay2")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay3")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay4")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay5")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay6")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay7")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay8")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay9")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue1")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue10")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue2")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue3")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue4")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue5")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue6")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue7")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue8")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue9")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAssignedInTemplate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTaskAutoComplete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTaskAutoCompleteIfSameAssignee")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int?>("LockStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentVersionNo")
                        .HasColumnType("text");

                    b.Property<long?>("PlanOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RatingComment")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceMasterId")
                        .HasColumnType("text");

                    b.Property<int?>("ReferenceTypeCode")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceTypeId")
                        .HasColumnType("text");

                    b.Property<long?>("RejectedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReopenReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReopenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SLA")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskNo")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatusCode")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatusName")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay1")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay10")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay2")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay3")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay4")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay5")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay6")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay7")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay8")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay9")
                        .HasColumnType("text");

                    b.Property<string>("TextValue1")
                        .HasColumnType("text");

                    b.Property<string>("TextValue10")
                        .HasColumnType("text");

                    b.Property<string>("TextValue2")
                        .HasColumnType("text");

                    b.Property<string>("TextValue3")
                        .HasColumnType("text");

                    b.Property<string>("TextValue4")
                        .HasColumnType("text");

                    b.Property<string>("TextValue5")
                        .HasColumnType("text");

                    b.Property<string>("TextValue6")
                        .HasColumnType("text");

                    b.Property<string>("TextValue7")
                        .HasColumnType("text");

                    b.Property<string>("TextValue8")
                        .HasColumnType("text");

                    b.Property<string>("TextValue9")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeTeamId");

                    b.HasIndex("AssigneeUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RequestedUserId");

                    b.HasIndex("TaskStatus");

                    b.ToTable("RecTaskVersion", "public");
                });

            modelBuilder.Entity("Synergy.App.DataModel.RecruitmentCandidateElementInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ElementId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.ToTable("RecruitmentCandidateElementInfo", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.RecruitmentPayElement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ElementCode")
                        .HasColumnType("text");

                    b.Property<string>("ElementName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("ValueType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("RecruitmentPayElement", "rec");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ResourceLanguage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Arabic")
                        .HasColumnType("text");

                    b.Property<string>("ArabicHelperText")
                        .HasColumnType("text");

                    b.Property<string>("ArabicTooltip")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("English")
                        .HasColumnType("text");

                    b.Property<string>("EnglishHelperText")
                        .HasColumnType("text");

                    b.Property<string>("EnglishTooltip")
                        .HasColumnType("text");

                    b.Property<int?>("GroupCode")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<int?>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ResourceLanguage");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ServiceIndexPageColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayFormat")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UdfPermissionHeaderId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("ServiceIndexPageTemplateId");

                    b.HasIndex("UdfPermissionHeaderId");

                    b.ToTable("ServiceIndexPageColumn");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ServiceIndexPageColumnLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayFormat")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UdfPermissionHeaderId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("ServiceIndexPageTemplateId");

                    b.HasIndex("UdfPermissionHeaderId");

                    b.ToTable("ServiceIndexPageColumnLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ServiceIndexPageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyServiceSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyServiceTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSummaryTabs")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexPageTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ParentReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RequestButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("ServiceIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ServiceIndexPageTemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyServiceSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyServiceTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSummaryTabs")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexPageTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ParentReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("RequestButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("ServiceIndexPageTemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ServiceTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ActionButtonPosition")
                        .HasColumnType("integer");

                    b.Property<string[]>("AdhocNoteTemplateIds")
                        .HasColumnType("text[]");

                    b.Property<string[]>("AdhocServiceTemplateIds")
                        .HasColumnType("text[]");

                    b.Property<string[]>("AdhocTaskTemplateIds")
                        .HasColumnType("text[]");

                    b.Property<bool>("AllowPastStartDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowSLAChange")
                        .HasColumnType("boolean");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("BackgroundFileId")
                        .HasColumnType("text");

                    b.Property<string>("BannerFileId")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreateReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomMessageOnCreation")
                        .HasColumnType("text");

                    b.Property<string>("CustomMessageOnEdit")
                        .HasColumnType("text");

                    b.Property<string>("DataPermissionColumnId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultOwnerTeamId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultOwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultRequesterTeamId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultRequesterUserId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultServiceOwnerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultServiceRequesterTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionMappingUdfId")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionText")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionUdfMappingColumn")
                        .HasColumnType("text");

                    b.Property<bool>("DisableAutoCompleteIfNoStepTask")
                        .HasColumnType("boolean");

                    b.Property<int>("EditReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("EmailCopyTemplateCode")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAdhocTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCancelButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCompleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCustomMessageOnCreation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCustomMessageOnEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDataPermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDynamicStepTaskSelection")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableInlineComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableLegalEntityFilter")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePrintButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveAsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSequenceOrder")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableServiceNumberManual")
                        .HasColumnType("boolean");

                    b.Property<int>("FormType")
                        .HasColumnType("integer");

                    b.Property<bool>("HideAdhocTaskInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideAttachmentInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideBanner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideCommentInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDescription")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDueDateInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideEmailInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideExpiryDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideLogInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideNotificationInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HidePriority")
                        .HasColumnType("boolean");

                    b.Property<bool>("HidePriorityInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideProcessDiagramInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSLA")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideServiceNumberInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideServiceOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideShareInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideStartDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideStatusInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSubject")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideTahsInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideToolbar")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideVersionInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideWorkflowInHeader")
                        .HasColumnType("boolean");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsCancelReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescriptionMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNumberNotMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectUnique")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NotificationSubject")
                        .HasColumnType("text");

                    b.Property<int>("NumberGenerationType")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerUserText")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PostScript")
                        .HasColumnType("text");

                    b.Property<string>("PreScript")
                        .HasColumnType("text");

                    b.Property<string>("PrintButtonText")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<string>("RequestedByUserText")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("SLA")
                        .HasColumnType("interval");

                    b.Property<string>("SaveAsDraftCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceNoText")
                        .HasColumnType("text");

                    b.Property<int?>("ServiceTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("SubjectMappingUdfId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectText")
                        .HasColumnType("text");

                    b.Property<string>("SubjectUdfMappingColumn")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonText")
                        .HasColumnType("text");

                    b.Property<string>("TemplateColor")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DefaultOwnerTeamId");

                    b.HasIndex("DefaultOwnerUserId");

                    b.HasIndex("DefaultRequesterTeamId");

                    b.HasIndex("DefaultRequesterUserId");

                    b.HasIndex("DefaultServiceOwnerTypeId");

                    b.HasIndex("DefaultServiceRequesterTypeId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ServiceIndexPageTemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("ServiceTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ServiceTemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ActionButtonPosition")
                        .HasColumnType("integer");

                    b.Property<string[]>("AdhocNoteTemplateIds")
                        .HasColumnType("text[]");

                    b.Property<string[]>("AdhocServiceTemplateIds")
                        .HasColumnType("text[]");

                    b.Property<string[]>("AdhocTaskTemplateIds")
                        .HasColumnType("text[]");

                    b.Property<bool>("AllowPastStartDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowSLAChange")
                        .HasColumnType("boolean");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("BackgroundFileId")
                        .HasColumnType("text");

                    b.Property<string>("BannerFileId")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreateReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomMessageOnCreation")
                        .HasColumnType("text");

                    b.Property<string>("CustomMessageOnEdit")
                        .HasColumnType("text");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DataPermissionColumnId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultOwnerTeamId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultOwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultRequesterTeamId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultRequesterUserId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultServiceOwnerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("DefaultServiceRequesterTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionMappingUdfId")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionText")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionUdfMappingColumn")
                        .HasColumnType("text");

                    b.Property<bool>("DisableAutoCompleteIfNoStepTask")
                        .HasColumnType("boolean");

                    b.Property<int>("EditReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("EmailCopyTemplateCode")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAdhocTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCancelButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCompleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCustomMessageOnCreation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCustomMessageOnEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDataPermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDynamicStepTaskSelection")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableInlineComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableLegalEntityFilter")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePrintButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveAsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSequenceOrder")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableServiceNumberManual")
                        .HasColumnType("boolean");

                    b.Property<int>("FormType")
                        .HasColumnType("integer");

                    b.Property<bool>("HideAdhocTaskInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideAttachmentInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideBanner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideCommentInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDescription")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDueDateInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideEmailInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideExpiryDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideLogInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideNotificationInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HidePriority")
                        .HasColumnType("boolean");

                    b.Property<bool>("HidePriorityInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideProcessDiagramInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSLA")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideServiceNumberInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideServiceOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideShareInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideStartDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideStatusInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSubject")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideTahsInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideToolbar")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideVersionInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideWorkflowInHeader")
                        .HasColumnType("boolean");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsCancelReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescriptionMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNumberNotMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectUnique")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NotificationSubject")
                        .HasColumnType("text");

                    b.Property<int>("NumberGenerationType")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerUserText")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PostScript")
                        .HasColumnType("text");

                    b.Property<string>("PreScript")
                        .HasColumnType("text");

                    b.Property<string>("PrintButtonText")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("RequestedByUserText")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("SLA")
                        .HasColumnType("interval");

                    b.Property<string>("SaveAsDraftCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceNoText")
                        .HasColumnType("text");

                    b.Property<int?>("ServiceTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("SubjectMappingUdfId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectText")
                        .HasColumnType("text");

                    b.Property<string>("SubjectUdfMappingColumn")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonText")
                        .HasColumnType("text");

                    b.Property<string>("TemplateColor")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DefaultOwnerTeamId");

                    b.HasIndex("DefaultOwnerUserId");

                    b.HasIndex("DefaultRequesterTeamId");

                    b.HasIndex("DefaultRequesterUserId");

                    b.HasIndex("DefaultServiceOwnerTypeId");

                    b.HasIndex("DefaultServiceRequesterTypeId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ServiceIndexPageTemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("ServiceTemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.StartEventComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExecutionType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("StartEventComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.StepTaskComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowSLAChange")
                        .HasColumnType("boolean");

                    b.Property<string>("AssignedToHierarchyMasterId")
                        .HasColumnType("text");

                    b.Property<int>("AssignedToHierarchyMasterLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToTypeId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserText")
                        .HasColumnType("text");

                    b.Property<string>("BackgroundFileId")
                        .HasColumnType("text");

                    b.Property<string>("BannerFileId")
                        .HasColumnType("text");

                    b.Property<string>("ChangingNextTaskAssigneeTitle")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionText")
                        .HasColumnType("text");

                    b.Property<bool>("DisableNextTaskTeamChange")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableChangingNextTaskAssignee")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDynamicStepTaskSelection")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableNextTaskAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePlanning")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableReturnTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableServiceComplete")
                        .HasColumnType("boolean");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NotificationSubject")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserText")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<string>("RequestedByUserText")
                        .HasColumnType("text");

                    b.Property<string>("ReturnStepTaskId")
                        .HasColumnType("text");

                    b.Property<string>("ReturnTaskButtonText")
                        .HasColumnType("text");

                    b.Property<string>("ReturnTaskTitle")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("SLA")
                        .HasColumnType("interval");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("SubjectText")
                        .HasColumnType("text");

                    b.Property<string>("TaskTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("TemplateCreateType")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTableMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkflowStatusName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToHierarchyMasterId");

                    b.HasIndex("AssignedToTeamId");

                    b.HasIndex("AssignedToTypeId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ReturnStepTaskId");

                    b.HasIndex("TaskTemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfTableMetadataId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("StepTaskComponent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.StepTaskComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowSLAChange")
                        .HasColumnType("boolean");

                    b.Property<string>("AssignedToHierarchyMasterId")
                        .HasColumnType("text");

                    b.Property<int>("AssignedToHierarchyMasterLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToTypeId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserText")
                        .HasColumnType("text");

                    b.Property<string>("BackgroundFileId")
                        .HasColumnType("text");

                    b.Property<string>("BannerFileId")
                        .HasColumnType("text");

                    b.Property<string>("ChangingNextTaskAssigneeTitle")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionText")
                        .HasColumnType("text");

                    b.Property<bool>("DisableNextTaskTeamChange")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableChangingNextTaskAssignee")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDynamicStepTaskSelection")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableNextTaskAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePlanning")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableReturnTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableServiceComplete")
                        .HasColumnType("boolean");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NotificationSubject")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserText")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("RequestedByUserText")
                        .HasColumnType("text");

                    b.Property<string>("ReturnStepTaskId")
                        .HasColumnType("text");

                    b.Property<string>("ReturnTaskButtonText")
                        .HasColumnType("text");

                    b.Property<string>("ReturnTaskTitle")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("SLA")
                        .HasColumnType("interval");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("SubjectText")
                        .HasColumnType("text");

                    b.Property<string>("TaskTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("TemplateCreateType")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTableMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("WorkflowStatusName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToHierarchyMasterId");

                    b.HasIndex("AssignedToTeamId");

                    b.HasIndex("AssignedToTypeId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ReturnStepTaskId");

                    b.HasIndex("TaskTemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfTableMetadataId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("StepTaskComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.SubModule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ModuleId")
                        .HasColumnType("text");

                    b.Property<string>("ModuleLogId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ModuleLogId");

                    b.ToTable("SubModule");
                });

            modelBuilder.Entity("Synergy.App.DataModel.SubModuleLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("SubModuleLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TASUserReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Age")
                        .HasColumnType("text");

                    b.Property<string>("AgeAr")
                        .HasColumnType("text");

                    b.Property<string>("Altafah")
                        .HasColumnType("text");

                    b.Property<string>("AppointmentStatus")
                        .HasColumnType("text");

                    b.Property<string>("AppointmentStatusAr")
                        .HasColumnType("text");

                    b.Property<double?>("AverageJobPerformanceForThreeYears")
                        .HasColumnType("double precision");

                    b.Property<double?>("AverageJobPerformanceForThreeYearsAr")
                        .HasColumnType("double precision");

                    b.Property<string>("CabinetRatingPmo")
                        .HasColumnType("text");

                    b.Property<string>("CabinetRatingPmoAr")
                        .HasColumnType("text");

                    b.Property<double?>("CaseStudyScore")
                        .HasColumnType("double precision");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Class")
                        .HasColumnType("text");

                    b.Property<string>("ClassAr")
                        .HasColumnType("text");

                    b.Property<string>("ClassClass")
                        .HasColumnType("text");

                    b.Property<string>("ClassClassAr")
                        .HasColumnType("text");

                    b.Property<string>("Classification")
                        .HasColumnType("text");

                    b.Property<string>("ClassificationAr")
                        .HasColumnType("text");

                    b.Property<string>("Commitment")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("Control")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("DateOfBirthAr")
                        .HasColumnType("text");

                    b.Property<string>("DateOfHiring")
                        .HasColumnType("text");

                    b.Property<string>("DateOfHiringAr")
                        .HasColumnType("text");

                    b.Property<string>("DatePoint")
                        .HasColumnType("text");

                    b.Property<string>("DatePointAr")
                        .HasColumnType("text");

                    b.Property<long?>("DepartmentEmployeeCount")
                        .HasColumnType("bigint");

                    b.Property<string>("EMailAr")
                        .HasColumnType("text");

                    b.Property<string>("EducationalLevel")
                        .HasColumnType("text");

                    b.Property<string>("EducationalLevelAr")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EmirateOfTheWorkSite")
                        .HasColumnType("text");

                    b.Property<string>("EmirateOfTheWorkSiteAr")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeNumberAr")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.Property<string>("EntityAr")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationResultCompareToPeers1")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationResultCompareToPeers1Ar")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationResultCompareToPeers2")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationResultCompareToPeers2Ar")
                        .HasColumnType("text");

                    b.Property<string>("FinalPshycologicalResult")
                        .HasColumnType("text");

                    b.Property<string>("FinalPshycologicalResultAr")
                        .HasColumnType("text");

                    b.Property<double?>("FinalResult")
                        .HasColumnType("double precision");

                    b.Property<string>("FinalResultAr")
                        .HasColumnType("text");

                    b.Property<string>("FunctionalClass")
                        .HasColumnType("text");

                    b.Property<string>("FunctionalClassAr")
                        .HasColumnType("text");

                    b.Property<string>("FunctionalFamily")
                        .HasColumnType("text");

                    b.Property<string>("FunctionalFamilyAr")
                        .HasColumnType("text");

                    b.Property<string>("FunctionalFamilySubFamily")
                        .HasColumnType("text");

                    b.Property<string>("FunctionalFamilySubFamilyAr")
                        .HasColumnType("text");

                    b.Property<double?>("FunctionalPerformanceResult")
                        .HasColumnType("double precision");

                    b.Property<double?>("FunctionalPerformanceResultAr")
                        .HasColumnType("double precision");

                    b.Property<string>("GovAbilityToProvideService")
                        .HasColumnType("text");

                    b.Property<string>("GovAbilityToProvideServiceAr")
                        .HasColumnType("text");

                    b.Property<string>("GovermentWork")
                        .HasColumnType("text");

                    b.Property<string>("GovermentWorkAr")
                        .HasColumnType("text");

                    b.Property<string>("Grievances2018")
                        .HasColumnType("text");

                    b.Property<string>("Grievances2018Ar")
                        .HasColumnType("text");

                    b.Property<string>("Grievances2019")
                        .HasColumnType("text");

                    b.Property<string>("ILM1")
                        .HasColumnType("text");

                    b.Property<string>("ILM2")
                        .HasColumnType("text");

                    b.Property<string>("ILM3")
                        .HasColumnType("text");

                    b.Property<string>("ILM4")
                        .HasColumnType("text");

                    b.Property<string>("ILM5")
                        .HasColumnType("text");

                    b.Property<string>("ILM6")
                        .HasColumnType("text");

                    b.Property<string>("ILM7")
                        .HasColumnType("text");

                    b.Property<string>("ILM8")
                        .HasColumnType("text");

                    b.Property<string>("ILM9")
                        .HasColumnType("text");

                    b.Property<string>("IdNumber")
                        .HasColumnType("text");

                    b.Property<string>("IdNumberAr")
                        .HasColumnType("text");

                    b.Property<string>("Internshipfor2019")
                        .HasColumnType("text");

                    b.Property<double?>("InterviewScore")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("IsSubordinateReport")
                        .HasColumnType("text");

                    b.Property<string>("JobPerformance2017")
                        .HasColumnType("text");

                    b.Property<string>("JobPerformance2017Ar")
                        .HasColumnType("text");

                    b.Property<string>("JobPerformance2018")
                        .HasColumnType("text");

                    b.Property<string>("JobPerformance2018Ar")
                        .HasColumnType("text");

                    b.Property<string>("JobPerformance2019")
                        .HasColumnType("text");

                    b.Property<string>("JobPerformance2019Ar")
                        .HasColumnType("text");

                    b.Property<string>("JobTitleAr")
                        .HasColumnType("text");

                    b.Property<string>("LastChangeInPosition")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("LeadershipScore")
                        .HasColumnType("double precision");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ListRequired102")
                        .HasColumnType("text");

                    b.Property<string>("ListRequired102Ar")
                        .HasColumnType("text");

                    b.Property<string>("ManagerName")
                        .HasColumnType("text");

                    b.Property<string>("ManagerNumber")
                        .HasColumnType("text");

                    b.Property<double?>("MentalAbilityScore")
                        .HasColumnType("double precision");

                    b.Property<string>("MinistryName")
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("MobileNumberAr")
                        .HasColumnType("text");

                    b.Property<string>("MonthAr")
                        .HasColumnType("text");

                    b.Property<string>("MonthYear")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("NationalityAr")
                        .HasColumnType("text");

                    b.Property<string>("NationalityCategory")
                        .HasColumnType("text");

                    b.Property<string>("NationalityCategoryAr")
                        .HasColumnType("text");

                    b.Property<string>("NewSide")
                        .HasColumnType("text");

                    b.Property<string>("NewSideAr")
                        .HasColumnType("text");

                    b.Property<string>("NoOfSubordinateEmployeePromotion2017")
                        .HasColumnType("text");

                    b.Property<string>("NoOfSubordinateEmployeePromotion2018")
                        .HasColumnType("text");

                    b.Property<string>("NoOfSubordinateEmployeePromotion2019")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfSubordinateTrainingHours2019")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfTrainingHours2019")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfTrainingHours2019Ar")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfYearsOfService")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfYearsOfServiceAr")
                        .HasColumnType("text");

                    b.Property<string>("NumberOfYearsOfServiceInSameField")
                        .HasColumnType("text");

                    b.Property<string>("Org1")
                        .HasColumnType("text");

                    b.Property<string>("Org1Ar")
                        .HasColumnType("text");

                    b.Property<string>("Org2")
                        .HasColumnType("text");

                    b.Property<string>("Org2Ar")
                        .HasColumnType("text");

                    b.Property<string>("Org3")
                        .HasColumnType("text");

                    b.Property<string>("Org3Ar")
                        .HasColumnType("text");

                    b.Property<string>("Org4")
                        .HasColumnType("text");

                    b.Property<string>("Org4Ar")
                        .HasColumnType("text");

                    b.Property<string>("Org5")
                        .HasColumnType("text");

                    b.Property<string>("Org5Ar")
                        .HasColumnType("text");

                    b.Property<string>("Org6")
                        .HasColumnType("text");

                    b.Property<string>("Org6Ar")
                        .HasColumnType("text");

                    b.Property<string>("Org7")
                        .HasColumnType("text");

                    b.Property<string>("Org7Ar")
                        .HasColumnType("text");

                    b.Property<string>("Org8")
                        .HasColumnType("text");

                    b.Property<string>("Org8Ar")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationCode")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationCodeAr")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationalUnit")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationalUnitAr")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceRewardsAndIncentiveIn2019And2018")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceRewardsAndIncentiveIn2019And2018Ar")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceSubordinatesRewardsAndIncentiveIn2019And2018")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceSubordinatesRewardsAndIncentiveIn2019And2018Ar")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceSubordinatesTrainingHoursIn2019")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceSubordinatesTrainingHoursIn2019Ar")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceTrainingHoursIn2019")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceTrainingHoursIn2019Ar")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("PositionAr")
                        .HasColumnType("text");

                    b.Property<string>("Promotions")
                        .HasColumnType("text");

                    b.Property<string>("Promotions2017")
                        .HasColumnType("text");

                    b.Property<string>("Promotions2017Ar")
                        .HasColumnType("text");

                    b.Property<string>("Promotions2018")
                        .HasColumnType("text");

                    b.Property<string>("Promotions2018Ar")
                        .HasColumnType("text");

                    b.Property<string>("Promotions2019")
                        .HasColumnType("text");

                    b.Property<string>("Promotions2019Ar")
                        .HasColumnType("text");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<string>("QualificationAr")
                        .HasColumnType("text");

                    b.Property<string>("RegularityUnit")
                        .HasColumnType("text");

                    b.Property<string>("RegularityUnitAr")
                        .HasColumnType("text");

                    b.Property<string>("ResultComparedEmp1")
                        .HasColumnType("text");

                    b.Property<string>("ResultComparedEmp2")
                        .HasColumnType("text");

                    b.Property<string>("ResultComparedEmp3")
                        .HasColumnType("text");

                    b.Property<string>("ResultComparedEmp4")
                        .HasColumnType("text");

                    b.Property<double?>("ResultComparedEmpValue1")
                        .HasColumnType("double precision");

                    b.Property<double?>("ResultComparedEmpValue2")
                        .HasColumnType("double precision");

                    b.Property<double?>("ResultComparedEmpValue3")
                        .HasColumnType("double precision");

                    b.Property<double?>("ResultComparedEmpValue4")
                        .HasColumnType("double precision");

                    b.Property<string>("ResultOfCaseStudy")
                        .HasColumnType("text");

                    b.Property<string>("ResultOfCaseStudyAr")
                        .HasColumnType("text");

                    b.Property<double?>("ResultOfEducationalQualification")
                        .HasColumnType("double precision");

                    b.Property<string>("ResultOfEducationalQualificationAr")
                        .HasColumnType("text");

                    b.Property<string>("ResultOfEmployeePerformance")
                        .HasColumnType("text");

                    b.Property<string>("ResultOfEmployeePerformanceAr")
                        .HasColumnType("text");

                    b.Property<string>("ResultOfScientificPerformnanceGoverment")
                        .HasColumnType("text");

                    b.Property<string>("ResultOfScientificPerformnanceGovermentAr")
                        .HasColumnType("text");

                    b.Property<string>("ResultOfTechnicalAssessment")
                        .HasColumnType("text");

                    b.Property<string>("ResultOfTechnicalAssessmentAr")
                        .HasColumnType("text");

                    b.Property<string>("ResultOfTechnicalAssessmentInSameField")
                        .HasColumnType("text");

                    b.Property<string>("ResultOfTechnicalAssessmentInSameFieldAr")
                        .HasColumnType("text");

                    b.Property<double?>("ResultOfTechnicalInterview")
                        .HasColumnType("double precision");

                    b.Property<double?>("ResultOfTheNumberOfYearsOfService")
                        .HasColumnType("double precision");

                    b.Property<string>("ResultOfTheNumberOfYearsOfServiceAr")
                        .HasColumnType("text");

                    b.Property<string>("RewardsAndIncentives2018")
                        .HasColumnType("text");

                    b.Property<string>("RewardsAndIncentives2018Ar")
                        .HasColumnType("text");

                    b.Property<string>("RewardsAndIncentives2019")
                        .HasColumnType("text");

                    b.Property<string>("RewardsAndIncentives2019Ar")
                        .HasColumnType("text");

                    b.Property<string>("ScientificAndSpecializedCertificate")
                        .HasColumnType("text");

                    b.Property<string>("ScientificAndSpecializedCertificateAr")
                        .HasColumnType("text");

                    b.Property<string>("ScientificAndSpecializedTechnicalInterview")
                        .HasColumnType("text");

                    b.Property<string>("ScientificAndSpecializedTechnicalInterviewAr")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<string>("SexAr")
                        .HasColumnType("text");

                    b.Property<string>("SocialStatus")
                        .HasColumnType("text");

                    b.Property<string>("SocialStatusAr")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubordinateGrievances2018")
                        .HasColumnType("text");

                    b.Property<string>("SubordinateGrievances2019")
                        .HasColumnType("text");

                    b.Property<string>("SubordinatePromotions2017")
                        .HasColumnType("text");

                    b.Property<string>("SubordinatePromotions2018")
                        .HasColumnType("text");

                    b.Property<string>("SubordinatePromotions2019")
                        .HasColumnType("text");

                    b.Property<string>("SubordinateRewardsAndIncentives2018")
                        .HasColumnType("text");

                    b.Property<string>("SubordinateRewardsAndIncentives2019")
                        .HasColumnType("text");

                    b.Property<string>("SubordinateViolations2018")
                        .HasColumnType("text");

                    b.Property<string>("SubordinateViolations2019")
                        .HasColumnType("text");

                    b.Property<double?>("TechnicalScore")
                        .HasColumnType("double precision");

                    b.Property<string>("TheChallenge")
                        .HasColumnType("text");

                    b.Property<string>("TheEmployeeNumberForTheLineManagerAr")
                        .HasColumnType("text");

                    b.Property<string>("TheNameOfTheLineManagerAr")
                        .HasColumnType("text");

                    b.Property<string>("TheSideAr")
                        .HasColumnType("text");

                    b.Property<string>("TotalNoOfExperience")
                        .HasColumnType("text");

                    b.Property<string>("TotalNoOfExperienceAr")
                        .HasColumnType("text");

                    b.Property<string>("TotalNoOfExperienceInSameJob")
                        .HasColumnType("text");

                    b.Property<string>("TotalNoOfExperienceInSameJobAr")
                        .HasColumnType("text");

                    b.Property<double?>("TotalPshycologicalAssessmentResult")
                        .HasColumnType("double precision");

                    b.Property<string>("TotalPshycologicalAssessmentResultAr")
                        .HasColumnType("text");

                    b.Property<double?>("TotalScore")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalTechnicalAssessmentResult")
                        .HasColumnType("double precision");

                    b.Property<string>("TotalTechnicalAssessmentResultAr")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfContract")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfContractAr")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfOrganizationalUnit")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfOrganizationalUnitAr")
                        .HasColumnType("text");

                    b.Property<string>("UserFullName")
                        .HasColumnType("text");

                    b.Property<string>("UserFullNameAr")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserJobTitle")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Violations2018")
                        .HasColumnType("text");

                    b.Property<string>("Violations2018Ar")
                        .HasColumnType("text");

                    b.Property<string>("Violations2019")
                        .HasColumnType("text");

                    b.Property<string>("Violations2019Ar")
                        .HasColumnType("text");

                    b.Property<string>("YearAr")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TASUserReport");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TableMetadata", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<bool>("CreateTable")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultDisplayColumnId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("EnableLegalEntityPermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ModuleId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentTableMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Query")
                        .HasColumnType("text");

                    b.Property<string>("Schema")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TableType")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("TableMetadata");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TableMetadataLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<bool>("CreateTable")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultDisplayColumnId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("EnableLegalEntityPermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentTableMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Query")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("Schema")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TableType")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("TableMetadataLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TaskIndexPageColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayFormat")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("TaskIndexPageTemplateId");

                    b.ToTable("TaskIndexPageColumn");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TaskIndexPageColumnLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayFormat")
                        .HasColumnType("text");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("TaskIndexPageTemplateId");

                    b.ToTable("TaskIndexPageColumnLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TaskIndexPageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAssignedToMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableAssignedToMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyTaskSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyTaskTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSummaryTabs")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexPageTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ParentReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RequestButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("TaskIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TaskIndexPageTemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAssignedToMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableAssignedToMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyTaskSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyTaskTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSummaryTabs")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexPageTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ParentReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("RequestButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("TaskIndexPageTemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TaskTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ActionButtonPosition")
                        .HasColumnType("integer");

                    b.Property<bool>("AllowPastStartDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowSLAChange")
                        .HasColumnType("boolean");

                    b.Property<string>("AssignedToUserText")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("BackgroundFileId")
                        .HasColumnType("text");

                    b.Property<string>("BannerFileId")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreateReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomMessageOnCreation")
                        .HasColumnType("text");

                    b.Property<string>("CustomMessageOnEdit")
                        .HasColumnType("text");

                    b.Property<string>("DataPermissionColumnId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionMappingUdfId")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionText")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionUdfMappingColumn")
                        .HasColumnType("text");

                    b.Property<int>("EditReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("EmailCopyTemplateCode")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCancelButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCustomMessageOnCreation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCustomMessageOnEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDataPermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDirectEmailAssignee")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableInlineComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableLegalEntityFilter")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePlanning")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePrintButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableReOpenButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRejectButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveAsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSequenceOrder")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTaskNumberManual")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTimeEntry")
                        .HasColumnType("boolean");

                    b.Property<int>("FormType")
                        .HasColumnType("integer");

                    b.Property<bool>("HideAttachmentInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideBanner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideCommentInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDescription")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDueDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDueDateInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideEmailInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideLogInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideNotificationInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HidePriority")
                        .HasColumnType("boolean");

                    b.Property<bool>("HidePriorityInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideProcessDiagramInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSLA")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideShareInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideStartDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideStatusInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSubject")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideTahsInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideTaskNumberInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideToolbar")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideVersionInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideWorkflowInHeader")
                        .HasColumnType("boolean");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsCancelReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleteReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescriptionMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNumberNotMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRejectReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectUnique")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("NotificationSubject")
                        .HasColumnType("text");

                    b.Property<int>("NumberGenerationType")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerUserText")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PostScript")
                        .HasColumnType("text");

                    b.Property<string>("PreScript")
                        .HasColumnType("text");

                    b.Property<string>("PrintButtonText")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<string>("RejectButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("RejectButtonText")
                        .HasColumnType("text");

                    b.Property<string>("RequestedByUserText")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("SLA")
                        .HasColumnType("interval");

                    b.Property<string>("SaveAsDraftCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("SubjectMappingUdfId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectText")
                        .HasColumnType("text");

                    b.Property<string>("SubjectUdfMappingColumn")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonText")
                        .HasColumnType("text");

                    b.Property<string>("TaskAssignedToTypeId")
                        .HasColumnType("text");

                    b.Property<string>("TaskIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TaskNoText")
                        .HasColumnType("text");

                    b.Property<int>("TaskTemplateType")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateColor")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PriorityId");

                    b.HasIndex("TaskAssignedToTypeId");

                    b.HasIndex("TaskIndexPageTemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("TaskTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TaskTemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ActionButtonPosition")
                        .HasColumnType("integer");

                    b.Property<bool>("AllowPastStartDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowSLAChange")
                        .HasColumnType("boolean");

                    b.Property<string>("AssignedToUserText")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("BackgroundFileId")
                        .HasColumnType("text");

                    b.Property<string>("BannerFileId")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreateReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomMessageOnCreation")
                        .HasColumnType("text");

                    b.Property<string>("CustomMessageOnEdit")
                        .HasColumnType("text");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("DataPermissionColumnId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionMappingUdfId")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionText")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionUdfMappingColumn")
                        .HasColumnType("text");

                    b.Property<int>("EditReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("EmailCopyTemplateCode")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCancelButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCustomMessageOnCreation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCustomMessageOnEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDataPermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDirectEmailAssignee")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableInlineComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableLegalEntityFilter")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePermission")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePlanning")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePrintButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableReOpenButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRejectButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveAsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSequenceOrder")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTaskNumberManual")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTimeEntry")
                        .HasColumnType("boolean");

                    b.Property<int>("FormType")
                        .HasColumnType("integer");

                    b.Property<bool>("HideAttachmentInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideBanner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideCommentInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDescription")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDueDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideDueDateInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideEmailInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideLogInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideNotificationInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("HidePriority")
                        .HasColumnType("boolean");

                    b.Property<bool>("HidePriorityInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideProcessDiagramInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSLA")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideShareInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideStartDate")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideStatusInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideSubject")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideTahsInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideTaskNumberInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideToolbar")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideVersionInHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideWorkflowInHeader")
                        .HasColumnType("boolean");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsCancelReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleteReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescriptionMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNumberNotMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRejectReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectMandatory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectUnique")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("NotificationSubject")
                        .HasColumnType("text");

                    b.Property<int>("NumberGenerationType")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerUserText")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PostScript")
                        .HasColumnType("text");

                    b.Property<string>("PreScript")
                        .HasColumnType("text");

                    b.Property<string>("PrintButtonText")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("RejectButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("RejectButtonText")
                        .HasColumnType("text");

                    b.Property<string>("RequestedByUserText")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("SLA")
                        .HasColumnType("interval");

                    b.Property<string>("SaveAsDraftCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("SubjectMappingUdfId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectText")
                        .HasColumnType("text");

                    b.Property<string>("SubjectUdfMappingColumn")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonText")
                        .HasColumnType("text");

                    b.Property<string>("TaskAssignedToTypeId")
                        .HasColumnType("text");

                    b.Property<string>("TaskIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TaskNoText")
                        .HasColumnType("text");

                    b.Property<int>("TaskTemplateType")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateColor")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PriorityId");

                    b.HasIndex("TaskAssignedToTypeId");

                    b.HasIndex("TaskIndexPageTemplateId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UdfTemplateId");

                    b.ToTable("TaskTemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("AllowedPortalIds")
                        .HasColumnType("text[]");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GroupCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("LogoId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TeamType")
                        .HasColumnType("integer");

                    b.Property<int>("TeamWorkAssignmentType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TeamLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("AllowedPortalIds")
                        .HasColumnType("text[]");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GroupCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TeamType")
                        .HasColumnType("integer");

                    b.Property<int>("TeamWorkAssignmentType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TeamLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TeamUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTeamOwner")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TeamUserLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTeamOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamUserLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Template", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("AllowedTagCategories")
                        .HasColumnType("text[]");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DomainId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Json")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ModuleId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("OtherAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PrintJson")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubDomainId")
                        .HasColumnType("text");

                    b.Property<string>("TableMetadataId")
                        .HasColumnType("text");

                    b.Property<int>("TableSelectionType")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateStageId")
                        .HasColumnType("text");

                    b.Property<int>("TemplateStatus")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateStepId")
                        .HasColumnType("text");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<string>("UdfTableMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("ViewType")
                        .HasColumnType("integer");

                    b.Property<string>("WorkFlowTemplateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SubDomainId");

                    b.HasIndex("TableMetadataId");

                    b.HasIndex("TemplateCategoryId");

                    b.HasIndex("TemplateStageId");

                    b.HasIndex("TemplateStepId");

                    b.HasIndex("UdfTableMetadataId");

                    b.HasIndex("UdfTemplateId");

                    b.HasIndex("WorkFlowTemplateId");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TemplateBusinessLogicLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionId")
                        .HasColumnType("text");

                    b.Property<int>("BusinessLogicExecutionType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("TemplateBusinessLogicLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TemplateCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("ModuleId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateCategoryType")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("TemplateCategory");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TemplateCategoryLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IconFileId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateCategoryType")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("TemplateCategoryLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TemplateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("AllowedTagCategories")
                        .HasColumnType("text[]");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DomainId")
                        .HasColumnType("text");

                    b.Property<string>("GroupCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("Json")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("OtherAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PrintJson")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubDomainId")
                        .HasColumnType("text");

                    b.Property<string>("TableMetadataId")
                        .HasColumnType("text");

                    b.Property<int>("TableSelectionType")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateStageId")
                        .HasColumnType("text");

                    b.Property<int>("TemplateStatus")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateStepId")
                        .HasColumnType("text");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<string>("UdfTableMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("UdfTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("ViewType")
                        .HasColumnType("integer");

                    b.Property<string>("WorkFlowTemplateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SubDomainId");

                    b.HasIndex("TableMetadataId");

                    b.HasIndex("TemplateCategoryId");

                    b.HasIndex("TemplateStageId");

                    b.HasIndex("TemplateStepId");

                    b.HasIndex("UdfTableMetadataId");

                    b.HasIndex("UdfTemplateId");

                    b.HasIndex("WorkFlowTemplateId");

                    b.ToTable("TemplateLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TemplateStage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentStageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("StageType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TemplateStage");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TrueComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("TrueComponent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TrueComponentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("TrueComponentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UdfPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string[]>("EditableBy")
                        .HasColumnType("text[]");

                    b.Property<string[]>("EditableContext")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string[]>("ViewableBy")
                        .HasColumnType("text[]");

                    b.Property<string[]>("ViewableContext")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("UdfPermission");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UdfPermissionHeader", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("CategoryCodes")
                        .HasColumnType("text[]");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryTemplateId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.Property<string[]>("TemplateCodes")
                        .HasColumnType("text[]");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("PrimaryTemplateId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("UdfPermissionHeader");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UdfPermissionHeaderLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("CategoryCodes")
                        .HasColumnType("text[]");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<int>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.Property<string[]>("TemplateCodes")
                        .HasColumnType("text[]");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("PrimaryTemplateId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("UdfPermissionHeaderLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UdfPermissionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string[]>("EditableBy")
                        .HasColumnType("text[]");

                    b.Property<string[]>("EditableContext")
                        .HasColumnType("text[]");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string[]>("ViewableBy")
                        .HasColumnType("text[]");

                    b.Property<string[]>("ViewableContext")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("UdfPermissionLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EnableRegularEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSummaryEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTwoFactorAuth")
                        .HasColumnType("boolean");

                    b.Property<string>("FaceDetectionDescriptors")
                        .HasColumnType("text");

                    b.Property<string>("ForgotPasswordOTP")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGuestUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string[]>("LegalEntityIds")
                        .HasColumnType("text[]");

                    b.Property<string>("LineManagerId")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OTPExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<bool>("PasswordChanged")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SignatureId")
                        .HasColumnType("text");

                    b.Property<string>("SponsorId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TwoFactorAuthOTP")
                        .HasColumnType("text");

                    b.Property<int?>("TwoFactorAuthType")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserRoleLogId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SponsorId");

                    b.HasIndex("UserRoleLogId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserDataPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId2")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int>("LogicalOperationType")
                        .HasColumnType("integer");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string[]>("Values")
                        .HasColumnType("text[]");

                    b.Property<string[]>("Values2")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("ColumnMetadataId2");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDataPermission");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserDataPermissionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId2")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<int>("LogicalOperationType")
                        .HasColumnType("integer");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string[]>("Values")
                        .HasColumnType("text[]");

                    b.Property<string[]>("Values2")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("ColumnMetadataId2");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDataPermissionLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserEntityPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EntityModelId")
                        .HasColumnType("text");

                    b.Property<int>("EntityModelType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserEntityId")
                        .HasColumnType("text");

                    b.Property<int>("UserEntityType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserEntityPermission");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserEntityPermissionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("EntityModelId")
                        .HasColumnType("text");

                    b.Property<int>("EntityModelType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserEntityId")
                        .HasColumnType("text");

                    b.Property<int>("UserEntityType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserEntityPermissionLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("AllowedPortalIds")
                        .HasColumnType("text[]");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserGroupLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string[]>("AllowedPortalIds")
                        .HasColumnType("text[]");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserGroupLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserGroupUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserGroupId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupUser");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserGroupUserLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserGroupId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroupUserLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserHierarchy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HierarchyMasterId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int>("LevelNo")
                        .HasColumnType("integer");

                    b.Property<int>("OptionNo")
                        .HasColumnType("integer");

                    b.Property<string>("ParentUserId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HierarchyMasterId");

                    b.HasIndex("ParentUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserHierarchy");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserHierarchyLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("HierarchyMasterId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int>("LevelNo")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<int>("OptionNo")
                        .HasColumnType("integer");

                    b.Property<string>("ParentUserId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HierarchyMasterId");

                    b.HasIndex("ParentUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserHierarchyLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserHierarchyPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HierarchyId")
                        .HasColumnType("text");

                    b.Property<int>("HierarchyPermission")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HierarchyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserHierarchyPermission");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserHierarchyPermissionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("HierarchyId")
                        .HasColumnType("text");

                    b.Property<int>("HierarchyPermission")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HierarchyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserHierarchyPermissionLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EnableRegularEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSummaryEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTwoFactorAuth")
                        .HasColumnType("boolean");

                    b.Property<string>("FaceDetectionDescriptors")
                        .HasColumnType("text");

                    b.Property<string>("ForgotPasswordOTP")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGuestUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string[]>("LegalEntityIds")
                        .HasColumnType("text[]");

                    b.Property<string>("LineManagerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OTPExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<bool>("PasswordChanged")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SignatureId")
                        .HasColumnType("text");

                    b.Property<string>("SponsorId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TwoFactorAuthOTP")
                        .HasColumnType("text");

                    b.Property<int?>("TwoFactorAuthType")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SponsorId");

                    b.ToTable("UserLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPagePreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DisablePageTour")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPagePreference");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPagePreferenceLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("DisablePageTour")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPagePreferenceLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string[]>("Permissions")
                        .HasColumnType("text[]");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserLogId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserLogId");

                    b.ToTable("UserPermission");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPermissionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string[]>("Permissions")
                        .HasColumnType("text[]");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissionLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPortal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPortal");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPortalLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPortalLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPromotion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("Promotion2017")
                        .HasColumnType("text");

                    b.Property<string>("Promotion2018")
                        .HasColumnType("text");

                    b.Property<string>("Promotion2019")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserPromotion");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserLogId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserLogId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleDataPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId2")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<int>("LogicalOperationType")
                        .HasColumnType("integer");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<string[]>("Values")
                        .HasColumnType("text[]");

                    b.Property<string[]>("Values2")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("ColumnMetadataId2");

                    b.HasIndex("PageId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleDataPermission");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleDataPermissionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId2")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<int>("LogicalOperationType")
                        .HasColumnType("integer");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<string[]>("Values")
                        .HasColumnType("text[]");

                    b.Property<string[]>("Values2")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("ColumnMetadataId2");

                    b.HasIndex("PageId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleDataPermissionLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserRoleLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRolePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string[]>("Permissions")
                        .HasColumnType("text[]");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<string>("UserRoleLogId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("UserRoleId");

                    b.HasIndex("UserRoleLogId");

                    b.ToTable("UserRolePermission");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRolePermissionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string[]>("Permissions")
                        .HasColumnType("text[]");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRolePermissionLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRolePortal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRolePortal");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRolePortalLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRolePortalLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleStageChild", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InboxStageId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string[]>("StatusCode")
                        .HasColumnType("text[]");

                    b.Property<string>("StatusLabel")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InboxStageId");

                    b.ToTable("UserRoleStageChild", "public");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleStageChildLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("InboxStageId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string[]>("StatusCode")
                        .HasColumnType("text[]");

                    b.Property<string>("StatusLabel")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InboxStageId");

                    b.ToTable("UserRoleStageChildLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleStageParent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ChildSequence")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InboxCode")
                        .HasColumnType("text");

                    b.Property<string>("InboxStageName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("StageSequence")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .HasColumnType("text");

                    b.Property<string>("TemplateShortName")
                        .HasColumnType("text");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleStageParent", "public");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleStageParentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ChildSequence")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("InboxCode")
                        .HasColumnType("text");

                    b.Property<string>("InboxStageName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("StageSequence")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .HasColumnType("text");

                    b.Property<string>("TemplateShortName")
                        .HasColumnType("text");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleStageParentLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleStatusLabelCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("Sequenece")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusCode")
                        .HasColumnType("text");

                    b.Property<string>("StatusLabelId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusLabelId");

                    b.ToTable("UserRoleStatusLabelCode", "public");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleUser");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleUserLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleUserLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClientIP")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SessionEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SessionStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserSession");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserSet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string[]>("Users")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserSet");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserSetLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataAction")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LegalEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string[]>("Users")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserSetLog", "log");
                });

            modelBuilder.Entity("UserUserRole", b =>
                {
                    b.Property<string>("UserRolesId")
                        .HasColumnType("text");

                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.HasKey("UserRolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserUserRole");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsRatingLog", b =>
                {
                    b.HasBaseType("Synergy.App.DataModel.NtsRating");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.ToTable("NtsRatingLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskVersion", b =>
                {
                    b.HasBaseType("Synergy.App.DataModel.NtsTask");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("VersionByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasIndex("NtsTaskId");

                    b.HasDiscriminator().HasValue("NtsTaskVersion");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProjectEmailSetupLog", b =>
                {
                    b.HasBaseType("Synergy.App.DataModel.ProjectEmailSetup");

                    b.Property<bool>("IsDatedLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVersionLatest")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LogEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LogStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LogVersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.ToTable("ProjectEmailSetupLog", "log");
                });

            modelBuilder.Entity("Synergy.App.DataModel.AdhocTaskComponent", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.Navigation("Component");

                    b.Navigation("NtsTask");
                });

            modelBuilder.Entity("Synergy.App.DataModel.AdhocTaskComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.Navigation("Component");

                    b.Navigation("NtsTask");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Agency", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Application", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.HasOne("Synergy.App.DataModel.JobAdvertisement", "JobAdvertisement")
                        .WithMany()
                        .HasForeignKey("JobAdvertisementId");

                    b.Navigation("CandidateProfile");

                    b.Navigation("JobAdvertisement");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationComputerProficiency", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationDrivingLicense", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationEducational", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationExperience", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationExperienceByCountry", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationExperienceByJob", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationExperienceBySector", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationJobCriteria", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationLanguageProficiency", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationProject", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationReferences", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationSalaryDetail", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationStateComment", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.HasOne("Synergy.App.DataModel.ApplicationState", "ApplicationState")
                        .WithMany()
                        .HasForeignKey("ApplicationStateId");

                    b.Navigation("Application");

                    b.Navigation("ApplicationState");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationStateTrack", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ApplicationState", "ApplicationState")
                        .WithMany()
                        .HasForeignKey("ApplicationStateId");

                    b.HasOne("Synergy.App.DataModel.ApplicationStatus", "ApplicationStatus")
                        .WithMany()
                        .HasForeignKey("ApplicationStatusId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.Navigation("ApplicationState");

                    b.Navigation("ApplicationStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ApplicationeExperienceByNature", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.AppointmentApprovalRequest", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessExecutionComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessLogicComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.BusinessRule", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateComputerProficiency", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateDrivingLicense", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateEducational", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateEvaluation", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateExperience", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateExperienceByCountry", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateExperienceByJob", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateExperienceByNature", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateExperienceByOther", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateExperienceBySector", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateLanguageProficiency", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateProfile", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateProject", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateReferences", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CandidateSalaryDetail", b =>
                {
                    b.HasOne("Synergy.App.DataModel.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ColumnMetadata", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ForeignKeyColumn")
                        .WithMany()
                        .HasForeignKey("ForeignKeyColumnId");

                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ForeignKeyDisplayColumn")
                        .WithMany()
                        .HasForeignKey("ForeignKeyDisplayColumnId");

                    b.HasOne("Synergy.App.DataModel.TableMetadata", "ForeignKeyTable")
                        .WithMany()
                        .HasForeignKey("ForeignKeyTableId");

                    b.HasOne("Synergy.App.DataModel.TableMetadata", "TableMetadata")
                        .WithMany()
                        .HasForeignKey("TableMetadataId");

                    b.Navigation("ForeignKeyColumn");

                    b.Navigation("ForeignKeyDisplayColumn");

                    b.Navigation("ForeignKeyTable");

                    b.Navigation("TableMetadata");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ColumnMetadataLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ForeignKeyColumn")
                        .WithMany()
                        .HasForeignKey("ForeignKeyColumnId");

                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ForeignKeyDisplayColumn")
                        .WithMany()
                        .HasForeignKey("ForeignKeyDisplayColumnId");

                    b.HasOne("Synergy.App.DataModel.TableMetadata", "ForeignKeyTable")
                        .WithMany()
                        .HasForeignKey("ForeignKeyTableId");

                    b.HasOne("Synergy.App.DataModel.TableMetadata", "TableMetadata")
                        .WithMany()
                        .HasForeignKey("TableMetadataId");

                    b.Navigation("ForeignKeyColumn");

                    b.Navigation("ForeignKeyDisplayColumn");

                    b.Navigation("ForeignKeyTable");

                    b.Navigation("TableMetadata");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CompleteEventComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Component", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ProcessDesign", "ProcessDesign")
                        .WithMany()
                        .HasForeignKey("ProcessDesignId");

                    b.Navigation("ProcessDesign");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ProcessDesign", "ProcessDesign")
                        .WithMany()
                        .HasForeignKey("ProcessDesignId");

                    b.Navigation("ProcessDesign");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ComponentParent", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("Synergy.App.DataModel.Component", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Component");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ComponentParentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("Synergy.App.DataModel.Component", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Component");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ComponentResult", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ComponentStatus")
                        .WithMany()
                        .HasForeignKey("ComponentStatusId");

                    b.HasOne("Synergy.App.DataModel.NtsService", "NtsService")
                        .WithMany()
                        .HasForeignKey("NtsServiceId");

                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.HasOne("Synergy.App.DataModel.ProcessDesign", "ProcessDesign")
                        .WithMany()
                        .HasForeignKey("ProcessDesignId");

                    b.HasOne("Synergy.App.DataModel.ProcessDesignResult", "ProcessDesignResult")
                        .WithMany()
                        .HasForeignKey("ProcessDesignResultId");

                    b.Navigation("Component");

                    b.Navigation("ComponentStatus");

                    b.Navigation("NtsService");

                    b.Navigation("NtsTask");

                    b.Navigation("ProcessDesign");

                    b.Navigation("ProcessDesignResult");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ComponentResultLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ComponentStatus")
                        .WithMany()
                        .HasForeignKey("ComponentStatusId");

                    b.HasOne("Synergy.App.DataModel.NtsService", "NtsService")
                        .WithMany()
                        .HasForeignKey("NtsServiceId");

                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.HasOne("Synergy.App.DataModel.ProcessDesign", "ProcessDesign")
                        .WithMany()
                        .HasForeignKey("ProcessDesignId");

                    b.HasOne("Synergy.App.DataModel.ProcessDesignResult", "ProcessDesignResult")
                        .WithMany()
                        .HasForeignKey("ProcessDesignResultId");

                    b.Navigation("Component");

                    b.Navigation("ComponentStatus");

                    b.Navigation("NtsService");

                    b.Navigation("NtsTask");

                    b.Navigation("ProcessDesign");

                    b.Navigation("ProcessDesignResult");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ContextVariable", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ContextVariable", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ContextVariableLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ContextVariable", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CustomIndexPageColumn", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.CustomIndexPageTemplate", "CustomIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("CustomIndexPageTemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("CustomIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CustomIndexPageColumnLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.CustomIndexPageTemplate", "CustomIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("CustomIndexPageTemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("CustomIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CustomIndexPageTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CustomIndexPageTemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CustomTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "LOVType")
                        .WithMany()
                        .HasForeignKey("LOVTypeId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("LOVType");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.CustomTemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "LOVType")
                        .WithMany()
                        .HasForeignKey("LOVTypeId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("LOVType");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.DecisionScriptComponent", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.DecisionScriptComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.DocumentPermission", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsNote", "NtsNote")
                        .WithMany()
                        .HasForeignKey("NoteId");

                    b.HasOne("Synergy.App.DataModel.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("PermittedUserGroupId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("PermittedUserId");

                    b.Navigation("NtsNote");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.DocumentPermissionLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsNote", "NtsNote")
                        .WithMany()
                        .HasForeignKey("NoteId");

                    b.HasOne("Synergy.App.DataModel.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("PermittedUserGroupId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("PermittedUserId");

                    b.Navigation("NtsNote");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.EmailComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ExecutionScriptComponent", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ExecutionScriptComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FalseComponent", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FalseComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FormIndexPageColumn", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.FormIndexPageTemplate", "FormIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("FormIndexPageTemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("FormIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FormIndexPageColumnLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.FormIndexPageTemplate", "FormIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("FormIndexPageTemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("FormIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FormIndexPageTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FormIndexPageTemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FormTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.FormIndexPageTemplate", "IndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("IndexPageTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("IndexPageTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.FormTemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.FormIndexPageTemplate", "IndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("IndexPageTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("IndexPageTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.GrantAccess", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.GrantAccessLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.HeadOfDepartment", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.HeadOfDepartmentOrganization", b =>
                {
                    b.HasOne("Synergy.App.DataModel.HeadOfDepartment", "HeadOfDepartment")
                        .WithMany()
                        .HasForeignKey("HeadOfDepartmentId");

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.HiringManager", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.HiringManagerOrganization", b =>
                {
                    b.HasOne("Synergy.App.DataModel.HiringManager", "HiringManager")
                        .WithMany()
                        .HasForeignKey("HiringManagerId");

                    b.Navigation("HiringManager");
                });

            modelBuilder.Entity("Synergy.App.DataModel.JobCriteria", b =>
                {
                    b.HasOne("Synergy.App.DataModel.JobAdvertisement", "JobAdvertisement")
                        .WithMany()
                        .HasForeignKey("JobAdvertisementId");

                    b.Navigation("JobAdvertisement");
                });

            modelBuilder.Entity("Synergy.App.DataModel.JobDescriptionCriteria", b =>
                {
                    b.HasOne("Synergy.App.DataModel.JobDescription", "JobDescription")
                        .WithMany()
                        .HasForeignKey("JobDescriptionId");

                    b.Navigation("JobDescription");
                });

            modelBuilder.Entity("Synergy.App.DataModel.LOV", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.LOVLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ListOfValue", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ListOfValue", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ManpowerRecruitmentSummaryVersion", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ManpowerRecruitmentSummary", "ManpowerRecruitmentSummary")
                        .WithMany()
                        .HasForeignKey("ManpowerRecruitmentSummaryId");

                    b.Navigation("ManpowerRecruitmentSummary");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ManpowerSummaryComment", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ManpowerRecruitmentSummary", "ManpowerRecruitmentSummary")
                        .WithMany()
                        .HasForeignKey("ManpowerRecruitmentSummaryId");

                    b.HasOne("Synergy.App.DataModel.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("ManpowerRecruitmentSummary");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Synergy.App.DataModel.MenuGroup", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId");

                    b.HasOne("Synergy.App.DataModel.SubModule", "SubModule")
                        .WithMany("MenuGroups")
                        .HasForeignKey("SubModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Synergy.App.DataModel.SubModuleLog", null)
                        .WithMany("MenuGroups")
                        .HasForeignKey("SubModuleLogId");

                    b.Navigation("Portal");

                    b.Navigation("SubModule");
                });

            modelBuilder.Entity("Synergy.App.DataModel.MenuGroupDetails", b =>
                {
                    b.HasOne("Synergy.App.DataModel.MenuGroup", "MenuGroup")
                        .WithMany()
                        .HasForeignKey("MenuGroupId");

                    b.Navigation("MenuGroup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.MenuGroupDetailsLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.MenuGroup", "MenuGroup")
                        .WithMany()
                        .HasForeignKey("MenuGroupId");

                    b.Navigation("MenuGroup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.MenuGroupLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId");

                    b.HasOne("Synergy.App.DataModel.SubModule", "SubModule")
                        .WithMany()
                        .HasForeignKey("SubModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portal");

                    b.Navigation("SubModule");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NoteIndexPageColumn", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.NoteIndexPageTemplate", "NoteIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("NoteIndexPageTemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("NoteIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NoteIndexPageColumnLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.NoteIndexPageTemplate", "NoteIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("NoteIndexPageTemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("NoteIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NoteIndexPageTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NoteIndexPageTemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NoteTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NoteIndexPageTemplate", "NoteIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("NoteIndexPageTemplateId");

                    b.HasOne("Synergy.App.DataModel.LOV", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("NoteIndexPageTemplate");

                    b.Navigation("Priority");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NoteTemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NoteIndexPageTemplate", "NoteIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("NoteIndexPageTemplateId");

                    b.HasOne("Synergy.App.DataModel.LOV", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("NoteIndexPageTemplate");

                    b.Navigation("Priority");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Notification", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NotificationTemplate", "NotificationTemplate")
                        .WithMany()
                        .HasForeignKey("NotificationTemplateId");

                    b.Navigation("NotificationTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NotificationLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NotificationTemplate", "NotificationTemplate")
                        .WithMany()
                        .HasForeignKey("NotificationTemplateId");

                    b.Navigation("NotificationTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NotificationTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NotificationTemplate", "ParentNotificationTemplate")
                        .WithMany()
                        .HasForeignKey("ParentNotificationTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("ParentNotificationTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NotificationTemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NotificationTemplate", "ParentNotificationTemplate")
                        .WithMany()
                        .HasForeignKey("ParentNotificationTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("ParentNotificationTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsGroupTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsGroup", "NtsGroup")
                        .WithMany()
                        .HasForeignKey("NtsGroupId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("NtsGroup");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsGroupUserGroup", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsGroup", "NtsGroup")
                        .WithMany()
                        .HasForeignKey("NtsGroupId");

                    b.HasOne("Synergy.App.DataModel.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId");

                    b.Navigation("NtsGroup");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsLogPageColumn", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsLogPageColumnLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNote", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "NoteAction")
                        .WithMany()
                        .HasForeignKey("NoteActionId");

                    b.HasOne("Synergy.App.DataModel.LOV", "NoteEvent")
                        .WithMany()
                        .HasForeignKey("NoteEventId");

                    b.HasOne("Synergy.App.DataModel.LOV", "NoteOwnerType")
                        .WithMany()
                        .HasForeignKey("NoteOwnerTypeId");

                    b.HasOne("Synergy.App.DataModel.LOV", "NotePriority")
                        .WithMany()
                        .HasForeignKey("NotePriorityId");

                    b.HasOne("Synergy.App.DataModel.LOV", "NoteStatus")
                        .WithMany()
                        .HasForeignKey("NoteStatusId");

                    b.HasOne("Synergy.App.DataModel.NoteTemplate", "NoteTemplate")
                        .WithMany()
                        .HasForeignKey("NoteTemplateId");

                    b.HasOne("Synergy.App.DataModel.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("Synergy.App.DataModel.NtsNote", "ParentNote")
                        .WithMany()
                        .HasForeignKey("ParentNoteId");

                    b.HasOne("Synergy.App.DataModel.NtsService", "ParentService")
                        .WithMany()
                        .HasForeignKey("ParentServiceId");

                    b.HasOne("Synergy.App.DataModel.NtsTask", "ParentTask")
                        .WithMany()
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("Synergy.App.DataModel.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("NoteAction");

                    b.Navigation("NoteEvent");

                    b.Navigation("NoteOwnerType");

                    b.Navigation("NotePriority");

                    b.Navigation("NoteStatus");

                    b.Navigation("NoteTemplate");

                    b.Navigation("OwnerUser");

                    b.Navigation("ParentNote");

                    b.Navigation("ParentService");

                    b.Navigation("ParentTask");

                    b.Navigation("RequestedByUser");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteComment", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "CommentedByUser")
                        .WithMany()
                        .HasForeignKey("CommentedByUserId");

                    b.HasOne("Synergy.App.DataModel.NtsNote", "NtsNote")
                        .WithMany()
                        .HasForeignKey("NtsNoteId");

                    b.HasOne("Synergy.App.DataModel.NtsNoteComment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("CommentedByUser");

                    b.Navigation("NtsNote");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteCommentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "CommentedByUser")
                        .WithMany()
                        .HasForeignKey("CommentedByUserId");

                    b.HasOne("Synergy.App.DataModel.NtsNote", "NtsNote")
                        .WithMany()
                        .HasForeignKey("NtsNoteId");

                    b.HasOne("Synergy.App.DataModel.NtsNoteComment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("CommentedByUser");

                    b.Navigation("NtsNote");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteCommentUser", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "CommentToUser")
                        .WithMany()
                        .HasForeignKey("CommentToUserId");

                    b.HasOne("Synergy.App.DataModel.NtsNoteComment", "NtsNoteComment")
                        .WithMany()
                        .HasForeignKey("NtsNoteCommentId");

                    b.Navigation("CommentToUser");

                    b.Navigation("NtsNoteComment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "NoteAction")
                        .WithMany()
                        .HasForeignKey("NoteActionId");

                    b.HasOne("Synergy.App.DataModel.LOV", "NoteEvent")
                        .WithMany()
                        .HasForeignKey("NoteEventId");

                    b.HasOne("Synergy.App.DataModel.LOV", "NoteOwnerType")
                        .WithMany()
                        .HasForeignKey("NoteOwnerTypeId");

                    b.HasOne("Synergy.App.DataModel.LOV", "NotePriority")
                        .WithMany()
                        .HasForeignKey("NotePriorityId");

                    b.HasOne("Synergy.App.DataModel.LOV", "NoteStatus")
                        .WithMany()
                        .HasForeignKey("NoteStatusId");

                    b.HasOne("Synergy.App.DataModel.NoteTemplate", "NoteTemplate")
                        .WithMany()
                        .HasForeignKey("NoteTemplateId");

                    b.HasOne("Synergy.App.DataModel.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("Synergy.App.DataModel.NtsNote", "ParentNote")
                        .WithMany()
                        .HasForeignKey("ParentNoteId");

                    b.HasOne("Synergy.App.DataModel.NtsService", "ParentService")
                        .WithMany()
                        .HasForeignKey("ParentServiceId");

                    b.HasOne("Synergy.App.DataModel.NtsTask", "ParentTask")
                        .WithMany()
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("Synergy.App.DataModel.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("NoteAction");

                    b.Navigation("NoteEvent");

                    b.Navigation("NoteOwnerType");

                    b.Navigation("NotePriority");

                    b.Navigation("NoteStatus");

                    b.Navigation("NoteTemplate");

                    b.Navigation("OwnerUser");

                    b.Navigation("ParentNote");

                    b.Navigation("ParentService");

                    b.Navigation("ParentTask");

                    b.Navigation("RequestedByUser");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNotePrecedence", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsNote", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNotePrecedenceLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsNote", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteShared", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "NoteSharedWithType")
                        .WithMany()
                        .HasForeignKey("NoteSharedWithTypeId");

                    b.HasOne("Synergy.App.DataModel.NtsNote", "NtsNote")
                        .WithMany()
                        .HasForeignKey("NtsNoteId");

                    b.HasOne("Synergy.App.DataModel.User", "SharedBy")
                        .WithMany()
                        .HasForeignKey("SharedByUserId");

                    b.HasOne("Synergy.App.DataModel.Team", "SharedWithTeam")
                        .WithMany()
                        .HasForeignKey("SharedWithTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "SharedWithUser")
                        .WithMany()
                        .HasForeignKey("SharedWithUserId");

                    b.Navigation("NoteSharedWithType");

                    b.Navigation("NtsNote");

                    b.Navigation("SharedBy");

                    b.Navigation("SharedWithTeam");

                    b.Navigation("SharedWithUser");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteSharedLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "NoteSharedWithType")
                        .WithMany()
                        .HasForeignKey("NoteSharedWithTypeId");

                    b.HasOne("Synergy.App.DataModel.NtsNote", "NtsNote")
                        .WithMany()
                        .HasForeignKey("NtsNoteId");

                    b.HasOne("Synergy.App.DataModel.User", "SharedBy")
                        .WithMany()
                        .HasForeignKey("SharedByUserId");

                    b.HasOne("Synergy.App.DataModel.Team", "SharedWithTeam")
                        .WithMany()
                        .HasForeignKey("SharedWithTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "SharedWithUser")
                        .WithMany()
                        .HasForeignKey("SharedWithUserId");

                    b.Navigation("NoteSharedWithType");

                    b.Navigation("NtsNote");

                    b.Navigation("SharedBy");

                    b.Navigation("SharedWithTeam");

                    b.Navigation("SharedWithUser");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteStatusTrack", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "NoteStatus")
                        .WithMany()
                        .HasForeignKey("NoteStatusId");

                    b.HasOne("Synergy.App.DataModel.NtsNote", "NtsNote")
                        .WithMany()
                        .HasForeignKey("NtsNoteId");

                    b.Navigation("NoteStatus");

                    b.Navigation("NtsNote");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsNoteStatusTrackLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "NoteStatus")
                        .WithMany()
                        .HasForeignKey("NoteStatusId");

                    b.HasOne("Synergy.App.DataModel.NtsNote", "NtsNote")
                        .WithMany()
                        .HasForeignKey("NtsNoteId");

                    b.Navigation("NoteStatus");

                    b.Navigation("NtsNote");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsRating", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "RatedByUser")
                        .WithMany()
                        .HasForeignKey("RatedByUserId");

                    b.Navigation("RatedByUser");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsService", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "LockStatus")
                        .WithMany()
                        .HasForeignKey("LockStatusId");

                    b.HasOne("Synergy.App.DataModel.Team", "OwnerTeam")
                        .WithMany()
                        .HasForeignKey("OwnerTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("Synergy.App.DataModel.NtsService", "ParentService")
                        .WithMany()
                        .HasForeignKey("ParentServiceId");

                    b.HasOne("Synergy.App.DataModel.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServiceAction")
                        .WithMany()
                        .HasForeignKey("ServiceActionId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServiceEvent")
                        .WithMany()
                        .HasForeignKey("ServiceEventId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServiceOwnerType")
                        .WithMany()
                        .HasForeignKey("ServiceOwnerTypeId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServicePriority")
                        .WithMany()
                        .HasForeignKey("ServicePriorityId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServiceStatus")
                        .WithMany()
                        .HasForeignKey("ServiceStatusId");

                    b.HasOne("Synergy.App.DataModel.ServiceTemplate", "ServiceTemplate")
                        .WithMany()
                        .HasForeignKey("ServiceTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.NtsNote", "UdfNote")
                        .WithMany()
                        .HasForeignKey("UdfNoteId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("LockStatus");

                    b.Navigation("OwnerTeam");

                    b.Navigation("OwnerUser");

                    b.Navigation("ParentService");

                    b.Navigation("RequestedByUser");

                    b.Navigation("ServiceAction");

                    b.Navigation("ServiceEvent");

                    b.Navigation("ServiceOwnerType");

                    b.Navigation("ServicePriority");

                    b.Navigation("ServiceStatus");

                    b.Navigation("ServiceTemplate");

                    b.Navigation("Template");

                    b.Navigation("UdfNote");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceComment", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "CommentedByUser")
                        .WithMany()
                        .HasForeignKey("CommentedByUserId");

                    b.HasOne("Synergy.App.DataModel.NtsService", "NtsService")
                        .WithMany()
                        .HasForeignKey("NtsServiceId");

                    b.HasOne("Synergy.App.DataModel.NtsServiceComment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("CommentedByUser");

                    b.Navigation("NtsService");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceCommentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "CommentedByUser")
                        .WithMany()
                        .HasForeignKey("CommentedByUserId");

                    b.HasOne("Synergy.App.DataModel.NtsService", "NtsService")
                        .WithMany()
                        .HasForeignKey("NtsServiceId");

                    b.HasOne("Synergy.App.DataModel.NtsServiceComment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("CommentedByUser");

                    b.Navigation("NtsService");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceCommentUser", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "CommentToUser")
                        .WithMany()
                        .HasForeignKey("CommentToUserId");

                    b.HasOne("Synergy.App.DataModel.NtsServiceComment", "NtsServiceComment")
                        .WithMany()
                        .HasForeignKey("NtsServiceCommentId");

                    b.Navigation("CommentToUser");

                    b.Navigation("NtsServiceComment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "LockStatus")
                        .WithMany()
                        .HasForeignKey("LockStatusId");

                    b.HasOne("Synergy.App.DataModel.Team", "OwnerTeam")
                        .WithMany()
                        .HasForeignKey("OwnerTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("Synergy.App.DataModel.NtsService", "ParentService")
                        .WithMany()
                        .HasForeignKey("ParentServiceId");

                    b.HasOne("Synergy.App.DataModel.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServiceAction")
                        .WithMany()
                        .HasForeignKey("ServiceActionId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServiceEvent")
                        .WithMany()
                        .HasForeignKey("ServiceEventId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServiceOwnerType")
                        .WithMany()
                        .HasForeignKey("ServiceOwnerTypeId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServicePriority")
                        .WithMany()
                        .HasForeignKey("ServicePriorityId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServiceStatus")
                        .WithMany()
                        .HasForeignKey("ServiceStatusId");

                    b.HasOne("Synergy.App.DataModel.ServiceTemplate", "ServiceTemplate")
                        .WithMany()
                        .HasForeignKey("ServiceTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.NtsNote", "UdfNote")
                        .WithMany()
                        .HasForeignKey("UdfNoteId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("LockStatus");

                    b.Navigation("OwnerTeam");

                    b.Navigation("OwnerUser");

                    b.Navigation("ParentService");

                    b.Navigation("RequestedByUser");

                    b.Navigation("ServiceAction");

                    b.Navigation("ServiceEvent");

                    b.Navigation("ServiceOwnerType");

                    b.Navigation("ServicePriority");

                    b.Navigation("ServiceStatus");

                    b.Navigation("ServiceTemplate");

                    b.Navigation("Template");

                    b.Navigation("UdfNote");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServicePrecedence", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServicePrecedenceLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceShared", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsService", "NtsService")
                        .WithMany()
                        .HasForeignKey("NtsServiceId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServiceSharedWithType")
                        .WithMany()
                        .HasForeignKey("ServiceSharedWithTypeId");

                    b.HasOne("Synergy.App.DataModel.User", "SharedBy")
                        .WithMany()
                        .HasForeignKey("SharedByUserId");

                    b.HasOne("Synergy.App.DataModel.Team", "SharedWithTeam")
                        .WithMany()
                        .HasForeignKey("SharedWithTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "SharedWithUser")
                        .WithMany()
                        .HasForeignKey("SharedWithUserId");

                    b.Navigation("NtsService");

                    b.Navigation("ServiceSharedWithType");

                    b.Navigation("SharedBy");

                    b.Navigation("SharedWithTeam");

                    b.Navigation("SharedWithUser");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceSharedLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsService", "NtsService")
                        .WithMany()
                        .HasForeignKey("NtsServiceId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServiceSharedWithType")
                        .WithMany()
                        .HasForeignKey("ServiceSharedWithTypeId");

                    b.HasOne("Synergy.App.DataModel.User", "SharedBy")
                        .WithMany()
                        .HasForeignKey("SharedByUserId");

                    b.HasOne("Synergy.App.DataModel.Team", "SharedWithTeam")
                        .WithMany()
                        .HasForeignKey("SharedWithTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "SharedWithUser")
                        .WithMany()
                        .HasForeignKey("SharedWithUserId");

                    b.Navigation("NtsService");

                    b.Navigation("ServiceSharedWithType");

                    b.Navigation("SharedBy");

                    b.Navigation("SharedWithTeam");

                    b.Navigation("SharedWithUser");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsServiceStatusTrackLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsService", "NtsService")
                        .WithMany()
                        .HasForeignKey("NtsServiceId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ServiceStatus")
                        .WithMany()
                        .HasForeignKey("ServiceStatusId");

                    b.Navigation("NtsService");

                    b.Navigation("ServiceStatus");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTask", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Team", "AssignedToTeam")
                        .WithMany()
                        .HasForeignKey("AssignedToTeamId");

                    b.HasOne("Synergy.App.DataModel.LOV", "AssignedToType")
                        .WithMany()
                        .HasForeignKey("AssignedToTypeId");

                    b.HasOne("Synergy.App.DataModel.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("Synergy.App.DataModel.LOV", "LockStatus")
                        .WithMany()
                        .HasForeignKey("LockStatusId");

                    b.HasOne("Synergy.App.DataModel.Team", "NextTaskAssignedToTeam")
                        .WithMany()
                        .HasForeignKey("NextTaskAssignedToTeamId");

                    b.HasOne("Synergy.App.DataModel.LOV", "NextTaskAssignedToType")
                        .WithMany()
                        .HasForeignKey("NextTaskAssignedToTypeId");

                    b.HasOne("Synergy.App.DataModel.User", "NextTaskAssignedToUser")
                        .WithMany()
                        .HasForeignKey("NextTaskAssignedToUserId");

                    b.HasOne("Synergy.App.DataModel.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("Synergy.App.DataModel.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskAction")
                        .WithMany()
                        .HasForeignKey("TaskActionId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskEvent")
                        .WithMany()
                        .HasForeignKey("TaskEventId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskOwnerType")
                        .WithMany()
                        .HasForeignKey("TaskOwnerTypeId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskPriority")
                        .WithMany()
                        .HasForeignKey("TaskPriorityId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId");

                    b.HasOne("Synergy.App.DataModel.TaskTemplate", "TaskTemplate")
                        .WithMany()
                        .HasForeignKey("TaskTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.NtsNote", "UdfNote")
                        .WithMany()
                        .HasForeignKey("UdfNoteId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("AssignedToTeam");

                    b.Navigation("AssignedToType");

                    b.Navigation("AssignedToUser");

                    b.Navigation("LockStatus");

                    b.Navigation("NextTaskAssignedToTeam");

                    b.Navigation("NextTaskAssignedToType");

                    b.Navigation("NextTaskAssignedToUser");

                    b.Navigation("OwnerUser");

                    b.Navigation("RequestedByUser");

                    b.Navigation("TaskAction");

                    b.Navigation("TaskEvent");

                    b.Navigation("TaskOwnerType");

                    b.Navigation("TaskPriority");

                    b.Navigation("TaskStatus");

                    b.Navigation("TaskTemplate");

                    b.Navigation("Template");

                    b.Navigation("UdfNote");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskAttachmentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.Navigation("NtsTask");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskComment", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "CommentedByUser")
                        .WithMany()
                        .HasForeignKey("CommentedByUserId");

                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.HasOne("Synergy.App.DataModel.NtsTaskComment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("CommentedByUser");

                    b.Navigation("NtsTask");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskCommentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "CommentedByUser")
                        .WithMany()
                        .HasForeignKey("CommentedByUserId");

                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.HasOne("Synergy.App.DataModel.NtsTaskComment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("CommentedByUser");

                    b.Navigation("NtsTask");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskCommentUser", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "CommentToUser")
                        .WithMany()
                        .HasForeignKey("CommentToUserId");

                    b.HasOne("Synergy.App.DataModel.NtsTaskComment", "NtsTaskComment")
                        .WithMany()
                        .HasForeignKey("NtsTaskCommentId");

                    b.Navigation("CommentToUser");

                    b.Navigation("NtsTaskComment");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Team", "AssignedToTeam")
                        .WithMany()
                        .HasForeignKey("AssignedToTeamId");

                    b.HasOne("Synergy.App.DataModel.LOV", "AssignedToType")
                        .WithMany()
                        .HasForeignKey("AssignedToTypeId");

                    b.HasOne("Synergy.App.DataModel.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("Synergy.App.DataModel.LOV", "LockStatus")
                        .WithMany()
                        .HasForeignKey("LockStatusId");

                    b.HasOne("Synergy.App.DataModel.Team", "NextTaskAssignedToTeam")
                        .WithMany()
                        .HasForeignKey("NextTaskAssignedToTeamId");

                    b.HasOne("Synergy.App.DataModel.LOV", "NextTaskAssignedToType")
                        .WithMany()
                        .HasForeignKey("NextTaskAssignedToTypeId");

                    b.HasOne("Synergy.App.DataModel.User", "NextTaskAssignedToUser")
                        .WithMany()
                        .HasForeignKey("NextTaskAssignedToUserId");

                    b.HasOne("Synergy.App.DataModel.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("Synergy.App.DataModel.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskAction")
                        .WithMany()
                        .HasForeignKey("TaskActionId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskEvent")
                        .WithMany()
                        .HasForeignKey("TaskEventId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskOwnerType")
                        .WithMany()
                        .HasForeignKey("TaskOwnerTypeId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskPriority")
                        .WithMany()
                        .HasForeignKey("TaskPriorityId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId");

                    b.HasOne("Synergy.App.DataModel.TaskTemplate", "TaskTemplate")
                        .WithMany()
                        .HasForeignKey("TaskTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.NtsNote", "UdfNote")
                        .WithMany()
                        .HasForeignKey("UdfNoteId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("AssignedToTeam");

                    b.Navigation("AssignedToType");

                    b.Navigation("AssignedToUser");

                    b.Navigation("LockStatus");

                    b.Navigation("NextTaskAssignedToTeam");

                    b.Navigation("NextTaskAssignedToType");

                    b.Navigation("NextTaskAssignedToUser");

                    b.Navigation("OwnerUser");

                    b.Navigation("RequestedByUser");

                    b.Navigation("TaskAction");

                    b.Navigation("TaskEvent");

                    b.Navigation("TaskOwnerType");

                    b.Navigation("TaskPriority");

                    b.Navigation("TaskStatus");

                    b.Navigation("TaskTemplate");

                    b.Navigation("Template");

                    b.Navigation("UdfNote");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskPrecedence", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.Navigation("NtsTask");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskPrecedenceLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.Navigation("NtsTask");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskShared", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "SharedBy")
                        .WithMany()
                        .HasForeignKey("SharedByUserId");

                    b.HasOne("Synergy.App.DataModel.Team", "SharedWithTeam")
                        .WithMany()
                        .HasForeignKey("SharedWithTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "SharedWithUser")
                        .WithMany()
                        .HasForeignKey("SharedWithUserId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskSharedWithType")
                        .WithMany()
                        .HasForeignKey("TaskSharedWithTypeId");

                    b.Navigation("SharedBy");

                    b.Navigation("SharedWithTeam");

                    b.Navigation("SharedWithUser");

                    b.Navigation("TaskSharedWithType");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskSharedLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "SharedBy")
                        .WithMany()
                        .HasForeignKey("SharedByUserId");

                    b.HasOne("Synergy.App.DataModel.Team", "SharedWithTeam")
                        .WithMany()
                        .HasForeignKey("SharedWithTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "SharedWithUser")
                        .WithMany()
                        .HasForeignKey("SharedWithUserId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskSharedWithType")
                        .WithMany()
                        .HasForeignKey("TaskSharedWithTypeId");

                    b.Navigation("SharedBy");

                    b.Navigation("SharedWithTeam");

                    b.Navigation("SharedWithUser");

                    b.Navigation("TaskSharedWithType");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskStatusTrackLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskAction")
                        .WithMany()
                        .HasForeignKey("TaskActionId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId");

                    b.Navigation("NtsTask");

                    b.Navigation("TaskAction");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskTimeEntry", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("NtsTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskTimeEntryLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("NtsTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Page", b =>
                {
                    b.HasOne("Synergy.App.DataModel.MenuGroup", "MenuGroup")
                        .WithMany()
                        .HasForeignKey("MenuGroupId");

                    b.HasOne("Synergy.App.DataModel.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("MenuGroup");

                    b.Navigation("Portal");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageDetails", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageDetailsLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageIndex", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageIndexColumn", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.PageIndex", "PageIndex")
                        .WithMany()
                        .HasForeignKey("PageIndexId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("PageIndex");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageIndexColumnLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.PageIndex", "PageIndex")
                        .WithMany()
                        .HasForeignKey("PageIndexId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("PageIndex");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageIndexLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageNote", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsCategory", "NtsCategory")
                        .WithMany()
                        .HasForeignKey("NtsCategoryId");

                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.Navigation("NtsCategory");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageNoteLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsCategory", "NtsCategory")
                        .WithMany()
                        .HasForeignKey("NtsCategoryId");

                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.Navigation("NtsCategory");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PageTemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Permission", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Synergy.App.DataModel.PermissionLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesign", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Action");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesignComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("Synergy.App.DataModel.ProcessDesign", "ProcessDesign")
                        .WithMany()
                        .HasForeignKey("ProcessDesignId");

                    b.Navigation("Component");

                    b.Navigation("ProcessDesign");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesignLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Action");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesignResult", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsService", "NtsService")
                        .WithMany()
                        .HasForeignKey("NtsServiceId");

                    b.HasOne("Synergy.App.DataModel.ProcessDesign", "ProcessDesign")
                        .WithMany()
                        .HasForeignKey("ProcessDesignId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ProcessDesignStatus")
                        .WithMany()
                        .HasForeignKey("ProcessDesignStatusId");

                    b.Navigation("NtsService");

                    b.Navigation("ProcessDesign");

                    b.Navigation("ProcessDesignStatus");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesignResultLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsService", "NtsService")
                        .WithMany()
                        .HasForeignKey("NtsServiceId");

                    b.HasOne("Synergy.App.DataModel.ProcessDesign", "ProcessDesign")
                        .WithMany()
                        .HasForeignKey("ProcessDesignId");

                    b.HasOne("Synergy.App.DataModel.LOV", "ProcessDesignStatus")
                        .WithMany()
                        .HasForeignKey("ProcessDesignStatusId");

                    b.Navigation("NtsService");

                    b.Navigation("ProcessDesign");

                    b.Navigation("ProcessDesignStatus");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesignVariable", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ProcessDesign", "ProcessDesign")
                        .WithMany()
                        .HasForeignKey("ProcessDesignId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("ProcessDesign");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProcessDesignVariableLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ProcessDesign", "ProcessDesign")
                        .WithMany()
                        .HasForeignKey("ProcessDesignId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("ProcessDesign");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProjectEmailSetup", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsService", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.RecTask", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Team", "Team")
                        .WithMany()
                        .HasForeignKey("AssigneeTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "AssgineeUser")
                        .WithMany()
                        .HasForeignKey("AssigneeUserId");

                    b.HasOne("Synergy.App.DataModel.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("Synergy.App.DataModel.User", "RequestedUser")
                        .WithMany()
                        .HasForeignKey("RequestedUserId");

                    b.HasOne("Synergy.App.DataModel.ListOfValue", "ListOfValue")
                        .WithMany()
                        .HasForeignKey("TaskStatus");

                    b.Navigation("AssgineeUser");

                    b.Navigation("ListOfValue");

                    b.Navigation("OwnerUser");

                    b.Navigation("RequestedUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Synergy.App.DataModel.RecTaskTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.TaskIndexPageTemplate", "TaskIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("TaskIndexPageTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("TaskIndexPageTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.RecTaskVersion", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Team", "Team")
                        .WithMany()
                        .HasForeignKey("AssigneeTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "AssgineeUser")
                        .WithMany()
                        .HasForeignKey("AssigneeUserId");

                    b.HasOne("Synergy.App.DataModel.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("Synergy.App.DataModel.User", "RequestedUser")
                        .WithMany()
                        .HasForeignKey("RequestedUserId");

                    b.HasOne("Synergy.App.DataModel.ListOfValue", "ListOfValue")
                        .WithMany()
                        .HasForeignKey("TaskStatus");

                    b.Navigation("AssgineeUser");

                    b.Navigation("ListOfValue");

                    b.Navigation("OwnerUser");

                    b.Navigation("RequestedUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Synergy.App.DataModel.RecruitmentCandidateElementInfo", b =>
                {
                    b.HasOne("Synergy.App.DataModel.RecruitmentPayElement", "RecruitmentPayElement")
                        .WithMany()
                        .HasForeignKey("ElementId");

                    b.Navigation("RecruitmentPayElement");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ServiceIndexPageColumn", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.ServiceIndexPageTemplate", "ServiceIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("ServiceIndexPageTemplateId");

                    b.HasOne("Synergy.App.DataModel.UdfPermissionHeader", "UdfPermissionHeader")
                        .WithMany()
                        .HasForeignKey("UdfPermissionHeaderId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("ServiceIndexPageTemplate");

                    b.Navigation("UdfPermissionHeader");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ServiceIndexPageColumnLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.ServiceIndexPageTemplate", "ServiceIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("ServiceIndexPageTemplateId");

                    b.HasOne("Synergy.App.DataModel.UdfPermissionHeader", "UdfPermissionHeader")
                        .WithMany()
                        .HasForeignKey("UdfPermissionHeaderId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("ServiceIndexPageTemplate");

                    b.Navigation("UdfPermissionHeader");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ServiceIndexPageTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ServiceIndexPageTemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ServiceTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Team", "DefaultOwnerTeam")
                        .WithMany()
                        .HasForeignKey("DefaultOwnerTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "DefaultOwnerUser")
                        .WithMany()
                        .HasForeignKey("DefaultOwnerUserId");

                    b.HasOne("Synergy.App.DataModel.Team", "DefaultRequesterTeam")
                        .WithMany()
                        .HasForeignKey("DefaultRequesterTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "DefaultRequesterUser")
                        .WithMany()
                        .HasForeignKey("DefaultRequesterUserId");

                    b.HasOne("Synergy.App.DataModel.LOV", "DefaultServiceOwnerType")
                        .WithMany()
                        .HasForeignKey("DefaultServiceOwnerTypeId");

                    b.HasOne("Synergy.App.DataModel.LOV", "DefaultServiceRequesterType")
                        .WithMany()
                        .HasForeignKey("DefaultServiceRequesterTypeId");

                    b.HasOne("Synergy.App.DataModel.LOV", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("Synergy.App.DataModel.ServiceIndexPageTemplate", "ServiceIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("ServiceIndexPageTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("DefaultOwnerTeam");

                    b.Navigation("DefaultOwnerUser");

                    b.Navigation("DefaultRequesterTeam");

                    b.Navigation("DefaultRequesterUser");

                    b.Navigation("DefaultServiceOwnerType");

                    b.Navigation("DefaultServiceRequesterType");

                    b.Navigation("Priority");

                    b.Navigation("ServiceIndexPageTemplate");

                    b.Navigation("Template");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ServiceTemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Team", "DefaultOwnerTeam")
                        .WithMany()
                        .HasForeignKey("DefaultOwnerTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "DefaultOwnerUser")
                        .WithMany()
                        .HasForeignKey("DefaultOwnerUserId");

                    b.HasOne("Synergy.App.DataModel.Team", "DefaultRequesterTeam")
                        .WithMany()
                        .HasForeignKey("DefaultRequesterTeamId");

                    b.HasOne("Synergy.App.DataModel.User", "DefaultRequesterUser")
                        .WithMany()
                        .HasForeignKey("DefaultRequesterUserId");

                    b.HasOne("Synergy.App.DataModel.LOV", "DefaultServiceOwnerType")
                        .WithMany()
                        .HasForeignKey("DefaultServiceOwnerTypeId");

                    b.HasOne("Synergy.App.DataModel.LOV", "DefaultServiceRequesterType")
                        .WithMany()
                        .HasForeignKey("DefaultServiceRequesterTypeId");

                    b.HasOne("Synergy.App.DataModel.LOV", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("Synergy.App.DataModel.ServiceIndexPageTemplate", "ServiceIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("ServiceIndexPageTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("DefaultOwnerTeam");

                    b.Navigation("DefaultOwnerUser");

                    b.Navigation("DefaultRequesterTeam");

                    b.Navigation("DefaultRequesterUser");

                    b.Navigation("DefaultServiceOwnerType");

                    b.Navigation("DefaultServiceRequesterType");

                    b.Navigation("Priority");

                    b.Navigation("ServiceIndexPageTemplate");

                    b.Navigation("Template");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.StartEventComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.StepTaskComponent", b =>
                {
                    b.HasOne("Synergy.App.DataModel.HierarchyMaster", "AssignedToHierarchyMaster")
                        .WithMany()
                        .HasForeignKey("AssignedToHierarchyMasterId");

                    b.HasOne("Synergy.App.DataModel.Team", "AssignedToTeam")
                        .WithMany()
                        .HasForeignKey("AssignedToTeamId");

                    b.HasOne("Synergy.App.DataModel.LOV", "AssignedToType")
                        .WithMany()
                        .HasForeignKey("AssignedToTypeId");

                    b.HasOne("Synergy.App.DataModel.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("Synergy.App.DataModel.LOV", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("Synergy.App.DataModel.TaskTemplate", "ReturnStepTask")
                        .WithMany()
                        .HasForeignKey("ReturnStepTaskId");

                    b.HasOne("Synergy.App.DataModel.TaskTemplate", "TaskTemplate")
                        .WithMany()
                        .HasForeignKey("TaskTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.TableMetadata", "UdfTableMetadata")
                        .WithMany()
                        .HasForeignKey("UdfTableMetadataId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("AssignedToHierarchyMaster");

                    b.Navigation("AssignedToTeam");

                    b.Navigation("AssignedToType");

                    b.Navigation("AssignedToUser");

                    b.Navigation("Component");

                    b.Navigation("Priority");

                    b.Navigation("ReturnStepTask");

                    b.Navigation("TaskTemplate");

                    b.Navigation("Template");

                    b.Navigation("UdfTableMetadata");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.StepTaskComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.HierarchyMaster", "AssignedToHierarchyMaster")
                        .WithMany()
                        .HasForeignKey("AssignedToHierarchyMasterId");

                    b.HasOne("Synergy.App.DataModel.Team", "AssignedToTeam")
                        .WithMany()
                        .HasForeignKey("AssignedToTeamId");

                    b.HasOne("Synergy.App.DataModel.LOV", "AssignedToType")
                        .WithMany()
                        .HasForeignKey("AssignedToTypeId");

                    b.HasOne("Synergy.App.DataModel.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("Synergy.App.DataModel.LOV", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("Synergy.App.DataModel.TaskTemplate", "ReturnStepTask")
                        .WithMany()
                        .HasForeignKey("ReturnStepTaskId");

                    b.HasOne("Synergy.App.DataModel.TaskTemplate", "TaskTemplate")
                        .WithMany()
                        .HasForeignKey("TaskTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.TableMetadata", "UdfTableMetadata")
                        .WithMany()
                        .HasForeignKey("UdfTableMetadataId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("AssignedToHierarchyMaster");

                    b.Navigation("AssignedToTeam");

                    b.Navigation("AssignedToType");

                    b.Navigation("AssignedToUser");

                    b.Navigation("Component");

                    b.Navigation("Priority");

                    b.Navigation("ReturnStepTask");

                    b.Navigation("TaskTemplate");

                    b.Navigation("Template");

                    b.Navigation("UdfTableMetadata");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.SubModule", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Module", "Module")
                        .WithMany("SubModules")
                        .HasForeignKey("ModuleId");

                    b.HasOne("Synergy.App.DataModel.ModuleLog", null)
                        .WithMany("SubModules")
                        .HasForeignKey("ModuleLogId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Synergy.App.DataModel.SubModuleLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TableMetadata", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TableMetadataLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TaskIndexPageColumn", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.TaskIndexPageTemplate", "TaskIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("TaskIndexPageTemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("TaskIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TaskIndexPageColumnLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.TaskIndexPageTemplate", "TaskIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("TaskIndexPageTemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("TaskIndexPageTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TaskIndexPageTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TaskIndexPageTemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TaskTemplate", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskAssignedToType")
                        .WithMany()
                        .HasForeignKey("TaskAssignedToTypeId");

                    b.HasOne("Synergy.App.DataModel.TaskIndexPageTemplate", "TaskIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("TaskIndexPageTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("Priority");

                    b.Navigation("TaskAssignedToType");

                    b.Navigation("TaskIndexPageTemplate");

                    b.Navigation("Template");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TaskTemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("Synergy.App.DataModel.LOV", "TaskAssignedToType")
                        .WithMany()
                        .HasForeignKey("TaskAssignedToTypeId");

                    b.HasOne("Synergy.App.DataModel.TaskIndexPageTemplate", "TaskIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("TaskIndexPageTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.Navigation("Priority");

                    b.Navigation("TaskAssignedToType");

                    b.Navigation("TaskIndexPageTemplate");

                    b.Navigation("Template");

                    b.Navigation("UdfTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TeamUser", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TeamUserLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.Template", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId");

                    b.HasOne("Synergy.App.DataModel.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.HasOne("Synergy.App.DataModel.LOV", "SubDomain")
                        .WithMany()
                        .HasForeignKey("SubDomainId");

                    b.HasOne("Synergy.App.DataModel.TableMetadata", "TableMetadata")
                        .WithMany()
                        .HasForeignKey("TableMetadataId");

                    b.HasOne("Synergy.App.DataModel.TemplateCategory", "TemplateCategory")
                        .WithMany()
                        .HasForeignKey("TemplateCategoryId");

                    b.HasOne("Synergy.App.DataModel.TemplateStage", "TemplateStage")
                        .WithMany()
                        .HasForeignKey("TemplateStageId");

                    b.HasOne("Synergy.App.DataModel.TemplateStage", "TemplateStep")
                        .WithMany()
                        .HasForeignKey("TemplateStepId");

                    b.HasOne("Synergy.App.DataModel.TableMetadata", "UdfTableMetadata")
                        .WithMany()
                        .HasForeignKey("UdfTableMetadataId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "WorkflowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkFlowTemplateId");

                    b.Navigation("Domain");

                    b.Navigation("Module");

                    b.Navigation("SubDomain");

                    b.Navigation("TableMetadata");

                    b.Navigation("TemplateCategory");

                    b.Navigation("TemplateStage");

                    b.Navigation("TemplateStep");

                    b.Navigation("UdfTableMetadata");

                    b.Navigation("UdfTemplate");

                    b.Navigation("WorkflowTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TemplateBusinessLogicLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId");

                    b.Navigation("Action");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TemplateCategory", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TemplateCategoryLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TemplateLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId");

                    b.HasOne("Synergy.App.DataModel.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.HasOne("Synergy.App.DataModel.LOV", "SubDomain")
                        .WithMany()
                        .HasForeignKey("SubDomainId");

                    b.HasOne("Synergy.App.DataModel.TableMetadata", "TableMetadata")
                        .WithMany()
                        .HasForeignKey("TableMetadataId");

                    b.HasOne("Synergy.App.DataModel.TemplateCategory", "TemplateCategory")
                        .WithMany()
                        .HasForeignKey("TemplateCategoryId");

                    b.HasOne("Synergy.App.DataModel.TemplateStage", "TemplateStage")
                        .WithMany()
                        .HasForeignKey("TemplateStageId");

                    b.HasOne("Synergy.App.DataModel.TemplateStage", "TemplateStep")
                        .WithMany()
                        .HasForeignKey("TemplateStepId");

                    b.HasOne("Synergy.App.DataModel.TableMetadata", "UdfTableMetadata")
                        .WithMany()
                        .HasForeignKey("UdfTableMetadataId");

                    b.HasOne("Synergy.App.DataModel.Template", "UdfTemplate")
                        .WithMany()
                        .HasForeignKey("UdfTemplateId");

                    b.HasOne("Synergy.App.DataModel.Template", "WorkflowTemplate")
                        .WithMany()
                        .HasForeignKey("WorkFlowTemplateId");

                    b.Navigation("Domain");

                    b.Navigation("Module");

                    b.Navigation("SubDomain");

                    b.Navigation("TableMetadata");

                    b.Navigation("TemplateCategory");

                    b.Navigation("TemplateStage");

                    b.Navigation("TemplateStep");

                    b.Navigation("UdfTableMetadata");

                    b.Navigation("UdfTemplate");

                    b.Navigation("WorkflowTemplate");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TrueComponent", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.TrueComponentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UdfPermission", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UdfPermissionHeader", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("Synergy.App.DataModel.Template", "PrimaryTemplate")
                        .WithMany()
                        .HasForeignKey("PrimaryTemplateId");

                    b.HasOne("Synergy.App.DataModel.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Page");

                    b.Navigation("PrimaryTemplate");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UdfPermissionHeaderLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("Synergy.App.DataModel.Template", "PrimaryTemplate")
                        .WithMany()
                        .HasForeignKey("PrimaryTemplateId");

                    b.HasOne("Synergy.App.DataModel.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Page");

                    b.Navigation("PrimaryTemplate");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UdfPermissionLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Synergy.App.DataModel.User", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId");

                    b.HasOne("Synergy.App.DataModel.UserRoleLog", null)
                        .WithMany("Users")
                        .HasForeignKey("UserRoleLogId");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserDataPermission", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata2")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId2");

                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("ColumnMetadata2");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserDataPermissionLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata2")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId2");

                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("ColumnMetadata2");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserGroupUser", b =>
                {
                    b.HasOne("Synergy.App.DataModel.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserGroupUserLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserHierarchy", b =>
                {
                    b.HasOne("Synergy.App.DataModel.HierarchyMaster", "HierarchyMaster")
                        .WithMany()
                        .HasForeignKey("HierarchyMasterId");

                    b.HasOne("Synergy.App.DataModel.User", "ParentUser")
                        .WithMany()
                        .HasForeignKey("ParentUserId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("HierarchyMaster");

                    b.Navigation("ParentUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserHierarchyLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.HierarchyMaster", "HierarchyMaster")
                        .WithMany()
                        .HasForeignKey("HierarchyMasterId");

                    b.HasOne("Synergy.App.DataModel.User", "ParentUser")
                        .WithMany()
                        .HasForeignKey("ParentUserId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("HierarchyMaster");

                    b.Navigation("ParentUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserHierarchyPermission", b =>
                {
                    b.HasOne("Synergy.App.DataModel.HierarchyMaster", "HierarchyMaster")
                        .WithMany()
                        .HasForeignKey("HierarchyId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("HierarchyMaster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserHierarchyPermissionLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.HierarchyMaster", "HierarchyMaster")
                        .WithMany()
                        .HasForeignKey("HierarchyId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("HierarchyMaster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.LOV", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPagePreference", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPagePreferenceLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPermission", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId");

                    b.HasOne("Synergy.App.DataModel.UserLog", null)
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserLogId");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPermissionLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPortal", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Portal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserPortalLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId");

                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Portal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRole", b =>
                {
                    b.HasOne("Synergy.App.DataModel.UserLog", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserLogId");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleDataPermission", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata2")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId2");

                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("Synergy.App.DataModel.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("ColumnMetadata2");

                    b.Navigation("Page");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleDataPermissionLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("Synergy.App.DataModel.ColumnMetadata", "ColumnMetadata2")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId2");

                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("Synergy.App.DataModel.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("ColumnMetadata2");

                    b.Navigation("Page");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRolePermission", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("Synergy.App.DataModel.UserRole", "UserRole")
                        .WithMany("UserRolePermissions")
                        .HasForeignKey("UserRoleId");

                    b.HasOne("Synergy.App.DataModel.UserRoleLog", null)
                        .WithMany("UserRolePermissions")
                        .HasForeignKey("UserRoleLogId");

                    b.Navigation("Page");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRolePermissionLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("Synergy.App.DataModel.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("Page");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRolePortal", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId");

                    b.HasOne("Synergy.App.DataModel.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("Portal");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRolePortalLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId");

                    b.HasOne("Synergy.App.DataModel.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("Portal");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleStageChild", b =>
                {
                    b.HasOne("Synergy.App.DataModel.UserRoleStageParent", "InboxStage")
                        .WithMany()
                        .HasForeignKey("InboxStageId");

                    b.Navigation("InboxStage");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleStageChildLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.UserRoleStageParent", "InboxStage")
                        .WithMany()
                        .HasForeignKey("InboxStageId");

                    b.Navigation("InboxStage");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleStageParent", b =>
                {
                    b.HasOne("Synergy.App.DataModel.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleStageParentLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleStatusLabelCode", b =>
                {
                    b.HasOne("Synergy.App.DataModel.UserRoleStageChild", "StatusLabel")
                        .WithMany()
                        .HasForeignKey("StatusLabelId");

                    b.Navigation("StatusLabel");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleUser", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Synergy.App.DataModel.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleUserLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Synergy.App.DataModel.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("UserUserRole", b =>
                {
                    b.HasOne("Synergy.App.DataModel.UserRole", null)
                        .WithMany()
                        .HasForeignKey("UserRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Synergy.App.DataModel.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsRatingLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsRating", null)
                        .WithOne()
                        .HasForeignKey("Synergy.App.DataModel.NtsRatingLog", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Synergy.App.DataModel.NtsTaskVersion", b =>
                {
                    b.HasOne("Synergy.App.DataModel.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.Navigation("NtsTask");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ProjectEmailSetupLog", b =>
                {
                    b.HasOne("Synergy.App.DataModel.ProjectEmailSetup", null)
                        .WithOne()
                        .HasForeignKey("Synergy.App.DataModel.ProjectEmailSetupLog", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Synergy.App.DataModel.Module", b =>
                {
                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("Synergy.App.DataModel.ModuleLog", b =>
                {
                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("Synergy.App.DataModel.SubModule", b =>
                {
                    b.Navigation("MenuGroups");
                });

            modelBuilder.Entity("Synergy.App.DataModel.SubModuleLog", b =>
                {
                    b.Navigation("MenuGroups");
                });

            modelBuilder.Entity("Synergy.App.DataModel.User", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserLog", b =>
                {
                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRole", b =>
                {
                    b.Navigation("UserRolePermissions");
                });

            modelBuilder.Entity("Synergy.App.DataModel.UserRoleLog", b =>
                {
                    b.Navigation("UserRolePermissions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
