// <auto-generated />
using System;
using CMS.Data.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CMS.Data.Repository.Migrations
{
    [DbContext(typeof(PostgreDbContext))]
    [Migration("20210326152103_S_20210327_2")]
    partial class S_20210327_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Npgsql:DefaultColumnCollation", "cms_collation_ci")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("CMS.Data.Model.AdhocTaskComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<int>("AssigneeType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("NtsTaskId");

                    b.ToTable("AdhocTaskComponent");
                });

            modelBuilder.Entity("CMS.Data.Model.Agency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Agency", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.Application", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AcademicCertificateId")
                        .HasColumnType("text");

                    b.Property<string>("AccommodationId")
                        .HasColumnType("text");

                    b.Property<string>("ActualExperience")
                        .HasColumnType("text");

                    b.Property<string>("ActualITSkills")
                        .HasColumnType("text");

                    b.Property<string>("ActualQualification")
                        .HasColumnType("text");

                    b.Property<string>("ActualSpecialization")
                        .HasColumnType("text");

                    b.Property<string>("ActualTechnical")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<long?>("Age")
                        .HasColumnType("bigint");

                    b.Property<string>("AgencyId")
                        .HasColumnType("text");

                    b.Property<long?>("AnnualLeave")
                        .HasColumnType("bigint");

                    b.Property<string>("AnyOtherLanguage")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationNo")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationState")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AppliedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AppointmentRemarks")
                        .HasColumnType("text");

                    b.Property<string>("BatchId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CertificateCourse")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhoneHome")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhoneLocal")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ContractStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CountriesWorked")
                        .HasColumnType("text");

                    b.Property<string>("CoverLetterId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrentAddress")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressCity")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressCountryId")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressHouse")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressState")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressStreet")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfArrival")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DescribeHowHeSuits")
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .HasColumnType("text");

                    b.Property<string>("DivisionId")
                        .HasColumnType("text");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("text");

                    b.Property<bool?>("EDApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("EDComment")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedCurrency")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedSalary")
                        .HasColumnType("text");

                    b.Property<string>("ExtraCurricular")
                        .HasColumnType("text");

                    b.Property<string>("FieldOfExposure")
                        .HasColumnType("text");

                    b.Property<string>("FinalOfferReference")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("GaecNo")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool?>("HRHeadApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("HRHeadComment")
                        .HasColumnType("text");

                    b.Property<string>("HeardAboutUsFrom")
                        .HasColumnType("text");

                    b.Property<string>("HiringManagerRemarks")
                        .HasColumnType("text");

                    b.Property<bool?>("HodApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("HodComment")
                        .HasColumnType("text");

                    b.Property<string>("InterviewByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InterviewDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InterviewSelectionFeedback")
                        .HasColumnType("integer");

                    b.Property<string>("InterviewVenue")
                        .HasColumnType("text");

                    b.Property<bool>("IsCopyofAcademicCertificates")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopyofIDPassport")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopyofOtherCertificates")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopyofQID")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatestOfferLetterSalarySlip")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLocalCandidate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMostRecentCV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMostRecentColorPhoto")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTrainee")
                        .HasColumnType("boolean");

                    b.Property<string>("JobAdvertisementId")
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("JobNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("JoiningNotLaterThan")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LeaveCycle")
                        .HasColumnType("text");

                    b.Property<string>("ManagerJobTitleAndNoOfSubordinate")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NationalityId")
                        .HasColumnType("text");

                    b.Property<string>("NatureOfWork")
                        .HasColumnType("text");

                    b.Property<string>("NetSalary")
                        .HasColumnType("text");

                    b.Property<string>("NetSalaryCurrency")
                        .HasColumnType("text");

                    b.Property<string>("NewPostJustification")
                        .HasColumnType("text");

                    b.Property<string>("NextOfKin")
                        .HasColumnType("text");

                    b.Property<string>("NextOfKinEmail")
                        .HasColumnType("text");

                    b.Property<string>("NextOfKinPhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("NextOfKinRelationship")
                        .HasColumnType("text");

                    b.Property<int?>("NoOfChildren")
                        .HasColumnType("integer");

                    b.Property<string>("NoticePeriod")
                        .HasColumnType("text");

                    b.Property<string>("OfferDesigination")
                        .HasColumnType("text");

                    b.Property<string>("OfferGrade")
                        .HasColumnType("text");

                    b.Property<string>("OfferSignedBy")
                        .HasColumnType("text");

                    b.Property<string>("OptionForAnotherPosition")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationWorked")
                        .HasColumnType("text");

                    b.Property<string>("OtherAllowances")
                        .HasColumnType("text");

                    b.Property<string>("OtherAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("OtherBenefits")
                        .HasColumnType("text");

                    b.Property<string>("OtherCertificateId")
                        .HasColumnType("text");

                    b.Property<string>("OtherCountryVisa")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OtherCountryVisaExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OtherCountryVisaType")
                        .HasColumnType("text");

                    b.Property<string>("OtherDesignation")
                        .HasColumnType("text");

                    b.Property<string>("OtherNextOfKin")
                        .HasColumnType("text");

                    b.Property<string>("OtherNextOfKinEmail")
                        .HasColumnType("text");

                    b.Property<string>("OtherNextOfKinPhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("OtherNextOfKinRelationship")
                        .HasColumnType("text");

                    b.Property<string>("OtherVisaType")
                        .HasColumnType("text");

                    b.Property<string>("PassportAttachmentId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PassportExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PassportIssueCountryId")
                        .HasColumnType("text");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<string>("PassportStatusId")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressCity")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressCountryId")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressHouse")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressState")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("PhotoId")
                        .HasColumnType("text");

                    b.Property<bool?>("PlanningApproval")
                        .HasColumnType("boolean");

                    b.Property<string>("PlanningComment")
                        .HasColumnType("text");

                    b.Property<string>("PositionsWorked")
                        .HasColumnType("text");

                    b.Property<string>("QIDAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("QatarId")
                        .HasColumnType("text");

                    b.Property<string>("QatarNocAvailable")
                        .HasColumnType("text");

                    b.Property<string>("QatarNocNotAvailableReason")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("ReportingToId")
                        .HasColumnType("text");

                    b.Property<string>("RequirementExperience")
                        .HasColumnType("text");

                    b.Property<string>("RequirementITSkills")
                        .HasColumnType("text");

                    b.Property<string>("RequirementQualification")
                        .HasColumnType("text");

                    b.Property<string>("RequirementSpecialization")
                        .HasColumnType("text");

                    b.Property<string>("RequirementTechnical")
                        .HasColumnType("text");

                    b.Property<string>("ResumeId")
                        .HasColumnType("text");

                    b.Property<string>("SalaryOnAppointment")
                        .HasColumnType("text");

                    b.Property<bool?>("SalaryRevision")
                        .HasColumnType("boolean");

                    b.Property<double?>("SalaryRevisionAmount")
                        .HasColumnType("double precision");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.Property<string>("SelectedThroughId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceCompletion")
                        .HasColumnType("bigint");

                    b.Property<string>("Signature")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SignatureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SourceFrom")
                        .HasColumnType("text");

                    b.Property<string>("Sourcing")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeRequiredToJoin")
                        .HasColumnType("integer");

                    b.Property<string>("TitleId")
                        .HasColumnType("text");

                    b.Property<double?>("TotalWorkExperience")
                        .HasColumnType("double precision");

                    b.Property<string>("TrainingsUndergone")
                        .HasColumnType("text");

                    b.Property<string>("TravelOriginAndDestination")
                        .HasColumnType("text");

                    b.Property<string>("VehicleTransport")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("VisaCategory")
                        .HasColumnType("text");

                    b.Property<string>("VisaCountry")
                        .HasColumnType("text");

                    b.Property<DateTime?>("VisaExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VisaType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("WitnessDate1")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("WitnessDate2")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WitnessDesignation1")
                        .HasColumnType("text");

                    b.Property<string>("WitnessDesignation2")
                        .HasColumnType("text");

                    b.Property<string>("WitnessGAEC1")
                        .HasColumnType("text");

                    b.Property<string>("WitnessGAEC2")
                        .HasColumnType("text");

                    b.Property<string>("WitnessName1")
                        .HasColumnType("text");

                    b.Property<string>("WitnessName2")
                        .HasColumnType("text");

                    b.Property<string>("WorkerBatchId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.HasIndex("JobAdvertisementId");

                    b.ToTable("Application", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationBeneficiary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double?>("Ratio")
                        .HasColumnType("double precision");

                    b.Property<string>("Relationship")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ApplicationBeneficiary", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationComputerProficiency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProficiencyLevel")
                        .HasColumnType("text");

                    b.Property<string>("Program")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationComputerProficiency", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationDrivingLicense", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LicenseType")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ValidUpTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationDrivingLicense", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationEducational", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<string>("EducationType")
                        .HasColumnType("text");

                    b.Property<string>("Institute")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Marks")
                        .HasColumnType("text");

                    b.Property<string>("OtherEducationType")
                        .HasColumnType("text");

                    b.Property<string>("OtherQualification")
                        .HasColumnType("text");

                    b.Property<string>("OtherSpecialization")
                        .HasColumnType("text");

                    b.Property<string>("PassingYear")
                        .HasColumnType("text");

                    b.Property<string>("QualificationId")
                        .HasColumnType("text");

                    b.Property<int>("QualificationType")
                        .HasColumnType("integer");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SpecializationId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationEducational", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationExperience", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("Employer")
                        .HasColumnType("text");

                    b.Property<DateTime?>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationExperience", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationExperienceByCountry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationExperienceByCountry", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationExperienceByJob", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationExperienceByJob", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationExperienceByOther", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("OtherTypeId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ApplicationExperienceByOther", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationExperienceBySector", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Industry")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationExperienceBySector", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationJobCriteria", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Criteria")
                        .HasColumnType("text");

                    b.Property<string>("CriteriaType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("Weightage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationJobCriteria", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationLanguageProficiency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProficiencyLevel")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationLanguageProficiency", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationProject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("Client")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ConstructionPeriodFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ConstructionPeriodTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Consultant")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationProject", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationReferences", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationReferences", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationSalaryDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("IndianSalary")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("NetSalary")
                        .HasColumnType("double precision");

                    b.Property<double?>("OtherAllowances")
                        .HasColumnType("double precision");

                    b.Property<double?>("OverseasSalary")
                        .HasColumnType("double precision");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationSalaryDetail", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ApplicationState", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationStateComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationStateId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ApplicationStateId");

                    b.ToTable("ApplicationStateComment", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationStateTrack", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationStateId")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationStatusCode")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationStatusId")
                        .HasColumnType("text");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskReferenceId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationStateId");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("ChangedBy");

                    b.ToTable("ApplicationStateTrack", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatus", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationeExperienceByNature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NatureOfWork")
                        .HasColumnType("text");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationeExperienceByNature", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.AppointmentApprovalRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AcceptedSalary")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ApproverAction")
                        .HasColumnType("integer");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FamilyStatus")
                        .HasColumnType("text");

                    b.Property<string>("InterviewConductedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InterviewDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InterviewVenue")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JustificationCommentForNewPost")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LeaveCycle")
                        .HasColumnType("text");

                    b.Property<string>("OtherBenefits")
                        .HasColumnType("text");

                    b.Property<string>("PositionToWhichSelected")
                        .HasColumnType("text");

                    b.Property<string>("RemarksByHr")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("SelectedAgainstVacanceOrNewPost")
                        .HasColumnType("text");

                    b.Property<string>("SelectedCandidate")
                        .HasColumnType("text");

                    b.Property<string>("SelectedSource")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("AppointmentApprovalRequest", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.Batch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BatchStatus")
                        .HasColumnType("text");

                    b.Property<int?>("BatchType")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HeadOfDepartment")
                        .HasColumnType("text");

                    b.Property<string>("HiringManager")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetBatchCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TargetHiringDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Batch", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateComputerProficiency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProficiencyLevel")
                        .HasColumnType("text");

                    b.Property<string>("Program")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateComputerProficiency", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateDrivingLicense", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LicenseType")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ValidUpTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateDrivingLicense", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateEducational", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<string>("EducationType")
                        .HasColumnType("text");

                    b.Property<string>("Institute")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Marks")
                        .HasColumnType("text");

                    b.Property<string>("OtherEducationType")
                        .HasColumnType("text");

                    b.Property<string>("OtherQualification")
                        .HasColumnType("text");

                    b.Property<string>("OtherSpecialization")
                        .HasColumnType("text");

                    b.Property<string>("PassingYear")
                        .HasColumnType("text");

                    b.Property<string>("QualificationId")
                        .HasColumnType("text");

                    b.Property<int>("QualificationType")
                        .HasColumnType("integer");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SpecializationId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateEducational", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateEvaluation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EvaluationName")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationScale1")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationScale2")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationScale3")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEvaluationScale1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEvaluationScale2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEvaluationScale3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Marks")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("CandidateEvaluation", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateExperience", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("Employer")
                        .HasColumnType("text");

                    b.Property<DateTime?>("From")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("To")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateExperience", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateExperienceByCountry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateExperienceByCountry", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateExperienceByJob", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateExperienceByJob", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateExperienceByNature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NatureOfWork")
                        .HasColumnType("text");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateExperienceByNature", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateExperienceByOther", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("OtherTypeId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateExperienceByOther", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateExperienceBySector", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Industry")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("NoOfYear")
                        .HasColumnType("double precision");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateExperienceBySector", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateLanguageProficiency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProficiencyLevel")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateLanguageProficiency", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AcademicCertificateId")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<long?>("Age")
                        .HasColumnType("bigint");

                    b.Property<string>("AgencyId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("text");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhoneHome")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhoneLocal")
                        .HasColumnType("text");

                    b.Property<string>("CoverLetterId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrentAddress")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressCity")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressCountryId")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressHouse")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressState")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedCurrency")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedSalary")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("HeardAboutUsFrom")
                        .HasColumnType("text");

                    b.Property<bool>("IsCopyofAcademicCertificates")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopyofIDPassport")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopyofOtherCertificates")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCopyofQID")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatestOfferLetterSalarySlip")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMostRecentCV")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMostRecentColorPhoto")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ManagerJobTitleAndNoOfSubordinate")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NationalityId")
                        .HasColumnType("text");

                    b.Property<string>("NetSalary")
                        .HasColumnType("text");

                    b.Property<string>("NetSalaryCurrency")
                        .HasColumnType("text");

                    b.Property<int?>("NoOfChildren")
                        .HasColumnType("integer");

                    b.Property<string>("NoticePeriod")
                        .HasColumnType("text");

                    b.Property<string>("OptionForAnotherPosition")
                        .HasColumnType("text");

                    b.Property<string>("OtherAllowances")
                        .HasColumnType("text");

                    b.Property<string>("OtherCertificateId")
                        .HasColumnType("text");

                    b.Property<string>("OtherCountryVisa")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OtherCountryVisaExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OtherCountryVisaType")
                        .HasColumnType("text");

                    b.Property<string>("OtherDesignation")
                        .HasColumnType("text");

                    b.Property<string>("OtherVisaType")
                        .HasColumnType("text");

                    b.Property<string>("PassportAttachmentId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PassportExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PassportIssueCountryId")
                        .HasColumnType("text");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<string>("PassportStatusId")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressCity")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressCountryId")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressHouse")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressState")
                        .HasColumnType("text");

                    b.Property<string>("PermanentAddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("PhotoId")
                        .HasColumnType("text");

                    b.Property<string>("QIDAttachmentId")
                        .HasColumnType("text");

                    b.Property<string>("QatarId")
                        .HasColumnType("text");

                    b.Property<string>("QatarNocAvailable")
                        .HasColumnType("text");

                    b.Property<string>("QatarNocNotAvailableReason")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("ResumeId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("Signature")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SignatureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SourceFrom")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeRequiredToJoin")
                        .HasColumnType("integer");

                    b.Property<string>("TitleId")
                        .HasColumnType("text");

                    b.Property<double?>("TotalWorkExperience")
                        .HasColumnType("double precision");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<string>("VisaCountry")
                        .HasColumnType("text");

                    b.Property<DateTime?>("VisaExpiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VisaType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CandidateProfile", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateProject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("Client")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ConstructionPeriodFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ConstructionPeriodTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Consultant")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateProject", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateReferences", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateReferences", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateSalaryDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CandidateProfileId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("IndianSalary")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("NetSalary")
                        .HasColumnType("double precision");

                    b.Property<double?>("OtherAllowances")
                        .HasColumnType("double precision");

                    b.Property<double?>("OverseasSalary")
                        .HasColumnType("double precision");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateProfileId");

                    b.ToTable("CandidateSalaryDetail", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ColumnMetadata", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string>("ForeignKeyColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyColumnName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyConstraintName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyDisplayColumnAlias")
                        .HasColumnType("text");

                    b.Property<int>("ForeignKeyDisplayColumnDataType")
                        .HasColumnType("integer");

                    b.Property<string>("ForeignKeyDisplayColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyDisplayColumnLabelName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyDisplayColumnName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyDisplayColumnReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyTableId")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyTableName")
                        .HasColumnType("text");

                    b.Property<string>("ForeignKeyTableSchemaName")
                        .HasColumnType("text");

                    b.Property<bool>("HideForeignKeyTableColumns")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefaultDisplayColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKey")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHiddenColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLogColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimaryKey")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferenceColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUdfColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUniqueColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVirtualColumn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVirtualForeignKey")
                        .HasColumnType("boolean");

                    b.Property<string>("LabelName")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceTableName")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceTableSchemaName")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TableMetadataId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ForeignKeyColumnId");

                    b.HasIndex("ForeignKeyDisplayColumnId");

                    b.HasIndex("ForeignKeyTableId");

                    b.HasIndex("TableMetadataId");

                    b.ToTable("ColumnMetadata");
                });

            modelBuilder.Entity("CMS.Data.Model.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonMobile")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CultureInfo")
                        .HasColumnType("text");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("text");

                    b.Property<string>("DateFormat")
                        .HasColumnType("text");

                    b.Property<string>("DateTimeFormat")
                        .HasColumnType("text");

                    b.Property<string>("DefaultEmailTemplate")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LicenseKey")
                        .HasColumnType("text");

                    b.Property<string>("LogoFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLocal")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactMobile")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactMobile")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactPhone")
                        .HasColumnType("text");

                    b.Property<bool?>("SendCompanyWelcome")
                        .HasColumnType("boolean");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SmsGateway")
                        .HasColumnType("text");

                    b.Property<string>("SmsPassword")
                        .HasColumnType("text");

                    b.Property<string>("SmsSenderName")
                        .HasColumnType("text");

                    b.Property<string>("SmsUserId")
                        .HasColumnType("text");

                    b.Property<string>("SmtpFromId")
                        .HasColumnType("text");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("text");

                    b.Property<string>("SmtpPassword")
                        .HasColumnType("text");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("integer");

                    b.Property<string>("SmtpSenderName")
                        .HasColumnType("text");

                    b.Property<string>("SmtpUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("CMS.Data.Model.Component", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<int>("ComponentType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProcessDesignId");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("CMS.Data.Model.CustomTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionName")
                        .HasColumnType("text");

                    b.Property<string>("AreaName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ControllerName")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Parameter")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("CustomTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.DecisionScriptComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("DecisionScriptComponent");
                });

            modelBuilder.Entity("CMS.Data.Model.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<byte[]>("Content")
                        .HasColumnType("bytea");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("CMS.Data.Model.Email", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BCC")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("CC")
                        .HasColumnType("text");

                    b.Property<string>("CalendarInvitationType")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DisableDefaultEmailTemplate")
                        .HasColumnType("boolean");

                    b.Property<int>("EmailStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<bool>("IsAsync")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncludeAttachment")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceTemplateCode")
                        .HasColumnType("text");

                    b.Property<int?>("ReferenceType")
                        .HasColumnType("integer");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<bool?>("SendToOriginalRecipient")
                        .HasColumnType("boolean");

                    b.Property<string>("SenderName")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceNo")
                        .HasColumnType("bigint");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowOriginalSender")
                        .HasColumnType("boolean");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("text");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("integer");

                    b.Property<string>("SmtpUserId")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("CMS.Data.Model.EmailSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("text");

                    b.Property<string>("SmtpPassword")
                        .HasColumnType("text");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("integer");

                    b.Property<string>("SmtpSenderName")
                        .HasColumnType("text");

                    b.Property<string>("SmtpUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EmailSetting", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ExecutionScriptComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Script")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("ExecutionScriptComponent");
                });

            modelBuilder.Entity("CMS.Data.Model.FalseComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("FalseComponent");
                });

            modelBuilder.Entity("CMS.Data.Model.File", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AnnotationsText")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentDescription")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentType")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContentBase64")
                        .HasColumnType("text");

                    b.Property<long>("ContentLength")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileExtension")
                        .HasColumnType("text");

                    b.Property<string>("FileExtractedText")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFileViewableFormat")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LinkId")
                        .HasColumnType("text");

                    b.Property<string>("MongoFileId")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int?>("ReferenceTypeCode")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceTypeId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SnapshotMongoId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("File");
                });

            modelBuilder.Entity("CMS.Data.Model.FormIndexPageColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("FormIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("FormIndexPageTemplateId");

                    b.ToTable("FormIndexPageColumn");
                });

            modelBuilder.Entity("CMS.Data.Model.FormIndexPageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexPageTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ParentReferenceId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.ToTable("FormIndexPageTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.FormTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<int>("CreateReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EditReturnType")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveButton")
                        .HasColumnType("boolean");

                    b.Property<string>("IndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PostScript")
                        .HasColumnType("text");

                    b.Property<string>("PreScript")
                        .HasColumnType("text");

                    b.Property<string>("SaveButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IndexPageTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("FormTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.HeadOfDepartment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("DesignationId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("GAECNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HeadOfDepartment", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.HeadOfDepartmentOrganization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HeadOfDepartmentId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HeadOfDepartmentId");

                    b.ToTable("HeadOfDepartmentOrganization");
                });

            modelBuilder.Entity("CMS.Data.Model.HierarchyMaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("HierarchyType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Level1Name")
                        .HasColumnType("text");

                    b.Property<string>("Level2Name")
                        .HasColumnType("text");

                    b.Property<string>("Level3Name")
                        .HasColumnType("text");

                    b.Property<string>("Level4Name")
                        .HasColumnType("text");

                    b.Property<string>("Level5Name")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("HierarchyMaster");
                });

            modelBuilder.Entity("CMS.Data.Model.HiringManager", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("text");

                    b.Property<string>("DesignationId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("GAECNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HiringManager", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.HiringManagerOrganization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HiringManagerId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HiringManagerId");

                    b.ToTable("HiringManagerOrganization");
                });

            modelBuilder.Entity("CMS.Data.Model.JobAdvertisement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("Experience")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("NationalityId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NeededDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("NoOfPosition")
                        .HasColumnType("bigint");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("JobAdvertisement", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.JobAdvertisementTrack", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("Experience")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobAdvertisementId")
                        .HasColumnType("text");

                    b.Property<string>("JobAdvertisementStatus")
                        .HasColumnType("text");

                    b.Property<string>("JobCategory")
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LocationId")
                        .HasColumnType("text");

                    b.Property<string>("NationalityId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NeededDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("NoOfPosition")
                        .HasColumnType("bigint");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("JobAdvertisementTrack", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.JobCriteria", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Criteria")
                        .HasColumnType("text");

                    b.Property<string>("CriteriaType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobAdvertisementId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("Weightage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobAdvertisementId");

                    b.ToTable("JobCriteria", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.JobCriteriaTrack", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Criteria")
                        .HasColumnType("text");

                    b.Property<string>("CriteriaType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobAdvertisementTrackId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.Property<int?>("Weightage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("JobCriteriaTrack", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.JobDescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("Experience")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("JobDescription", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.LOV", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GroupCode")
                        .HasColumnType("text");

                    b.Property<string>("IconCss")
                        .HasColumnType("text");

                    b.Property<string>("ImageId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LOVType")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("LOV");
                });

            modelBuilder.Entity("CMS.Data.Model.LegalEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactPersonMobile")
                        .HasColumnType("text");

                    b.Property<string>("CountryId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CultureInfo")
                        .HasColumnType("text");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("text");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("text");

                    b.Property<string>("DateFormat")
                        .HasColumnType("text");

                    b.Property<string>("DateTimeFormat")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LicenseKey")
                        .HasColumnType("text");

                    b.Property<string>("LogoFileId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLocal")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactMobile")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactMobile")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactPhone")
                        .HasColumnType("text");

                    b.Property<bool?>("SendCompanyWelcome")
                        .HasColumnType("boolean");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LegalEntity");
                });

            modelBuilder.Entity("CMS.Data.Model.ListOfValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IconCss")
                        .HasColumnType("text");

                    b.Property<string>("ImageId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ListOfValueType")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ListOfValue", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ManpowerRecruitmentSummary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<long?>("Available")
                        .HasColumnType("bigint");

                    b.Property<long?>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<long?>("Planning")
                        .HasColumnType("bigint");

                    b.Property<long?>("Requirement")
                        .HasColumnType("bigint");

                    b.Property<long?>("Seperation")
                        .HasColumnType("bigint");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("Transfer")
                        .HasColumnType("bigint");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ManpowerRecruitmentSummary", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ManpowerRecruitmentSummaryVersion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<long?>("Available")
                        .HasColumnType("bigint");

                    b.Property<long?>("Balance")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ManpowerRecruitmentSummaryId")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<long?>("Planning")
                        .HasColumnType("bigint");

                    b.Property<long?>("Requirement")
                        .HasColumnType("bigint");

                    b.Property<long?>("Seperation")
                        .HasColumnType("bigint");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("Transfer")
                        .HasColumnType("bigint");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ManpowerRecruitmentSummaryId");

                    b.ToTable("ManpowerRecruitmentSummaryVersion", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ManpowerSummaryComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ManpowerRecruitmentSummaryId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ManpowerRecruitmentSummaryId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("ManpowerSummaryComment", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.MenuGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IconColor")
                        .HasColumnType("text");

                    b.Property<string>("IconCss")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubModuleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.HasIndex("SubModuleId");

                    b.ToTable("MenuGroup");
                });

            modelBuilder.Entity("CMS.Data.Model.Module", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("CMS.Data.Model.NoteIndexPageColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NoteIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("NoteIndexPageTemplateId");

                    b.ToTable("NoteIndexPageColumn");
                });

            modelBuilder.Entity("CMS.Data.Model.NoteIndexPageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyNoteSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyNoteTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeTab")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexPageTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ParentReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("RequestButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NoteIndexPageTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.NoteNotificationTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<bool>("CopyFromTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NoteTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("NotificationAction")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationTo")
                        .HasColumnType("integer");

                    b.Property<bool>("NotifyByEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotifyBySms")
                        .HasColumnType("boolean");

                    b.Property<int?>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("ParentNoteNotificationTemplateId")
                        .HasColumnType("text");

                    b.Property<bool>("SendAlways")
                        .HasColumnType("boolean");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SmsText")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string[]>("TargetUserTypes")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteTemplateId");

                    b.HasIndex("ParentNoteNotificationTemplateId");

                    b.ToTable("NoteNotificationTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.NoteTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreateReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DisableVersioning")
                        .HasColumnType("boolean");

                    b.Property<int>("EditReturnType")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableNoteNumberManual")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveAsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NoteIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("PostScript")
                        .HasColumnType("text");

                    b.Property<string>("PreScript")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftText")
                        .HasColumnType("text");

                    b.Property<string>("SaveNewVersionButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveNewVersionButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteIndexPageTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NoteTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BCC")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("CC")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DisableDefaultEmailTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("From")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ModuleName")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NotificationDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NotificationStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<bool>("NotifyByEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotifyBySms")
                        .HasColumnType("boolean");

                    b.Property<int>("ReadStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceTypeId")
                        .HasColumnType("text");

                    b.Property<int>("ReferenceTypeName")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceTypeNo")
                        .HasColumnType("text");

                    b.Property<bool>("SendAlways")
                        .HasColumnType("boolean");

                    b.Property<string>("SenderName")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowOriginalSender")
                        .HasColumnType("boolean");

                    b.Property<string>("SmsText")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .HasColumnType("text");

                    b.Property<string>("ToUserId")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("CMS.Data.Model.NtsCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NtsType")
                        .HasColumnType("integer");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NtsCategory");
                });

            modelBuilder.Entity("CMS.Data.Model.NtsNote", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NoteNo")
                        .HasColumnType("text");

                    b.Property<string>("NoteOwnerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("NotePriorityId")
                        .HasColumnType("text");

                    b.Property<string>("NoteStatusId")
                        .HasColumnType("text");

                    b.Property<string>("NoteTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentNoteId")
                        .HasColumnType("text");

                    b.Property<string>("ParentServiceId")
                        .HasColumnType("text");

                    b.Property<string>("ParentTaskId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NoteOwnerTypeId");

                    b.HasIndex("NotePriorityId");

                    b.HasIndex("NoteStatusId");

                    b.HasIndex("NoteTemplateId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ParentNoteId");

                    b.HasIndex("ParentServiceId");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NtsNote");
                });

            modelBuilder.Entity("CMS.Data.Model.NtsService", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ActualSLA")
                        .HasColumnType("interval");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DelegateReason")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LockStatusId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerTeamId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentServiceId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReopenReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReopenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("SLA")
                        .HasColumnType("interval");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceNo")
                        .HasColumnType("text");

                    b.Property<string>("ServiceOwnerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("ServicePriorityId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceStatusId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceTemplateId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LockStatusId");

                    b.HasIndex("OwnerTeamId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ParentServiceId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("ServiceOwnerTypeId");

                    b.HasIndex("ServicePriorityId");

                    b.HasIndex("ServiceStatusId");

                    b.HasIndex("ServiceTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NtsService");
                });

            modelBuilder.Entity("CMS.Data.Model.NtsTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ActualSLA")
                        .HasColumnType("interval");

                    b.Property<string>("AssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToTypeId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DelegateReason")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStepTaskAutoCompleteIfSameAssignee")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LockStatusId")
                        .HasColumnType("text");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentServiceId")
                        .HasColumnType("text");

                    b.Property<string>("ParentTaskId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReopenReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReopenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskActionId")
                        .HasColumnType("text");

                    b.Property<string>("TaskNo")
                        .HasColumnType("text");

                    b.Property<string>("TaskOwnerTypeId")
                        .HasColumnType("text");

                    b.Property<string>("TaskPriorityId")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("TaskSLA")
                        .HasColumnType("interval");

                    b.Property<string>("TaskStatusId")
                        .HasColumnType("text");

                    b.Property<string>("TaskTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToTeamId");

                    b.HasIndex("AssignedToTypeId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("LockStatusId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ParentServiceId");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("TaskActionId");

                    b.HasIndex("TaskOwnerTypeId");

                    b.HasIndex("TaskPriorityId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TaskTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NtsTask");

                    b.HasDiscriminator<string>("Discriminator").HasValue("NtsTask");
                });

            modelBuilder.Entity("CMS.Data.Model.NtsTaskSequence", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("NextId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SequenceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SequenceDate")
                        .IsUnique();

                    b.ToTable("NtsTaskSequence");
                });

            modelBuilder.Entity("CMS.Data.Model.NtsTaskShared", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SharedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SharedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SharedWithTeamId")
                        .HasColumnType("text");

                    b.Property<string>("SharedWithUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskSharedWithTypeId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsTaskId");

                    b.HasIndex("SharedByUserId");

                    b.HasIndex("SharedWithTeamId");

                    b.HasIndex("SharedWithUserId");

                    b.HasIndex("TaskSharedWithTypeId");

                    b.ToTable("NtsTaskShared");
                });

            modelBuilder.Entity("CMS.Data.Model.Page", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AllowIfPortalAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("AuthorizationNotRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Css")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("DontShowMenuInThisPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideInMenu")
                        .HasColumnType("boolean");

                    b.Property<string>("IconColor")
                        .HasColumnType("text");

                    b.Property<string>("IconCss")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRootPage")
                        .HasColumnType("boolean");

                    b.Property<string>("JsonForm")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Layout")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("MenuGroupId")
                        .HasColumnType("text");

                    b.Property<string>("MenuName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PageStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PageType")
                        .HasColumnType("integer");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShowMenuWhenAuthorized")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowMenuWhenNotAuthorized")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowOutsideMenuGroup")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowTitleInPage")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MenuGroupId");

                    b.HasIndex("PortalId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("CMS.Data.Model.PageIndex", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("PageIndex");
                });

            modelBuilder.Entity("CMS.Data.Model.PageIndexColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PageIndexId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("PageIndexId");

                    b.ToTable("PageIndexColumn");
                });

            modelBuilder.Entity("CMS.Data.Model.PageNote", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NtsCategoryId")
                        .HasColumnType("text");

                    b.Property<int[]>("NtsGroupingLevel")
                        .HasColumnType("integer[]");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NtsCategoryId");

                    b.HasIndex("PageId");

                    b.ToTable("PageNote");
                });

            modelBuilder.Entity("CMS.Data.Model.PageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("PageTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string[]>("PageTypes")
                        .HasColumnType("text[]");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string[]>("UserPermissionTypes")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("CMS.Data.Model.Portal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("BannerHeight")
                        .HasColumnType("integer");

                    b.Property<string>("BannerId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DomainName")
                        .HasColumnType("text");

                    b.Property<bool>("EnableBreadcrumb")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LeftMenuBackColor")
                        .HasColumnType("text");

                    b.Property<string>("LeftMenuForeColor")
                        .HasColumnType("text");

                    b.Property<string>("LogoId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<int>("PortalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Theme")
                        .HasColumnType("integer");

                    b.Property<string>("TopBannerBackColor")
                        .HasColumnType("text");

                    b.Property<string>("TopBannerForeColor")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Portal");
                });

            modelBuilder.Entity("CMS.Data.Model.ProcessDesign", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignHtml")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("ProcessDesign");
                });

            modelBuilder.Entity("CMS.Data.Model.ProcessDesignVariable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ProcessDesignId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProcessDesignId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ProcessDesignVariable");
                });

            modelBuilder.Entity("CMS.Data.Model.RecTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("AssignToType")
                        .HasColumnType("integer");

                    b.Property<string>("AssigneeTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssigneeUserId")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode1")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode10")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode2")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode3")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode4")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode5")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode6")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode7")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode8")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode9")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue1")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue10")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue2")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue3")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue4")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue5")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue6")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue7")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue8")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue9")
                        .HasColumnType("text");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteReason")
                        .HasColumnType("text");

                    b.Property<long?>("CompletedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue1")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue10")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue2")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue3")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue4")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue5")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue6")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue7")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue8")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue9")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DelegateReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DelegatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay1")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay10")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay2")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay3")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay4")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay5")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay6")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay7")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay8")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay9")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue1")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue10")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue2")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue3")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue4")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue5")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue6")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue7")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue8")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue9")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAssignedInTemplate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTaskAutoComplete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTaskAutoCompleteIfSameAssignee")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("LockStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentVersionNo")
                        .HasColumnType("text");

                    b.Property<long?>("PlanOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("RatingComment")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceMasterId")
                        .HasColumnType("text");

                    b.Property<int?>("ReferenceTypeCode")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceTypeId")
                        .HasColumnType("text");

                    b.Property<long?>("RejectedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReopenReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReopenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SLA")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskNo")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatusCode")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatusName")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay1")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay10")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay2")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay3")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay4")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay5")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay6")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay7")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay8")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay9")
                        .HasColumnType("text");

                    b.Property<string>("TextValue1")
                        .HasColumnType("text");

                    b.Property<string>("TextValue10")
                        .HasColumnType("text");

                    b.Property<string>("TextValue2")
                        .HasColumnType("text");

                    b.Property<string>("TextValue3")
                        .HasColumnType("text");

                    b.Property<string>("TextValue4")
                        .HasColumnType("text");

                    b.Property<string>("TextValue5")
                        .HasColumnType("text");

                    b.Property<string>("TextValue6")
                        .HasColumnType("text");

                    b.Property<string>("TextValue7")
                        .HasColumnType("text");

                    b.Property<string>("TextValue8")
                        .HasColumnType("text");

                    b.Property<string>("TextValue9")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeTeamId");

                    b.HasIndex("AssigneeUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RequestedUserId");

                    b.HasIndex("TaskStatus");

                    b.ToTable("RecTask", "public");
                });

            modelBuilder.Entity("CMS.Data.Model.RecTaskTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AdhocServiceAddButtonText")
                        .HasColumnType("text");

                    b.Property<string>("AdhocServiceHeaderMessage")
                        .HasColumnType("text");

                    b.Property<string>("AdhocServiceHeaderText")
                        .HasColumnType("text");

                    b.Property<string>("AdhocTaskAddButtonText")
                        .HasColumnType("text");

                    b.Property<string>("AdhocTaskHeaderMessage")
                        .HasColumnType("text");

                    b.Property<string>("AdhocTaskHeaderText")
                        .HasColumnType("text");

                    b.Property<bool?>("AdminCanEditUdf")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AdminCanSubmitAndAutoComplete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AllowTemplateChange")
                        .HasColumnType("boolean");

                    b.Property<int?>("AssignToType")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedByQuery")
                        .HasColumnType("text");

                    b.Property<int?>("AssignedQueryType")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<bool>("BackButton")
                        .HasColumnType("boolean");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("CanAddAdhocTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanAddStepService")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanAddStepTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanEditOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRemoveAdhocService")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRemoveAdhocTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRemoveStepService")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanRemoveStepTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanViewServiceReference")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanViewVersions")
                        .HasColumnType("boolean");

                    b.Property<bool>("CancelButton")
                        .HasColumnType("boolean");

                    b.Property<string>("CancelButtonText")
                        .HasColumnType("text");

                    b.Property<bool?>("ChangeStatusOnStepChange")
                        .HasColumnType("boolean");

                    b.Property<string>("ClientValidationScript")
                        .HasColumnType("text");

                    b.Property<bool>("CloseButton")
                        .HasColumnType("boolean");

                    b.Property<string>("CloseButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CodeLabelName")
                        .HasColumnType("text");

                    b.Property<bool>("CollapseHeader")
                        .HasColumnType("boolean");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<bool>("CompleteButton")
                        .HasColumnType("boolean");

                    b.Property<string>("CompleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonText")
                        .HasColumnType("text");

                    b.Property<double?>("CompletionPercentage")
                        .HasColumnType("double precision");

                    b.Property<bool?>("CreateInBackGround")
                        .HasColumnType("boolean");

                    b.Property<bool>("CreateNewVersionButton")
                        .HasColumnType("boolean");

                    b.Property<string>("CreateNewVersionButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultView")
                        .HasColumnType("text");

                    b.Property<bool>("DelegateButton")
                        .HasColumnType("boolean");

                    b.Property<string>("DelegateButtonText")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionLabelName")
                        .HasColumnType("text");

                    b.Property<bool?>("DisableAutomaticDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisableMessage")
                        .HasColumnType("boolean");

                    b.Property<bool?>("DisableSharing")
                        .HasColumnType("boolean");

                    b.Property<bool?>("DisableStepTask")
                        .HasColumnType("boolean");

                    b.Property<bool?>("DisplayActionButtonBelow")
                        .HasColumnType("boolean");

                    b.Property<string>("DocumentReadyScript")
                        .HasColumnType("text");

                    b.Property<int?>("DocumentStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("DraftButton")
                        .HasColumnType("boolean");

                    b.Property<string>("DraftButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod1")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod10")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod2")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod3")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod4")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod5")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod6")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod7")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod8")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValueMethod9")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DuplicatedFromId")
                        .HasColumnType("bigint");

                    b.Property<string>("EditButtonValidationMethod")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonVisibilityMethod")
                        .HasColumnType("text");

                    b.Property<string>("EmailSettingId")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAdhocService")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableAdhocTask")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableBanner")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableCode")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableComment")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableDocumentChangeRequest")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableLock")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableParent")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnablePrintButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRejectButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSLAChangeRequest")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveAsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableSequenceNo")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTaskAutoComplete")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTaskNumberManual")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EnableTeamAsOwner")
                        .HasColumnType("boolean");

                    b.Property<string>("FieldSectionMessage")
                        .HasColumnType("text");

                    b.Property<string>("FieldSectionText")
                        .HasColumnType("text");

                    b.Property<string>("HeaderSectionMessage")
                        .HasColumnType("text");

                    b.Property<string>("HeaderSectionText")
                        .HasColumnType("text");

                    b.Property<bool?>("HideDateAndSLA")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HideDescription")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HideSubject")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IncludeRequesterInOwnerList")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay6")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay7")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay8")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableDropdownDisplay9")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay6")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay7")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay8")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAssigneeAvailableTextBoxDisplay9")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAttachmentRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCancelReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsCodeEditable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsCodeRequired")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsCodeUniqueInTemplate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleteReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelegateReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescriptionEditable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDescriptionRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("IsDropdownDisplay1")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay10")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay2")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay3")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay4")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay5")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay6")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay7")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay8")
                        .HasColumnType("text");

                    b.Property<string>("IsDropdownDisplay9")
                        .HasColumnType("text");

                    b.Property<bool>("IsIncludeEmailAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNtsNoManual")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRejectionReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReopenReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay6")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay7")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay8")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredDropdownDisplay9")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay1")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay10")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay2")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay3")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay4")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay5")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay6")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay7")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay8")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequiredTextBoxDisplay9")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReturnReasonRequired")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSequenceNoEditable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSequenceNoRequired")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSequenceNoUniqueInTemplate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectEditable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubjectRequired")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemRating")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTeamAsOwnerMandatory")
                        .HasColumnType("boolean");

                    b.Property<string>("JsonForm")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Layout")
                        .HasColumnType("text");

                    b.Property<int>("LayoutColumnCount")
                        .HasColumnType("integer");

                    b.Property<string>("LoadExecutionMethod")
                        .HasColumnType("text");

                    b.Property<int>("ModuleName")
                        .HasColumnType("integer");

                    b.Property<bool>("NotApplicableButton")
                        .HasColumnType("boolean");

                    b.Property<string>("NotificationUrlPattern")
                        .HasColumnType("text");

                    b.Property<string>("NtsNoLabelName")
                        .HasColumnType("text");

                    b.Property<int?>("NtsType")
                        .HasColumnType("integer");

                    b.Property<int?>("OwnerType")
                        .HasColumnType("integer");

                    b.Property<string>("PostSubmitExecutionCode")
                        .HasColumnType("text");

                    b.Property<string>("PostSubmitExecutionMethod")
                        .HasColumnType("text");

                    b.Property<string>("PreSubmitExecutionMethod")
                        .HasColumnType("text");

                    b.Property<string>("PrintButtonText")
                        .HasColumnType("text");

                    b.Property<string>("PrintButtonVisibilityMethod")
                        .HasColumnType("text");

                    b.Property<string>("PrintMethodName")
                        .HasColumnType("text");

                    b.Property<bool?>("ReSubmitButton")
                        .HasColumnType("boolean");

                    b.Property<string>("ReSubmitButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("RejectButton")
                        .HasColumnType("boolean");

                    b.Property<string>("RejectButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("RejectButtonText")
                        .HasColumnType("text");

                    b.Property<int?>("ReminderDaysPriorDueDate")
                        .HasColumnType("integer");

                    b.Property<string>("RemoveAdhocServiceButtonText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveAdhocServiceConfirmText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveAdhocServiceSuccessMessage")
                        .HasColumnType("text");

                    b.Property<string>("RemoveAdhocTaskButtonText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveAdhocTaskConfirmText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveAdhocTaskSuccessMessage")
                        .HasColumnType("text");

                    b.Property<string>("RemoveStepServiceButtonText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveStepServiceConfirmText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveStepServiceSuccessMessage")
                        .HasColumnType("text");

                    b.Property<string>("RemoveStepTaskButtonText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveStepTaskConfirmText")
                        .HasColumnType("text");

                    b.Property<string>("RemoveStepTaskSuccessMessage")
                        .HasColumnType("text");

                    b.Property<bool?>("ReopenButton")
                        .HasColumnType("boolean");

                    b.Property<string>("ReopenButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("ReturnButton")
                        .HasColumnType("boolean");

                    b.Property<string>("ReturnButtonText")
                        .HasColumnType("text");

                    b.Property<string>("ReturnTemplateName")
                        .HasColumnType("text");

                    b.Property<string>("ReturnUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("RunPostscriptInBackground")
                        .HasColumnType("boolean");

                    b.Property<string>("SLA")
                        .HasColumnType("text");

                    b.Property<string>("SLACalculationMode")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftText")
                        .HasColumnType("text");

                    b.Property<bool>("SaveButton")
                        .HasColumnType("boolean");

                    b.Property<string>("SaveButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("SaveChangesButton")
                        .HasColumnType("boolean");

                    b.Property<string>("SaveChangesButtonText")
                        .HasColumnType("text");

                    b.Property<string>("SaveChangesButtonVisibilityMethod")
                        .HasColumnType("text");

                    b.Property<string>("SaveNewVersionButtonText")
                        .HasColumnType("text");

                    b.Property<string>("SequenceNoLabelName")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServerValidationScript")
                        .HasColumnType("text");

                    b.Property<string>("ServiceDetailsHeight")
                        .HasColumnType("text");

                    b.Property<bool?>("ServiceOwnerActAsStepTaskAssignee")
                        .HasColumnType("boolean");

                    b.Property<string>("ServiceOwnerText")
                        .HasColumnType("text");

                    b.Property<string>("ServiceReferenceText")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusLabelName")
                        .HasColumnType("text");

                    b.Property<string>("StepSectionMessage")
                        .HasColumnType("text");

                    b.Property<string>("StepSectionText")
                        .HasColumnType("text");

                    b.Property<string>("StepServiceAddButtonText")
                        .HasColumnType("text");

                    b.Property<string>("StepServiceCancelButtonText")
                        .HasColumnType("text");

                    b.Property<string>("StepServiceCreationOptionalLabel")
                        .HasColumnType("text");

                    b.Property<string>("StepTaskAddButtonText")
                        .HasColumnType("text");

                    b.Property<string>("StepTaskCancelButtonText")
                        .HasColumnType("text");

                    b.Property<string>("StepTaskCreationOptionalLabel")
                        .HasColumnType("text");

                    b.Property<string>("StepTemplateIds")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("SubjectLabelName")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonText")
                        .HasColumnType("text");

                    b.Property<string>("TaskIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateMasterId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateOwner")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay1")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay10")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay2")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay3")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay4")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay5")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay6")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay7")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay8")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxDisplay9")
                        .HasColumnType("text");

                    b.Property<int?>("TextBoxDisplayType1")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType10")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType2")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType3")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType4")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType5")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType6")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType7")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType8")
                        .HasColumnType("integer");

                    b.Property<int?>("TextBoxDisplayType9")
                        .HasColumnType("integer");

                    b.Property<string>("TextBoxLink1")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink10")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink2")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink3")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink4")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink5")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink6")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink7")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink8")
                        .HasColumnType("text");

                    b.Property<string>("TextBoxLink9")
                        .HasColumnType("text");

                    b.Property<string>("UdfIframeSrc")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskIndexPageTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("RecTaskTemplate", "public");
                });

            modelBuilder.Entity("CMS.Data.Model.RecTaskVersion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("AssignToType")
                        .HasColumnType("integer");

                    b.Property<string>("AssigneeTeamId")
                        .HasColumnType("text");

                    b.Property<string>("AssigneeUserId")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode1")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode10")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode2")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode3")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode4")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode5")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode6")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode7")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode8")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentCode9")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue1")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue10")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue2")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue3")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue4")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue5")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue6")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue7")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue8")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentValue9")
                        .HasColumnType("text");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CanceledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteReason")
                        .HasColumnType("text");

                    b.Property<long?>("CompletedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue1")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue10")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue2")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue3")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue4")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue5")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue6")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue7")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue8")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePickerValue9")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DelegateReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DelegatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay1")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay10")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay2")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay3")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay4")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay5")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay6")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay7")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay8")
                        .HasColumnType("text");

                    b.Property<string>("DropdownDisplay9")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue1")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue10")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue2")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue3")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue4")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue5")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue6")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue7")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue8")
                        .HasColumnType("text");

                    b.Property<string>("DropdownValue9")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAssignedInTemplate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTaskAutoComplete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTaskAutoCompleteIfSameAssignee")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("LockStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ParentVersionNo")
                        .HasColumnType("text");

                    b.Property<long?>("PlanOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("RatingComment")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceMasterId")
                        .HasColumnType("text");

                    b.Property<int?>("ReferenceTypeCode")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceTypeId")
                        .HasColumnType("text");

                    b.Property<long?>("RejectedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReopenReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReopenedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RequestedUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SLA")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskNo")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatusCode")
                        .HasColumnType("text");

                    b.Property<string>("TaskStatusName")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay1")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay10")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay2")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay3")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay4")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay5")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay6")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay7")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay8")
                        .HasColumnType("text");

                    b.Property<string>("TextDisplay9")
                        .HasColumnType("text");

                    b.Property<string>("TextValue1")
                        .HasColumnType("text");

                    b.Property<string>("TextValue10")
                        .HasColumnType("text");

                    b.Property<string>("TextValue2")
                        .HasColumnType("text");

                    b.Property<string>("TextValue3")
                        .HasColumnType("text");

                    b.Property<string>("TextValue4")
                        .HasColumnType("text");

                    b.Property<string>("TextValue5")
                        .HasColumnType("text");

                    b.Property<string>("TextValue6")
                        .HasColumnType("text");

                    b.Property<string>("TextValue7")
                        .HasColumnType("text");

                    b.Property<string>("TextValue8")
                        .HasColumnType("text");

                    b.Property<string>("TextValue9")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeTeamId");

                    b.HasIndex("AssigneeUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("RequestedUserId");

                    b.HasIndex("TaskStatus");

                    b.ToTable("RecTaskVersion", "public");
                });

            modelBuilder.Entity("CMS.Data.Model.RecruitmentCandidateElementInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ElementId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.ToTable("RecruitmentCandidateElementInfo", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.RecruitmentPayElement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ElementCode")
                        .HasColumnType("text");

                    b.Property<string>("ElementName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("ValueType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("RecruitmentPayElement", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.ServiceIndexPageColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("ServiceIndexPageTemplateId");

                    b.ToTable("ServiceIndexPageColumn");
                });

            modelBuilder.Entity("CMS.Data.Model.ServiceIndexPageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyServiceSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyServiceTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeTab")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexPageTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ParentReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("RequestButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ServiceIndexPageTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.ServiceNotificationTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<bool>("CopyFromTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NotificationAction")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationTo")
                        .HasColumnType("integer");

                    b.Property<bool>("NotifyByEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotifyBySms")
                        .HasColumnType("boolean");

                    b.Property<int?>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("ParentServiceNotificationTemplateId")
                        .HasColumnType("text");

                    b.Property<bool>("SendAlways")
                        .HasColumnType("boolean");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("SmsText")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string[]>("TargetUserTypes")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentServiceNotificationTemplateId");

                    b.HasIndex("ServiceTemplateId");

                    b.ToTable("ServiceNotificationTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.ServiceTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CancelButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreateReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EditReturnType")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCancelButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCompleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveAsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableServiceNumberManual")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PostScript")
                        .HasColumnType("text");

                    b.Property<string>("PreScript")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ServiceIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubmitButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonText")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ServiceIndexPageTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ServiceTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.StepTaskComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssignedToHierarchyMasterId")
                        .HasColumnType("text");

                    b.Property<int>("AssignedToHierarchyMasterLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedToTeamId")
                        .HasColumnType("text");

                    b.Property<int>("AssignedToType")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NotificationSubject")
                        .HasColumnType("text");

                    b.Property<string>("ReturnStepTaskId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("TaskTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToHierarchyMasterId");

                    b.HasIndex("AssignedToTeamId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ReturnStepTaskId");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("StepTaskComponent");
                });

            modelBuilder.Entity("CMS.Data.Model.SubModule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModuleId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("SubModule");
                });

            modelBuilder.Entity("CMS.Data.Model.TableMetadata", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<bool>("CreateTable")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModuleId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Schema")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TableType")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("TableMetadata");
                });

            modelBuilder.Entity("CMS.Data.Model.TaskIndexPageColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("EnableFiltering")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSorting")
                        .HasColumnType("boolean");

                    b.Property<string>("ForeignKeyTableAliasName")
                        .HasColumnType("text");

                    b.Property<string>("HeaderName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsForeignKeyTableColumn")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TaskIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("TaskIndexPageTemplateId");

                    b.ToTable("TaskIndexPageColumn");
                });

            modelBuilder.Entity("CMS.Data.Model.TaskIndexPageTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CreateButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreatePopupType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("DeleteButtonText")
                        .HasColumnType("text");

                    b.Property<string>("DeleteConfirmationMessage")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("EditButtonText")
                        .HasColumnType("text");

                    b.Property<bool>("EnableAssignedToMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableAssignedToMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableCreateButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableDeleteConfirmation")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableEditButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToExcel")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableExportToPdf")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyTaskSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableMyTaskTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRequestedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedByMeTab")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeSummary")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSharedWithMeTab")
                        .HasColumnType("boolean");

                    b.Property<int>("IndexPageTemplateType")
                        .HasColumnType("integer");

                    b.Property<int>("IndexRenderingType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer");

                    b.Property<string>("OrderByColumnId")
                        .HasColumnType("text");

                    b.Property<string>("ParentReferenceId")
                        .HasColumnType("text");

                    b.Property<string>("RequestButtonText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderByColumnId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TaskIndexPageTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.TaskNotificationTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<bool>("CopyFromTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NotificationAction")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationTo")
                        .HasColumnType("integer");

                    b.Property<bool>("NotifyByEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotifyBySms")
                        .HasColumnType("boolean");

                    b.Property<int?>("NtsType")
                        .HasColumnType("integer");

                    b.Property<string>("ParentTaskNotificationTemplateId")
                        .HasColumnType("text");

                    b.Property<bool>("SendAlways")
                        .HasColumnType("boolean");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SmsText")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string[]>("TargetUserTypes")
                        .HasColumnType("text[]");

                    b.Property<string>("TaskTemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskNotificationTemplateId");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("TaskNotificationTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.TaskTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("BackButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("CompleteButtonText")
                        .HasColumnType("text");

                    b.Property<int>("CreateReturnType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EditReturnType")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableAttachment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableBackButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableIndexPage")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRejectButton")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSaveAsDraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTaskNumberManual")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NotificationSubject")
                        .HasColumnType("text");

                    b.Property<string>("PostScript")
                        .HasColumnType("text");

                    b.Property<string>("PreScript")
                        .HasColumnType("text");

                    b.Property<string>("PriorityId")
                        .HasColumnType("text");

                    b.Property<string>("RejectButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("RejectButtonText")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("SLA")
                        .HasColumnType("interval");

                    b.Property<string>("SaveAsDraftCss")
                        .HasColumnType("text");

                    b.Property<string>("SaveAsDraftText")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonCss")
                        .HasColumnType("text");

                    b.Property<string>("SubmitButtonText")
                        .HasColumnType("text");

                    b.Property<string>("TaskIndexPageTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PriorityId");

                    b.HasIndex("TaskIndexPageTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TaskTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("CMS.Data.Model.TeamUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTeamOwner")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("CMS.Data.Model.Template", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Json")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TableMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateCategoryId")
                        .HasColumnType("text");

                    b.Property<int>("TemplateStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TableMetadataId");

                    b.HasIndex("TemplateCategoryId");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.TemplateCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TemplateCategory");
                });

            modelBuilder.Entity("CMS.Data.Model.TrueComponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("ComponentId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.ToTable("TrueComponent");
                });

            modelBuilder.Entity("CMS.Data.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ForgotPasswordOTP")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGuestUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<bool>("PasswordChanged")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<string>("SignatureId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CMS.Data.Model.UserDataPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId2")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LogicalOperationType")
                        .HasColumnType("integer");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string[]>("Values")
                        .HasColumnType("text[]");

                    b.Property<string[]>("Values2")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("ColumnMetadataId2");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDataPermission");
                });

            modelBuilder.Entity("CMS.Data.Model.UserHierarchy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HierarchyMasterId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LevelNo")
                        .HasColumnType("integer");

                    b.Property<int>("OptionNo")
                        .HasColumnType("integer");

                    b.Property<string>("ParentUserId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HierarchyMasterId");

                    b.HasIndex("ParentUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserHierarchy");
                });

            modelBuilder.Entity("CMS.Data.Model.UserPagePreference", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DisablePageTour")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPagePreference");
                });

            modelBuilder.Entity("CMS.Data.Model.UserPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string[]>("Permissions")
                        .HasColumnType("text[]");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermission");
                });

            modelBuilder.Entity("CMS.Data.Model.UserPortal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPortal");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRoleDataPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId")
                        .HasColumnType("text");

                    b.Property<string>("ColumnMetadataId2")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LogicalOperationType")
                        .HasColumnType("integer");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<string[]>("Values")
                        .HasColumnType("text[]");

                    b.Property<string[]>("Values2")
                        .HasColumnType("text[]");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColumnMetadataId");

                    b.HasIndex("ColumnMetadataId2");

                    b.HasIndex("PageId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleDataPermission");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRolePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PageId")
                        .HasColumnType("text");

                    b.Property<string[]>("Permissions")
                        .HasColumnType("text[]");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRolePermission");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRolePortal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PortalId")
                        .HasColumnType("text");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRolePortal");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRoleStageChild", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InboxStageId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusLabel")
                        .HasColumnType("text");

                    b.Property<string>("StatusLabelId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InboxStageId");

                    b.ToTable("UserRoleStageChild", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRoleStageParent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InboxStageId")
                        .HasColumnType("text");

                    b.Property<string>("InboxStageName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateCode")
                        .HasColumnType("text");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleStageParent", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRoleStatusLabelCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusCode")
                        .HasColumnType("text");

                    b.Property<string>("StatusLabelId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusLabelId");

                    b.ToTable("UserRoleStatusLabelCode", "rec");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRoleUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("SequenceOrder")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("text");

                    b.Property<long>("VersionNo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRoleUser");
                });

            modelBuilder.Entity("UserUserRole", b =>
                {
                    b.Property<string>("UserRolesId")
                        .HasColumnType("text");

                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.HasKey("UserRolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserUserRole");
                });

            modelBuilder.Entity("CMS.Data.Model.NtsTaskVersion", b =>
                {
                    b.HasBaseType("CMS.Data.Model.NtsTask");

                    b.Property<string>("NtsTaskId")
                        .HasColumnType("text");

                    b.Property<string>("VersionByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasIndex("NtsTaskId");

                    b.HasDiscriminator().HasValue("NtsTaskVersion");
                });

            modelBuilder.Entity("CMS.Data.Model.AdhocTaskComponent", b =>
                {
                    b.HasOne("CMS.Data.Model.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("CMS.Data.Model.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.Navigation("Component");

                    b.Navigation("NtsTask");
                });

            modelBuilder.Entity("CMS.Data.Model.Agency", b =>
                {
                    b.HasOne("CMS.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Data.Model.Application", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.HasOne("CMS.Data.Model.JobAdvertisement", "JobAdvertisement")
                        .WithMany()
                        .HasForeignKey("JobAdvertisementId");

                    b.Navigation("CandidateProfile");

                    b.Navigation("JobAdvertisement");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationComputerProficiency", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationDrivingLicense", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationEducational", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationExperience", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationExperienceByCountry", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationExperienceByJob", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationExperienceBySector", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationJobCriteria", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationLanguageProficiency", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationProject", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationReferences", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationSalaryDetail", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationStateComment", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.HasOne("CMS.Data.Model.ApplicationState", "ApplicationState")
                        .WithMany()
                        .HasForeignKey("ApplicationStateId");

                    b.Navigation("Application");

                    b.Navigation("ApplicationState");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationStateTrack", b =>
                {
                    b.HasOne("CMS.Data.Model.ApplicationState", "ApplicationState")
                        .WithMany()
                        .HasForeignKey("ApplicationStateId");

                    b.HasOne("CMS.Data.Model.ApplicationStatus", "ApplicationStatus")
                        .WithMany()
                        .HasForeignKey("ApplicationStatusId");

                    b.HasOne("CMS.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.Navigation("ApplicationState");

                    b.Navigation("ApplicationStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Data.Model.ApplicationeExperienceByNature", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.AppointmentApprovalRequest", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateComputerProficiency", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateDrivingLicense", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateEducational", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateEvaluation", b =>
                {
                    b.HasOne("CMS.Data.Model.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateExperience", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateExperienceByCountry", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateExperienceByJob", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateExperienceByNature", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateExperienceByOther", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateExperienceBySector", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateLanguageProficiency", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateProfile", b =>
                {
                    b.HasOne("CMS.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateProject", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateReferences", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.CandidateSalaryDetail", b =>
                {
                    b.HasOne("CMS.Data.Model.CandidateProfile", "CandidateProfile")
                        .WithMany()
                        .HasForeignKey("CandidateProfileId");

                    b.Navigation("CandidateProfile");
                });

            modelBuilder.Entity("CMS.Data.Model.ColumnMetadata", b =>
                {
                    b.HasOne("CMS.Data.Model.ColumnMetadata", "ForeignKeyColumn")
                        .WithMany()
                        .HasForeignKey("ForeignKeyColumnId");

                    b.HasOne("CMS.Data.Model.ColumnMetadata", "ForeignKeyDisplayColumn")
                        .WithMany()
                        .HasForeignKey("ForeignKeyDisplayColumnId");

                    b.HasOne("CMS.Data.Model.TableMetadata", "ForeignKeyTable")
                        .WithMany()
                        .HasForeignKey("ForeignKeyTableId");

                    b.HasOne("CMS.Data.Model.TableMetadata", "TableMetadata")
                        .WithMany()
                        .HasForeignKey("TableMetadataId");

                    b.Navigation("ForeignKeyColumn");

                    b.Navigation("ForeignKeyDisplayColumn");

                    b.Navigation("ForeignKeyTable");

                    b.Navigation("TableMetadata");
                });

            modelBuilder.Entity("CMS.Data.Model.Component", b =>
                {
                    b.HasOne("CMS.Data.Model.ProcessDesign", "ProcessDesign")
                        .WithMany()
                        .HasForeignKey("ProcessDesignId");

                    b.Navigation("ProcessDesign");
                });

            modelBuilder.Entity("CMS.Data.Model.CustomTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.DecisionScriptComponent", b =>
                {
                    b.HasOne("CMS.Data.Model.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("CMS.Data.Model.ExecutionScriptComponent", b =>
                {
                    b.HasOne("CMS.Data.Model.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("CMS.Data.Model.FalseComponent", b =>
                {
                    b.HasOne("CMS.Data.Model.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("CMS.Data.Model.FormIndexPageColumn", b =>
                {
                    b.HasOne("CMS.Data.Model.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("CMS.Data.Model.FormIndexPageTemplate", "FormIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("FormIndexPageTemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("FormIndexPageTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.FormIndexPageTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.FormTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.FormIndexPageTemplate", "IndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("IndexPageTemplateId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("IndexPageTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.HeadOfDepartment", b =>
                {
                    b.HasOne("CMS.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Data.Model.HeadOfDepartmentOrganization", b =>
                {
                    b.HasOne("CMS.Data.Model.HeadOfDepartment", "HeadOfDepartment")
                        .WithMany()
                        .HasForeignKey("HeadOfDepartmentId");

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("CMS.Data.Model.HiringManager", b =>
                {
                    b.HasOne("CMS.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Data.Model.HiringManagerOrganization", b =>
                {
                    b.HasOne("CMS.Data.Model.HiringManager", "HiringManager")
                        .WithMany()
                        .HasForeignKey("HiringManagerId");

                    b.Navigation("HiringManager");
                });

            modelBuilder.Entity("CMS.Data.Model.JobCriteria", b =>
                {
                    b.HasOne("CMS.Data.Model.JobAdvertisement", "JobAdvertisement")
                        .WithMany()
                        .HasForeignKey("JobAdvertisementId");

                    b.Navigation("JobAdvertisement");
                });

            modelBuilder.Entity("CMS.Data.Model.LOV", b =>
                {
                    b.HasOne("CMS.Data.Model.LOV", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CMS.Data.Model.ListOfValue", b =>
                {
                    b.HasOne("CMS.Data.Model.ListOfValue", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CMS.Data.Model.ManpowerRecruitmentSummaryVersion", b =>
                {
                    b.HasOne("CMS.Data.Model.ManpowerRecruitmentSummary", "ManpowerRecruitmentSummary")
                        .WithMany()
                        .HasForeignKey("ManpowerRecruitmentSummaryId");

                    b.Navigation("ManpowerRecruitmentSummary");
                });

            modelBuilder.Entity("CMS.Data.Model.ManpowerSummaryComment", b =>
                {
                    b.HasOne("CMS.Data.Model.ManpowerRecruitmentSummary", "ManpowerRecruitmentSummary")
                        .WithMany()
                        .HasForeignKey("ManpowerRecruitmentSummaryId");

                    b.HasOne("CMS.Data.Model.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("ManpowerRecruitmentSummary");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("CMS.Data.Model.MenuGroup", b =>
                {
                    b.HasOne("CMS.Data.Model.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId");

                    b.HasOne("CMS.Data.Model.SubModule", "SubModule")
                        .WithMany("MenuGroups")
                        .HasForeignKey("SubModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portal");

                    b.Navigation("SubModule");
                });

            modelBuilder.Entity("CMS.Data.Model.NoteIndexPageColumn", b =>
                {
                    b.HasOne("CMS.Data.Model.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("CMS.Data.Model.NoteIndexPageTemplate", "NoteIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("NoteIndexPageTemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("NoteIndexPageTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.NoteIndexPageTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.NoteNotificationTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.NoteTemplate", "NoteTemplate")
                        .WithMany()
                        .HasForeignKey("NoteTemplateId");

                    b.HasOne("CMS.Data.Model.NoteNotificationTemplate", "ParentNoteNotificationTemplate")
                        .WithMany()
                        .HasForeignKey("ParentNoteNotificationTemplateId");

                    b.Navigation("NoteTemplate");

                    b.Navigation("ParentNoteNotificationTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.NoteTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.NoteIndexPageTemplate", "NoteIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("NoteIndexPageTemplateId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("NoteIndexPageTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.NtsNote", b =>
                {
                    b.HasOne("CMS.Data.Model.LOV", "NoteOwnerType")
                        .WithMany()
                        .HasForeignKey("NoteOwnerTypeId");

                    b.HasOne("CMS.Data.Model.LOV", "NotePriority")
                        .WithMany()
                        .HasForeignKey("NotePriorityId");

                    b.HasOne("CMS.Data.Model.LOV", "NoteStatus")
                        .WithMany()
                        .HasForeignKey("NoteStatusId");

                    b.HasOne("CMS.Data.Model.NoteTemplate", "NoteTemplate")
                        .WithMany()
                        .HasForeignKey("NoteTemplateId");

                    b.HasOne("CMS.Data.Model.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("CMS.Data.Model.NtsNote", "ParentNote")
                        .WithMany()
                        .HasForeignKey("ParentNoteId");

                    b.HasOne("CMS.Data.Model.NtsService", "ParentService")
                        .WithMany()
                        .HasForeignKey("ParentServiceId");

                    b.HasOne("CMS.Data.Model.NtsTask", "ParentTask")
                        .WithMany()
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("CMS.Data.Model.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("NoteOwnerType");

                    b.Navigation("NotePriority");

                    b.Navigation("NoteStatus");

                    b.Navigation("NoteTemplate");

                    b.Navigation("OwnerUser");

                    b.Navigation("ParentNote");

                    b.Navigation("ParentService");

                    b.Navigation("ParentTask");

                    b.Navigation("RequestedByUser");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.NtsService", b =>
                {
                    b.HasOne("CMS.Data.Model.LOV", "LockStatus")
                        .WithMany()
                        .HasForeignKey("LockStatusId");

                    b.HasOne("CMS.Data.Model.Team", "OwnerTeam")
                        .WithMany()
                        .HasForeignKey("OwnerTeamId");

                    b.HasOne("CMS.Data.Model.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("CMS.Data.Model.NtsService", "ParentService")
                        .WithMany()
                        .HasForeignKey("ParentServiceId");

                    b.HasOne("CMS.Data.Model.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId");

                    b.HasOne("CMS.Data.Model.LOV", "ServiceOwnerType")
                        .WithMany()
                        .HasForeignKey("ServiceOwnerTypeId");

                    b.HasOne("CMS.Data.Model.LOV", "ServicePriority")
                        .WithMany()
                        .HasForeignKey("ServicePriorityId");

                    b.HasOne("CMS.Data.Model.LOV", "ServiceStatus")
                        .WithMany()
                        .HasForeignKey("ServiceStatusId");

                    b.HasOne("CMS.Data.Model.ServiceTemplate", "ServiceTemplate")
                        .WithMany()
                        .HasForeignKey("ServiceTemplateId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("LockStatus");

                    b.Navigation("OwnerTeam");

                    b.Navigation("OwnerUser");

                    b.Navigation("ParentService");

                    b.Navigation("RequestedByUser");

                    b.Navigation("ServiceOwnerType");

                    b.Navigation("ServicePriority");

                    b.Navigation("ServiceStatus");

                    b.Navigation("ServiceTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.NtsTask", b =>
                {
                    b.HasOne("CMS.Data.Model.Team", "AssignedToTeam")
                        .WithMany()
                        .HasForeignKey("AssignedToTeamId");

                    b.HasOne("CMS.Data.Model.LOV", "AssignedToType")
                        .WithMany()
                        .HasForeignKey("AssignedToTypeId");

                    b.HasOne("CMS.Data.Model.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("CMS.Data.Model.LOV", "LockStatus")
                        .WithMany()
                        .HasForeignKey("LockStatusId");

                    b.HasOne("CMS.Data.Model.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("CMS.Data.Model.NtsService", "ParentService")
                        .WithMany()
                        .HasForeignKey("ParentServiceId");

                    b.HasOne("CMS.Data.Model.NtsTask", "ParentTask")
                        .WithMany()
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("CMS.Data.Model.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId");

                    b.HasOne("CMS.Data.Model.LOV", "TaskAction")
                        .WithMany()
                        .HasForeignKey("TaskActionId");

                    b.HasOne("CMS.Data.Model.LOV", "TaskOwnerType")
                        .WithMany()
                        .HasForeignKey("TaskOwnerTypeId");

                    b.HasOne("CMS.Data.Model.LOV", "TaskPriority")
                        .WithMany()
                        .HasForeignKey("TaskPriorityId");

                    b.HasOne("CMS.Data.Model.LOV", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId");

                    b.HasOne("CMS.Data.Model.TaskTemplate", "TaskTemplate")
                        .WithMany()
                        .HasForeignKey("TaskTemplateId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("AssignedToTeam");

                    b.Navigation("AssignedToType");

                    b.Navigation("AssignedToUser");

                    b.Navigation("LockStatus");

                    b.Navigation("OwnerUser");

                    b.Navigation("ParentService");

                    b.Navigation("ParentTask");

                    b.Navigation("RequestedByUser");

                    b.Navigation("TaskAction");

                    b.Navigation("TaskOwnerType");

                    b.Navigation("TaskPriority");

                    b.Navigation("TaskStatus");

                    b.Navigation("TaskTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.NtsTaskShared", b =>
                {
                    b.HasOne("CMS.Data.Model.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.HasOne("CMS.Data.Model.User", "SharedBy")
                        .WithMany()
                        .HasForeignKey("SharedByUserId");

                    b.HasOne("CMS.Data.Model.User", "SharedWithTeam")
                        .WithMany()
                        .HasForeignKey("SharedWithTeamId");

                    b.HasOne("CMS.Data.Model.User", "SharedWithUser")
                        .WithMany()
                        .HasForeignKey("SharedWithUserId");

                    b.HasOne("CMS.Data.Model.LOV", "TaskSharedWithType")
                        .WithMany()
                        .HasForeignKey("TaskSharedWithTypeId");

                    b.Navigation("NtsTask");

                    b.Navigation("SharedBy");

                    b.Navigation("SharedWithTeam");

                    b.Navigation("SharedWithUser");

                    b.Navigation("TaskSharedWithType");
                });

            modelBuilder.Entity("CMS.Data.Model.Page", b =>
                {
                    b.HasOne("CMS.Data.Model.MenuGroup", "MenuGroup")
                        .WithMany()
                        .HasForeignKey("MenuGroupId");

                    b.HasOne("CMS.Data.Model.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("MenuGroup");

                    b.Navigation("Portal");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.PageIndex", b =>
                {
                    b.HasOne("CMS.Data.Model.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("CMS.Data.Model.PageIndexColumn", b =>
                {
                    b.HasOne("CMS.Data.Model.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("CMS.Data.Model.PageIndex", "PageIndex")
                        .WithMany()
                        .HasForeignKey("PageIndexId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("PageIndex");
                });

            modelBuilder.Entity("CMS.Data.Model.PageNote", b =>
                {
                    b.HasOne("CMS.Data.Model.NtsCategory", "NtsCategory")
                        .WithMany()
                        .HasForeignKey("NtsCategoryId");

                    b.HasOne("CMS.Data.Model.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.Navigation("NtsCategory");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("CMS.Data.Model.PageTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.Permission", b =>
                {
                    b.HasOne("CMS.Data.Model.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("CMS.Data.Model.ProcessDesign", b =>
                {
                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.ProcessDesignVariable", b =>
                {
                    b.HasOne("CMS.Data.Model.ProcessDesign", "ProcessDesign")
                        .WithMany()
                        .HasForeignKey("ProcessDesignId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("ProcessDesign");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.RecTask", b =>
                {
                    b.HasOne("CMS.Data.Model.Team", "Team")
                        .WithMany()
                        .HasForeignKey("AssigneeTeamId");

                    b.HasOne("CMS.Data.Model.User", "AssgineeUser")
                        .WithMany()
                        .HasForeignKey("AssigneeUserId");

                    b.HasOne("CMS.Data.Model.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("CMS.Data.Model.User", "RequestedUser")
                        .WithMany()
                        .HasForeignKey("RequestedUserId");

                    b.HasOne("CMS.Data.Model.ListOfValue", "ListOfValue")
                        .WithMany()
                        .HasForeignKey("TaskStatus");

                    b.Navigation("AssgineeUser");

                    b.Navigation("ListOfValue");

                    b.Navigation("OwnerUser");

                    b.Navigation("RequestedUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CMS.Data.Model.RecTaskTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.TaskIndexPageTemplate", "TaskIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("TaskIndexPageTemplateId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("TaskIndexPageTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.RecTaskVersion", b =>
                {
                    b.HasOne("CMS.Data.Model.Team", "Team")
                        .WithMany()
                        .HasForeignKey("AssigneeTeamId");

                    b.HasOne("CMS.Data.Model.User", "AssgineeUser")
                        .WithMany()
                        .HasForeignKey("AssigneeUserId");

                    b.HasOne("CMS.Data.Model.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("CMS.Data.Model.User", "RequestedUser")
                        .WithMany()
                        .HasForeignKey("RequestedUserId");

                    b.HasOne("CMS.Data.Model.ListOfValue", "ListOfValue")
                        .WithMany()
                        .HasForeignKey("TaskStatus");

                    b.Navigation("AssgineeUser");

                    b.Navigation("ListOfValue");

                    b.Navigation("OwnerUser");

                    b.Navigation("RequestedUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CMS.Data.Model.RecruitmentCandidateElementInfo", b =>
                {
                    b.HasOne("CMS.Data.Model.RecruitmentPayElement", "RecruitmentPayElement")
                        .WithMany()
                        .HasForeignKey("ElementId");

                    b.Navigation("RecruitmentPayElement");
                });

            modelBuilder.Entity("CMS.Data.Model.ServiceIndexPageColumn", b =>
                {
                    b.HasOne("CMS.Data.Model.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("CMS.Data.Model.ServiceIndexPageTemplate", "ServiceIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("ServiceIndexPageTemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("ServiceIndexPageTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.ServiceIndexPageTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.ServiceNotificationTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.ServiceNotificationTemplate", "ParentServiceNotificationTemplate")
                        .WithMany()
                        .HasForeignKey("ParentServiceNotificationTemplateId");

                    b.HasOne("CMS.Data.Model.ServiceTemplate", "ServiceTemplate")
                        .WithMany()
                        .HasForeignKey("ServiceTemplateId");

                    b.Navigation("ParentServiceNotificationTemplate");

                    b.Navigation("ServiceTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.ServiceTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.ServiceIndexPageTemplate", "ServiceIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("ServiceIndexPageTemplateId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("ServiceIndexPageTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.StepTaskComponent", b =>
                {
                    b.HasOne("CMS.Data.Model.HierarchyMaster", "AssignedToHierarchyMaster")
                        .WithMany()
                        .HasForeignKey("AssignedToHierarchyMasterId");

                    b.HasOne("CMS.Data.Model.Team", "AssignedToTeam")
                        .WithMany()
                        .HasForeignKey("AssignedToTeamId");

                    b.HasOne("CMS.Data.Model.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("CMS.Data.Model.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.HasOne("CMS.Data.Model.TaskTemplate", "ReturnStepTask")
                        .WithMany()
                        .HasForeignKey("ReturnStepTaskId");

                    b.HasOne("CMS.Data.Model.TaskTemplate", "TaskTemplate")
                        .WithMany()
                        .HasForeignKey("TaskTemplateId");

                    b.Navigation("AssignedToHierarchyMaster");

                    b.Navigation("AssignedToTeam");

                    b.Navigation("AssignedToUser");

                    b.Navigation("Component");

                    b.Navigation("ReturnStepTask");

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.SubModule", b =>
                {
                    b.HasOne("CMS.Data.Model.Module", "Module")
                        .WithMany("SubModules")
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CMS.Data.Model.TableMetadata", b =>
                {
                    b.HasOne("CMS.Data.Model.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CMS.Data.Model.TaskIndexPageColumn", b =>
                {
                    b.HasOne("CMS.Data.Model.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("CMS.Data.Model.TaskIndexPageTemplate", "TaskIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("TaskIndexPageTemplateId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("TaskIndexPageTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.TaskIndexPageTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.ColumnMetadata", "OrderByColumn")
                        .WithMany()
                        .HasForeignKey("OrderByColumnId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("OrderByColumn");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.TaskNotificationTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.TaskNotificationTemplate", "ParentTaskNotificationTemplate")
                        .WithMany()
                        .HasForeignKey("ParentTaskNotificationTemplateId");

                    b.HasOne("CMS.Data.Model.TaskTemplate", "TaskTemplate")
                        .WithMany()
                        .HasForeignKey("TaskTemplateId");

                    b.Navigation("ParentTaskNotificationTemplate");

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("CMS.Data.Model.TaskTemplate", b =>
                {
                    b.HasOne("CMS.Data.Model.LOV", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("CMS.Data.Model.TaskIndexPageTemplate", "TaskIndexPageTemplate")
                        .WithMany()
                        .HasForeignKey("TaskIndexPageTemplateId");

                    b.HasOne("CMS.Data.Model.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Priority");

                    b.Navigation("TaskIndexPageTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CMS.Data.Model.TeamUser", b =>
                {
                    b.HasOne("CMS.Data.Model.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("CMS.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Data.Model.Template", b =>
                {
                    b.HasOne("CMS.Data.Model.TableMetadata", "TableMetadata")
                        .WithMany()
                        .HasForeignKey("TableMetadataId");

                    b.HasOne("CMS.Data.Model.TemplateCategory", "TemplateCategory")
                        .WithMany()
                        .HasForeignKey("TemplateCategoryId");

                    b.Navigation("TableMetadata");

                    b.Navigation("TemplateCategory");
                });

            modelBuilder.Entity("CMS.Data.Model.TrueComponent", b =>
                {
                    b.HasOne("CMS.Data.Model.Component", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("CMS.Data.Model.UserDataPermission", b =>
                {
                    b.HasOne("CMS.Data.Model.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("CMS.Data.Model.ColumnMetadata", "ColumnMetadata2")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId2");

                    b.HasOne("CMS.Data.Model.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("CMS.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("ColumnMetadata2");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Data.Model.UserHierarchy", b =>
                {
                    b.HasOne("CMS.Data.Model.HierarchyMaster", "HierarchyMaster")
                        .WithMany()
                        .HasForeignKey("HierarchyMasterId");

                    b.HasOne("CMS.Data.Model.User", "ParentUser")
                        .WithMany()
                        .HasForeignKey("ParentUserId");

                    b.HasOne("CMS.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("HierarchyMaster");

                    b.Navigation("ParentUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Data.Model.UserPagePreference", b =>
                {
                    b.HasOne("CMS.Data.Model.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("CMS.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Data.Model.UserPermission", b =>
                {
                    b.HasOne("CMS.Data.Model.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("CMS.Data.Model.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId");

                    b.Navigation("Page");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Data.Model.UserPortal", b =>
                {
                    b.HasOne("CMS.Data.Model.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId");

                    b.HasOne("CMS.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Portal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRoleDataPermission", b =>
                {
                    b.HasOne("CMS.Data.Model.ColumnMetadata", "ColumnMetadata")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId");

                    b.HasOne("CMS.Data.Model.ColumnMetadata", "ColumnMetadata2")
                        .WithMany()
                        .HasForeignKey("ColumnMetadataId2");

                    b.HasOne("CMS.Data.Model.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("CMS.Data.Model.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("ColumnMetadata");

                    b.Navigation("ColumnMetadata2");

                    b.Navigation("Page");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRolePermission", b =>
                {
                    b.HasOne("CMS.Data.Model.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId");

                    b.HasOne("CMS.Data.Model.UserRole", "UserRole")
                        .WithMany("UserRolePermissions")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("Page");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRolePortal", b =>
                {
                    b.HasOne("CMS.Data.Model.Portal", "Portal")
                        .WithMany()
                        .HasForeignKey("PortalId");

                    b.HasOne("CMS.Data.Model.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("Portal");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRoleStageChild", b =>
                {
                    b.HasOne("CMS.Data.Model.UserRoleStageParent", "InboxStage")
                        .WithMany()
                        .HasForeignKey("InboxStageId");

                    b.Navigation("InboxStage");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRoleStageParent", b =>
                {
                    b.HasOne("CMS.Data.Model.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRoleStatusLabelCode", b =>
                {
                    b.HasOne("CMS.Data.Model.UserRoleStageChild", "StatusLabel")
                        .WithMany()
                        .HasForeignKey("StatusLabelId");

                    b.Navigation("StatusLabel");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRoleUser", b =>
                {
                    b.HasOne("CMS.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("CMS.Data.Model.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("UserUserRole", b =>
                {
                    b.HasOne("CMS.Data.Model.UserRole", null)
                        .WithMany()
                        .HasForeignKey("UserRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMS.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CMS.Data.Model.NtsTaskVersion", b =>
                {
                    b.HasOne("CMS.Data.Model.NtsTask", "NtsTask")
                        .WithMany()
                        .HasForeignKey("NtsTaskId");

                    b.Navigation("NtsTask");
                });

            modelBuilder.Entity("CMS.Data.Model.Module", b =>
                {
                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("CMS.Data.Model.SubModule", b =>
                {
                    b.Navigation("MenuGroups");
                });

            modelBuilder.Entity("CMS.Data.Model.User", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("CMS.Data.Model.UserRole", b =>
                {
                    b.Navigation("UserRolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
