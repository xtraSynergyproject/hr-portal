@using CMS.UI.ViewModel;
@using CMS.Common;
@using Kendo.Mvc.UI;
@using Kendo.Mvc.Extensions;

@{
    ViewData["Title"] = "ManageListOfValue";
    Layout = "/Views/Shared/_PopupLayout.cshtml";

}

@model ListOfValueViewModel

<style>
    .form-control {
        width: unset;
    }

    .required {
        color: red;
    }
    .lovname {
        display: inline-block;
        vertical-align: middle;
        line-height: 41px;
        padding-left: 10px;
    }
</style>
<script>
     function OnCreateList() {       

        @*iframeOpenUrl = '@Url.Action("CreateListOf", "JobAdvertisement", new { @area="Recruitment"})';
         OpenIframePopup1(450, 1200, 'Manage List');*@
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("CreateListOf", "JobAdvertisement", new { @area = "Recruitment" })';
        win.OpenWindow({ Title: 'Manage List', Width: 450, Height: 900 });
        return false;
    }

    function OnEditList(e) {      
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        @*iframeOpenUrl = '@Url.Action("EditListOf", "JobAdvertisement", new { @area= "Recruitment" })?Id=' + dataItem.Id;
        OpenIframePopup1(450, 1200, 'Manage List');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditListOf", "JobAdvertisement", new { @area = "Recruitment" })?Id=' + dataItem.Id;
        win.OpenWindow({ Title: 'Manage List', Width: 450, Height: 900 });
        return false;
    }

    function OnSave() {        
        var cgrid = $("#treelist").data("kendoTreeList");
        var ccount = cgrid.dataSource.data().length;
        if (ccount > 0) {
            var detail = JSON.stringify(cgrid.dataSource.data());
            $("#Json").val(detail);
        }
    }

    //var splitter = $('.splitter-container').height(200).split({
    //    orientation: 'vertical',
    //    limit: 10,
    //    position: '20%', // if there is no percentage it interpret it as pixels
    //    onDrag: function (event) {
    //        console.log(splitter.position());
    //    }
    //});

    var onAjaxSuccess = function (res) {       
       
        if (res.success) {            
            ShowNotification("Saved Successfully", "success");
            document.getElementById("submitBtn").disabled = true;
            if (res.action == "Edit") {
                window.parent.$("#viewgrid").data("kendoGrid").dataSource.read({ jobid: $("#ReferenceTypeId").val() }); 
            }
            else {                          
                window.parent.$("#ListOfValueTypeId").data("kendoDropDownList").dataSource.read({ jobid: $("#ReferenceTypeId").val(), type: 77 });                
            } 
        }
        else {
            ShowNotification(res.error, "error");
            //$(".text-danger").removeClass("validation-summary-valid");
            //$(".text-danger").addClass("validation-summary-errors");
            //$(".text-danger").html(res.error); 
        }
        //HideLoader($('#divjobAdv'));
    };

    function onSave(arg) {
        if (arg.model.Name == "") {
            arg.preventDefault();
            kendo.alert("Enter Name");
            return false;
        }
    }

</script>
<script id="ct-template" type="text/kendo-ui-template">
    #if(data.ParentId!=null){#
       <span style="width:100%" class="lovname">#:Name #</span>

    #}#


</script>

<div class="row-12" style="margin:15px;">

    <form asp-controller="JobAdvertisement" asp-action="ManageListOfValue" data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
          data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
          data-ajax="true" data-ajax-method="POST"
          class="form-horizontal" id="myForm">
        <div class="text-danger" asp-validation-summary="All" style="font-size:12px;"></div>
        <div class="row" style="padding:10px;">

            <div class="col-12 pad-10">
                <div class="form-label-group">
                    <input asp-for="Name" type="text" class="form-control" placeholder="Enter Name" autocomplete="off" style="width:100%" required />
                    <label for="Name">LOV Type Name <span style="color:red">*</span></label>
                </div>
            </div>
            <div class="col-12" id="sublov" style="width:880px">
                <br />
                @(Html.Kendo().TreeList<ListOfValueViewModel>()
    .Name("treelist")
    .Toolbar(toolbar => toolbar.Create())
    .Columns(columns =>
    {
        columns.Add().Field(e => e.Name).Width(250);
        columns.Add().Field(e => e.Description).Width(250);
        columns.Add().Field(e => e.EnableDescription).Width(150);
        columns.Add().Width(200).Command(c =>
        {
            c.CreateChild().Text("Add child");
            c.Edit();
            c.Destroy();
        }).Title("Action")
        .HtmlAttributes(new
        {
            style = "text-align:center;width:500px;"
        });
    }).Resizable(true)
       .Pageable(pageable => pageable
                //.Refresh(true)
                .PageSize(20)
                .PageSizes(true)
                //.ButtonCount(5)
                )
       .Events(e=>e.Save("onSave"))
    .Editable(editable => editable.Mode(TreeListEditMode.InLine))
    .DataSource(dataSource => dataSource

         .Create(create => create.Action("Create", "JobAdvertisement"))
        .Read(read => read.Action("GetList", "JobAdvertisement", new { @area = "Recruitment", jobid = Model.ReferenceTypeId, lovtype = Model.Code, parentid = Model.Id }))
        .Update(update => update.Action("Update", "JobAdvertisement"))
        //.Destroy(delete => delete.Action("Destroy", "JobAdvertisement"))

        .Model(m =>
        {
            m.Id(f => f.Id);
            m.ParentId(f => f.ParentId);
            m.Expanded(true);
            m.Field(f => f.Name);
            m.Field(f => f.Description);
            m.Field(f => f.Id);
            m.Field(f => f.CreatedDate);
            m.Field(f => f.LastUpdatedDate);
            m.Field(f => f.Status);
            m.Field(f => f.EnableDescription);
        })
    )
    .Height(540)
)
                @*@(Html.Kendo().Grid<ListOfValueViewModel>
                    ()
                    .Name("grid").Height(850)
                     .ToolBar(toolbar =>
                     {
                         toolbar.Create().Text("Add");
                         //toolbar.Save();
                     })
                    .Columns(columns =>

                    {
                        columns.Command(command =>
                        {
                            command.Edit().Text(" ").UpdateText(" ").CancelText(" ");
                            command.Destroy().Text(" ");
                        }).Width(120);
                        columns.Bound(c => c.Name);
                        columns.Bound(c => c.Id).Hidden(true);
                    })
                    .Editable(editable => editable.Mode(GridEditMode.InLine).DisplayDeleteConfirmation(true))
                    .Scrollable(x => x.Enabled(true))
                                .Sortable(srt => srt.Enabled(true))
                                .Selectable(select => select.Enabled(false))
                                .Filterable(f => f.Extra(false)
                                                                    .Operators(o => o.ForString(s => s.Clear()
                                                                    .Contains("Contains")
                                                                    .IsEqualTo("Is equal to")
                                                                )))

                                .AutoBind(true)
                                .DataSource(
                                dataSource => dataSource
                                .Ajax()

                                   .Read(read => read.Action("GetList", "JobAdvertisement", new { @area = "Recruitment", jobid=Model.ReferenceTypeId, lovtype=Model.Code, parentid = Model.Id}))
                                .Model(model =>
                                {
                                    model.Id(p => p.Id);
                                }
                                )
                                )
                               )*@

            </div>


        </div>
        <div>



            @*@(Html.Kendo().Grid<ListOfValueViewModel>
                ()
                .Name("UserRolegrid").Width(400)
                .ToolBar(toolbar =>
                toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateList();'>Create ListofValue</button>"))

                //toolbar.Custom().Text("Create Group").HtmlAttributes(new { href = "javascript:OnCreateGroup();" }))
                .Columns(columns =>
                {
                    //columns.Bound(c => c.Id).Width(140).Hidden(true);
                    //  columns.Bound(c => c.Id).Title(" ").Width(100).ClientTemplate("<a class='btn btn-success' onclick='return OnEditGroup(\"#=Id#\");'><i class='fad fa-edit'></i> Edit</a>");
                    columns.Command(command =>
                    {
                        command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditList").HtmlAttributes(new { @class = "action-icon"});
                        command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>")/*.Click("OnDeleteUserRoleStageChild")*/.HtmlAttributes(new { @class = "action-icon"});
                    }).Title("Action").Width(150);
                    // columns.Bound(c => c.Name);
                    columns.Bound(c => c.Name);
                    //columns.Bound(c => c.StatusCode).ClientTemplate("#=generateTemplate(StatusCode)#");




                })
                 .Scrollable(x => x.Enabled(false))
                            .Sortable(srt => srt.Enabled(true))
                            .Selectable(select => select.Enabled(false))
                            .Filterable(f => f.Extra(false)
                                                                .Operators(o => o.ForString(s => s.Clear()
                                                                .Contains("Contains")
                                                                .IsEqualTo("Is equal to")
                                                            )))
                            .Pageable(pageable => pageable
                            .Refresh(true)

                            .PageSizes(true)
                            .ButtonCount(5))
                            .AutoBind(true)
                            .DataSource(
                            dataSource => dataSource
                            .Ajax()
                            .PageSize(10)
                            //.Events(events => events.Error("OnError"))
                            .Read(read => read.Action("GetList", "JobAdvertisement", new { @area = "Recruitment" }))
                            .Model(model => model.Id(p => p.Id))
                            )
                      )*@
        </div>


        <div class="cms-slidebar-footer">
            @*<button type="button" class="btn btn-light" onclick="closeNavMemberGroup();">Close</button>*@
            <input type="submit" class="btn btn-primary" value="Save" onclick="OnSave(event)" id="submitBtn" />
        </div>

        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.DataAction)
        @Html.HiddenFor(x => x.ListOfValueType)
        @Html.HiddenFor(x => x.Code)
        @Html.HiddenFor(x => x.Json)
        @Html.HiddenFor(x => x.ReferenceTypeId)
        @Html.HiddenFor(x => x.ReferenceTypeCode)
    </form>
</div>


<script type="text/javascript">

    $(document).ready(function () {
        if ('@ViewBag.Success' == "True") {
            closeNavMemberGroup();

        }

    });

    function closeNavMemberGroup() {
       // window.parent.CloseIframePopup();
        var win = GetMainWindow();
        win.CloseWindow();
        return false;
    }

</script>