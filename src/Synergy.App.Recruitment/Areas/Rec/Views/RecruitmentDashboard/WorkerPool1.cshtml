
@using CMS.UI.ViewModel
@using CMS.Common
@inject CMS.Common.IUserContext _userContext
@{
    ViewData["Title"] = "Worker Pool";
    Layout = "/Views/Shared/_PopupLayout.cshtml";
    // Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
}

@model ApplicationViewModel

<script type="text/javascript">
    $(document).ready(function (){
        //alert('@_userContext.UserRoleCodes.Contains("HOD")');
       // alert('@Model.UserRoleCodes' + " " + '@Model.TaskStatus');
    });
        function save() {
            debugger


            var cgrid3 = $("#grid").data("kendoGrid");

            var ccount = cgrid3.dataSource.data().length;
            //$("#kgrdColumnMetadatas").length
            if (ccount > 0) {
                //var detail = JSON.stringify($("#kgrdColumnMetadatas").data().kendoGrid.dataSource.data());
                var detail = JSON.stringify(cgrid3.dataSource.data());
                // console.log(detail);
                $("#JsonWorkerPool1").val(detail);
            }
        }

          var onAjaxSuccess = function (res) {
       // alert("test");
        if (res.success) {
           //
           // alert("test123");
            window.parent.TaskFormSubmission("");
            ShowNotification("Saved Successfully", "success");
            $("#grid").data("kendoGrid").dataSource.read();
        }
        else {
           //
            //alert(res.error);
            window.parent.TaskFormSubmission(res.error);
           //showError(res.error);
        }
    };

    function error_handler(e) {

        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    }
                    );
                }
            }
            );
            alert(message);
        }
    }
    $(function () {
        $('#grid').on('click', ':radio', function () {
            var checked = $(this).is(':checked');
            var grid = $('#grid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

               // alert("test");
                dataItem.set('HRApprovl', $(this).val());

                //alert("test");
                dataItem.set('HodApprovl', $(this).val());

                dataItem.set('PlanningApprovl', $(this).val());

                dataItem.set('EDApprovl', $(this).val());





        })
    })

    function onGridSaveInfo(arg) {

        //alert("test");
        //var criteriaId = $("#HRHeadApproval_HRHeadApproval").data().kendoDropDownList.value();
        // alert(criteriaId)
        //arg.model.set("HRApprovl", criteriaId);


    }
      function OnApplication(Id, appId) {
        @*iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area="Recruitment"})?candidateProfileId=' + Id + '&applicationId=' + appId;
          OpenIframePopup1(1000, 1200, 'Candidate Profile Details');*@
           var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("PrintableView", "CandidateProfile", new { @area = "Recruitment" })?candidateProfileId=' + Id + '&applicationId=' + appId;
          win.OpenWindow({ Title: 'Candidate Profile Details', Width: 1000, Height: 1200 });
        return false;
    }
    function OnAddT(id,level,level0) {
        //alert(id);
        $.ajax({
            type: "POST",
            url: '/recruitment/recruitmentdashboard/UpdateWorkerApproval',
            data: { id: id, approval: true, level: level, level0: level0 },
            success: function (data) {
                $("#grid").data("kendoGrid").dataSource.read();

            },
            dataType: "json",
        });
    }

    function OnAddF(id, level, level0) {
        $.ajax({
            type: "POST",
            url: '/recruitment/recruitmentdashboard/UpdateWorkerApproval',
            data: { id: id, approval: false, level: level, level0: level0  },
            success: function (data) {
                $("#grid").data("kendoGrid").dataSource.read();

            },
            dataType: "json",
        });
    }


</script>
<script id="criteriatype_template" type="text/x-kendo-template">
    #=data.HRApprovl#
</script>
<style>
    .k-grid td, .k-grid th {
        font-size: 14px !important;
    }

    .tb-bg {
        /*background-color:cadetblue;*/
        background-color: #17a2b8 !important;
        color: #fff;
        font-weight: 500 !important;
        text-align: center !important;
    }

    .tb-bg1 {
        /*background-color: cornflowerblue;*/
        background-color: #ffc107 !important;
        color: #000;
        font-weight: 500 !important;
        text-align: center !important;
    }

    .tb-bg2 {
        /* background-color: darkcyan;*/
        background-color: #17a2b8 !important;
        color: #fff;
        font-weight: 500 !important;
        text-align: center !important;
    }

    .k-footer-template {
        background-color: #DAEDFF
    }

    .k-grid-header .k-header, .k-grid-header thead, .k-grid-header .k-hierarchy-cell {
        background-color: #527ab8;
    }

        .k-grid-header thead a {
            color: #fff !important;
        }
</style>

<div class="row" style="margin-left:15px;">
    <form asp-area="Recruitment" asp-controller="RecruitmentDashBoard" asp-action="ManageWorkerPool1"
          method="post" data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
          data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
          data-ajax="true" data-ajax-method="POST">
        <div class="text-danger" asp-validation-summary="All" style="font-size:14px;"></div>
        @if (Model.TaskStatus == "INPROGRESS" && Model.TaskStatus == "OVERDUE" && (Model.UserRoleCodes.Contains("ORG_UNIT")|| Model.UserRoleCodes.Contains("HRHEAD") || Model.UserRoleCodes.Contains("PLANNING") || Model.UserRoleCodes.Contains("ED")))
        {
            <input name="selectall" type="radio" value=true onclick="OnAddT('@Model.WorkerBatchId','@Model.level',true)" /> <span>Select All</span>
            <input name="selectall" type="radio" value=false onclick="OnAddF('@Model.WorkerBatchId','@Model.level',true)" /> <span>Deselect All</span>
        }
        else
        {
            <input name="selectall" type="radio" value=true onclick="OnAddT('@Model.WorkerBatchId','@Model.level',true)" disabled/> <span>Select All</span>
            <input name="selectall" type="radio" value=false onclick="OnAddF('@Model.WorkerBatchId','@Model.level',true)" disabled/> <span>Deselect All</span>
        }

        <div class="row" style="padding:10px;">

            @(Html.Kendo().Grid<ApplicationViewModel>
    ()
    .Name("grid").Width(900).Height(500)
    //.ToolBar(toolbar =>
    //toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateBatch();'><i class='fa fas fa-plus'></i>&nbsp;Create Batch</button>"))
    //.ToolBar(toolBar =>
    //{

    //    toolBar.Save();
    //})
    .Columns(columns =>

    {
        //columns.Command(command =>
        //{
        //    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditBatch").HtmlAttributes(new { @class = "action-icon" });
        //    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteBatch").HtmlAttributes(new { @class = "action-icon" });
        //}).Title("Action").Width(100);
        columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:Id#\");'><i class='far fa-address-card'></i>&nbsp;View</button>").Width(150).Title("View Candidate Profile").HtmlAttributes(new { style = "text-align:center" }).Locked(true).Lockable(false);
        columns.Bound(c => c.Id).Hidden(true);

        columns.Bound(c => c.FullName).Width(150).Locked(true).Lockable(false);
        columns.Bound(c => c.PassportNumber).Width(150);

        columns.Bound(c => c.PositionName).Width(150);
        columns.Group(group => group
               .Title("Working Experience (In Yrs)").HeaderHtmlAttributes(new { @class = "tb-bg1" })
               .Columns(info =>
               {
                   info.Bound(c => c.AbroadExperiance).Title("Abroad").Width(150);
                   info.Bound(c => c.IndiaExperiance).Title("India").Width(150);

                   info.Bound(c => c.TotalWorkExperience).Title("Total").Width(150);

               }).Width(120));
        columns.Bound(c => c.SalaryOnAppointment).Width(150);
        columns.Bound(c => c.Age).Width(120);
        columns.Bound(c => c.AbroadExperiance).Width(150);
        // columns.Bound(c => c.).Width(200);

        if (Model.level == 1 && Model.UserRoleCodes.Contains("ORG_UNIT") && Model.TaskStatus=="INPROGRESS" && Model.TaskStatus == "OVERDUE")
        {
            //columns.Bound(c => c.HodApprovl).Title("Hod Approval").ClientTemplate("<input type='checkbox' #= HodApprovl ? checked='checked' :'' # />").Width(200);
            columns.Template("<input onclick='OnAddT(\"#:Id#\",1,false)' name='hodname#=Id#' type='radio' value=true #= HodApprovl==true ? checked='checked':''# /> Yes" +
"<input onclick='OnAddF(\"#:Id#\",1,false)' name='hodname#=Id#' type='radio' value=false #= HodApprovl==false ? checked='checked':'' # /> No ").Title("HOD Approval").Width(150); ;

        }
        else
        {
            //columns.Bound(c => c.HodApprovl).Title("Hod Approval").ClientTemplate("<input type='checkbox' #= HodApprovl ? checked='checked' :'' # disabled='disabled'/>").Width(200);
            columns.Template("<input  name='hodname#=Id#' type='radio' value=true #= HodApprovl==true ? checked='checked':''# disabled='disabled'/> Yes" +
"<input name='hodname#=Id#' type='radio' value=false #= HodApprovl==false ? checked='checked':''# disabled='disabled'/> No ").Title("HOD Approval").Width(150); ;
            //   columns.Bound(c => c.HODApprovalName).ClientTemplate("<span>#:HODApprovalName#</span>").Title("HR Head Approval").Width(120);
        }

        columns.Bound(c => c.HodComment)/*.ClientTemplate("<input type='text' #= HodComment # />")*/.Width(200);
        if (Model.level == 2 && Model.UserRoleCodes.Contains("HRHEAD") && Model.TaskStatus == "INPROGRESS" && Model.TaskStatus == "OVERDUE")
        {
            //  columns.Bound(c => c.HRApprovl).Title("HR Head Approval").ClientTemplate("<input type='radio' #= HRApprovl ? checked='checked' :'' # />").Width(200);
            //   columns.Bound(c => c.HRHeadApprovalName).Title("HR Head Approval")/*.EditorTemplateName("WorkerPoolApprovalDropdown")*//*.ClientTemplateId("criteriatype_template")*/.Width(200);
            //columns.Bound(c => c.HRApprovl).Title("HR Head Approval").EditorTemplateName("WorkerPoolApprovalDropdown").ClientTemplateId("criteriatype_template").Width(200);
            //columns.Bound(c => c.HRApprovl).ClientTemplate("<input type='checkbox' value='Approved'  /> Approve").Title("HR Head Approval");
            /*"<input name='name#=HRApprovl#' type='radio' value='Rejected' #= HRApprovl=='false' ? checked='checked':'' # /> Reject ")*/
            columns.Template("<input onclick='OnAddT(\"#:Id#\",2,false)' name='hrname#=Id#' type='radio' value=true #= HRApprovl==true ? checked='checked':'' # /> Yes <input onclick='OnAddF(\"#:Id#\",2,false)' name='hrname#=Id#' type='radio' value=false #= HRApprovl==false ? checked='checked':'' # /> No").Title("HR Head Approval").Width(150);
            //"<input name='name#=HRApprovl#' type='radio' value='Rejected' #= ApprovalStatus=='Rejected' ? checked='checked':'' # /> Reject #} else {# #=Level3Status# #}#").Title("Level3 Approval Action").Width(200);
        }
        else
        {
            //  columns.Bound(c => c.HRApprovl).Title("HR Head Approval").ClientTemplate("<input type='checkbox' #= HRApprovl ? checked='checked' :'' # disabled='disabled'/>").Width(200);
            columns.Template("<input name='hrname#=Id#' type='radio' value=true #= HRApprovl==true ? checked='checked':'' # disabled='disabled'/> Yes" +
            "<input name='hrname#=Id#' type='radio' value=false #= HRApprovl==false ? checked='checked':'' # disabled='disabled'/> No ").Title("HR Head Approval").Width(150);

        }


        columns.Bound(c => c.HRHeadComment)/*.ClientTemplate("<input type='text' #= HRHeadComment # />")*/.Width(200);

        if (Model.level == 3 && Model.UserRoleCodes.Contains("PLANNING") && Model.TaskStatus == "INPROGRESS" && Model.TaskStatus == "OVERDUE")
        {
            columns.Template("<input onclick='OnAddT(\"#:Id#\",3,false)' name='plname#=Id#' type='radio' value=true #= PlanningApprovl==true ? checked='checked':'' # /> Yes" +
"<input onclick='OnAddF(\"#:Id#\",3,false)' name='plname#=Id#' type='radio' value=false #= PlanningApprovl==false ? checked='checked':'' # /> No ").Title("Planning Approval").Width(150); ;

            //            columns.Bound(c => c.PlanningApprovl).Title("Planning Approval").ClientTemplate("<input type='checkbox' #= PlanningApprovl ? checked='checked' :'' # />").Width(120);
        }
        else
        {
            // columns.Bound(c => c.PlanningApprovl).Title("Planning Approval").ClientTemplate("<input type='checkbox' #= PlanningApprovl ? checked='checked' :'' # disabled='disabled'/>").Width(200);
            columns.Template("<input name='plname#=Id#' type='radio' value='Approved' #= PlanningApprovl==true ? checked='checked':'' # disabled='disabled'/> Yes" +
"<input name='plname#=Id#' type='radio' value=false #= PlanningApprovl==false ? checked='checked':'' # disabled='disabled'/> No ").Title("Planning Approval").Width(150); ;

        }

        columns.Bound(c => c.PlanningComment)/*.ClientTemplate("<input type='text' #= PlanningComment # />")*/.Width(200);

        if (Model.level == 4 && Model.UserRoleCodes.Contains("ED") && Model.TaskStatus == "INPROGRESS" && Model.TaskStatus == "OVERDUE")
        {
            columns.Template("<input onclick='OnAddT(\"#:Id#\",4,false)' name='edname#=Id#' type='radio' value=true #= EDApprovl==true ? checked='checked':'' # /> Yes" +
  "<input onclick='OnAddF(\"#:Id#\",4,false)' name='edname#=Id#' type='radio' value=false #= EDApprovl==false ? checked='checked':'' # /> No ").Title("ED Approval").Width(150); ;

            //columns.Bound(c => c.EDApprovl).Title("ED Approval").ClientTemplate("<input type='checkbox' #= EDApprovl ? checked='checked' :'' # />").Width(120);
        }
        else
        {
            //  columns.Bound(c => c.EDApprovl).Title("ED Approval").ClientTemplate("<input type='checkbox' #= EDApprovl ? checked='checked' :'' # disabled='disabled'/>").Width(120);
            columns.Template("<input name='edname#=Id#' type='radio' value='Approved' #= EDApprovl==true ? checked='checked':'' # disabled='disabled'/> Yes" +
 "<input name='edname#=Id#' type='radio' value='Rejected' #= EDApprovl==false ? checked='checked':'' # disabled='disabled'/> No ").Title("ED Approval").Width(150); ;

        }

        columns.Bound(c => c.EDComment)/*.ClientTemplate("<input type='text' #= PlanningComment # />")*/.Width(200);
        //columns.Bound(c => c.TargetBatchCount).Width(120);
        //columns.Bound(c => c.Id).Title("Send Batch").Width(120).ClientTemplate("#if(BatchStatusName=='Draft'){#<button class='btn btn-info' onclick='UpdateBatch(\"#:Id#\")'>Send To Hiring Manager</button>#}#").Width(280);
    })//.Events(e => e.Change("onGridSaveInfo"))
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Resizable(resizable => resizable.Columns(true))
    .Scrollable(x => x.Enabled(true))
                .Sortable(srt => srt.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                                    .Operators(o => o.ForString(s => s.Clear()
                                                    .Contains("Contains")
                                                    .IsEqualTo("Is equal to")
                                                )))
                .Pageable(pageable => pageable
                .Refresh(true)

                .PageSizes(true)
                .ButtonCount(5))
                 .AutoBind(true)
                .DataSource(
                dataSource => dataSource
                .Ajax()
                .PageSize(10)
                  // .Batch(true)
                  //  .Events(events => events.Error("error_handler"))
                  .Read(read => read.Action("ReadWorkPool1Data", "RecruitmentDashboard",new { workerbatchid = Model.WorkerBatchId }))
                .Model(model =>
                { model.Id(p => p.Id);
                    model.Field(p => p.FullName).Editable(false);
                    model.Field(p => p.PositionName).Editable(false);
                    // model.Field(p => p.SalaryOnAppointment).Editable(false);
                    model.Field(p => p.Age).Editable(false);
                    model.Field(p => p.AbroadExperiance).Editable(false);
                    if (Model.level == 1)
                    {
                        model.Field(p => p.HRApprovl).Editable(false);
                        model.Field(p => p.HRHeadComment).Editable(false);
                        model.Field(p => p.PlanningApprovl).Editable(false);
                        model.Field(p => p.PlanningComment).Editable(false);
                        model.Field(p => p.EDApprovl).Editable(false);
                        model.Field(p => p.EDComment).Editable(false);
                        model.Field(p => p.SalaryOnAppointment).Editable(false);
                    }
                    else if(Model.level==2)
                    {

                        model.Field(p => p.HodApprovl).Editable(false);
                        model.Field(p => p.HodComment).Editable(false);
                        model.Field(p => p.PlanningApprovl).Editable(false);
                        model.Field(p => p.PlanningComment).Editable(false);
                        model.Field(p => p.EDApprovl).Editable(false);
                        model.Field(p => p.EDComment).Editable(false);
                        model.Field(p => p.SalaryOnAppointment).Editable(false);
                    }
                    else if (Model.level == 3)
                    {
                        model.Field(p => p.HRApprovl).Editable(false);
                        model.Field(p => p.HRHeadComment).Editable(false);
                        model.Field(p => p.HodApprovl).Editable(false);
                        model.Field(p => p.HodComment).Editable(false);
                        model.Field(p => p.EDApprovl).Editable(false);
                        model.Field(p => p.EDComment).Editable(false);
                        model.Field(p => p.SalaryOnAppointment).Editable(false);
                    }
                    else if (Model.level == 4)
                    {
                        model.Field(p => p.HRApprovl).Editable(false);
                        model.Field(p => p.HRHeadComment).Editable(false);
                        model.Field(p => p.HodApprovl).Editable(false);
                        model.Field(p => p.HodComment).Editable(false);
                        model.Field(p => p.PlanningApprovl).Editable(false);
                        model.Field(p => p.PlanningComment).Editable(false);
                        model.Field(p => p.SalaryOnAppointment).Editable(false);
                    }
                    else if (Model.level == 5)
                    {
                        model.Field(p => p.HRApprovl).Editable(false);
                        model.Field(p => p.HRHeadComment).Editable(false);
                        model.Field(p => p.HodApprovl).Editable(false);
                        model.Field(p => p.HodComment).Editable(false);
                        model.Field(p => p.PlanningApprovl).Editable(false);
                        model.Field(p => p.PlanningComment).Editable(false);
                        model.Field(p => p.EDApprovl).Editable(false);
                        model.Field(p => p.EDComment).Editable(false);

                    }

                }

                )
                )
          )





        </div>


        <div class="row">
            <input type="submit" class="btn btn-primary" value="Approve" onclick="save()" style="display:none" />
        </div>
        @Html.HiddenFor(x => x.level)
        @Html.HiddenFor(x => x.WorkerBatchId)
        @Html.HiddenFor(x => x.JsonWorkerPool1)

    </form>

</div>

