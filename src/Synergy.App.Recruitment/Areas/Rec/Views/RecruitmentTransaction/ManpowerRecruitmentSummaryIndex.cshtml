@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@*@using Kendo.Mvc.UI*@

@{
    ViewBag.Title = "Manpower Requirement Summary";
    //Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
    Layout = null;
}


<script id="template" type="text/kendo-tmpl">
    <iframe name="template" src="/Recruitment/ManpowerRequirementSummary/ManpowerRequirementSummaryVersion?summaryId=#=Id#" id="template" style='width:100%; overflow: hidden;' frameBorder='1'></iframe>
</script>
<script>

    $(document).ready(function () {

        GetManpowerRequirementList();
    });

    var columnDefs = [
        { children: [{ field: "JobTitle", headerName: "Position", minWidth: 150, pinned: 'left', }] },
        { children: [{ field: "OrganizationName", headerName: "Organization Unit", minWidth: 150, pinned: 'left', }] },
        { children: [{ field: "ManpowerType", headerName: "Job Type", minWidth: 140, pinned: 'left',}]},

        {
            cellStyle: { textAlign: 'center' },
            children: [
                {
                    field: "JobDescriptionId", headerName: "Job Description", minWidth: 150,
                    cellRenderer: params => {
                        if (params.data.JobDescriptionId != null) {
                            return "<div ><i class='fa fas fa-eye' style='cursor:pointer;' title='View Job Description' onclick='OnViewJobDescription(\"" + params.value + "\",\"" + params.data.JobId + "\")'></i></div>"
                        }
                    }
                },
                {
                    field: "Active", headerName: "Job Advertisement", minWidth: 150,
                    cellRenderer: params => {
                        if (params.value == 1) {
                            return "<div ><i class='fa fas fa-eye' style='cursor:pointer;' title='View Job Advertisement' onclick='OnViewJobAdv(\"" + params.data.JobAdvertisementId + "\",\"" + params.data.JobId + "\")'></i></div>"
                        }
                    }
                },
                {
                    field: "VersionNo", headerName: "Version No", minWidth: 150,
                    cellRenderer: params => {
                        return "<a style='cursor:pointer;color:blue' onclick='OnViewVersion(\"" + params.data.ServiceId + "\")'>" + params.value + "</a>"
                    }
                },
                { field: "Requirement", headerName: "Requirement", minWidth: 140, },
                { field: "Seperation", headerName: "Seperation", minWidth: 140, },
                { field: "Available", headerName: "Available", minWidth: 140, },
                { field: "SubContract", headerName: "Sub Contract", minWidth: 140, },
                { field: "Transfer", headerName: "Transfer", minWidth: 140, },
                { field: "Balance", headerName: "Balance", minWidth: 140, },
            ]
        },
        {
            headerName: "Comments",
            cellStyle: { textAlign: 'center' },
            children: [
                { field: "OrgUnit", headerName: "Organization Unit", minWidth: 140, },
                { field: "PlanningUnit", headerName: "Planning Unit", minWidth: 140, },
                { field: "Hr", headerName: "HR", minWidth: 140, },
                {
                    field: "Id", headerName: "Comments", minWidth: 150,
                    cellRenderer: params => {
                        return "<div ><i class='fa fa-plus' style='cursor:pointer;' title='Add Comment' onclick='OnCreateComment(\"" + params.data.ServiceId + "\")'></i></div>"
                    }
                },
            ]
        },
        {
            headerName: "Recruitment Process",
            cellStyle: { textAlign: 'center' },
            children: [
                { field: "ShortlistedByHr", headerName: "Shortlisted By HR", minWidth: 140, },
                { field: "ShortlistedForInterview", headerName: "Shortlisted By HM", minWidth: 140, },
                { field: "DirectHiring", headerName: "Direct Hiring", minWidth: 140, },
                { field: "IntentToOffer", headerName: "Intent To Offer", minWidth: 140, },
                { field: "WorkerPool", headerName: "Worker Appointment", minWidth: 140, },
                { field: "FinalOffer", headerName: "Final Offer", minWidth: 140, },
                { field: "BusinessVisa", headerName: "Overseas Business Visa", minWidth: 140, },
                { field: "WorkerVisa", headerName: "Overseas Work Visa", minWidth: 140, },
                { field: "VisaTransfer", headerName: "Local Visa Transfer", minWidth: 140, },
                { field: "WorkPermit", headerName: "Local Work Permit", minWidth: 140, },
                { field: "CandidateJoined", headerName: "Staff Joining", minWidth: 140, },
                { field: "WorkerJoined", headerName: "Worker Joining", minWidth: 140, },
                { field: "Joined", headerName: "Joined", minWidth: 140, },
                { field: "PostStaffJoined", headerName: "Post Staff Joined", minWidth: 140, },
                { field: "PostWorkerJoined", headerName: "Post Worker Joined", minWidth: 140, },
                {
                    field: "Id", headerName: "View Applicants", minWidth: 150,
                    cellRenderer: params => {
                        return "<div ><i class='fa fa-eye' style='cursor:pointer;' title='View Applicants' onclick='OnViewApplicants(\"" + params.data.JobId + "\",\"" + params.data.OrganizationId + "\")'></i></div>"
                    }
                },
            ]
        },
        { children: [{ field: "CreatedByName", headerName: "Created By", minWidth: 150, }] },
        {
            children: [{
                field: "CreatedDate",
                headerName: "Created Date", minWidth: 150,
                cellRenderer: (data) => {
                    debugger;
                    if (data.value != null && data.value != "") {
                        var d = new Date(data.value);
                        return d.getDate() + "." + (d.getMonth()+1) + "." + d.getFullYear();
                    }
                }
            },] },
        {
            children: [
                {
                    field: "Id", headerName: "Actions", minWidth: 150,
                    cellRenderer: params => {
                        return "<div><i class='fa fas fa-pencil' style='cursor:pointer;' title='Edit' onclick='OnEdit(\"" + params.data.ServiceId + "\");'></i><i class='fa fas fa-trash' style='cursor:pointer;' title='Delete' onclick='OnDelete(\"" + params.data.ServiceId + "\");'></i></div>"
                    }
                }
            ],
        },
        //{
        //    children: [
        //        {
        //            field: "Id", headerName: "Attachment", minWidth: 150,
        //            cellRenderer: params => {
        //                return "<div><i class='fa fas fa-plus' style='cursor:pointer;' title='Attach File' onclick='OnAttachDocument(\"" + params.data.OrganizationId + "\");'></i></div>"
        //            }
        //        }
        //    ],
        //},
    ];

    function GetManpowerRequirementList() {
        document.getElementById("ManpowerRequirementGrid").innerHTML = "";

        gridConfig(
            "ManpowerRequirementGrid",
            "/Rec/RecruitmentTransaction/ReadManpowerRequirementSummaryData",
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    $('.toggle-menu').bind("click", function (e) {

        var isexist = document.getElementsByClassName("sidebar-closed");
        var grid = document.getElementsByClassName("k-grid-content");
        var g = grid[0].style.width;
        g = g.split('px');
        if (isexist.length > 0) {
            var w = parseInt(g[0]) - 257;
            grid[0].style.width = w + "px";

        }
        else {
            var w = parseInt(g[0]) + 257;
            grid[0].style.width = w + "px";

        }
    });


    function cellClickI(jobid) {
        //e.preventDefault();
       // alert(jobid)
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
       // iframeOpenUrl = '@Url.Action("ViewJobAdvertisement", "JobAdvertisement", new { @area = "Recruitment"})?jobId=' + jobid;
       // OpenIframePopup(1000, 1200, 'Job Advertisement');
        var url = "/Recruitment/JobAdvertisement/ViewJobAdvertisement?jobId=" + jobid;
      //  window.location.href = url;
        LoadPartailView(url, $('#cms-content'));
      //  alert("open")
    }

    function cellClickA(jobid, orgid) {
        //e.preventDefault();
      //  alert(jobid)
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
      //  iframeOpenUrl = '@Url.Action("ViewJobAdvertisementA", "JobAdvertisement", new { @area = "Recruitment"})?jobId=' + jobid;
      //   OpenIframePopup(1000, 1200, 'Job Advertisement');
        var url = "/Recruitment/JobAdvertisement/ViewJobAdvertisementA?jobId=" + jobid + "&orgid=" + orgid;
      //   window.location.href = url;
         LoadPartailView(url, $('#cms-content'));
      //  alert("open")
    }
    var expandedRow;
    function detailExpand(e) {
        // Only one open at a time

        if (expandedRow != null && expandedRow[0] != e.masterRow[0]) {
            var grid = $('#kgrdManpowerRequirementSummary').data('kendoGrid');
            grid.collapseRow(expandedRow);
        }
        expandedRow = e.masterRow;
    }

    function OnAddJobDesc(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        @*iframeOpenUrl = '@Url.Action("Index", "Task", new { @area= "Cms" })?templateCode1=JOBDESCRIPTION_HM&referenceId=' + dataItem.Id + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_ManpowerRequirementSummary' + '&isPopUp=true&udf1=' + dataItem.JobId + "&udf2=" + dataItem.OrganizationId + "&udfValue1=" + dataItem.JobTitle + "&udfValue2=" + dataItem.OrganizationName;
        OpenIframePopup(1000, 1200, "Job Description Request");*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Index", "Task", new { @area = "Cms" })?templateCode1=JOBDESCRIPTION_HM&referenceId=' + dataItem.Id + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_ManpowerRequirementSummary' + '&isPopUp=true&udf1=' + dataItem.JobId + "&udf2=" + dataItem.OrganizationId + "&udfValue1=" + dataItem.JobTitle + "&udfValue2=" + dataItem.OrganizationName;
        win.OpenWindow({ Title: 'Job Description Request', Width: 1000, Height: 1000 });
        return false;

         @*e.preventDefault();
         var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        iframeOpenUrl = '@Url.Action("JobDescription", "JobDescription", new { @area = "Recruitment" })?jobId=' + dataItem.JobId + "&orgId=" + dataItem.OrganizationId;
         OpenIframePopup(450,700,'Add Job Description');*@
    }

    function OnEditJobDesc(e) {
         e.preventDefault();
         var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        @*iframeOpenUrl = '@Url.Action("EditJobDescription", "JobDescription", new { @area = "Recruitment" })?jobId=' + dataItem.JobId + "&orgId=" + dataItem.OrganizationId;
        OpenIframePopup(1000, 850, 'Manage Job Description');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditJobDescription", "JobDescription", new { @area = "Recruitment" })?jobId=' + dataItem.JobId + "&orgId=" + dataItem.OrganizationId;
        win.OpenWindow({ Title: 'Manage Job Description', Width: 1000, Height: 850 });
        return false;
    }
    function OnViewJobDesc(id) {
        @*iframeOpenUrl = '@Url.Action("Task", "ManpowerRequirementSummary", new { @area= "Recruitment" })?manpowerId=' + id;
        OpenIframePopup(1000, 1200, "View Job Description Request");*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Task", "ManpowerRequirementSummary", new { @area = "Recruitment" })?manpowerId=' + id;
        win.OpenWindow({ Title: 'View Job Description Request', Width: 1000, Height: 1000 });
        return false;
    }

    function OnViewJobDescription(jobdid, jobid) {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("JobDescription", "RecruitmentTransaction", new { @area = "Rec" })?jobId=' + jobid;
        win.OpenWindow({ Title: 'View Job Description', Width: 1000, Height: 850 });
        return false;
    }

    function OnAdd() {
        var win = GetMainWindow();
        var url = '/Cms/Page?lo=Popup&pageType=Service&cbm=OnAfterCreateMP&source=Create&dataAction=Create&templateCodes=REC_MANPOWER_REQUIREMENT&portalId=' + '@ViewBag.PortalId';
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Add Manpower Requirement', Width: 1000, Height: 750 });
        return false;
    }

    function OnAfterCreateMP() {
        GetManpowerRequirementList();
    }

     function OnEdit(serId) {
         var win = GetMainWindow();
         var url = '/Cms/Page?lo=Popup&pageType=Service&cbm=OnAfterCreateMP&source=Edit&dataAction=Edit&templateCodes=REC_MANPOWER_REQUIREMENT&portalId=' + '@ViewBag.PortalId' + '&recordId=' + serId;
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Edit Manpower Requirement', Width: 1000, Height: 750 });
        return false;

    }

    function OnAttachDocument(e) {
         e.preventDefault();
         var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
         @*iframeOpenUrl = '@Url.Action("EditManpowerRequirement", "ManpowerRequirementSummary", new { @area = "Recruitment" })?id=' + dataItem.Id;
         OpenIframePopup(1000, 1200, 'Edit Manpower Requirement');*@
          var win = GetMainWindow();
          win.iframeOpenUrl = '@Url.Action("organizationDocument", "ManpowerRequirementSummary", new { @area = "Recruitment" })?id=' + dataItem.OrganizationId;
         win.OpenWindow({ Title: 'Organization Documents', Width: 900, Height: 600 });
        return false;

    }
    function OnCreateComment(id) {

        var win = GetMainWindow();
        var url = '/Cms/Page?lo=Popup&pageType=Service&cbm=OnAfterCreateMP&source=View&dataAction=View&templateCodes=REC_MANPOWER_REQUIREMENT&portalId=' + '@ViewBag.PortalId' + '&recordId=' + id;
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Add Comment', Width: 1000, Height: 750 });
        return false;
    }

    function OnViewComment(id,userrolecode) {

        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Comment", "ManpowerRequirementSummary", new { @area = "Recruitment" })?summaryId=' + id + '&userRoleCode=' + userrolecode;
        win.OpenWindow({ Title: 'View Comment', Width: 1000, Height: 1000 });
        return false;
    }

    function OnViewVersion(id) {
        debugger;
        var win = GetMainWindow();
        win.iframeOpenUrl = '/Cms/NtsVersion?recordId=' + id  +'&type='+'@NtsTypeEnum.Service';
        win.OpenWindow({ Title: 'View Version', Width: 1000, Height: 800 });
        return false;
    }

    function OnCreateJobAdv(jobId, orgId, requirement) {
        //e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        @*iframeOpenUrl = '@Url.Action("Index", "JobAdvertisement", new { @area = "Recruitment"})?summaryId=' + dataItem.Id;
        OpenIframePopup(1000, 1200,'Add Job Advertisement');*@
        var url = "/Recruitment/JobAdvertisement/Index?jobId=" + jobId + "&orgId=" + orgId + "&requirement=" + requirement+"&permission=@ViewBag.Permissions";
       // window.location.href = url;

        LoadPartailView(url, $('#cms-content'));
    }
     function OnView(id, jobid) {
        //e.preventDefault();
        //
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

       // var url = "/Recruitment/JobAdvertisement/ViewEditJobAdvertisement?jobId=" + dataItem.JobId + "&id=" + dataItem.Id;
        var url = "/Recruitment/JobAdvertisement/Index?jobId=" + jobid + "&id=" + id+ "&permission=@ViewBag.Permissions";
        //  window.location.href = url;
        LoadPartailView(url, $('#cms-content'));

    }
    function OnViewJobAdv(id, jobid)
    {
        debugger;
        if (id=="null") {
            id = "";
        }
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("JobAdvertisement", "RecruitmentTransaction", new { @area = "Rec" })?id=' + id + '&jobId=' + jobid+ '&layout=popup';
        win.OpenWindow({ Title: 'View Job Advertisement', Width: 1300, Height: 1000 });
        return false;
    }

    function OnDelete(serId) {

        var flag = confirm('Do you really want to delete?');

        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteManpowerRequirement", "RecruitmentTransaction", new { @area= "Rec" })?serviceId=' + serId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {

                    if (result.success) {
                        GetManpowerRequirementList();
                        ShowNotification("Deleted Successfully","success");
                    } else {
                        GetManpowerRequirementList();
                        alert("Job advertisement are already posted for this organization please inactive job advertisement before delete");
                    }
                },
                error: function (ert) {
                    GetManpowerRequirementList();
                    alert("Can't delete this record");
                }
            });
            return false;
        }
    }
    function IframePostbackScript() {
        $("#kgrdManpowerRequirementSummary").data("kendoGrid").dataSource.read();
    }

    function OnViewApplicants(jobid,orgid) {
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("ViewApplicationDetails", "RecruitmentTransaction", new { @area = "Rec" })?jobId='+jobid+'&orgId='+orgid ;
        win.OpenWindow({ Title: 'View Applicants', Width: 1200, Height: 750 });
        return false;
    }
</script>


<style>
    .k-pdf-export .k-filterable .k-grid-filter {
        display: none;
    }

    .k-grid td, .k-grid th {
        font-size: 14px !important;
    }

    .tb-bg {
        /*background-color:cadetblue;*/
        background-color: #17a2b8 !important;
        color: #fff;
        font-weight: 500 !important;
        text-align: center !important;
    }

    .tb-bg1 {
        /*background-color: cornflowerblue;*/
        background-color: #ffc107 !important;
        color: #000;
        font-weight: 500 !important;
        text-align: center !important;
    }

    .tb-bg2 {
        /* background-color: darkcyan;*/
        background-color: #17a2b8 !important;
        color: #fff;
        font-weight: 500 !important;
        text-align: center !important;
    }

    .k-footer-template {
        background-color: #DAEDFF
    }

    .k-grid-header .k-header, .k-grid-header thead, .k-grid-header .k-hierarchy-cell {
        background-color: #527ab8;
        color: #ffffff;
    }

        .k-grid-header thead a {
            color: #fff !important;
        }

    .k-grid tbody tr {
        line-height: 12px;
    }
</style>

<script type="x/kendo-template" id="page-template1">
    <div class="page-template1">
      <div class="footer">
        Page #: pageNum # of #: totalPages #
      </div>
    </div>
</script>

<div class="row" style="margin:15px;">
   
    <div class="col bot-margin" style="margin-top:20px">
        <div class="fa-2x pad-b-15 head">Manpower Requirement Summary</div>
        <div style="padding: 5px 0px;">
            @*@if (ViewBag.Permissions.Contains("AddManpowerRecruitment"))
            {*@
            <input type="button" class="btn btn-primary" onclick="OnAdd();" value="Add Manpower Requirement" />
            @*}*@
                        
        </div>

        <div id="ManpowerRequirementGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

        @*@(Html.Kendo().Grid<ManpowerRecruitmentSummaryViewModel>
        ()
        .Name("kgrdManpowerRequirementSummary").Excel(e => e.AllPages(true)).Pdf(pdf => pdf
        .AllPages()
        .AvoidLinks()
        // .PaperSize("A4")
        .Scale(0.3)
        .TemplateId("page-template1")
        .Margin("1cm", "1cm", "1cm", "1cm")
        .Landscape()
        .RepeatHeaders())
        .ToolBar(tools =>
        {
            tools.Excel();
            tools.Pdf();
        })
        .Columns(col =>
        {
            col.Bound(c => c.Id).Width(0).Exportable(false).Locked(true).Lockable(false);
            col.Bound(c => c.JobTitle).Title("Position").HeaderHtmlAttributes(new { title = "Position" }).Locked(true).Lockable(false).Width(130).ClientFooterTemplate("Total Count").Filterable(ftb => ftb.Multi(true).Search(true));
            col.Bound(c => c.OrganizationName).Locked(true).Lockable(false).Title("Organization Unit").HeaderHtmlAttributes(new { title = "Organization Unit" }).Width(170).Filterable(ftb => ftb.Multi(true).Search(true));
            col.Bound(c => c.ManpowerType).Locked(true).Lockable(false).Title("Job Type").HeaderHtmlAttributes(new { title = "Job Type" }).Width(150).Filterable(ftb => ftb.Multi(true).Search(true));

            col.Bound(c => c.JobDescriptionId).Title("Job Description").HtmlAttributes(new { id = "editbtn", title = "Job Advertisement" }).ClientTemplate("#if(JobDescriptionId!=null){#<i class='fa fas fa-eye' style='cursor:pointer;' title='View Job Description' onclick='OnViewJobDescription(\"#:JobDescriptionId#\",\"#:JobId#\")'></i>#}#").Exportable(false).Width(150);

            col.Bound(c => c.Active).Title("Job Advertisement").HtmlAttributes(new { id = "editbtn", title= "Job Advertisement" }).ClientTemplate("#if(Active==1){#<i class='fa fas fa-eye' style='cursor:pointer;' title='View Job Advertisement' onclick='OnViewJobAdv(\"#:JobAdvertisementId#\",\"#:JobId#\")'></i>#}#").Exportable(false).Width(150);

            col.Bound(c => c.VersionNo).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='OnViewVersion(\"#:Id#\")'>#:VersionNo#</a>").HeaderHtmlAttributes(new { title = "Version No" }).Width(150).Filterable(ftb => ftb.Multi(true).Search(true));
            col.Bound(c => c.Requirement).HeaderHtmlAttributes(new { title = "Requirement" }).Width(150).ClientFooterTemplate("#=sum#").Filterable(ftb => ftb.Multi(true).Search(true));
            col.Bound(c => c.Seperation).Title("Separation").HeaderHtmlAttributes(new { title = "Separation" }).Width(150).ClientFooterTemplate("#=sum#").Filterable(ftb => ftb.Multi(true).Search(true));
            col.Bound(c => c.Available).HeaderHtmlAttributes(new { title = "Available" }).Width(150).ClientFooterTemplate("#=sum#").Filterable(ftb => ftb.Multi(true).Search(true));
            col.Bound(c => c.Planning).HeaderHtmlAttributes(new { title = "Sub Contract" }).Title("Sub Contract").Width(150).ClientFooterTemplate("#=sum#").Filterable(ftb => ftb.Multi(true).Search(true));
            col.Bound(c => c.Transfer).HeaderHtmlAttributes(new { title = "Transfer" }).Width(150).ClientFooterTemplate("#=sum#").Filterable(ftb => ftb.Multi(true).Search(true));
            col.Bound(c => c.Balance).HeaderHtmlAttributes(new { title = "Balance" }).Width(150).ClientFooterTemplate("#=sum#").Filterable(ftb => ftb.Multi(true).Search(true));

            col.Group(group => group
            .Title("Comments").HeaderHtmlAttributes(new { @class = "tb-bg" })
            .Columns(info =>
            {
                info.Bound(c => c.OrgUnit).HeaderHtmlAttributes(new { title = "Organization Unit" }).ClientFooterTemplate("#=sum#").Width(150).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='OnViewComment(\"#:Id#\",\"ORG_UNIT\")'>#:OrgUnit#</a>").Filterable(ftb => ftb.Multi(true).Search(true));
                info.Bound(c => c.PlanningUnit).HeaderHtmlAttributes(new { title = "Planning Unit" }).ClientFooterTemplate("#=sum#").Title("Planning").Width(120).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='OnViewComment(\"#:Id#\",\"PLANNING\")'>#:PlanningUnit#</a>").Filterable(ftb => ftb.Multi(true).Search(true));
                info.Bound(c => c.Hr).HeaderHtmlAttributes(new { title = "HR" }).ClientFooterTemplate("#=sum#").Title("HR").Width(100).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='OnViewComment(\"#:Id#\",\"HR\")'>#:Hr#</a>").Filterable(ftb => ftb.Multi(true).Search(true));
                info.Command(c => c.Custom("Add").HtmlAttributes(new { @class = "k-primary" }).Text("<i class='fa fa-plus' title='Add Comment'></i>").Click("OnCreateComment")).Width(80).Exportable(false);

            }).Width(100));
            col.Group(group => group
            .Title("Recuritment Process").HeaderHtmlAttributes(new { @class = "tb-bg1" })
            .Columns(info =>
            {
                info.Bound(c => c.ShortlistedByHr).Width(150).ClientFooterTemplate("#=sum#").Title("Shortlisted By HR").HeaderHtmlAttributes(new { title = "Shortlisted By HR" });
                info.Bound(c => c.ShortlistedForInterview).Width(150).ClientFooterTemplate("#=sum#").Title("Shortlisted By HM").HeaderHtmlAttributes(new { title = "Shortlisted By HM" });
                //info.Bound(c => c.DirectHiring).Width(150).ClientFooterTemplate("#=sum#").Title("Direct Hiring").HeaderHtmlAttributes(new { title = "Direct Hiring" });
                info.Bound(c => c.IntentToOffer).Width(150).ClientFooterTemplate("#=sum#").Title("Intent To Offer").HeaderHtmlAttributes(new { title = "Intent To Offer" });
                info.Bound(c => c.WorkerPool).Width(150).ClientFooterTemplate("#=sum#").Title("Worker Appointment").HeaderHtmlAttributes(new { title = "Worker Pool" });
                info.Bound(c => c.FinalOffer).Width(150).ClientFooterTemplate("#=sum#").Title("Final Offer").HeaderHtmlAttributes(new { title = "Final Offer" });
                info.Bound(c => c.BusinessVisa).Width(150).ClientFooterTemplate("#=sum#").Title("Overseas Business Visa").HeaderHtmlAttributes(new { title = "Overseas Business Visa" });
                info.Bound(c => c.WorkerVisa).Width(150).ClientFooterTemplate("#=sum#").Title("Overseas Work Visa").HeaderHtmlAttributes(new { title = "Overseas Work Visa" });
                info.Bound(c => c.VisaTransfer).Width(150).ClientFooterTemplate("#=sum#").Title("Local Visa Transfer").HeaderHtmlAttributes(new { title = "Local Candidates" });
                info.Bound(c => c.WorkPermit).Width(150).ClientFooterTemplate("#=sum#").Title("Local WorkPermit").HeaderHtmlAttributes(new { title = "Local WorkPermit" });
                info.Bound(c => c.CandidateJoined).Width(150).ClientFooterTemplate("#=sum#").Title("Staff Joining").HeaderHtmlAttributes(new { title = "Staff Joined" });
                info.Bound(c => c.WorkerJoined).Width(150).ClientFooterTemplate("#=sum#").Title("Worker Joining").HeaderHtmlAttributes(new { title = "Worker Joined" });
                info.Bound(c => c.Joined).Width(150).ClientFooterTemplate("#=sum#").Title("Joined").HeaderHtmlAttributes(new { title = "Joined" });
                info.Bound(c => c.PostStaffJoined).Width(150).ClientFooterTemplate("#=sum#").Title("Post Staff Joined").HeaderHtmlAttributes(new { title = "Joined" });
                info.Bound(c => c.PostWorkerJoined).Width(150).ClientFooterTemplate("#=sum#").Title("Post Worker Joined").HeaderHtmlAttributes(new { title = "Joined" });
                info.Bound(c => c.Id).Title("View Applicants").ClientTemplate("<i class='fa fa-eye k-primary' style='cursor:pointer;color:blue' title='View Applicants' onclick='OnViewApplicants(\"#:JobId#\",\"#:OrganizationId#\")'></i>").HeaderHtmlAttributes(new { title = "View Applicants" }).Width(80).Filterable(false).Exportable(false);
            }).Width(120));

            col.Bound(x => x.CreatedByName).Width(150).Title("Created By").Filterable(ftb => ftb.Multi(true).Search(true));
            col.Bound(x => x.CreatedDate).Width(150).Format("{0:dd MMM yyyy}").Filterable(ftb => ftb.Multi(true).Search(true));
            if (ViewBag.Permissions.Contains("AddManpowerRecruitment"))
            {
                col.Command(command =>
                {
                    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEdit").HtmlAttributes(new { @class = "action-icon" });
                    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon" });
                }).Width(120).Exportable(false).Title("Actions");
            }

            if (ViewBag.Permissions.Contains("AddManpowerRecruitment"))
            {
                col.Command(command =>
                {
                    command.Custom("AttachFile").Text("<i class='fa fas fa-plus'></i>").Click("OnAttachDocument").HtmlAttributes(new { @class = "action-icon" });

                }).Width(120).Exportable(false).Title("Attachment");
            }

        })
        .ToolBar(toolbar =>
        {
            if (ViewBag.Permissions.Contains("AddManpowerRecruitment"))
            {
                toolbar.Custom().Text("Add Manpower Requirement").Name("btnAdd").HtmlAttributes(new { @class = "k-primary", id="sumbul", href = "javascript:OnAdd();" });
            }
        })
        .Events(events => events.DetailExpand("detailExpand").DataBound("OnDataBound"))
        .Resizable(resizable => resizable.Columns(true))
        .Scrollable(scrollable => scrollable.Enabled(true))
        .Sortable(srt => srt.Enabled(true))
        //.ClientDetailTemplateId("template")
        .Selectable(select => select.Enabled(false))
        .Filterable(f => f.Extra(false)
        .Operators(o => o.ForString(s => s.Clear()
        .Contains("Contains")
        //.IsEqualTo("Is equal to")
        )))
        .AutoBind(true)
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .DataSource(
        dataSource => dataSource
        .Ajax()
        .Aggregates(aggregates =>
        {
            aggregates.Add(p => p.Requirement).Sum();
            aggregates.Add(p => p.Seperation).Sum();
            aggregates.Add(p => p.Available).Sum();
            aggregates.Add(p => p.Planning).Sum();
            aggregates.Add(p => p.Transfer).Sum();
            aggregates.Add(p => p.Balance).Sum();
            aggregates.Add(p => p.OrgUnit).Sum();
            aggregates.Add(p => p.PlanningUnit).Sum();
            aggregates.Add(p => p.Hr).Sum();
            aggregates.Add(p => p.Active).Sum();
            aggregates.Add(p => p.InActive).Sum();
            aggregates.Add(p => p.ShortlistedByHr).Sum();
            aggregates.Add(p => p.ShortlistedForInterview).Sum();
            //aggregates.Add(p => p.DirectHiring).Sum();
            aggregates.Add(p => p.IntentToOffer).Sum();
            aggregates.Add(p => p.FinalOffer).Sum();
            aggregates.Add(p => p.CandidateJoined).Sum();
            aggregates.Add(p => p.WorkerJoined).Sum();
            aggregates.Add(p => p.WorkerPool).Sum();
            aggregates.Add(p => p.WorkerVisa).Sum();
            aggregates.Add(p => p.WorkPermit).Sum();
            aggregates.Add(p => p.BusinessVisa).Sum();
            aggregates.Add(p => p.VisaTransfer).Sum();
            aggregates.Add(p => p.Joined).Sum();
            aggregates.Add(p => p.PostWorkerJoined).Sum();
            aggregates.Add(p => p.PostStaffJoined).Sum();
        })
        .PageSize(20)
        .Read(read => read.Action("ReadManpowerRequirementSummaryData", "ManpowerRequirementSummary"))
        .Model(model => model.Id(p => p.Id)

        )
        )
        .HtmlAttributes(new { @style = "font-size: 12px; height:100%;"})
        )*@

    </div>

</div>
