@using CMS.UI.ViewModel;
@using Kendo.Mvc.UI;
@using CMS.Common;
@model ApplicationSearchViewModel;

@{
    ViewBag.Title = "";
    //Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
    Layout = null;
}
<style>
    .k-dropdown {
        width: 90%;
    }

    .caret {
        display: none;
    }

    .btn-group, .btn-group-vertical {
        position: inherit !important;
    }

    .k-dropdown {
        width: 100%;
    }

    .k-grid {
        border-color: #2d9fca;
    }

    .k-grid-header .k-header {
        color: #2d9fca;
        font-weight: 700;
    }

    .k-pager-wrap .k-link.k-state-disabled {
        border-radius: 40px;
        margin-left: 5px;
    }

    .k-pager-numbers .k-state-selected {
        border-radius: 40px;
        margin-left: 5px;
    }

    .k-pager-wrap .k-pager-refresh {
        border-color: transparent;
        background-color: #fff;
        color: black;
    }

    .k-grid td {
        /*border-color: #2d9fca;*/
        border-color: transparent;
    }

    .k-grid-pager {
        border-color: #2d9fca;
    }

    .k-grid thead {
        background-color: transparent;
    }

    .k-grid td:first-child {
        text-align: center;
    }
</style>
<script>
    function FilterOrg() {
        return {
            jobAddId: $("#JobTitleForHiring").data("kendoDropDownList").value()
        };
    }
    function OnOrgChange(e) {
        var search = FilterGrid();
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);

    }
     function FilterJob() {
        return {
            OrganizationId: $("#OrganizationId").data("kendoDropDownList").value()
        };
    }
    function UpdateStatus(appId)
    {
        if ( ($("#BatchId").data("kendoDropDownList").value() == '' || $("#BatchId").data("kendoDropDownList").value() == null)) {
            alert("Please Select atleast one Batch");
        }
        else
        {

            $.ajax({
                type: "GET",
                url: '@Url.Action("UpdateApplicationBatch", "CandidateShortlist", new { @area="Recruitment"})?applicationId=' + appId + "&BatchId=" + $("#BatchId").data("kendoDropDownList").value() ,


                success: function (data) {
                    //console.log(data);
                    if (data.success)
                    {
                            ShowNotification("Candidate added to batch successfully", "success");
                    }
                    else
                    {
                        ShowNotification("Error adding candidate to batch. Please try again", "error");
                    }
                    var search = FilterGrid();
                    $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
                    var search1 = FilterBatch();
                    $("#Batchgrid").data("kendoGrid").dataSource.read(search1);
                    getApplicantcunt($("#BatchId").data("kendoDropDownList").value());

                },
                error: function () {  }
                //dataType: "json",
            });
        }
    }
    function getApplicantcunt(id)
    {
        $.ajax({
            type: "Get",
            url: "/Recruitment/Batch/GetWorkerApplicantCount?Id=" + id,
            //data: { 'applicants': users, 'type': type },
            success: function (data) {
                $("#batchCount").html(data.count + " Applicant in selected batch");
            },
            dataType: "json",
        });
    }
    function onAddComment(appId, appStateId)
    {
        @*iframeOpenUrl = '@Url.Action("AddComment", "CandidateShortlist", new { @area="Recruitment"})?appId=' + appId + "&appStateId=" + appStateId;
        OpenIframePopup(1000, 1200, 'Comments');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("AddComment", "CandidateShortlist", new { @area = "Recruitment" })?appId=' + appId + "&appStateId=" + appStateId;
        win.OpenWindow({ Title: 'Comments', Width: 1000, Height: 900 });
        return false;
    }
    function OnCheckboxChange(e) {
        var search = FilterGrid();
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
    }
    function OnBatchChange(e)
    {
        console.log(e);
        var dataItem = e.sender.dataItem();
        getApplicantcunt(dataItem.Id);
    }
    function OnBatchDataBound()
    {
        //var totalApplicant = 0;
        //var batchData = $("#Batchgrid").data("kendoGrid").dataSource.data();
        ////console.log(batchData);
        //for (var i = 0; i < batchData.length;i++)
        //{
        //    totalApplicant += batchData[i].NoOfApplication;
        //}
        //$("#batchCount").html("Total Applicant: " + totalApplicant);
    }
    function OnDataBound(e)
    {


        var dataItem = e.sender.dataItem();
        $("#headCount").html(dataItem.NoOfPosition);
        $("#ManpowerCount").html(dataItem.ManpowerTypeName)
        //if (dataItem.ManpowerTypeName == "Worker" || dataItem.ManpowerTypeName == "DriverOperator" ) {
        //    $("#Extrafilters").hide();
        //    $("#SecondFilter").show();

        //}
        //else {
        //    $("#Extrafilters").show();
        //    $("#SecondFilter").hide();
        //}


    }
    function OnGridDataBound(e) {
        var grid = $("#kgrdCandInterview").data("kendoGrid");
        //if ($("#ManpowerCount").html() == "Worker" || $("#ManpowerCount").html() == "Driver" || $("#ManpowerCount").html() == "Operator") {




        //    grid.hideColumn("Email");
        //   grid.showColumn("TotalOtherExperience");
        //    grid.hideColumn("ContactPhoneHome");
        //    grid.hideColumn("ContactPhoneLocal");
        //    grid.showColumn("TotalIndianExperience");
        //    grid.hideColumn("Score");
        //    grid.hideColumn("Gender");
        //    grid.hideColumn("MaritalStatus");
        //    grid.hideColumn("BloodGroup");
        //    grid.hideColumn("Nationality");
        //    grid.hideColumn("QatarId");
        //    grid.hideColumn("CurrentAddressHouse");
        //    grid.hideColumn("CurrentAddressStreet");
        //    grid.hideColumn("CurrentAddressCity");
        //    grid.hideColumn("CurrentAddressState");
        //    grid.hideColumn("CurrentAddressCountryName");
        //    grid.hideColumn("PermanentAddressHouse");
        //    grid.hideColumn("PermanentAddressStreet");
        //    grid.hideColumn("PermanentAddressCity");
        //    grid.hideColumn("WorkerAppointmentorkerAppointmentorkerAppointmentermanentAddressState");
        //    grid.hideColumn("PermanentAddressCountryName");
        //    grid.hideColumn("CurrentEmployer");
        //    grid.hideColumn("CurrentEmploymentLocation");
        //    grid.hideColumn("CurrentEmploymentPosition");
        //    grid.hideColumn("CurrentEmploymentStartDate");
        //    grid.hideColumn("CurrentEmploymentEndDate");
        //    grid.hideColumn("CurrentEmploymentResponsibilities");
        //    grid.hideColumn("CurrentSalary");
        //    grid.hideColumn("SalaryAfterIncomeTax");

        //    grid.hideColumn("OtherAllowance");
        //}
        //else {

        //      grid.showColumn(1);

        //    grid.showColumn("Email");
        //    grid.showColumn("ContactPhoneHome");
        //    grid.showColumn("ContactPhoneLocal");
        //    grid.hideColumn("TotalIndianExperience");
        //    grid.hideColumn("TotalOtherExperience");
        //    grid.showColumn("Score");
        //    grid.showColumn("Gender");
        //    grid.showColumn("MaritalStatus");
        //    grid.showColumn("BloodGroup");
        //    grid.showColumn("Nationality");
        //    grid.showColumn("QatarId");
        //    grid.showColumn("CurrentAddressHouse");
        //    grid.showColumn("CurrentAddressStreet");
        //    grid.showColumn("CurrentAddressCity");
        //    grid.showColumn("CurrentAddressState");
        //    grid.showColumn("CurrentAddressCountryName");
        //    grid.showColumn("PermanentAddressHouse");
        //    grid.showColumn("PermanentAddressStreet");
        //    grid.showColumn("PermanentAddressCity");
        //    grid.showColumn("PermanentAddressState");
        //    grid.showColumn("PermanentAddressCountryName");
        //    grid.showColumn("CurrentEmployer");
        //    grid.showColumn("CurrentEmploymentLocation");
        //    grid.showColumn("CurrentEmploymentPosition");
        //    grid.showColumn("CurrentEmploymentStartDate");
        //    grid.showColumn("CurrentEmploymentEndDate");
        //    grid.showColumn("CurrentEmploymentResponsibilities");
        //    grid.showColumn("CurrentSalary");
        //    grid.showColumn("OverseasSalary");
        //    grid.showColumn("SalaryAfterIncomeTax");
        //    grid.showColumn("OtherAllowance");
        //}

    //introJs().setOptions({
    //        steps: [{
    //            title: "Hello",
    //            intro: "Welcome To The Worker Pool 👋",
    //        },
    //        {
    //            title: "Organization Dropdownlist",
    //            element: "#searchForWorker",
    //            intro: "Select the organization of the candidate from the dropdown"
    //        },
    //        {
    //            title: "Position Dropdownlist",
    //            element: "#positiondrp",
    //            intro: "Select the hiring position from the dropdown"
    //        },
    //        {
    //            title: "Batch Dropdownlist",
    //            element: "#batchdrp",
    //            intro: "Select the batch corresponding to the worker from the dropdown"
    //        },
    //        {
    //            title: "Batch Summary Detail",
    //            element: "#batchSummary",
    //            intro: "An expandable view, providing you with the details of the batch selected above"
    //        },
    //        {
    //            title: "Candidate List",
    //            element: "#batch-1",
    //            intro: "The complete list of all the candidates"
    //        },
    //        {
    //            title: "Candidate Add",
    //            element: "#createbatchbutton",
    //            intro: "You can create a custom new batch"
    //        },
    //        {
    //            title: "Create Batch",
    //            element: "#batchadd",
    //            intro: "Add the candidate to the selected batch"
    //        },
    //        {
    //            title: "Profile view Link",
    //            element: "#viewprofile",
    //            intro: "This link will provide you with a quick view of the candidate’s profile"
    //        },
    //        {
    //            title: "Candidate Document view Link",
    //            element: "#viewdocument",
    //            intro: "This link will give a quick view of all the attachments and documents"
    //        },
    //        {
    //            title: "Application Status",
    //            element: "#applicationStatus",
    //            intro: "The progress of the candidate’s application"
    //        }]
    //    }).start();
    }
    function OnJobTitleChange(e)
    {

        var dataItem = e.sender.dataItem();
        console.log(dataItem);
        $("#headCount").html(dataItem.NoOfPosition);
        $("#JobId").val(dataItem.JobId);
        if (dataItem.ManpowerTypeName == undefined || dataItem.ManpowerTypeName == '' || dataItem.ManpowerTypeName == null) {
            $("#ManpowerCount").html('')
        }
        else
        {
            $("#ManpowerCount").html(dataItem.ManpowerTypeName)
        }

        var search1 = FilterGrid();
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search1);

        var search = FilterOrg();
        $("#OrganizationId").data("kendoDropDownList").dataSource.read(search);
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);
       // var search1 = FilterBatch();
       // $("#Batchgrid").data("kendoGrid").dataSource.read(search1);
    }
    function Filterddl() {
        var dropdownlist = $("#JobTitleForHiring").data("kendoDropDownList");
        return {
            JobAddId: dropdownlist.value(),
            batchType: '@BatchTypeEnum.WorkerAppointment',
            orgId: $("#OrganizationId").data("kendoDropDownList").value()
        };
    }
    function FilterGrid()
    {
        //var dropdownlist = $("#JobTitleForHiring").data("kendoDropDownList");
        //var dataItem = dropdownlist.dataItem();
        var dropdownlist = $("#JobTitleForHiring").data("kendoDropDownList");
        var orgddl = $("#OrganizationId").data("kendoDropDownList");
        var dataItem = dropdownlist.dataItem();
        if (dropdownlist.value() != null && dropdownlist.value() != '' && dropdownlist.value() != undefined
            && orgddl.value() != null && orgddl.value() != '' && orgddl.value() != undefined) {
            return {
                JobTitleForHiring: dropdownlist.value(),
                OrganizationId: $("#OrganizationId").data("kendoDropDownList").value()
                //JobApplicationSearch: document.getElementById('JobApplicationSearch').checked,
                //CandidateProfileSearch: document.getElementById('CandidateProfileSearch').checked,
                //AllCandidateApplication: document.getElementById('AllCandidateApplication').checked,
                // ShortlistedCandidateApplication: document.getElementById('ShortlistedCandidateApplication').checked,
                // RejectedCandidateSearch: document.getElementById('RejectedCandidateSearch').checked,
                //  WaitlistedCandidateSearch: document.getElementById('WaitlistedCandidateSearch').checked,

            };
        }
    }
    function FilterBatch()
    {
        return {
            //jobIdAdvertismentId: $("#JobTitleForHiring").data("kendoDropDownList").value(),
             batchtype: '@BatchTypeEnum.WorkerAppointment'
        }
    }


    function ApplyFilter()
    {
        var dropdownlist = $("#JobTitleForHiring").data("kendoDropDownList");
        var dataItem = dropdownlist.dataItem();
        var search = FilterGrid();
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
    }
    function ClearFilter()
    {
        $("#TotalExperience").val('');
        $("#JobTitle").val('');
        $("#YearOfJobExperience").val('');
        $("#OtherExperience").data("kendoDropDownList").value('');
        $("#YearOfOtherCountryExperience").val('');
        $("#Industry").data("kendoDropDownList").value('');
        $("#Category").data("kendoDropDownList").value('');
        $("#YearOfIndustryExperience").val('');
        $("#CategoryExperience").val('');
        $("#TotalGulfExperience").val('');
        $("#Comment").val('');
        $("#Nationality").val('');
        $("#Age").val('');
        $("#Gender").val('');
        document.getElementById('IsEnglishProficiency').value = false;
        document.getElementById('IsArabicProficiency').value = false;
        document.getElementById('IsComputerLiteratureProficiency').value = false;
        document.getElementById('DL').value ="NO"
        $("#Qualification").data("kendoDropDownList").value('');
        $("#Specialization").data("kendoDropDownList").value('');
        $("#Duration").val('');
        $("#PassingYear").val('');
        $("#Marks").val('');
        $("#Country").data("kendoDropDownList").value('');
        $("#Type").data("kendoDropDownList").value('');
        $("#IssueDate").data("kendoDatePicker").value('');
        $("#ExpiryDate").data("kendoDatePicker").value('');
        $("#PassportNumber").val('');
        $("#NetSalary").val('');

        $("#BirthDate").data("kendoDatePicker").value('');
        var search = FilterGrid();
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
    }
    function ClearSecondFilter() {
        $("#TotalExperience").val('');
        $("#PassportNumber").val('');
        $("#NetSalary").val('');

        $("#BirthDate").data("kendoDatePicker").value('');
        var search = FilterGrid();
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
    }
        function OnDeleteBatch(e) {
        var flag = confirm('Do you really want to delete the Batch?');
        //alert("..Delete");
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        if (flag) {
            $.ajax({
                url:'@Url.Action("Delete", "Batch", new { @area="Recruitment"})?Id=' + dataItem.id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    if (result.success) {
                        $("#Batchgrid").data("kendoGrid").dataSource.read();
                        kendo.alert("Batch Deleted Successfully.");
                    } else {
                        $("#Batchgrid").data("kendoGrid").dataSource.read();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    $("#Batchgrid").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }
    function OnCreateBatch() {
        if ($("#JobTitleForHiring").val() == "") {
            kendo.alert("Select job title for hiring");
        }
        else if ($("#OrganizationId").val() == "") {
            kendo.alert("Select organization");
        }
        else
        {
             @*iframeOpenUrl = '@Url.Action("Create", "Batch", new { @area="Recruitment"})?jobAdvertisementId=' + $("#JobTitleForHiring").data("kendoDropDownList").value() + "&batchType=@BatchTypeEnum.WorkerAppointment&orgId=" + $("#OrganizationId").data("kendoDropDownList").value();
            OpenIframePopup(450, 1200, 'Manage Batch');*@
            var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Create", "Batch", new { @area = "Recruitment" })?jobAdvertisementId=' + $("#JobTitleForHiring").data("kendoDropDownList").value() + "&batchType=@BatchTypeEnum.WorkerAppointment&orgId=" + $("#OrganizationId").data("kendoDropDownList").value();
            win.OpenWindow({ Title: 'Manage Batch', Width: 450, Height: 800 });
        return false;
        }
    }
    function OnEditBatch(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        @*iframeOpenUrl = '@Url.Action("Edit", "Batch", new { @area="Recruitment"})?Id=' + dataItem.Id;
        OpenIframePopup(450, 1200, 'Manage Batch');*@
          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Edit", "Batch", new { @area = "Recruitment" })?Id=' + dataItem.Id;
            win.OpenWindow({ Title: 'Manage Batch', Width: 450, Height: 800 });
        return false;
    }
    function OnApplication(Id, ApplicationId) {

        @*iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area="Recruitment"})?candidateProfileId=' + Id + '&applicationId=' + ApplicationId;
        OpenIframePopup(1000, 1200, 'Candidate');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area = "Recruitment" })?candidateProfileId=' + Id + '&applicationId=' + ApplicationId;
        win.OpenWindow({ Title: 'Candidate', Width: 1000, Height: 900 });
        return false;

    }
     function OnDocument(Id,ApplicationId) {

         @*iframeOpenUrl = '@Url.Action("GetDocuments", "CandidateProfile", new { @area="Recruitment"})?candidateProfileId=' + Id + '&applicationId=' + ApplicationId;
         OpenIframePopup(750, 1200, 'Document');*@
          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("GetDocuments", "CandidateProfile", new { @area = "Recruitment" })?candidateProfileId=' + Id + '&applicationId=' + ApplicationId;
         win.OpenWindow({ Title: 'Document', Width: 750, Height: 900 });
        return false;

    }
    function UpdateBatch(Id,applicantNo) {
        if (applicantNo == '' || applicantNo == "0") {
            alert("Please Select atleast one applicant");
        }
        else {

            $.ajax({
                type: "Post",
                url: '@Url.Action("ServiceWorkerBatchApproval", "Task", new { @area="cms"})?batchId=' + Id,

                success: function (data) {

                    var search1 = FilterBatch();
                    $("#Batchgrid").data("kendoGrid").dataSource.read(search1);
                    var search = FilterGrid();
                    $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);

                },
                error: function () {  }
                //dataType: "json",
            });
        }
    }

    function onView(id, count) {
        if (count == 0) {
            alert("There is no Candidates for this Batch");
        }
        else {
            @*iframeOpenUrl = '@Url.Action("ViewBatchCandidate", "CandidateShortlist", new { @area="Recruitment"})?batchid=' + id+"&type=WorkerPool" ;
            OpenIframePopup(1500, 1200, 'View Candidate');*@
             var win = GetMainWindow();
            win.iframeOpenUrl = '@Url.Action("ViewBatchCandidate", "CandidateShortlist", new { @area = "Recruitment" })?batchid=' + id + "&type=WorkerPool";
            win.OpenWindow({ Title: 'View Candidate', Width: 1500, Height: 900 });
        return false;
        }
    }
    function backDashboard() {
        var url = "/recruitment/recruitmentdashboard/index?jobAdvId=@Model.JobTitleForHiring&orgId=@Model.OrganizationId";
        LoadPartailView(url, $('#cms-content'));
    }
</script>
<div class="no-gutters pad-t-30">
    <div class="row no-gutters pad-15">
        @if (Model.IsDashboard)
        {
            <div class="col col-right-cell" style="text-align:right;">
                <input type="button" class="btn btn-light" value="Back" title="Back to Dashboard" onclick="backDashboard()" style="margin-top:-7px;" />
            </div>
        }
        <div class="col-md-12 col-lg-12 pl-2">
            <div class="">
                <div  class="text-white shadow p-2 header-bar round-6 pl-5 pb-1">
                    <div class="row">
                        <div class="col-12 col-md-12 col-lg-6 ">
                            <div class="row mt-1">
                                <div class="col-12 col-md-5 col-lg-4"><label class="col-form-label d-inline-block paragraph-bold">Position for Hiring :</label></div>
                                <div class="col">
                                    <div id="positiondrp"class="dropdown">
                                        @(Html.Kendo().DropDownListFor(x=>x.JobTitleForHiring)
                                    .DataTextField("JobName")
                                    .DataValueField("Id")
                                    .Events(x=>x.Change("OnJobTitleChange")
                                    .DataBound("OnDataBound")
                                    )
                                     .AutoBind(true)
                                       .Filter(FilterType.Contains)
                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetJobAdvertismentForWorker", "CandidateShortlist", new { @area = "Recruitment" });
                                             // .Data("FilterJob");
                                          });//.ServerFiltering(true);
                                      })
                            //.CascadeFrom("OrganizationId")
                           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                            .HtmlAttributes(new { @class = "text-box-property" })
                        )
                                        <input type="hidden" asp-for="JobId" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <div class="row mt-1">
                                <div class="col-12 col-md-5 col-lg-4"><label class="col-form-label d-inline-block paragraph-bold">Required HC :</label></div>
                                <div class="col d-flex align-items-center align-items-xl-center">
                                    <p class="ml-1" id="headCount">0</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 col-md-12 col-lg-6 ">
                            <div class="row mt-1">
                                <div class="col-12 col-md-5 col-lg-4"><label class="col-form-label d-inline-block paragraph-bold">Organization :</label></div>
                                <div class="col">
                                    <div class="dropdown">
                                        @*@(Html.Kendo().DropDownListFor(model => model.OrganizationId)
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("GetIdNameList", "Master", new { @type= "Organization" });
                                });
                            })
                            .OptionLabel(ApplicationConstant.PlaceHolder_AllOption)
                            .DataTextField("Name")
                            .DataValueField("Id")
                            .Filter(FilterType.Contains)
                            .HtmlAttributes(new { @class = "text-box-property" }))*@
                                        @(Html.Kendo().DropDownListFor(model => model.OrganizationId)
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("GetOrganizationIdNameByRecruitmentList", "Master", new {/* @type= "Organization",*/ @area = "Recruitment" }).Data("FilterOrg");
                                });
                            })
                          .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                            .DataTextField("Name")
                            .DataValueField("Id")
                            .Events(x=>x.Change("OnOrgChange"))
                            //.Filter(FilterType.Contains)
                            .HtmlAttributes(new { @class = "text-box-property" }))

                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col">

                        </div>
                    </div>

                    <div class="row">
                        <div class="col-12 col-md-12 col-lg-6 ">
                            <div class="row mt-1">
                                <div class="col-12 col-md-5 col-lg-4"><label class="col-form-label d-inline-block paragraph-bold">Batch :</label></div>
                                <div class="col">
                                    <div id="batchdrp" class="dropdown">
                                        @(Html.Kendo().DropDownListFor(x=>x.BatchId)
                                    .DataTextField("Name")
                                    .DataValueField("Id")
                                      .Events(x=>x.Change("OnBatchChange"))
                                       .Filter(FilterType.Contains)
                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetWorkerBatchIdNameList", "CandidateShortlist").Data("Filterddl");
                                          });
                                      })
                           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                            .HtmlAttributes(new { @class = "text-box-property" ,@style="width:90%"})
                        )
                                        <i id="createbatchbutton" class="fas fa-plus" onclick="OnCreateBatch();"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <div class="row mt-1">
                                <div class="col-12 col-md-5 col-lg-4"><label class="col-form-label d-inline-block paragraph-bold">Manpower Type: </label></div>
                                <div class="col d-flex align-items-center align-items-xl-center">
                                    <p class="ml-1" id="ManpowerCount">0</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr>
                    @*<div class="row">
            <div class="col-md-12 col-lg-6">
                <div class="row mt-1">
                    <div class="col-12 col-lg-4"><label class="col-form-label d-inline-block paragraph-bold">Data Source</label></div>
                    <div class="col">
                        <div class="form-check"><input class="form-check-input" type="checkbox" asp-for="JobApplicationSearch" onchange="OnCheckboxChange(event)" checked><label class="form-check-label" for="formCheck-6">Search from Job Application<br></label></div>

                    </div>
                </div>
            </div>
            <div class="col">
                <div class="row mt-1">
                    <div class="col-12 col-lg-4"><label class="col-form-label d-inline-block paragraph-bold">Show Candidate List :</label></div>
                    <div class="col">
                        <div class="form-check"><input class="form-check-input" type="checkbox" asp-for="AllCandidateApplication" onchange="OnCheckboxChange(event)"><label class="form-check-label" for="formCheck-8">Show All&nbsp;unreviewed candidate application<br></label></div>
                        <div class="form-check"><input class="form-check-input" type="checkbox" asp-for="ShortlistedCandidateApplication" onchange="OnCheckboxChange(event)"><label class="form-check-label" for="formCheck-24">Show Shortlisted&nbsp;candidate application<br></label></div>
                        <div class="form-check"><input class="form-check-input" type="checkbox" asp-for="RejectedCandidateSearch" onchange="OnCheckboxChange(event)"><label class="form-check-label" for="formCheck-23">Show Rejected candidate application<br></label></div>
                        <div class="form-check"><input class="form-check-input" type="checkbox" asp-for="WaitlistedCandidateSearch" onchange="OnCheckboxChange(event)"><label class="form-check-label" for="formCheck-25">Show Waitlisted candidate application<br></label></div>
                    </div>
                </div>
            </div>
        </div>*@
                </div>
                <div id="batchSummary" class="text-body mt-4 mb-4">
                    <div role="tablist" id="accordion-2">
                        <div class="card" style="border: none;">
                            <div class="card-header accordion-item-heading" role="tab">
                                <h5 class="mb-0" style="font-size: 14px;">
                                    <span class="custom-margin-left-10px" style="color:black;display:initial;">Batch Summary</span>
                                    <span class="custom-margin-left-10px" style="color:black;float:right;margin-right:12px;display:initial;" id="batchCount"></span>
                                    <a data-toggle="collapse" aria-expanded="false" aria-controls="accordion-2 .item-1" href="#accordion-2 .item-1" style="font-size: 14px;"><i class="fas fa-caret-down custom-margin-left-10px"></i></a>
                                </h5>

                            </div>
                            <div class="collapse item-1" role="tabpanel" data-parent="#accordion-2" style="border: 1px solid #d7d6d6;border-radius: 6px;">
                                <div class="card-body">


                                    @(Html.Kendo().Grid<BatchViewModel>
    ()
    .Name("Batchgrid")
    .ToolBar(toolbar =>
    toolbar.ClientTemplate("<button type='button' id='createBatch' class='btn btn-primary' onclick='OnCreateBatch();'><i class='fa fas fa-plus'></i>&nbsp;Create Batch</button>"))

    .Columns(columns =>

    {
        columns.Command(command =>
        {
            command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditBatch").HtmlAttributes(new { @class = "action-icon" });
            //command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteBatch").HtmlAttributes(new { @class = "action-icon" });
        }).Title("Action").Width(100);

        //columns.Bound(c => c.JobId);
        columns.Bound(c => c.Name).HeaderHtmlAttributes(new { title = "Name" });
        columns.Bound(c => c.NoOfApplication).HeaderHtmlAttributes(new { title = "No Of Application" }).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='onView(\"#:Id#\",\"#:NoOfApplication#\")'>#:NoOfApplication#</a>").Width(100);
        columns.Bound(c => c.Organization).Width(100);
        columns.Bound(c => c.BatchStatusName).HeaderHtmlAttributes(new { title = "Batch Status Name" }).Width(100);
        columns.Bound(c => c.TargetHiringDate).HeaderHtmlAttributes(new { title = "Target Hiring Date" }).Format("{0:dd MMM yyyy}").Width(120);
        columns.Bound(c => c.TargetBatchCount).HeaderHtmlAttributes(new { title = "Target Batch Count" }).Width(120);
        columns.Bound(c => c.Id).Title("Send Batch").HeaderHtmlAttributes(new { title = "Send Batch" }).Width(120).ClientTemplate("#if(BatchStatusName=='Draft'){#<button id='batchforapproval' class='btn btn-info' onclick='UpdateBatch(\"#:Id#\",\"#:NoOfApplication#\")'>Send Batch For Approval</button>#}#");
    })
    .Scrollable(x => x.Enabled(true))
                .Sortable(srt => srt.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                                    .Operators(o => o.ForString(s => s.Clear()
                                                    .Contains("Contains")
                                                    .IsEqualTo("Is equal to")
                                                )))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
                .AutoBind(true)
                .Resizable(resize => resize.Columns(true))
                 .Events(e => e.DataBound("OnBatchDataBound"))
                .DataSource(
                dataSource => dataSource
                .Ajax()
                .PageSize(5)
                .Read(read => read.Action("ReadData", "Batch").Data("FilterBatch"))
                .Model(model => model.Id(p => p.Id))
                )
          )


                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="batch-1" class="mt-2">

                    <div class="shadow-sm p-1 mt-3 heading-bar-secondary pl-3 pr-3"><span>Candidate List</span></div>
                    <div class="table-responsive d-block mt-2">
                        @(Html.Kendo().Grid<ApplicationViewModel>
    ().Name("kgrdCandInterview")
    .Columns(columns =>
    {


        columns.Bound(c => c.WorkerBatchId).HeaderHtmlAttributes(new { title = "Action", id="actionbtn" }).ClientTemplate("#if(WorkerBatchId!=null && WorkerBatchId!=''){#<button id='batchadd' class='btn btn-primary' >Added To Batch</button>#}else{#<button id='batchadd' class='btn btn-primary' onclick='UpdateStatus(\"#:ApplicationId#\")'>Add To Batch</button>#}#").Title("Action").Width(100).Locked(true).Lockable(false);
        columns.Bound(c => c.CandidateProfileId).HeaderHtmlAttributes(new { title = "View", id="viewApp" }).ClientTemplate("<a id='viewprofile' href='javascript:OnApplication(\"#=CandidateProfileId#\",\"#=ApplicationId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);
        columns.Bound(c => c.CandidateProfileId).HeaderHtmlAttributes(new { title = "Document", id="viewDocument" }).ClientTemplate("<a id='viewdocument' href='javascript:OnDocument(\"#=CandidateProfileId#\",\"#=ApplicationId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;Document</a>").Title("Document").Width(100).Locked(true).Lockable(false);

        columns.Bound(c => c.ApplicationStatusCode).Title("Application Status").HeaderHtmlAttributes(new { title = "Application Status", id="applicationStatus" }).Width(120).Locked(true).Lockable(false);
        columns.Bound(p => p.FirstName).Title("First Name").HeaderHtmlAttributes(new { title = "First Name" }).Width(150).Locked(true).Lockable(false);
        columns.Bound(p => p.MiddleName).Title("Middle Name").HeaderHtmlAttributes(new { title = "Middle Name" }).Width(150);
        columns.Bound(p => p.LastName).Title("Last Name").HeaderHtmlAttributes(new { title = "Last Name" }).Width(150);
        columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
        columns.Bound(p => p.TotalWorkExperience).HeaderHtmlAttributes(new { title = "Total Work Experience" }).Width(200);
        columns.Bound(p => p.SourceFrom).HeaderHtmlAttributes(new { title = "Source From" }).Width(200);
        //columns.Bound(p => p.TotalOtherExperience).Width(200);
        //columns.Bound(p => p.TotalIndianExperience).Width(200);
        columns.Bound(p => p.ContactPhoneHome).HeaderHtmlAttributes(new { title = "Contact Phone Home" }).Title("Contact Phone Home").Width(150);
        columns.Bound(p => p.ContactPhoneLocal).HeaderHtmlAttributes(new { title = "Contact Phone Local" }).Width(200);
        columns.Bound(p => p.Score).HeaderHtmlAttributes(new { title = "Score" }).Width(150);
        columns.Bound(p => p.Gender).HeaderHtmlAttributes(new { title = "Gender" }).Width(150);
        columns.Bound(p => p.BirthDate).HeaderHtmlAttributes(new { title = "Birth Date" }).Width(150).Format("{0:MM/dd/yyyy}");
        columns.Bound(p => p.Age).HeaderHtmlAttributes(new { title = "Age" }).Width(150);
        columns.Bound(p => p.BirthPlace).HeaderHtmlAttributes(new { title = "Birth Place" }).Width(150);
        columns.Bound(p => p.Nationality).HeaderHtmlAttributes(new { title = "Nationality" }).Width(200);
        columns.Bound(p => p.BloodGroup).HeaderHtmlAttributes(new { title = "Blood Group" }).Width(200);
        columns.Bound(p => p.MaritalStatus).HeaderHtmlAttributes(new { title = "Marital Status" }).Width(180);
        columns.Bound(p => p.PassportNumber).HeaderHtmlAttributes(new { title = "Passport Number" }).Width(180);
        columns.Bound(p => p.PassportIssueCountry).HeaderHtmlAttributes(new { title = "Passport Issue Country" }).Width(250);
        columns.Bound(p => p.PassportExpiryDate).HeaderHtmlAttributes(new { title = "Passport Expiry Date" }).Width(150).Format("{0:MM/dd/yyyy}");
        columns.Bound(p => p.QatarId).HeaderHtmlAttributes(new { title = "QatarId" }).Width(150);
        columns.Bound(p => p.CurrentAddressHouse).HeaderHtmlAttributes(new { title = "Current Address House" }).Width(250);
        columns.Bound(p => p.CurrentAddressStreet).HeaderHtmlAttributes(new { title = "Current Address Street" }).Width(250);
        columns.Bound(p => p.CurrentAddressCity).HeaderHtmlAttributes(new { title = "Current Address City" }).Width(250);
        columns.Bound(p => p.CurrentAddressState).HeaderHtmlAttributes(new { title = "Current Address State" }).Width(250);
        columns.Bound(p => p.CurrentAddressCountryName).HeaderHtmlAttributes(new { title = "Current Address Country Name" }).Width(200);
        columns.Bound(p => p.PermanentAddressHouse).HeaderHtmlAttributes(new { title = "Permanent Address House" }).Width(200);
        columns.Bound(p => p.PermanentAddressStreet).HeaderHtmlAttributes(new { title = "Permanent Address Street" }).Width(200);
        columns.Bound(p => p.PermanentAddressCity).HeaderHtmlAttributes(new { title = "Permanent Address City" }).Width(200);
        columns.Bound(p => p.PermanentAddressState).HeaderHtmlAttributes(new { title = "Permanent Address State" }).Width(200);
        columns.Bound(p => p.PermanentAddressCountryName).HeaderHtmlAttributes(new { title = "Permanent Address Country Name" }).Width(200);
        columns.Bound(p => p.CurrentEmployer).HeaderHtmlAttributes(new { title = "Current Employer" }).Width(200);
        columns.Bound(p => p.CurrentEmploymentLocation).HeaderHtmlAttributes(new { title = "Current Employment Location" }).Width(200);
        columns.Bound(p => p.CurrentEmploymentPosition).HeaderHtmlAttributes(new { title = "Current Employment Position" }).Width(200);
        columns.Bound(p => p.CurrentEmploymentStartDate).HeaderHtmlAttributes(new { title = "Current Employment StartDate" }).Width(200);
        columns.Bound(p => p.CurrentEmploymentEndDate).HeaderHtmlAttributes(new { title = "Current Employment EndDate" }).Width(200);
        columns.Bound(p => p.CurrentEmploymentResponsibilities).HeaderHtmlAttributes(new { title = "Current Employment Responsibilities" }).Width(200);
        columns.Bound(p => p.NetSalaryCurrency).HeaderHtmlAttributes(new { title = "Net Salary Currency" }).Width(150);
        columns.Bound(p => p.NetSalary).HeaderHtmlAttributes(new { title = "Net Salary" }).Width(150);
        //columns.Bound(p => p.CurrentSalary).HeaderHtmlAttributes(new { title = "Current Salary" }).Width(150);
        //columns.Bound(p => p.SalaryAfterIncomeTax).HeaderHtmlAttributes(new { title = "Salary After IncomeTax" }).Width(150);
        columns.Bound(p => p.OtherAllowances).HeaderHtmlAttributes(new { title = "Other Allowances" }).Width(120);
        columns.Bound(p => p.SalaryOnAppointment).HeaderHtmlAttributes(new { title = "Salary On Appointment" }).Width(120);

    })
    //.ToolBar(toolbar =>
    //{
    //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
    //})
    .Events(e => e.DataBound("OnGridDataBound"))

    .Scrollable().Height(700)
    .Sortable()
    .Selectable(select => select.Enabled(false))
    .Filterable(f => f.Extra(false)
    .Operators(o => o.ForString(s => s.Clear()
    .Contains("Contains")
    .IsEqualTo("Is equal to")
    )))
     .Resizable(resize => resize.Columns(true))
    .Pageable(pageable => pageable
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5))
    .AutoBind(false)
    .DataSource(dataSource => dataSource
    .Ajax()
    .PageSize(10)
    .Read(read => read.Action("ReadWorkerPoolData", "CandidateShortlist").Data("FilterGrid"))
    .Model(model => model.Id(p => p.Id))
    )
    )

                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

