@using CMS.UI.ViewModel;
@using Kendo.Mvc.UI;
@using CMS.Common;

@*@model ApplicationDataViewModel;*@
@model ApplicationSearchViewModel;

@{
    ViewBag.Title = "";
    //Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
    Layout = "/Views/Shared/_PopupLayout.cshtml";
}

<style>
    .k-grid {
        border-color: #2d9fca;
    }

    .k-grid-header .k-header {
        color: #2d9fca;
        font-weight: 700;
    }

    .k-pager-wrap .k-link.k-state-disabled {
        border-radius: 40px;
        margin-left: 5px;
    }

    .k-pager-numbers .k-state-selected {
        border-radius: 40px;
        margin-left: 5px;
    }

    .k-pager-wrap .k-pager-refresh {
        border-color: transparent;
        background-color: #f8f9fa;
        color: black;
    }

    .k-grid td {
        /*border-color: #2d9fca;*/
        border-color: transparent;
    }

    .k-grid-pager {
        border-color: #2d9fca;
    }

    .k-grid thead {
        background-color: transparent;
    }

    /*.k-grid td:first-child {
        text-align: center;
    }*/
    span {
        padding: 0px !important;
    }
</style>

<script type="text/javascript">
    function Update(type) {
        //alert($("#ManpowerTypeCode").val());
       // if ($("#ManpowerTypeCode").val() == "Worker" || $("#ManpowerTypeCode").val() == "DriverOperator") {
           // type = "FinalOfferSent";
          //  alert(type);
       // }
        //
        var users = '';
        var grid = $("#kgrdCandInterview").data("kendoGrid");

        var rows = grid.select();
        var length = rows.length / 2;
        var i = 1;
        rows.each(function (index, row) {
            if (i <= length) {
                var selectedItem = grid.dataItem(row);
                users = users + selectedItem.Id + ',';
            }
            i++;
            // selectedItem has EntityVersionId and the rest of your model
        });
        if (users == '' || users == ',') {
            alert("Please Select atleast one candidate from the list");
        }
        else {
            ShowLoader($('#section-shortlist'));
            var assignTo = "";
            $.ajax({
                type: "POST",
                url: "/Recruitment/CandidateShortlist/UpdateApplicationStatus",
                data: { 'applicants': users, 'type': type },
                success: function (data) {
                    //alert(data.success);
                    if (data.success) {
                        //
                        var search = FilterGrid();
                        var jobgrid = $("#kgrdCandJobOffer").data("kendoGrid");
                        jobgrid.dataSource.read(search);
                        //jobgrid.refresh();
                        var intergrid = $("#kgrdCandInterview").data("kendoGrid");
                        intergrid.dataSource.read(search);
                        //intergrid.refresh();
                        //$("#kgrdCandJobOffer").data("kendoGrid").dataSource.read(search);
                        //$("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
                        var search1 = FilterBatch();
                        $("#Batchgrid").data("kendoGrid").dataSource.read(search1);

                    }
                },
                dataType: "json",
            });

            // Now Schedule Interview rasied by Hm manually
            //$.ajax({
            //    type: "GET",
            //    url: "/Cms/Task/AssignTaskForScheduleInterview",
            //    data: { 'applicantIds': users, 'assignTo': assignTo },
            //    success: function (data) {
            //        if (data.success) {
            //            var search = FilterGrid();
            //            var jobgrid = $("#kgrdCandJobOffer").data("kendoGrid");
            //            jobgrid.dataSource.read(search);
            //            //jobgrid.refresh();
            //            var intergrid = $("#kgrdCandInterview").data("kendoGrid");
            //            intergrid.dataSource.read(search);
            //            //intergrid.refresh();
            //        }
            //        HideLoader($('#section-shortlist'));
            //    },
            //    dataType: "json",
            //});

            $.ajax({
                type: "GET",
                url: "/Recruitment/CandidateShortlist/CreateApplicationTrackforHm",
                data: { 'applicantIds': users },
                success: function (data) {
                    if (data.success) {
                        var search = FilterGrid();
                        var jobgrid = $("#kgrdCandJobOffer").data("kendoGrid");
                        jobgrid.dataSource.read(search);
                        //jobgrid.refresh();
                        var intergrid = $("#kgrdCandInterview").data("kendoGrid");
                        intergrid.dataSource.read(search);
                        //intergrid.refresh();
                        HideLoader($('#section-shortlist'));
                    }
                },
                dataType: "json",
            });
        }

    }

    function Update1(type) {
        var users = '';
        var tasks = '';
        var grid = $("#kgrdCandJobOffer").data("kendoGrid");

        var rows = grid.select();
        var length = rows.length / 2;
        var i = 1;
        rows.each(function (index, row) {
            if (i <= length) {
                var selectedItem = grid.dataItem(row);
                users = users + selectedItem.Id + ',';
                tasks = tasks + selectedItem.TaskId + ',';
            }
            i++;
            // selectedItem has EntityVersionId and the rest of your model
        });
        if (users == '' || users == ',') {
            alert("Please Select atleast one candidate from the list");
        }
        else {
            var assignTo = "";
            $.ajax({
                type: "POST",
                url: "/Recruitment/CandidateShortlist/UpdateApplicationState",
                data: { 'applicants': users, 'type': type },
                success: function (data) {
                    if (data.success) {
                        //
                        var search = FilterGrid();
                        var jobgrid = $("#kgrdCandJobOffer").data("kendoGrid");
                        jobgrid.dataSource.read(search);
                        jobgrid.refresh();
                        var intergrid = $("#kgrdCandInterview").data("kendoGrid");
                        intergrid.dataSource.read(search);
                        intergrid.refresh();
                        //$("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
                        //$("#kgrdCandJobOffer").data("kendoGrid").dataSource.read(search);
                    }
                },
                dataType: "json",
            });
            $.ajax({
                type: "GET",
                url: "/Cms/Task/CancelTaskForScheduleInterview",
                data: { 'taskIds': tasks, 'assignTo': assignTo },
                success: function (data) {
                    if (data.success) {
                        var search = FilterGrid();
                        var jobgrid = $("#kgrdCandJobOffer").data("kendoGrid");
                        jobgrid.dataSource.read(search);
                        jobgrid.refresh();
                        var intergrid = $("#kgrdCandInterview").data("kendoGrid");
                        intergrid.dataSource.read(search);
                        intergrid.refresh();

                    }
                },
                dataType: "json",
            });
            //alert(users);
            //alert(tasks);
        }
    }

    function RaiseBulkService() {

        var users = '';
        var tasks = '';
        var grid = $("#kgrdCandJobOffer").data("kendoGrid");
        grid.tbody.find("input:checked").closest("tr").each(function (index) {
            users = users + grid.dataItem(this).Id + ',';
        });
        //var rows = grid.select();
        //var length = rows.length / 2;
        //var i = 1;
        //rows.each(function (index, row) {
        //    if (i <= length) {
        //        var selectedItem = grid.dataItem(row);
        //        users = users + selectedItem.Id + ',';
        //        tasks = tasks + selectedItem.TaskId + ',';
        //    }
        //    i++;
        //    // selectedItem has EntityVersionId and the rest of your model
        //});
        if (users == '' || users == ',') {
            alert("Please Select atleast one candidate from the list");
        }
        else {
            //alert(users);
            @*iframeOpenUrl = '@Url.Action("ManageBulkScheduleInterview", "Task", new { @area= "Cms" })?applicationIds=' + users;
            OpenIframePopup(500, 500, 'Bulk Schedule Interview');*@
              var win = GetMainWindow();
            win.iframeOpenUrl = '@Url.Action("ManageBulkScheduleInterview", "Task", new { @area = "Cms" })?applicationIds=' + users;
            win.OpenWindow({ Title: 'Bulk Schedule Interview', Width: 500, Height: 500 });
        return false;
        }
    }
    function OnChangeOrg(e) {
        var dataItem = e.sender.dataItem();
        //alert(dataItem.Id);
        //alert(dataItem.Name);
        //var search = FilterAdv();
        //$("#JobTitleForHiring").data("kendoDropDownList").dataSource.read(search);
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);
    }
    function OnDataBoundOrg(e) {
        var dataItem = e.sender.dataItem();
        //alert(dataItem.Id);
        //alert(dataItem.Name);
        //var search = FilterAdv();
        //$("#JobTitleForHiring").data("kendoDropDownList").dataSource.read(search);
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);
    }
    function FilterAdv() {
        var dropdownlist = $("#OrganizationId").data("kendoDropDownList");
        return {
            orgId: dropdownlist.value(),
        };
    }
    function Filterddl() {
        var dropdownlist = $("#JobTitleForHiring").data("kendoDropDownList");
        var orgdropdownlist = $("#OrganizationId").data("kendoDropDownList");
        return {
            jobAdvId: dropdownlist.value(),
            orgId: orgdropdownlist.value(),
            hmId: '@Model.BatchHiringManagerId'
        };
    }
    function FilterBatch()
    {
        return {
            //jobAdvertismentId: $("#JobTitleForHiring").data("kendoDropDownList").value(),
            //orgId: $("#OrganizationId").data("kendoDropDownList").value(),
            batchtype: '@BatchTypeEnum.ShortlistByHr',
            hmId: '@Model.BatchHiringManagerId',
        }
    }
    function OnBatchDataBound() {
        //var totalApplicant = 0;
        //var batchData = $("#Batchgrid").data("kendoGrid").dataSource.data();
        ////console.log(batchData);
        //for (var i = 0; i < batchData.length;i++)
        //{
        //    totalApplicant += batchData[i].NoOfApplication;
        //}
        //$("#batchCount").html("Total Applicant: " + totalApplicant);


    }
    function OnApplyfilter() {
        //alert("filter");
        var search1 = FilterBatch();
        $("#Batchgrid").data("kendoGrid").dataSource.read(search1);

        var search = FilterGrid();
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
        $("#kgrdCandJobOffer").data("kendoGrid").dataSource.read(search);

    }
    function OnDataBound(e) {
        var dataItem = e.sender.dataItem();
        //console.log(dataItem);
        if (dataItem != undefined) {
        //alert(dataItem.ManpowerTypeCode);
        $("#ManpowerTypeCode").val(dataItem.ManpowerTypeCode);
        }
        //alert($("#ManpowerTypeCode").val());
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);
        //var search1 = FilterBatch();
        //$("#Batchgrid").data("kendoGrid").dataSource.read(search1);
    }
    function OnJobTitleChange(e) {
        var dataItem = e.sender.dataItem();
        //console.log(dataItem);
        if (dataItem != undefined) {
            $("#ManpowerTypeCode").val(dataItem.ManpowerTypeCode);
        }
        //alert($("#ManpowerTypeCode").val());
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);
        //var search1 = FilterBatch();
        //$("#Batchgrid").data("kendoGrid").dataSource.read(search1);
    }
    var delBatchId = null;
    function UpdateBatchClose(Id) {

        delBatchId = Id;
        $('#confirmBatchClose').data("kendoDialog").open();
           @*$.ajax({
                type: "Post",
               url: '@Url.Action("UpdateBatchClose", "Batch", new { @area="Recruitment"})?batchId=' + Id +'&code=Close',
                success: function (data) {
                    var search1 = FilterBatch();
                    $("#Batchgrid").data("kendoGrid").dataSource.read(search1);
                },
                //dataType: "json",
            });*@
    }
    function ConfirmCloseBatch() {
        $('#confirmBatchClose').data("kendoDialog").close();
        CloseBatchItem(delBatchId);
    }
    function CloseBatchItem(id) {
        ShowLoader($('#divBatchGrid'));
           $.ajax({
                type: "Post",
               url: '@Url.Action("UpdateBatchClose", "Batch", new { @area="Recruitment"})?batchId=' + id +'&code=Close',
                success: function (data) {
                    var search1 = FilterBatch();
                    $("#Batchgrid").data("kendoGrid").dataSource.read(search1);
                    $("#BatchgridClosed").data("kendoGrid").dataSource.read(search1);
                    HideLoader($('#divBatchGrid'));
                },
                //dataType: "json",
            });
        return false;
    }

    function FilterGrid() {

        var orgddl = $('#OrganizationId').val();
        var jobddl = $('#JobTitleForHiring').val();
        var batchddl = $('#BatchId').val();
        var orgId = orgddl != null ? orgddl : "";
        var jobId = jobddl != null ? jobddl : "";
        var batchId = batchddl != null ? batchddl : "";

        return {
            OrganizationId: orgId,
            JobAdvertisementId: jobId,
            BatchId: batchId,
        }
    }
    function onEvaluation(id){
        //alert(id);
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CandidateEvaluationScaleReview", "CandidateShortlist", new { @area = "Recruitment" })?applicationId=' + id;
            win.OpenWindow({ Title: 'Bulk Schedule Interview', Width: 500, Height: 500 });
        return false;
        @*iframeOpenUrl = '@Url.Action("CandidateEvaluationScaleReview", "CandidateShortlist", new { @area= "Recruitment" })?applicationId=' + id;
        OpenIframePopup(500, 500,'Bulk Schedule Interview');*@
        @*window.location.href='@Url.Action("CandidateEvaluationScaleReview", "CandidateShortlist", new { @area= "Recruitment" })?applicationId=' + id;*@
    }
    function onEvaluationView(id){
        //alert(id);
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CandidateEvaluationView", "CandidateShortlist", new { @area = "Recruitment" })?applicationId=' + id;
        win.OpenWindow({ Title: 'View Evaluation', Width: 500, Height: 500 });
        return false;
        @*iframeOpenUrl = '@Url.Action("CandidateEvaluationView", "CandidateShortlist", new { @area= "Recruitment" })?applicationId=' + id;
        OpenIframePopup(500, 500,'View Evaluation');*@
        @*window.location.href='@Url.Action("CandidateEvaluationScaleReview", "CandidateShortlist", new { @area= "Recruitment" })?applicationId=' + id;*@
    }

    function onCreateEvaluation() {
        @*iframeOpenUrl = '@Url.Action("CreateCandidateEvaluation", "CandidateShortlist", new { @area= "Recruitment" })';
        OpenIframePopup(1200, 1200, 'Create Evaluation');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandidateEvaluation", "CandidateShortlist", new { @area = "Recruitment" })';
        win.OpenWindow({ Title: 'Create Evaluation', Width: 1200, Height: 1200 });
        return false;
    }

        function onRaiseTask(appId,code){
        @*iframeOpenUrl = '@Url.Action("Index", "Task", new { @area= "Cms" })?templateCode=' + code + '&referenceId=' + appId + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application'+'&isPopUp=true';
            OpenIframePopup(1200, 1200, 'Raise Task');*@
             var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Index", "Task", new { @area = "Cms" })?templateCode=' + code + '&referenceId=' + appId + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application'+'&isPopUp=true';
            win.OpenWindow({ Title: 'Raise Task', Width: 1200, Height: 1200 });
        return false;
        @*var flag = confirm('Do you want to Raise the Task ?');
        if (flag) {
                    $.ajax({
                        url: '@Url.Action("AssignTaskForAppointment", "Task", new { @area= "Cms" })?applicantId=' + appId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                       kendo.alert("Task Raised Successfully.");
                    }
                },
                error: function (ert) {

                }
            });
        }*@

    }
    function onViewTask(taskId, code) {
        //alert(taskId);
        @*iframeOpenUrl = '@Url.Action("Index", "Task", new { @area= "Cms" })?taskId=' + taskId + '&templateCode1=' + code +'&isPopUp=true' ;
        OpenIframePopup(1200, 1200, 'View Task');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Index", "Task", new { @area = "Cms" })?taskId=' + taskId + '&templateCode1=' + code +'&isPopUp=true' ;
        win.OpenWindow({ Title: 'View Task', Width: 1200, Height: 1200 });
        return false;
    }

    function onRaiseService(appId,code){
        @*iframeOpenUrl = '@Url.Action("Service", "Task", new { @area= "Cms" })?templateCode1=' + code + '&referenceId=' + appId + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application'+'&isPopUp=true';
        OpenIframePopup(1200, 1200, 'Schedule Interview');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Service", "Task", new { @area = "Cms" })?templateCode1=' + code + '&referenceId=' + appId + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application' + '&isPopUp=true';
        win.OpenWindow({ Title: 'Schedule Interview', Width: 1200, Height: 1200 });
        return false;
    }
    function onViewService(taskId,code){
        @*iframeOpenUrl = '@Url.Action("Service", "Task", new { @area= "Cms" })?taskId=' + taskId + '&templateCode1=' + code +'&isPopUp=true' ;
        OpenIframePopup(1200, 1200, 'Schedule Interview');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Service", "Task", new { @area = "Cms" })?taskId=' + taskId + '&templateCode1=' + code +'&isPopUp=true' ;
        win.OpenWindow({ Title: 'Schedule Interview', Width: 1200, Height: 1200 });
        return false;
    }
    function OnApplication(Id) {
        @*iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area="Recruitment"})?applicationId=' + Id;
        OpenIframePopup1(1200, 1200, 'Candidate Profile');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area = "Recruitment" })?applicationId=' + Id;
        win.OpenWindow({ Title: 'Candidate Profile', Width: 1200, Height: 1200 });
        return false;
    }
    function IframePostbackScript() {
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read();
        $("#kgrdCandJobOffer").data("kendoGrid").dataSource.read();
    }
    function ShowLoader(target) {
        // target.loadingOverlay();
        kendo.ui.progress(target, true);
    }
    function HideLoader(target) {
        //target.loadingOverlay('remove');
        kendo.ui.progress(target, false);
    }
    function OnCloseIframePopupPage() {
        var search = FilterGrid();
        var kgrdCandInterview = $("#kgrdCandInterview").data("kendoGrid");
        if (kgrdCandInterview != null && kgrdCandInterview != undefined) {
            kgrdCandInterview.dataSource.read(search);
        }
        var kgrdCandJobOffer = $("#kgrdCandJobOffer").data("kendoGrid");
        if (kgrdCandJobOffer != null && kgrdCandJobOffer != undefined) {
            kgrdCandJobOffer.dataSource.read(search);
        }
        $('.checkboxAll').removeAttr('checked');
        $('.checkboxAll').prop('checked', false);

        var search1 = FilterBatch();
        $("#Batchgrid").data("kendoGrid").dataSource.read(search1);

    }
    $(".checkboxAll").bind("change", function (e) {

        if ($(this).attr('checked')) {
            $('.checkboxAll').removeAttr('checked');
            $('.checkbox').prop('checked', false);
            $(".checkbox").closest("td").removeClass("k-state-selected");
        } else {
            $('input.checkbox[type=checkbox]').each(function (e) {
                if (!this.disabled) {
                    $('.checkboxAll').attr('checked', 'checked');
                    $(this).prop('checked', true);
                    $(this).closest("td").addClass("k-state-selected");
                }
            });
            //$('.checkboxAll').attr('checked', 'checked');
            //$('.checkbox').prop('checked', true);
            //$(".checkbox").closest("td").addClass("k-state-selected");
        }
    });
    function onBatchGridChange(e) {
        //alert("gridchange");
        var selectedRow = this.select();
        var dataItem = this.dataItem(selectedRow);
        console.log(dataItem);
        $('#nameOrganization').html(dataItem.Organization);
        $('#namePosition').html(dataItem.JobName);
        $('#nameBatch').html(dataItem.Name);
        $('#OrganizationId').val(dataItem.OrganizationId);
        $('#JobTitleForHiring').val(dataItem.JobId);
        $('#BatchId').val(dataItem.Id);

        var search = FilterGrid();
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
        $("#kgrdCandJobOffer").data("kendoGrid").dataSource.read(search);


    }
    function onView(id, count) {
        if (count == 0) {
            alert("There is no Candidates for this Batch");
        }
        else {
            @*iframeOpenUrl = '@Url.Action("ViewHmBatchCandidate", "CandidateShortlist", new { @area="Recruitment"})?batchid=' + id+"&type=ShortlistByHr" ;

            OpenIframePopup(1500, 1200, 'Candidate Details By Batch');*@
             var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ViewHmBatchCandidate", "CandidateShortlist", new { @area = "Recruitment" })?batchid=' + id+"&type=ShortlistByHr" ;
            win.OpenWindow({ Title: 'Candidate Details By Batch', Width: 1500, Height: 1200 });
        return false;
        }
    }
    function showfiter(flag) {
        if (flag) {
            //alert("show");
            $("#divfilters").show();
        } else {
            //alert("hide");
            $("#divfilters").hide();
        }
    }

    //$(document).ready(function () {
    //    introJs().setOptions({
    //        steps: [{
    //            title: 'Shortlist by HM',
    //            intro: 'Welcome to Shortlist by Hiring Manager'
    //        },
    //        {
    //            title: 'Open Batch',
    //            element: "#openbatch",
    //            intro: 'This is a list of candidates from the batch that are in open status'
    //        },
    //        {
    //            title: 'Closed Batch',
    //            element: "#closebatch",
    //            intro: 'These are the batches that have been closed once the action on the candidates is completed'
    //        },
    //        {
    //            title: 'Batch grid!',
    //            element: "#Batchgrid",
    //            intro: 'You can find the details of the candidate on this grid'
    //        },
    //        {
    //            title: 'Number of Applicants',
    //            element: "#noofapp",
    //            intro: 'It will keep a count of the number of candidates for each position'
    //        },
    //        {
    //            title: 'Close Batch',
    //            element: "#closebatchbtn",
    //            intro: 'You can close the batch after the candidate has been reviewed'
    //        },
    //        {
    //            title: 'Select Candidate for Interview',
    //            element: "#interviewbutton",
    //            intro: 'The Hiring Manager can select the candidates from the ones selected by HR for the interview'
    //        },
    //        {
    //            title: 'Select all',
    //            element: "#selectcand",
    //            intro: 'Clicking on this will select all the candidates'
    //        },
    //        {
    //            title: 'Resume',
    //            element: "#viewprofile",
    //            intro: 'Clicking on this link will give you an overview of the profile'
    //        },
    //        {
    //            title: 'Bulk Schedule Interview',
    //            element: "#raiseservicebtn",
    //            intro: 'Once the candidates are selected from the grid, Using this tab, the Hiring Manager can schedule the interview for all at once'
    //        },
    //        {
    //            title: 'Select all',
    //            element: "#selectcandservice",
    //            intro: 'Clicking on this will select all the candidates'
    //        },
    //        {
    //            title: 'Resume',
    //            element: "#viewcandprofile",
    //            intro: 'Clicking on this link will give you an overview of the profile'
    //        },
    //        {
    //            title: 'Raise Service',
    //            element: "#raisebulkservice",
    //            intro: 'Using this, the Recruiter can schedule the interview for selected candidate'
    //        }

    //        ]
    //    }).start();
    //});
</script>

<div class="container pt-2">
    <div class="col-sm-6 form-group" style="text-align:left;top:10px;padding:0px;">
        <h3>Interview Scheduled</h3>
    </div>
    
    
   
    <p class="text-white header-bar mt-2 p-2" style="font-size: 18px;">Schedule or Conduct Interview</p>
    <div style="border:1px solid silver;" class="p-2 mb-2">
        
        <div class="mt-2">
            <p class="pl-1 pb-2" style="border-bottom: 1px solid #d7d6d6;font-weight: bold;font-size: 16px;"><i class="fas fa-calendar-alt"></i>&nbsp;Candidates Shortlisted By Hiring Manager For Interview<br></p>
            <!--<div class="row" style="padding:10px;">
                <div class="col-12">-->
                    @*<button class="btn btn-primary d-flex float-right d-lg-flex align-items-lg-center" type="button" style="height: 32px;" onclick="Update1('ShortListByHr');">Unselect Candidate from Interview</button>*@
                    @*<button class="btn btn-primary d-flex float-right d-lg-flex align-items-lg-center" id="raiseservicebtn" type="button" style="height: 32px;" onclick="RaiseBulkService();">Raise Bulk Schedule Interview</button>*@
                <!--</div>
            </div>-->

            <div id="section-shortlist" class="col-12">
                @(Html.Kendo().Grid<ApplicationDataViewModel>
                ().Name("kgrdCandJobOffer").Height("450")
                .Columns(columns =>
                {

                    //columns.Select().HtmlAttributes(new { @class = "checkbox-align" }).HeaderHtmlAttributes(new { @class = "checkbox-align" }).Width(50).Locked(true).Lockable(false);
                    //columns.Template(x => x.Id).Width(35).ClientTemplate(@"<input class='checkbox' type='checkbox' #=CheckFlag==false?disabled='disabled' : ''# />").HeaderTemplate(@"<input class='checkboxAll' type='checkbox' />");
                    // columns.Bound(c => c.ApplicationId).ClientTemplate("<input class='checkbox' type='checkbox' #=TaskId==null?'':'disabled'# >").ClientHeaderTemplate("<input class='checkboxAll' type='checkbox' />").Width(50).Filterable(false).Sortable(false).HeaderHtmlAttributes(new { id="selectcandservice"});
                    columns.Bound(c => c.ApplicationId).ClientTemplate("<a href='javascript:OnApplication(\"#=ApplicationId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("Resume").Width(120).HeaderHtmlAttributes(new { id="viewcandprofile"});
                    //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a ><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("Resume").Width(120).Locked(true).Lockable(false);

                    //columns.Command(command =>
                    //{
                    //    //command.Custom("View").Text("<i class='far fa-address-card'></i>&nbsp;View").Click("").HtmlAttributes(new { /*@class = "btn btn-link",*/ @style = "color:#2d9fca" });

                    //}).Title("Resume").Width(60);

                    //columns.Bound(p => p.ApplicationNo).ClientTemplate(@"<div class='product-photo'
                    //    style='background-image: url(" + @Url.Content("~/shared/web/foods/#:data.ProductID#.jpg"));
                    //columns.Bound(p => p.ApplicationNo).Title("").Width(180).Locked(true).Lockable(false);
                    //columns.Bound(p => p.ApplicationNo).Title("Application No").Width(220).Locked(true).Lockable(false);
                    //columns.Bound(c => c.ApplicationId).ClientTemplate("#if(TaskId==null){#<button class='btn btn-info' onclick='onRaiseService(\"#:ApplicationId#\",\"SCHEDULE_INTERVIEW\")'>Raise Schedule Interview</button>#}else{#<button class='btn btn-info' onclick='onViewService(\"#:TaskId#\",\"SCHEDULE_INTERVIEW\")'>View Schedule Interview</button>#}#").Title("Service").Width(150).HeaderHtmlAttributes(new { id="raisebulkservice"});
                    //columns.Bound(c => c.Id).ClientTemplate("#if(TaskStatusCode=='COMPLETED'){#<button class='btn btn-info' onclick='onEvaluation(\"#:Id#\")'>Evaluation</button>#}#").Title("Evaluation").Width(150).Locked(true).Lockable(false);
                    columns.Bound(p => p.FirstName).Title("First Name").Width(180);
                    //columns.Bound(p => p.ApplicationStatusName).Title("Application Status").Width(150);
                    columns.Bound(p => p.MiddleName).Title("Middle Name").Width(180);
                    columns.Bound(p => p.LastName).Title("Last Name").Width(150);
                    //columns.Bound(p => p.AppliedDate).Format("{0:MM/dd/yyyy}");
                    //columns.Bound(p => p.JobId);
                    columns.Bound(p => p.ApplicationStateName).Title("Application State").Width(200);
                    columns.Bound(p => p.ApplicationStatusName).Title("Application Status").Width(200);
                    columns.Bound(p => p.BatchStatusName).Title("Batch Status").Width(200);
                    columns.Bound(p => p.Email).Width(150);
                    columns.Bound(p => p.ContactPhoneHome).Title("Contact Phone Home").Width(150);
                    columns.Bound(p => p.ContactPhoneLocal).Title("Contact Phone Local").Width(150);
                    columns.Bound(p => p.Score).Width(150);
                    //columns.Bound(p => p.Gender).Width(150);
                    columns.Bound(p => p.GenderName).Width(150);
                    columns.Bound(p => p.BloodGroup).Width(150);
                    columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                    columns.Bound(p => p.Age).Width(150);
                    columns.Bound(p => p.BirthPlace).Width(150);
                    columns.Bound(p => p.Nationality).Width(200);
                    //columns.Bound(p => p.MaritalStatus).Width(200);
                    columns.Bound(p => p.MaritalStatusName).Width(200);
                    columns.Bound(p => p.NoOfChildren).Width(200);
                    //columns.Bound(p => p.ApplicationStateCode).Width(200);
                    //columns.Bound(p => p.ApplicationStatusCode).Width(200);
                    //columns.Bound(p => p.BatchStatusName).Width(200);
                    columns.Bound(p => p.TotalWorkExperience).Width(200);
                    columns.Bound(p => p.PassportNumber).Width(200);
                    columns.Bound(p => p.PassportIssueCountry).Width(200);
                    columns.Bound(p => p.PassportExpiryDate).Width(200).Format("{0:MM/dd/yyyy}");
                    //columns.Bound(p => p.QatarId).Width(200);
                    //columns.Bound(p => p.PassportAttachmentId).Width(200);
                    //columns.Bound(p => p.AcademicCertificateId).Width(200);
                    //columns.Bound(p => p.OtherCertificateId).Width(200);
                    //columns.Bound(p => p.CoverLetterId).Width(200);
                    columns.Bound(p => p.CurrentAddressHouse).Width(200);
                    columns.Bound(p => p.CurrentAddressStreet).Width(200);
                    columns.Bound(p => p.CurrentAddressCity).Width(200);
                    columns.Bound(p => p.CurrentAddressState).Width(200);
                    columns.Bound(p => p.CurrentAddressCountryName).Width(200);
                    columns.Bound(p => p.PermanentAddressHouse).Width(200);
                    columns.Bound(p => p.PermanentAddressStreet).Width(200);
                    columns.Bound(p => p.PermanentAddressCity).Width(200);
                    columns.Bound(p => p.PermanentAddressState).Width(200);
                    columns.Bound(p => p.PermanentAddressCountryName).Width(200);
                    //columns.Bound(p => p.OptionForAnotherPosition).Width(200);
                    //columns.Bound(p => p.AdditionalInformation).Width(200);
                    columns.Bound(p => p.TimeRequiredToJoin).Width(200);
                    //columns.Bound(p => p.ManagerJobTitleAndNoOfSubordinate).Width(200);


                    //columns.Bound(p => p.Program).Width(200);
                    //columns.Bound(p => p.ProficiencyLevel).Width(200);

                    //columns.Bound(p => p.DrivingLicenseCountryId).Width(200);
                    //columns.Bound(p => p.Type).Width(200);
                    //columns.Bound(p => p.DrivingLicenseIssueDate).Format("{0:MM/dd/yyyy}").Width(200);
                    //columns.Bound(p => p.DrivingLicenseValidUpTo).Format("{0:MM/dd/yyyy}").Width(200);

                    //columns.Bound(p => p.QualificationType).Width(200);
                    //columns.Bound(p => p.QualificationId).Width(200);
                    //columns.Bound(p => p.SpecializationId).Width(200);
                    //columns.Bound(p => p.EducationType).Width(200);
                    //columns.Bound(p => p.Institute).Width(200);
                    //columns.Bound(p => p.EducationCountryId).Width(200);
                    //columns.Bound(p => p.Duration).Width(150);
                    //columns.Bound(p => p.PassingYear).Width(200);
                    //columns.Bound(p => p.Marks).Width(200);

                    //columns.Bound(p => p.NatureOfWork).Width(200);
                    //columns.Bound(p => p.NoOfYear).Width(200);

                    //columns.Bound(p => p.Employer).Width(200);
                    //columns.Bound(p => p.LocationId).Width(200);
                    //columns.Bound(p => p.From).Format("{0:MM/dd/yyyy}").Width(200);
                    //columns.Bound(p => p.To).Format("{0:MM/dd/yyyy}").Width(200);
                    //columns.Bound(p => p.Responsibilities).Width(200);

                    //columns.Bound(p => p.ExperienceCountryId).Width(200);
                    //columns.Bound(p => p.ExperienceNoOfYear).Width(200);

                    //columns.Bound(p => p.JobId).Width(200);
                    //columns.Bound(p => p.ExperienceByJobNoOfYear).Width(200);

                    //columns.Bound(p => p.Sector).Width(200);
                    //columns.Bound(p => p.Industry).Width(200);
                    //columns.Bound(p => p.Category).Width(200);
                    //columns.Bound(p => p.ExperienceBySectorNoOfYear).Width(200);

                    //columns.Bound(p => p.Language).Width(200);
                    //columns.Bound(p => p.LanguageProficiencyLevel).Width(200);


                    //columns.Bound(p => p.Value).Width(200);
                    //columns.Bound(p => p.Client).Width(200);
                    //columns.Bound(p => p.Consultant).Width(200);
                    //columns.Bound(p => p.ConstructionPeriodFrom).Width(200);
                    //columns.Bound(p => p.ConstructionPeriodTo).Width(200);
                    //columns.Bound(p => p.Position).Width(200);
                    //columns.Bound(p => p.Description).Width(200);

                    //columns.Bound(p => p.ReferenceName).Width(200);
                    //columns.Bound(p => p.ReferencePosition).Width(200);
                    //columns.Bound(p => p.ReferenceCompany).Width(200);
                    //columns.Bound(p => p.ReferencePhone).Width(200);
                    //columns.Bound(p => p.ReferenceEmail).Width(200);
                    columns.Bound(p => p.NetSalaryCurrency).HeaderHtmlAttributes(new { title = "Net Salary Currency" }).Width(200);

                    columns.Bound(p => p.NetSalary).HeaderHtmlAttributes(new { title = "Net Salary" }).Width(200);
                    columns.Bound(p => p.OtherAllowances).HeaderHtmlAttributes(new { title = "Other Allowances" }).Width(200);

                })
                //.ToolBar(toolbar =>
                //{
                //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                //})
                //.Events(e => e.DataBound("OnDataBoundNot"))
                .Resizable(resize => resize.Columns(true))
                .Scrollable()
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                  .Operators(o => o.ForString(s => s.Clear()
                                  .Contains("Contains")
                                  .IsEqualTo("Is equal to")
                                  )))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
                .AutoBind(true)
                .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(10)
                .Read(read => read.Action("ReadShortlistedHMInterviewData", "CandidateShortlist").Data("FilterGrid"))
                .Model(model => model.Id(p => p.Id))
                )
        )
                @*<button class="btn btn-info" onclick="onEvaluation('c93b445e-4a79-416d-9ebd-2e9956f6eb87');">Evaluation</button>
                    <button class="btn btn-info" onclick="onEvaluationView('c93b445e-4a79-416d-9ebd-2e9956f6eb87');">Evaluation View</button>*@
                @*<button class="btn btn-info" onclick="onCreateEvaluation();">Create Evaluation</button>*@
            </div>

        </div>
    </div>
    @Html.Hidden("ManpowerTypeCode")
    @*@Html.HiddenFor(x=>x.BatchHiringManagerId)*@
    @(Html.Kendo().Dialog()
        .Name("confirmBatchClose")
        .Title("Close Batch")
        .Content("Are you sure, you want to close the batch? After closing the batch, you will not be able to shortlist or evaluate any candidate from this batch.")
        .Width(400)
        .Modal(true)
        .Visible(false)
        .Actions(actions =>
        {
            actions.Add().Text("Yes Close Batch").Primary(true).Action("ConfirmCloseBatch");
            actions.Add().Text("Cancel");
        }))
    @Html.HiddenFor(x => x.OrganizationId)
    @Html.HiddenFor(x => x.JobTitleForHiring)
    @Html.HiddenFor(x => x.BatchId)
</div>

<script type="text/javascript">
    $(".checkboxAll").bind("change", function (e) {
        
        if ($(this).attr('checked')) {
            $('.checkboxAll').removeAttr('checked');
            $('.checkbox').prop('checked', false);
            $(".checkbox").closest("td").removeClass("k-state-selected");
        } else {
            $('input.checkbox[type=checkbox]').each(function (e) {
                if (!this.disabled) {
                    $('.checkboxAll').attr('checked', 'checked');
                    $(this).prop('checked', true);
                    $(this).closest("td").addClass("k-state-selected");
                }
            });
            //$('.checkboxAll').attr('checked', 'checked');
            //$('.checkbox').prop('checked', true);
            //$(".checkbox").closest("td").addClass("k-state-selected");
        }
    });
</script>