@using Synergy.App.DataModel
@using Synergy.App.ViewModel
@using Synergy.App.Common

@model CandidateProfileViewModel
@{
    ViewBag.Title = "Candidate Profile";
    Layout = ViewBag.Layout;//   "~/Areas/Core/Views/Shared/Themes/CareerPortal/_Layout.cshtml";
                            //Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
}
<style>
    .btn-cancel {
        color: #ffffff;
    }

        .btn-cancel:hover {
            color: #ffffff;
        }

    .required {
        color: red;
        display: contents;
    }

    .k-grid tbody tr td {
        vertical-align: top;
    }

    .k-grid,
    .k-grid .k-auto-scrollable {
        height: auto !important;
        overflow-y: visible !important;
    }

    .profile-progress-bar {
    }

    .k-progressbar .k-state-selected {
        color: #fff;
        background-color: #4ca64c;
    }

    .row {
        padding-right: 5px !important;
    }

    .view_attach:hover {
        color: #0056b3 !important;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {


        $("#TitleId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.TitleId',
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/CMS/LOV/GetListOfValueList?type=LOV_PERSON_TITLE",
                    }
                }
            }
        });


        $("#ExperienceLevelId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.ExperienceLevelId',
            filter: "contains",
            dataBound: OnExpLevelChange,
            change: OnExpLevelChange,
            dataSource: {
                transport: {
                    read: {
                        url: "/CMS/LOV/GetListOfValueList?type=LOV_EXPERIENCE_LEVEL",
                    }
                }
            }
        });

        $("#BirthDate").kendoDatePicker({
            format: "dd MMM yyyy"
        });


        $("#PassportExpiryDate").kendoDatePicker({
            format: "dd MMM yyyy"
        });


        $("#VisaExpiry").kendoDatePicker({
            format: "dd MMM yyyy"
        });


        $("#OtherCountryVisaExpiry").kendoDatePicker({
            format: "dd MMM yyyy"
        });

        $("#nationality").kendoDropDownList({
            dataTextField: "NationalityName",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.nationality',
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/Career/CandidateProfile/GetNationalityList",
                    }
                }
            }
        });

        $("#GenderId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.GenderId',
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/CMS/LOV/GetListOfValueList?type=LOV_GENDER",
                    }
                }
            }
        });

        $("#VisaType").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.VisaType',
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/CMS/LOV/GetListOfValueList?type=LOV_VISATYPE",
                    }
                }
            }
        });


        $("#OtherCountryVisaType").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.OtherCountryVisaType',
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/CMS/LOV/GetListOfValueList?type=LOV_VISATYPE",
                    }
                }
            }
        });

        $("#MaritalStatusId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.MaritalStatusId',
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/CMS/LOV/GetListOfValueList?type=LOV_MARITAL_STATUS",
                    }
                }
            }
        });

        $("#PassportIssueCountryId").kendoDropDownList({
            dataTextField: "CountryName",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.PassportIssueCountryId',
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/Career/CandidateProfile/GetCountryList",
                    }
                }
            }
        });


        $("#VisaCountry").kendoDropDownList({
            dataTextField: "CountryName",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.VisaCountry',
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/Career/CandidateProfile/GetCountryList",
                    }
                }
            }
        });


        $("#OtherCountryVisa").kendoDropDownList({
            dataTextField: "CountryName",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.OtherCountryVisa',
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/Career/CandidateProfile/GetCountryList",
                    }
                }
            }
        });


        $("#CurrentAddressCountryId").kendoDropDownList({
            dataTextField: "CountryName",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.CurrentAddressCountryId',
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/Career/CandidateProfile/GetCountryList",
                    }
                }
            }
        });


        $("#PermanentAddressCountryId").kendoDropDownList({
            dataTextField: "CountryName",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.PermanentAddressCountryId',
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/Career/CandidateProfile/GetCountryList",
                    }
                }
            }
        });


        $("#NetSalaryCurrency").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.NetSalaryCurrency',
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/Career/CandidateProfile/GetCurrencyList",
                    }
                }
            }
        });


        $("#OtherQualificationId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.OtherQualificationId',
            filter: "contains",
            change: OnQualificationChange,
            dataSource: {
                transport: {
                    read: {
                        url: "/CMS/LOV/GetListOfValueList?type=LOV_OTHER_QUALIFICATION",
                    }
                }
            }
        });


        $("#TrainingId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.TrainingId',
            filter: "contains",
            change: OnTrainingChange,
            dataSource: {
                transport: {
                    read: {
                        url: "/CMS/LOV/GetListOfValueList?type=LOV_OTHER_QUALIFICATION",
                    }
                }
            }
        });


        $("#ComputerProficiencyId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.ComputerProficiencyId',
            filter: "contains",
            change: OnComputerProfChange,
            dataSource: {
                transport: {
                    read: {
                        url: "/CMS/LOV/GetListOfValueList?type=LOV_OTHER_QUALIFICATION",
                    }
                }
            }
        });



        $("#LanguageId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.LanguageId',
            filter: "contains",
            change: OnLanguageChange,
            dataSource: {
                transport: {
                    read: {
                        url: "/CMS/LOV/GetListOfValueList?type=LOV_OTHER_QUALIFICATION",
                    }
                }
            }
        });


        $("#DrivingLicenseId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "--Select Any--",
            value: '@Model.DrivingLicenseId',
            filter: "contains",
            change: OnDrivingLicChange,
            dataSource: {
                transport: {
                    read: {
                        url: "/CMS/LOV/GetListOfValueList?type=LOV_OTHER_QUALIFICATION",
                    }
                }
            }
        });

        //GetCandidateReference();
        //$.contextMenu({
        //    selector: '#tree-menuBinCandRefer',
        //    trigger: 'left',
        //    build: function ($trigger, e) {


        //        var id = $trigger.data('idvalue');
        //        var noteId = $trigger.data('noteid');


        //        switch (0) {
        //            case 0:
        //                return {
        //                    callback: function (key, options) {
        //                        switch (key) {
        //                            case 'edit':
        //                                OnEditCandRefer(noteId);
        //                                break;
        //                            case 'del':
        //                                OnDeleteCandRefer(noteId);
        //                                break;


        //                            default:
        //                        }
        //                    },
        //                    items: {
        //                        "edit": { name: "Edit", icon: "fas fa-pencil" },
        //                        "del": { name: "Delete", icon: "fas fa-trash" },
        //                    }
        //                };


        //        }
        //    }
        //});

         GetCandidateEmploymentHistory();
        $.contextMenu({
            selector: '#tree-menuBinExpbyEmploymentHistory',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandExperience(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandExperience(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                               }
                        };


                }
            }

 });
        GetCandidateExperiencebyCountry();
        $.contextMenu({
            selector: '#tree-menuBinExpbyCountry',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandExpByCountry(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandExpByCountry(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                               }
                        };


                }
            }
        });
        GetCandidateExperiencebyJob();
        $.contextMenu({
            selector: '#tree-menuBinExpbyJob',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandExpByJob(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandExpByJob(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };


                }
            }
        });
        GetCandidateExperiencebyNature();
        $.contextMenu({
            selector: '#tree-menuBinExpbyNature',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandExpByNature(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandExpByNature(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };


                }
            }
        });
        GetCandidateExperiencebyOther();
        $.contextMenu({
            selector: '#tree-menuBinExpbyOther',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandExpByOther(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandExpByOther(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };


                }
            }
        });
        GetCandidateExperiencebySector();
        $.contextMenu({
            selector: '#tree-menuBinExpbySector',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandExpBySector(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandExpBySector(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };


                }
            }
        });
        GetCandidateExperiencebyProject();
        $.contextMenu({
            selector: '#tree-menuBinExpbyProject',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandProject(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandProject(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };


                }
            }
        });

        GetCandidateEducationalQualification();
        $.contextMenu({
            selector: '#tree-menuBinEducationQualification',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandEducational(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandEducational(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };


                }
            }
        });

        GetCandidateCertifications();
        $.contextMenu({
            selector: '#tree-menuBinCertifications',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandCertifications(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandEducational(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };


                }
            }
        });
        GetCandidateTrainings();
        $.contextMenu({
            selector: '#tree-menuBinTrainings',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandTrainings(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandEducational(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };


                }
            }
        });
        GetCandidateComputerProf();
        $.contextMenu({
            selector: '#tree-menuBinComputerProf',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandComputer(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandComputer(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };


                }
            }
        });
        GetCandidateDrivingLicense();
        $.contextMenu({
            selector: '#tree-menuBinCandDrivingLicense',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandDrivingLicense(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandDrivingLicense(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };


                }
            }
        });
        GetCandidateLanguageProf();
        $.contextMenu({
            selector: '#tree-menuBinCandLangProf',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandLanguage(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandLanguage(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };


                }
            }
        });
        GetCandidateReference();
        $.contextMenu({
            selector: '#tree-menuBinCandRefer',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');


                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditCandRefer(noteId);
                                        break;
                                    case 'del':
                                        OnDeleteCandRefer(noteId);
                                        break;


                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };


                }
            }
        });

onCandidateInfo();
        onProfileCompleted();
        if ('@Model.CurrentTabInfo' == "CandidateInfo") {
            /*onCandidateInfo();*/
            onEmploymentInfo();
        } else if ('@Model.CurrentTabInfo' == "EmploymentInfo") {
            /*onEmploymentInfo();*/
            onQualificationInfo();
        } else if ('@Model.CurrentTabInfo' == "QualificationInfo") {
            onQualificationInfo();
            if ('@Model.SourceFrom' == "Agency")
            {
                alert("Profile updated successfully");
            }
            else {

                alert("Profile updated successfully, please apply for job now.");
                if ('@ViewBag.JobAdvId' == null || '@ViewBag.JobAdvId' == "") {
                    document.getElementById("savebutton").disabled = true;
                    window.location.href = '/Portal/CareerPortal';
                    //LoadPartailView('/Portal/CareerPortal/Home', $('#cms-content'));
                    @* LoadPartailView('@Url.Action("Index", "CareerPortalDashboard", new { @area = "Recruitment" })', $('#cms-content'));*@
                }
            }

            if ('@ViewBag.JobAdvId'!=null && '@ViewBag.JobAdvId'!="") {
                 LoadPartailView('@Url.Action("JobDetails", "JobAdvertisement", new { @area = "Recruitment" })?jobAdvId=@ViewBag.JobAdvId&isDirectLogin=true', $('#cms-content'));
            }

        }

});

    var onAjaxSuccess = function (res) {
        //alert("ajax sucess");
       
        if (res.success) {
            HideLoader($("#cms-content"));
            //alert("ajax sucess02");
            if ('@Model.DataAction'=='@DataActionEnum.Create')
            {
                ShowNotification("Saved Successfully", "success");
            }
            if ('@Model.DataAction'=='@DataActionEnum.Edit')
            {
                ShowNotification("Updated Successfully", "success");
            }
            var candId = res.candidateProfileId;
            var jobadvid = "";
            if ('@ViewBag.JobAdvId'!=null && '@ViewBag.JobAdvId'!="") {
                jobadvid = '@ViewBag.JobAdvId';
            }
            if ('@ViewBag.Layout' != null) {
                LoadPartailView('@Url.Action("Index", "CandidateProfile", new { @area = "Career" })?id=' + candId + '&currentTabInfo=' + res.currentTabInfo + '&jobAdvId=' + jobadvid + '&taskid=' + '@Model.TaskId', $('#popup'));

            }
            else {
            LoadPartailView('@Url.Action("Index", "CandidateProfile", new { @area = "Career" })?id=' + candId + '&currentTabInfo=' + res.currentTabInfo +'&jobAdvId='+jobadvid, $('#cms-content'));

            }
            //if (res.currentTabInfo == "CandidateInfo") {
            //    onCandidateInfo();
            //} else if (res.currentTabInfo == "EmploymentInfo") {
            //    onEmploymentInfo();
            //} else if (res.currentTabInfo == "QualificationInfo") {
            //    onQualificationInfo();
            //}
            //alert("ajax sucess03");
        }
        else {
            HideLoader($("#cms-content"));
            showError(res.error);
        }
    };
    var showError = function (error) {

        $("#validation-summary").html(error);
        $("#validation-summary").css("display", "block");
    }
    function onProfileCompleted(){
        //var pb = $("#profileCompleteness").data("kendoProgressBar");
        if ('@Model.Level' == "1") {
            //pb.value(1);
            $("#profilecompleted").text("40");
        } else if ('@Model.Level' == "2") {
            //pb.value(2);
            $("#profilecompleted").text("70");
        } else if ('@Model.Level' == "3") {
            //pb.value(3);
            $("#profilecompleted").text("100");
        } else {
            //pb.value(0);
            $("#profilecompleted").text("0");
        }

    }
    function onCancel(){
        alert("Cancel");
    }

    function onSave(e) {
        debugger;
        ShowLoader($("#cms-content"));
       // if ('@Model.DataAction' == '@DataActionEnum.Edit') {
            if ($("#CurrentTabInfo").val() == "CandidateInfo") {
                var msgCand = "";
                var msgcountCand = 0;
                var fname = $("#FirstName").val();
                if (fname == '') {
                    msgCand = msgCand + "<li>First name field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }

                var lname = $("#LastName").val();
                if (lname == '') {
                    msgCand = msgCand + "<li>Last name field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var age = $("#Age").val();
                if (age == '') {
                    msgCand = msgCand + "<li>Age field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }

                var birthdate = kendo.toString($("#BirthDate").data("kendoDatePicker").value(), 'yyyy/MM/dd');
                //var birthdate = $("#BirthDate").val();
                if (birthdate == '') {
                    msgCand = msgCand + "<li>Birth date field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var birthpalce = $("#BirthPlace").val();
                if (birthpalce == '') {
                    msgCand = msgCand + "<li>City/Country of Birth field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var nationality = $("#nationality").val();
                if (nationality == '') {
                    msgCand = msgCand + "<li>Nationality field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                //var blood = $("#BloodGroup").val();
                //if (blood == '') {
                //    msgCand = msgCand + "<li>Blood Group field is required.</li>"
                //    msgcountCand = msgcountCand + 1;
                //}
                var gender = $("#GenderId").val();
                if (gender == '') {
                    msgCand = msgCand + "<li>Gender field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var marital = $("#MaritalStatusId").val();
                if (marital == '') {
                    msgCand = msgCand + "<li>Marital Status field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var passno = $("#PassportNumber").val();
                if (passno == '') {
                    msgCand = msgCand + "<li>Passport Number field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }

                var expirydate = kendo.toString($("#PassportExpiryDate").data("kendoDatePicker").value(), 'yyyy/MM/dd');
                //var expirydate = $("#PassportExpiryDate").val();
                if (expirydate == '') {
                    msgCand = msgCand + "<li>Expiry Date field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var resume = $("#ResumeId").val();
                if (resume == '') {
                    msgCand = msgCand + "<li>Most recent CV is mandatory.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var passport = $("#PassportAttachmentId").val();
                if (passport == '') {
                    msgCand = msgCand + "<li>Copy of Passport is mandatory.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var acadamic = $("#AcademicCertificateId").val();
                if (acadamic == '') {
                    msgCand = msgCand + "<li>Copy of Academic Certificates is mandatory.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var othercerti = $("#OtherCertificateId").val();
                if (othercerti == '') {
                    msgCand = msgCand + "<li>Copy of Other Certificates is mandatory.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var house = $("#PermanentAddressHouse").val();
                if (house == '') {
                    msgCand = msgCand + "<li>House/Flat No field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var street = $("#PermanentAddressStreet").val();
                if (street == '') {
                    msgCand = msgCand + "<li>Street/Lane field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var city = $("#PermanentAddressCity").val();
                if (city == '') {
                    msgCand = msgCand + "<li>City/District field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var state = $("#PermanentAddressState").val();
                if (state == '') {
                    msgCand = msgCand + "<li>State/Province field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var country = $("#PermanentAddressCountryId").val();
                if (country == '') {
                    msgCand = msgCand + "<li>Country field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var currentphone = $("#ContactPhoneLocal").val();
                if (currentphone == '') {
                    msgCand = msgCand + "<li>Current Phone No field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }
                var emailadd = $("#Email").val();
                if (emailadd == '') {
                    msgCand = msgCand + "<li>Email Address field is required.</li>"
                    msgcountCand = msgcountCand + 1;
                }

                if (msgcountCand > 0) {
                    HideLoader($("#cms-content"));
                    $("#validation-summary").html(msgCand);
                    $("#validation-summary").css("display", "block");
                    e.preventDefault();
                    return false;
                }
            }
            if ($("#CurrentTabInfo").val() == "EmploymentInfo") {
                //alert("EmploymentInfo");
                var msgEmp = "";
                var msgcountEmp = 0;
                var twe = $("#TotalWorkExperience").val();
                var twey = $("#TotalWorkExperienceYear").val();
                //alert(twe);
                //alert(twey);
                var diff = twe - twey
                if (diff>0.5 || diff<-0.5) {
                    //alert("Not Match");
                    msgEmp = msgEmp + "<li>Your total experience is not matching with 'Total experience duration' as per data entered by you.</li>"
                    msgcountEmp = msgcountEmp + 1;
                }

                // row count not working
                //var ehgrid = $("#kgrdCandidateExperience").data("kendoGrid");
                //var ehcount = ehgrid.dataSource.data().length;
                //if (ehcount > 0) {

                //} else {
                //    msgEmp = msgEmp + "<li>Employment History : Minimum 1 record is mandatory.</li>"
                //    msgcountEmp = msgcountEmp + 1;

                //}

                var explevel = $("#ExperienceLevelCode").val();
                if (explevel == '') {
                    msgEmp = msgEmp + "<li>Experience Level field is required.</li>"
                    msgcountEmp = msgcountEmp + 1;
                }
                else if (explevel == "EXPERIENCE")
                {
                    // row count not working
                    //var expcountrygrid = $("#kgrdCandExpByCountry").data("kendoGrid");
                    //if (expcountrygrid.dataSource.data().length > 0) {

                    //} else {
                    //    msgEmp = msgEmp + "<li>Experience by Country : Minimum 1 record is mandatory.</li>"
                    //    msgcountEmp = msgcountEmp + 1;

                    //}

                    //// row count not working
                    //var expjobgrid = $("#kgrdCandExpByJob").data("kendoGrid");
                    //if (expjobgrid.dataSource.data().length > 0) {

                    //} else {
                    //    msgEmp = msgEmp + "<li>Experience by Job : Minimum 1 record is mandatory.</li>"
                    //    msgcountEmp = msgcountEmp + 1;

                    //}

                    // row count not working
                    //var sectorgrid = $("#kgrdCandExpBySector").data("kendoGrid");
                    //if (sectorgrid.dataSource.data().length > 0) {

                    //} else {
                    //    msgEmp = msgEmp + "<li>Experience by Sector & Industry : Minimum 1 record is mandatory.</li>"
                    //    msgcountEmp = msgcountEmp + 1;

                    //}
                }

                var netsalary = $("#NetSalary").val();
                if (netsalary == '') {
                    msgEmp = msgEmp + "<li>Net Salary after Income Tax field is required.</li>"
                    msgcountEmp = msgcountEmp + 1;
                }
                var otherallow = $("#OtherAllowances").val();
                if (otherallow == '') {
                    msgEmp = msgEmp + "<li>Other Allowances field is required.</li>"
                    msgcountEmp = msgcountEmp + 1;
                }
                var timejoin = $("#TimeRequiredToJoin").val();
                if (timejoin == '') {
                    msgEmp = msgEmp + "<li>Days to join field is required.</li>"
                    msgcountEmp = msgcountEmp + 1;
                }
                if (msgcountEmp > 0) {
                    HideLoader($("#cms-content"));
                    $("#validation-summary").html(msgEmp);
                    $("#validation-summary").css("display", "block");
                    e.preventDefault();
                    return false;
                }
            }
            if ($("#CurrentTabInfo").val() == "QualificationInfo") {
                //alert("QualificationInfo");
                var msgQual = "";
                var msgcountQual = 0;

                // row count not working
                //var cegrid = $("#kgrdCandidateEducational").data("kendoGrid");
                //var cecount = cegrid.dataSource.data().length;
                //if (cecount > 0) {
                //    //var cedetail = JSON.stringify(cegrid.dataSource.data());
                //    //$("#CandidateEducationalData").val(cedetail);
                //} else {
                //    msgQual = msgQual + "<li>Educational Qualification : Minimum 1 record is mandatory.</li>"
                //    msgcountQual = msgcountQual + 1;
                //}

                var otherQualification = $("#OtherQualificationCode").val();
                if (otherQualification == '') {
                    msgQual = msgQual + "<li>Other Qualification field is required.</li>"
                    msgcountQual = msgcountQual + 1;
                }
                else if (otherQualification == "OQ_YES") {

                    // row count not working
                    //var certifigrid = $("#kgrdCandidateCertifications").data("kendoGrid");
                    //if (certifigrid.dataSource.data().length > 0) {

                    //} else {
                    //    msgQual = msgQual + "<li>Certifications : Minimum 1 record is mandatory.</li>"
                    //    msgcountQual = msgcountQual + 1;

                    //}

                }

                var training = $("#TrainingCode").val();
                if (training == '') {
                    msgQual = msgQual + "<li>Trainings field is required.</li>"
                    msgcountQual = msgcountQual + 1;
                } else if (training == "OQ_YES") {

                    // row count not working
                    //var traininggrid = $("#kgrdCandidateTrainings").data("kendoGrid");
                    //if (traininggrid.dataSource.data().length > 0) {

                    //} else {
                    //    msgQual = msgQual + "<li>Trainings : Minimum 1 record is mandatory.</li>"
                    //    msgcountQual = msgcountQual + 1;

                    //}
                }

                var compprof = $("#ComputerProficiencyCode").val();
                if (compprof == '') {
                    msgQual = msgQual + "<li>Computer Proficiency field is required.</li>"
                    msgcountQual = msgcountQual + 1;
                } else if (compprof == "OQ_YES") {

                    // row count not working
                    //var compgrid = $("#kgrdCandidateComputer").data("kendoGrid");
                    //if (compgrid.dataSource.data().length > 0) {

                    //} else {
                    //    msgQual = msgQual + "<li>Computer Proficiency : Minimum 1 record is mandatory.</li>"
                    //    msgcountQual = msgcountQual + 1;

                    //}
                }

                var langcode = $("#LanguageCode").val();
                if (langcode == '') {
                    msgQual = msgQual + "<li>Language field is required.</li>"
                    msgcountQual = msgcountQual + 1;
                } else if (langcode == "OQ_YES") {

                    // row count not working
                    //var langgrid = $("#kgrdCandidateLanguage").data("kendoGrid");
                    //if (langgrid.dataSource.data().length > 0) {

                    //} else {
                    //    msgQual = msgQual + "<li>Languages : Minimum 1 record is mandatory.</li>"
                    //    msgcountQual = msgcountQual + 1;
                    //}
                }

                var drivinglic = $("#DrivingLicenseCode").val();
                if (drivinglic == '') {
                    msgQual = msgQual + "<li>Driving License field is required.</li>"
                    msgcountQual = msgcountQual + 1;
                } else if (drivinglic == "OQ_YES") {

                    // row count not working
                    //var drivinggrid = $("#kgrdCandDrivingLicense").data("kendoGrid");
                    //if (drivinggrid.dataSource.data().length > 0) {

                    //} else {
                    //    msgQual = msgQual + "<li>Driving License : Minimum 1 record is mandatory.</li>"
                    //    msgcountQual = msgcountQual + 1;

                    //}
                }



                if (msgcountQual > 0) {
                    HideLoader($("#cms-content"));
                    $("#validation-summary").html(msgQual);
                    $("#validation-summary").css("display", "block");
                    e.preventDefault();
                    return false;
                }
            }

       // }


    }
    function OnCandExpBound() {
                        $.ajax({
                    url:'@Url.Action("GetCandidateExperienceDuration", "CandidateProfile", new { @area= "Career" })?candidateProfileId=@Model.Id',
                    type: "GET",
                    contentType: "application/json",
                    dataType: "JSON",
                    success: function (response) {
                        if (response.success) {
                            var twe = response.data;
                            $("#TotalWorkExperienceYear").val(twe);
                        }
                    }
                    });
    }
    function onFileUploadSuccessQid(e) {
        if (e.response.success) {
            $("#QIDAttachmentId").val(e.response.fileId);
            document.getElementById('IsCopyofQID').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }
    function onFileUploadSuccessQid2(e) {
        if (e.response.success) {
            $("#QIDAttachmentId2").val(e.response.fileId);
            document.getElementById('IsCopyofQID').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }
    function onFileUploadSuccessQid3(e) {
        if (e.response.success) {
            $("#QIDAttachmentId3").val(e.response.fileId);
            document.getElementById('IsCopyofQID').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }
    function onFileUploadSuccessQid4(e) {
        if (e.response.success) {
            $("#QIDAttachmentId4").val(e.response.fileId);
            document.getElementById('IsCopyofQID').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }
    function onFileUploadSuccessQid5(e) {
        if (e.response.success) {
            $("#QIDAttachmentId5").val(e.response.fileId);
            document.getElementById('IsCopyofQID').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }
    function onFileUploadSuccessPassport(e) {
        if (e.response.success) {
            $("#PassportAttachmentId").val(e.response.fileId);
            document.getElementById('IsCopyofIDPassport').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessPassport2(e) {
        if (e.response.success) {
            $("#PassportAttachmentId2").val(e.response.fileId);
            document.getElementById('IsCopyofIDPassport').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }
    function onFileUploadSuccessPassport3(e) {
        if (e.response.success) {
            $("#PassportAttachmentId3").val(e.response.fileId);
            document.getElementById('IsCopyofIDPassport').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }
    function onFileUploadSuccessPassport4(e) {
        if (e.response.success) {
            $("#PassportAttachmentId4").val(e.response.fileId);
            document.getElementById('IsCopyofIDPassport').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessPassport5(e) {
        if (e.response.success) {
            $("#PassportAttachmentId5").val(e.response.fileId);
            document.getElementById('IsCopyofIDPassport').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessAcademic(e) {
        if (e.response.success) {
            $("#AcademicCertificateId").val(e.response.fileId);
            document.getElementById('IsCopyofAcademicCertificates').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }


    function onFileUploadSuccessAcademic2(e) {
        if (e.response.success) {
            $("#AcademicCertificateId2").val(e.response.fileId);
            document.getElementById('IsCopyofAcademicCertificates').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessAcademic3(e) {
        if (e.response.success) {
            $("#AcademicCertificateId3").val(e.response.fileId);
            document.getElementById('IsCopyofAcademicCertificates').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessAcademic4(e) {
        if (e.response.success) {
            $("#AcademicCertificateId4").val(e.response.fileId);
            document.getElementById('IsCopyofAcademicCertificates').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessAcademic5(e) {
        if (e.response.success) {
            $("#AcademicCertificateId5").val(e.response.fileId);
            document.getElementById('IsCopyofAcademicCertificates').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessOther(e) {
        if (e.response.success) {
            $("#OtherCertificateId").val(e.response.fileId);
            document.getElementById('IsCopyofOtherCertificates').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessOther2(e) {
        if (e.response.success) {
            $("#OtherCertificateId2").val(e.response.fileId);
            document.getElementById('IsCopyofOtherCertificates').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessOther3(e) {
        if (e.response.success) {
            $("#OtherCertificateId3").val(e.response.fileId);
            document.getElementById('IsCopyofOtherCertificates').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessOther4(e) {
        if (e.response.success) {
            $("#OtherCertificateId4").val(e.response.fileId);
            document.getElementById('IsCopyofOtherCertificates').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessOther5(e) {
        if (e.response.success) {
            $("#OtherCertificateId5").val(e.response.fileId);
            document.getElementById('IsCopyofOtherCertificates').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessCV(e) {
        debugger;
        if (e.response.success) {
            $("#ResumeId").val(e.response.fileId);
            document.getElementById('IsMostRecentCV').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessSlip(e) {
        if (e.response.success) {
            $("#CoverLetterId").val(e.response.fileId);
            document.getElementById('IsLatestOfferLetterSalarySlip').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessPhoto(e) {
        if (e.response.success) {
            //alert(e.response.fileId);
            //console.log(e);
            //return true;
            //$(".profile-img").attr("src", "/cms/content/GetBackgroundImage?id=" + e.response.fileId);
            $(".profile-img").attr("src", "/cms/Document/GetFileMongo?fileId=" + e.response.fileId);
            $("#PhotoId").val(e.response.fileId);
            document.getElementById('IsMostRecentColorPhoto').checked = true;
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onCandidateInfo() {

        $("#divCandidateInfo").show();
        $("#divEmploymentInfo").hide();
        $("#divQualificationInfo").hide();
        $("#candidateTitle").show();
        $("#employmentTitle").hide();
        $("#qualificationTitle").hide();
        $("#candidateTab").attr("class", "Qlink-title");
        $("#employmentTab").attr("class", "Qlinks");
        $("#qualificationTab").attr("class", "Qlinks");
        $("#employmentTab").show();
        $("#qualificationTab").show();
        $("#printViewTab").show();
        $('#savebutton').val('Save and Next');
        if ('@Model.DataAction' == '@DataActionEnum.Create') {
            $("#employmentTab").hide();
            $("#qualificationTab").hide();
            $("#printViewTab").show();
        } else if('@Model.DataAction' == '@DataActionEnum.Edit'){
            if ('@Model.Level'=='1') {
                $("#employmentTab").show();
            }
            if ('@Model.Level' == '2') {
                $("#employmentTab").show();
                $("#qualificationTab").show();
            }
            if ('@Model.Level' == '3') {
                $("#employmentTab").show();
                $("#qualificationTab").show();
            }
            $("#printViewTab").show();
        }
        $("#CurrentTabInfo").val("CandidateInfo");
    }
    function onEmploymentInfo() {
        //alert("emp");
        $("#divCandidateInfo").hide();
        $("#divEmploymentInfo").show();
        $("#divQualificationInfo").hide();
        $("#candidateTitle").hide();
        $("#employmentTitle").show();
        $("#qualificationTitle").hide();
        $("#candidateTab").attr("class", "Qlinks");
        $("#employmentTab").attr("class", "Qlink-title");
        $("#qualificationTab").attr("class", "Qlinks");
        $("#CurrentTabInfo").val("EmploymentInfo");
        $('#savebutton').val('Save and Next');
        //introJs().setOptions({
        //    steps: [{
        //        title: 'Employment History',
        //        element: "#employementhistory",
        //        intro: 'This section will let you add your previous employment details. Click on the add button for each employment detail'
        //    },
        //    {
        //        title: 'Analysis of Experience',
        //        element: "#analysis",
        //        intro: 'This section includes information about your experience based on Country, Job, Nature of Work, Sector and Industry'
        //    },
        //    {
        //        title: 'Current Salary Details',
        //        element: "#salarydetail",
        //        intro: 'This section will let you add your salary details. You can choose the currency from the dropdown'
        //    },
        //    {
        //        title: 'Time required to join (in days)',
        //        element: "#timerequire",
        //        intro: 'And this is our final step!'
        //    },
        //    {
        //         title: '',
        //         element: "#projectbrief",
        //        intro: 'Click on add and give details about your project with which you have worked before'
        //    },
        //    {
        //         title: 'Save Button',
        //         element: "#savebutton",
        //         intro: 'Clicking on this will save all the details you have entered'
        //    }]
        //}).start();
    }
    function onQualificationInfo() {
        $("#divCandidateInfo").hide();
        $("#divEmploymentInfo").hide();
        $("#divQualificationInfo").show();
        $("#candidateTitle").hide();
        $("#employmentTitle").hide();
        $("#qualificationTitle").show();
        $("#candidateTab").attr("class", "Qlinks");
        $("#employmentTab").attr("class", "Qlinks");
        $("#qualificationTab").attr("class", "Qlink-title");
        $("#CurrentTabInfo").val("QualificationInfo");
        $('#savebutton').val('Save');
        //introJs().setOptions({
        //    steps: [

        //    {
        //        title: 'Educational Qualification',
        //        element: "#EduQd",
        //        intro: 'This section provides you with the space to add your previous educational qualifications including your specialization and type'
        //    },
        //    {
        //        title: 'Certifications',
        //        element: "#certificate",
        //        intro: 'This section will include the certifications you have done including your specialization and type'
        //    },
        //    {
        //        title: 'Computer',
        //        element: "#computer",
        //        intro: 'This section allows you to add your technical skill and the proficiency level corresponding to that skill'
        //    },
        //    {
        //        title: 'Language',
        //        element: "#language",
        //        intro: 'This section allows you to add the Language you know and the proficiency level'
        //    },
        //    {
        //        title: 'Driving',
        //        element: "#driving",
        //        intro: 'This section allows you to add details about your driving license'
        //    },
        //    {
        //         title: 'Save Button',
        //         element: "#savebutton",
        //         intro: 'Clicking on this will save all the details you have entered'

        //    }]
        //}).start();
    }

    function SaveData(e) {
        debugger
        var cegrid = $("#kgrdCandidateEducational").data("kendoGrid");
        var cecount = cegrid.dataSource.data().length;
        if (cecount > 0) {
            var cedetail = JSON.stringify(cegrid.dataSource.data());
            $("#CandidateEducationalData").val(cedetail);
        } else {
            alert("No record.");
            e.preventDefault();
            return false;
        }

        var ccgrid = $("#kgrdCandidateCertifications").data("kendoGrid");
        var cccount = ccgrid.dataSource.data().length;
        if (cccount > 0) {
            var ccdetail = JSON.stringify(ccgrid.dataSource.data());
            $("#CandidateCertificationsData").val(ccdetail);
        }

        var ctgrid = $("#kgrdCandidateTrainings").data("kendoGrid");
        var ctcount = ctgrid.dataSource.data().length;
        if (ctcount > 0) {
            var ctdetail = JSON.stringify(ctgrid.dataSource.data());
            $("#CandidateTrainingsData").val(ctdetail);
        }

        var expgrid = $("#kgrdCandidateExperience").data("kendoGrid");
        var expcount = expgrid.dataSource.data().length;
        if (expcount > 0) {
            var expdetail = JSON.stringify(expgrid.dataSource.data());
            $("#CandidateExperienceData").val(expdetail);
        }
    }

    function onFileUploadSuccess(e) {
        if (e.response.success) {
            //alert(e.response.fileId);
            $("#AttachmentId").val(e.response.fileId);
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }
    function onCEGridSave(arg) {
        console.log(arg);

    }
    function onCCGridSave(arg) {
        console.log(arg);

    }
    function onCTGridSave(arg) {
        console.log(arg);

    }
    function onExpGridSave(arg) {
        console.log(arg);

    }
    //  var columnDefsCandRefer = [
    //    {
    //        headerName: "",
    //        field: "Id",
    //        minWidth: 100,
    //        cellRenderer: params => {
    //            return "<div class='btn-group grid-menu' id='tree-menuBinCandRefer' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
    //        }
    //    },
    //    {
    //        headerName: "Sl. No.",
    //        field: "SequenceOrder",

    //    },
    //    {
    //        headerName: "Name",
    //        field: "Name",

    //    },
    //    {
    //        headerName: "Position",
    //        field: "Position",

    //    },
    //    {
    //        headerName: "Company",
    //        field: "Company",

    //    },
    //    {
    //        headerName: "Phone",
    //        field: "Phone"
    //    },
    //    {
    //        headerName: "Email",
    //        field: "Email",

    //    }


    //];
    @*function GetCandidateReference() {
        document.getElementById("kgrdCandRefer").innerHTML = "";
        gridConfig(
            "kgrdCandRefer",
            "/Career/CandidateProfile/ReadCandRefer",? candidateProfileId = @Model.Id ",
            columnDefsCandRefer,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }*@
    var columnDefsCandRefer = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinCandRefer' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            headerName: "Sl. No.",
            field: "SequenceOrder",
            minWidth: 150,
        },
        {
            headerName: "Name",
            field: "Name",
            minWidth: 150,
        },
         {
             headerName: "Position",
             field: "Position",
             minWidth: 150,
        },
          {
              headerName: "Company",
              field: "Company",

        },
        {
            headerName: "Phone",
            field: "Phone",
            minWidth: 150,
        },
        {
            headerName: "Email",
            field: "Email",
            minWidth: 150,
        }
    ];
    function GetCandidateReference() {
    debugger;
        document.getElementById("kgrdCandReference").innerHTML = "";
        gridConfig(
            "kgrdCandReference",
            "/Career/CandidateProfile/ReadCandRefer?candidateProfileId=" + '@Model.Id',
            columnDefsCandRefer,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
     function OnCreateCandRefer() {
        var candId = '@Model.Id';

          var win = GetMainWindow();
         win.iframeOpenUrl = '@Url.Action("CreateCandrefer", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId;
         win.OpenWindow({ Title: 'Manage Candidate References', Width: 550, Height: 800 });
        return false;
    }

    function OnEditCandRefer(noteId) {


          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandRefer", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId;
        win.OpenWindow({ Title: 'Manage Experience References', Width: 550, Height: 800 });
        return false;
    }
        function OnDeleteCandRefer(noteId) {

        var flag = confirm('Do you really want to delete ?');
        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteCandRefer", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                       // $("#kgrdCandrefer").data("kendoGrid").dataSource.read();
                        GetCandidateReference();
                       kendo.alert("Deleted Successfully.");
                    }
                },
                error: function (ert) {
                    //
                    //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }
    var columnDefsLanguage = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinCandLangProf' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            headerName: "Sl. No.",
            field: "SequenceOrder",
            minWidth: 150,

        },
        {
            headerName: "Language Name",
            field: "LanguageName",
            minWidth: 150,

        },
        {
            headerName: "Proficiency Level Name",
            field: "ProficiencyLevelName",
            minWidth: 150,

        }
       ];
    function GetCandidateLanguageProf() {
        document.getElementById("kgrdCandidateLanguage").innerHTML = "";
        gridConfig(
            "kgrdCandidateLanguage",
            "/Career/CandidateProfile/ReadCandidateLanguageProfData?candidateProfileId=" + '@Model.Id' ,
            columnDefsLanguage,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
    function OnCreateCandLanguage() {
        //alert("Create Lang");
        var candId = '@Model.Id';
        @*iframeOpenUrl = '@Url.Action("CreateCandidateLanguageProf", "CandidateProfile", new { @area= "Recruitment" })?candidateProfileId=' + candId;
        OpenIframePopup(550, 1200, 'Manage Language');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandidateLanguageProf", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId;
        win.OpenWindow({ Title: 'Manage Language', Width: 550, Height: 600 });
        return false;

    }

    function OnEditCandLanguage(noteId) {

          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandidateLanguageProf", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId;
        win.OpenWindow({ Title: 'Manage Language', Width: 550, Height: 600 });
        return false;
    }

    function OnDeleteCandLanguage(noteId) {

        var flag = confirm('Do you really want to delete ?');
        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteCandidateLanguageProf", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                    /*$("#kgrdCandidateLanguage").data("kendoGrid").dataSource.read();*/
                        GetCandidateLanguageProf();
                       kendo.alert("Deleted Successfully.");
                    }
                },
                error: function (ert) {
                    //
                    //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }
    var columnDefsTrainings = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinTrainings' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            field: "QualificationName",
            headerName: "Qualification",
            minWidth: 150,
        },
        {
            field: "SpecializationName",
            headerName: "Specialization",
            minWidth: 150,

        },
        {
            field: "EducationTypeName",
            headerName: "Type",
            minWidth: 150,

        },
        {
            field: "Institute",
            headerName: "Institute",
            minWidth: 150,

        },
        {
            field: "CountryName",
            headerName: "Country",
            minWidth: 150,

        },
        {
            field: "Duration",
            headerName: "Duration",
            minWidth: 150,

        },
        {
            field: "PassingYear",
            headerName: "Passing Year",
            minWidth: 150,

        },
        {
            field: "Marks",
            headerName: "Marks",
            minWidth: 150,

        },
        // {
        //    field: "Attachment",
        //    headerName: "Attachment",

        //}
    ];

    function GetCandidateTrainings() {
        document.getElementById("kgrdCandidateTrainings").innerHTML = "";
        gridConfig(
            "kgrdCandidateTrainings",
            "/Career/CandidateProfile/ReadCandidateTrainingsData?candidateProfileId=" + '@Model.Id' ,
            columnDefsTrainings,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
    function OnCreateCandTrainings() {
        var candId = '@Model.Id';
        var quoalType = '@QualificationTypeEnum.Trainings';

         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandidateEducational", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId + '&qualificationType=' + quoalType;
        win.OpenWindow({ Title: 'Manage Trainings', Width: 550, Height: 900 });
        return false;
    }
    function OnEditCandTrainings(noteId) {

          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandidateEducational", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId;
        win.OpenWindow({ Title: 'Manage Trainings', Width: 550, Height: 900 });
        return false;
    }

    var columnDefsCertifications = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinCertifications' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            field: "QualificationName",
            headerName: "Qualification",
            minWidth: 150,
        },
        {
            field: "SpecializationName",
            headerName: "Specialization",
            minWidth: 150,

        },
        {
            field: "EducationTypeName",
            headerName: "Type",
            minWidth: 150,

        },
         {
            field: "Institute",
             headerName: "Institute",
             minWidth: 150,

        },
         {
             field: "CountryName",
             headerName: "Country",
             minWidth: 150,

        },
         {
            field: "Duration",
             headerName: "Duration",
             minWidth: 150,

        },
         {
            field: "PassingYear",
             headerName: "Passing Year",
             minWidth: 150,

        },
         {
            field: "Marks",
             headerName: "Marks",
             minWidth: 150,

        },
        // {
        //    field: "Attachment",
        //    headerName: "Attachment",

        //}
    ];

    function GetCandidateCertifications() {
        document.getElementById("kgrdCandidateCertifications").innerHTML = "";
        gridConfig(
            "kgrdCandidateCertifications",
            "/Career/CandidateProfile/ReadCandidateCertificationsData?candidateProfileId=" + '@Model.Id',
            columnDefsCertifications,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    function OnCreateCandCertifications() {
        var candId = '@Model.Id';
        var quoalType = '@QualificationTypeEnum.Certifications';
        @*iframeOpenUrl = '@Url.Action("CreateCandidateEducational", "CandidateProfile", new { @area= "Recruitment" })?candidateProfileId=' + candId + '&qualificationType=' + quoalType;
        OpenIframePopup(550, 1200, 'Manage Certifications');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandidateEducational", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId + '&qualificationType=' + quoalType;
        win.OpenWindow({ Title: 'Manage Certifications', Width: 550, Height: 900 });
        return false;
    }
    function OnEditCandCertifications(noteId) {

          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandidateEducational", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId;
        win.OpenWindow({ Title: 'Manage Certifications', Width: 550, Height: 900 });
        return false;
    }
      var columnDefsEducational = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinEducationQualification' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            field: "QualificationName",
            headerName: "Qualification",
            minWidth:150,
        },
        {
            field: "SpecializationName",
            headerName: "Specialization",
            minWidth: 150,

        },
        {
            field: "EducationTypeName",
            headerName: "Type",
            minWidth: 150,

        },
         {
            field: "Institute",
             headerName: "Institute",
             minWidth: 150,

        },
         {
             field: "CountryName",
             headerName: "Country",
             minWidth: 150,

        },
         {
            field: "Duration",
             headerName: "Duration",
             minWidth: 150,

        },
         {
            field: "PassingYear",
             headerName: "Passing Year",
             minWidth: 150,

        },
         {
            field: "Marks",
             headerName: "Marks",
             minWidth: 150,

        },
        // {
        //    field: "Attachment",
        //    headerName: "Attachment",

        //}
    ];

    function GetCandidateEducationalQualification() {
        document.getElementById("kgrdCandidateEducational").innerHTML = "";
        gridConfig(
            "kgrdCandidateEducational",
            "/Career/CandidateProfile/ReadCandidateEducationalData?candidateProfileId=" + '@Model.Id',
            columnDefsEducational,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }


    function OnCreateCandEducational() {
        var candId = '@Model.Id';
        var quoalType = '@QualificationTypeEnum.Educational';
        @*iframeOpenUrl = '@Url.Action("CreateCandidateEducational", "CandidateProfile", new { @area= "Recruitment" })?candidateProfileId=' + candId + '&qualificationType=' + quoalType;
        OpenIframePopup(550, 1200, 'Manage Educational Qualification');*@
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandidateEducational", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId + '&qualificationType=' + quoalType;
        win.OpenWindow({ Title: 'Manage Educational Qualification', Width: 550, Height: 900 });
        return false;
    }
    function OnEditCandEducational(noteId) {

        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandidateEducational", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId;
        win.OpenWindow({ Title: 'Manage Educational Qualification', Width: 550, Height: 900 });
        return false;
    }
    function OnDeleteCandEducational(noteId) {
        //var quoalType = dataItem.QualificationType;
        //alert(quoalType);
        var flag = confirm('Do you really want to delete ?');

        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteCandidateEducational", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        //if (quoalType==1) {
                            /*$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();*/
                        //} else if (quoalType==2) {
                        //    $("#kgrdCandidateCertifications").data("kendoGrid").dataSource.read();
                        //} else if (quoalType==3) {
                        //    $("#kgrdCandidateTrainings").data("kendoGrid").dataSource.read();
                        //}
                        GetCandidateEducationalQualification();
                        kendo.alert("Deleted Successfully.");
                    }
                },
                error: function (ert) {
                    //
                    //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }
    var columnDefsComputerProf = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinComputerProf' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            headerName: "Sl. No.",
            field: "SequenceOrder",
            minWidth: 150,
        },
        {
            field: "Program",
            headerName: "Program",
            minWidth: 150,

        },
        {
            field: "ProficiencyLevelName",
            headerName: "Proficiency Level Name",
            minWidth: 150,

        },

    ];

    function GetCandidateComputerProf() {
        document.getElementById("kgrdCandidateComputer").innerHTML = "";
        gridConfig(
            "kgrdCandidateComputer",
            "/Career/CandidateProfile/ReadCandidateComputerProfData?candidateProfileId=" + '@Model.Id',
            columnDefsComputerProf,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
    //Candidate Computer
    function OnCreateCandComputer() {

        var candId = '@Model.Id';

         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandidateComputerProf", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId;
        win.OpenWindow({ Title: 'Manage Computer Proficiency', Width: 550, Height: 600 });
        return false;
    }
    function OnEditCandComputer(noteId) {


          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandidateComputerProf", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId;
        win.OpenWindow({ Title: 'Manage Computer Proficiency', Width: 550, Height: 600 });
        return false;
    }
    function OnDeleteCandComputer(noteId) {

        var flag = confirm('Do you really want to delete ?');
        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteCandidateComputerProf", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                    /*$("#kgrdCandidateComputer").data("kendoGrid").dataSource.read();*/
                        GetCandidateComputerProf();
                        kendo.alert("Deleted Successfully.");
                    }
                },
                error: function (ert) {
                    //
                    //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }

    //Candidate Experience

           var columnDefsEmploymentHistory = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinExpbyEmploymentHistory' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            field: "Employer",
            headerName: "Employer",
            minWidth: 150,
        },
        {
            field: "Location",
            headerName: "Location",
            minWidth: 150,

        },
        {
            field: "JobTitle",
            headerName: "Job Title",
            minWidth: 150,

        },
         {
            field: "From",
             headerName: "From",
             minWidth: 150,
             cellRenderer: (data) => {
                 var d = new Date(data.value);
                 return d.getDate() + "." + (d.getMonth() + 1) + "." + d.getFullYear();
             }
        },
         {
            field: "To",
             headerName: "To",
             minWidth: 150,
             cellRenderer: (data) => {
                 var d = new Date(data.value);
                 return d.getDate() + "." + (d.getMonth() + 1) + "." + d.getFullYear();
             }
         },
         {
             field: "Duration",
             headerName: "Duration",
             minWidth: 150,
         },
         {
            field: "Responsibilities",
             headerName: "Responsibilities",
             minWidth: 150,

        },
         {
            field: "Attachment",
             headerName: "Attachment",
             minWidth: 150,

        }
    ];

    function GetCandidateEmploymentHistory() {
        document.getElementById("kgrdCandidateExperience").innerHTML = "";
        gridConfig(
            "kgrdCandidateExperience",
            "/Career/CandidateProfile/ReadCandidateExperienceData?candidateProfileId=" + '@Model.Id',
            columnDefsEmploymentHistory,
            false,
            true,
            true,
            true,
            1,
            true,
            10);

        OnCandExpBound();
    }

            //Candidate Experience
    function OnCreateCandExperience() {
        var candId = '@Model.Id';

        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandidateExperience", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId;
        win.OpenWindow({ Title: 'Manage Experience', Width: 550, Height: 900 });
        return false;
    }
    function OnEditCandExperience(noteid) {

         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandidateExperience", "CandidateProfile", new { @area= "Career" })?noteid=' + noteid;
        win.OpenWindow({ Title: 'Manage Experience', Width: 550, Height: 900 });
        return false;
    }
    function OnDeleteCandExperience(noteId) {


        //if (dataItem.IsLatest == true) {
        //    kendo.alert("Cannot delete latest record");
        //}
        //else {
        //alert(dataItem.id);
        var flag = confirm('Do you really want to delete ?');

        if (flag) {
            $.ajax({
                url:'@Url.Action("DeleteCandidateExperience", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        //$("#kgrdCandidateExperience").data("kendoGrid").dataSource.read();
                        GetCandidateEmploymentHistory();
                        kendo.alert("Deleted Successfully");
                    }
                },
                error: function (ert) {
                    //
                    //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
                }
            });
            return false;
            }
       // }
    }
    //function OnCreateCandExperience() {
    //    var candId = '@Model.Id';

    //    @*iframeOpenUrl = '@Url.Action("CreateCandidateExperience", "CandidateProfile", new { @area= "Recruitment" })?candidateProfileId=' + candId;
    //    OpenIframePopup(550, 1200, 'Manage Experience');*@
    //     var win = GetMainWindow();
    //    win.iframeOpenUrl = '@Url.Action("CreateCandidateExperience", "CandidateProfile", new { @area= "Recruitment" })?candidateProfileId=' + candId;
    //    win.OpenWindow({ Title: 'Manage Experience', Width: 550, Height: 900 });
    //    return false;
    //}
    //function OnEditCandExperience(e) {
    //    e.preventDefault();
    //    var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
    //    //console.log(dataItem);
    //    //alert("Edit : " + dataItem.Id);
    //    @*iframeOpenUrl = '@Url.Action("EditCandidateExperience", "CandidateProfile", new { @area= "Recruitment" })?id=' + dataItem.Id;
    //    OpenIframePopup(550, 1200, 'Manage Experience');*@
    //     var win = GetMainWindow();
    //    win.iframeOpenUrl = '@Url.Action("EditCandidateExperience", "CandidateProfile", new { @area= "Recruitment" })?id=' + dataItem.Id;
    //    win.OpenWindow({ Title: 'Manage Experience', Width: 550, Height: 900 });
    //    return false;
    //}
    //function OnDeleteCandExperience(e) {
    //    e.preventDefault();
    //    var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

    //    //if (dataItem.IsLatest == true) {
    //    //    kendo.alert("Cannot delete latest record");
    //    //}
    //    //else {
    //    //alert(dataItem.id);
    //    var flag = confirm('Do you really want to delete ?');

    //    if (flag) {
    //        $.ajax({
    //            url:'@Url.Action("DeleteCandidateExperience", "CandidateProfile", new { @area= "Recruitment" })?id=' + dataItem.id,
    //            type: 'POST',
    //            data: {},
    //            dataType: 'json',
    //            success: function (result) {
    //                //
    //                if (result.success) {
    //                    $("#kgrdCandidateExperience").data("kendoGrid").dataSource.read();
    //                    kendo.alert("Deleted Successfully");
    //                }
    //            },
    //            error: function (ert) {
    //                //
    //                //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
    //            }
    //        });
    //        return false;
    //        }
    //   // }
    //}
    var columnDefsCountry = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinExpbyCountry' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            headerName: "Sl. No.",
            field: "SequenceOrder",
            minWidth:150,

        },
        {
            headerName: "Country Name",
            field: "CountryName",
            minWidth: 150,

        },
        {
            headerName: "No Of Year",
            field: "NoOfYear",
            minWidth: 150,
        }


    ];
    function GetCandidateExperiencebyCountry() {
        document.getElementById("kgrdCandExpByCountry").innerHTML = "";
        gridConfig(
            "kgrdCandExpByCountry",
            "/Career/CandidateProfile/ReadCandExpByCountryData?candidateProfileId=" + '@Model.Id',
            columnDefsCountry,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
     function OnCreateCandExpByCountry() {
         var candId = '@Model.Id';
         //alert(candId);
         debugger;
             var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandExpByCountry", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId;
        win.OpenWindow({ Title: 'Manage Experience By Country', Width: 550, Height: 600 });
        return false;
    }

    function OnEditCandExpByCountry(noteid) {


          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandExpByCountry", "CandidateProfile", new { @area= "Career" })?noteid=' + noteid;
        win.OpenWindow({ Title: 'Manage Experience By Country', Width: 550, Height: 600 });
        return false;
    }
    function OnDeleteCandExpByCountry(noteid) {

        var flag = confirm('Do you really want to delete ?');
        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteCandExpByCountry", "CandidateProfile", new { @area= "Career" })?noteid=' + noteid,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        GetCandidateExperiencebyCountry();
                       kendo.alert("Deleted Successfully.");
                    }
                },
                error: function (ert) {
                    //
                    //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }
    var columnDefsJob = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinExpbyJob' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            headerName: "Sl. No.",
            field: "SequenceOrder",
            minWidth: 150,

        },
        {
            headerName: "Job Name",
            field: "JobName",
            minWidth: 150,

        },
        {
            headerName: "No Of Year",
            field: "NoOfYear",
            minWidth: 150,
        }


    ];
    function GetCandidateExperiencebyJob() {
        document.getElementById("kgrdCandExpByJob").innerHTML = "";
        gridConfig(
            "kgrdCandExpByJob",
            "/Career/CandidateProfile/ReadCandExpByJobData?candidateProfileId=" + '@Model.Id',
            columnDefsJob,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
     function OnCreateCandExpByJob() {
        var candId = '@Model.Id';

             var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandExpByJob", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId;
        win.OpenWindow({ Title: 'Manage Experience By Job', Width: 550, Height: 600 });
        return false;
    }

    function OnEditCandExpByJob(noteid) {


          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandExpByJob", "CandidateProfile", new { @area= "Career" })?noteid=' + noteid;
        win.OpenWindow({ Title: 'Manage Experience By Job', Width: 550, Height: 600 });
        return false;
    }
    function OnDeleteCandExpByJob(noteid) {

        var flag = confirm('Do you really want to delete ?');
        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteCandExpByJob", "CandidateProfile", new { @area= "Career" })?noteid=' + noteid,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        GetCandidateExperiencebyJob();
                       kendo.alert("Deleted Successfully.");
                    }
                },
                error: function (ert) {
                    //
                    //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }
    var columnDefsNature = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinExpbyNature' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            headerName: "Sl. No.",
            field: "SequenceOrder",
            minWidth: 150,
        },
        {
            headerName: "Nature Of Work",
            field: "NatureOfWork",
            minWidth: 150,

        },
        {
            headerName: "No Of Year",
            field: "NoOfYear",
            minWidth: 150,
        }


    ];
    function GetCandidateExperiencebyNature() {
        document.getElementById("kgrdCandExpByNature").innerHTML = "";
        gridConfig(
            "kgrdCandExpByNature",
            "/Career/CandidateProfile/ReadCandidateExpByNatureData?candidateProfileId=" + '@Model.Id',
            columnDefsNature,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    function OnCreateCandExpByNature() {
        var candId = '@Model.Id';

        @*iframeOpenUrl = '@Url.Action("CreateCandidateExpByNature", "CandidateProfile", new { @area= "Recruitment" })?candidateProfileId=' + candId;
        OpenIframePopup(550, 1200, 'Manage Experience By Nature Of Work');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandidateExpByNature", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId;
        win.OpenWindow({ Title: 'Manage Experience By Nature Of Work', Width: 550, Height: 600 });
        return false;
    }
    function OnEditCandExpByNature(noteId) {

          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandidateExpByNature", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId;
        win.OpenWindow({ Title: 'Manage Experience By Nature Of Work', Width: 550, Height: 600 });
        return false;
    }
    function OnDeleteCandExpByNature(noteId) {

        var flag = confirm('Do you really want to delete ?');

        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteCandidateExpByNature", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {

                    if (result.success) {
                       // $("#kgrdCandExpByNature").data("kendoGrid").dataSource.read();
                        RefreshCN();
                        kendo.alert("Deleted Successfully");
                    }
                },
                error: function (ert) {
                    //
                    //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
                }
            });
            return false;
            }
        //}
    }
    var columnDefsOther = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinExpbyOther' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            headerName: "Sl. No.",
            field: "SequenceOrder",
            minWidth: 150,
        },
        {
            headerName: "Other Type Name",
            field: "OtherTypeName",
            minWidth: 150,
        },
        {
            headerName: "No Of Year",
            field: "NoOfYear",
            minWidth: 150,
        }


    ];
    function GetCandidateExperiencebyOther() {
        document.getElementById("kgrdCandExpByOther").innerHTML = "";
        gridConfig(
            "kgrdCandExpByOther",
            "/Career/CandidateProfile/ReadCandidateExpByOtherList?candidateProfileId=" + '@Model.Id',
            columnDefsOther,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
      function OnCreateCandExpByOther() {
        var candId = '@Model.Id';


           var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandidateExpByOther", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId;
          win.OpenWindow({ Title: 'Manage Experience By Other', Width: 550, Height: 600 });
        return false;
    }
    function OnEditCandExpByOther(noteId) {

          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandidateExpByOther", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId;
        win.OpenWindow({ Title: 'Manage Experience By Other', Width: 550, Height: 600 });
        return false;
    }
    function OnDeleteCandExpByOther(noteId) {

        var flag = confirm('Do you really want to delete ?');
        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteCandidateExpByOther", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        //$("#kgrdCandExpByOther").data("kendoGrid").dataSource.read();
                        GetCandidateExperiencebyOther();
                       kendo.alert("Deleted Successfully.");
                    }
                },
                error: function (ert) {
                    //
                    //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }

    var columnDefsSector = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinExpbySector' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            headerName: "Sl. No.",
            field: "SequenceOrder",
            minWidth: 150,

        },
        {
            headerName: "Sector Name",
            field: "SectorName",
            minWidth: 150,

        },
        {
            headerName: "Industry Name",
            field: "IndustryName",
            minWidth: 150,

        },
        {
            headerName: "Category Name",
            field: "CategoryName",
            minWidth: 150,

        },
        {
            headerName: "No Of Year",
            field: "NoOfYear",
            minWidth: 150,
        }


    ];
    function GetCandidateExperiencebySector() {
        document.getElementById("kgrdCandExpBySector").innerHTML = "";
        gridConfig(
            "kgrdCandExpBySector",
            "/Career/CandidateProfile/ReadCandidateExpBySectorList?candidateProfileId=" + '@Model.Id',
            columnDefsSector,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    function OnCreateCandExpBySector() {
        var candId = '@Model.Id';

        @*iframeOpenUrl = '@Url.Action("CreateCandidateExpBySector", "CandidateProfile", new { @area= "Recruitment" })?candidateProfileId=' + candId;
        OpenIframePopup(550, 1200, 'Manage Experience By Sector & Industry');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandidateExpBySector", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId;
        win.OpenWindow({ Title: 'Manage Experience By Sector & Industry', Width: 550, Height: 700 });
        return false;
    }
    function OnEditCandExpBySector(noteId) {

          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandidateExpBySector", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId;
        win.OpenWindow({ Title: 'Manage Experience By Sector & Industry', Width: 550, Height: 700 });
        return false;
    }
    function OnDeleteCandExpBySector(noteId) {

        var flag = confirm('Do you really want to delete ?');

        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteCandidateExpBySector", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        //$("#kgrdCandExpBySector").data("kendoGrid").dataSource.read();
                        GetCandidateExperiencebySector();
                        kendo.alert("Deleted Successfully");
                    }
                },
                error: function (ert) {
                    //
                    //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
                }
            });
            return false;
            }
        //}
    }


    //Candidate Driving License
    var columnDefsDrivingLicense = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinCandDrivingLicense' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            headerName: "Sl. No.",
            field: "SequenceOrder",


        },
        {
            headerName: "Country Name",
            field: "CountryName",
            minWidth: 150,

        },
        {
            headerName: "LicenseType",
            field: "LicenseTypeName",
            minWidth: 150,

        },
        {
            headerName: "Issue Date",
            field: "IssueDate",

        },
        {
            headerName: "Valid Upto",
            field: "ValidUpTo"
        }


    ];
    function GetCandidateDrivingLicense() {
        document.getElementById("kgrdCandDrivingLicense").innerHTML = "";
        gridConfig(
            "kgrdCandDrivingLicense",
            "/Career/CandidateProfile/ReadCandidateDrivingLicenseData?candidateProfileId=" + '@Model.Id',
            columnDefsDrivingLicense,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    function OnCreateCandDrivingLicense() {
        var candId = '@Model.Id';
        @*iframeOpenUrl = '@Url.Action("CreateCandidateDrivingLicense", "CandidateProfile", new { @area= "Recruitment" })?candidateProfileId=' + candId;
        OpenIframePopup(550, 1200, 'Manage Candidate Driving License');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandidateDrivingLicense", "CandidateProfile", new { @area = "Career" })?candidateProfileId=' + candId;
        win.OpenWindow({ Title: 'Manage Candidate Driving License', Width: 550, Height: 700 });
        return false;
    }
    function OnEditCandDrivingLicense(noteId) {

          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandidateDrivingLicense", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId;
        win.OpenWindow({ Title: 'Manage Candidate Driving License', Width: 550, Height: 700 });
        return false;
    }
    function OnDeleteCandDrivingLicense(noteId) {

        var flag = confirm('Do you really want to delete ?');

        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteCandidateDrivingLicense", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                    /*$("#kgrdCandDrivingLicense").data("kendoGrid").dataSource.read();*/
                        GetCandidateDrivingLicense();
                        kendo.alert("Deleted Successfully");
                    }
                },
                error: function (ert) {
                    //
                    //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
                }
            });
            return false;
            }
        //}
    }
    var columnDefsProject = [
        {
            headerName: "",
            field: "Id",
            minWidth: 100,
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinExpbyProject' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid='" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            headerName: "Sl. No.",
            field: "SequenceOrder",
            minWidth: 130,

        },
        {
            headerName: "Currency",
            field: "Currency",
            minWidth: 120,

        },
        {
            headerName: "Value",
            field: "Value",
            minWidth: 120,

        },
        {
            headerName: "Client",
            field: "Client",
            minWidth: 120,

        },
        {
            headerName: "Construction Period From",
            field: "ConstructionPeriodFrom",
            minWidth: 200,
        },
        {
            headerName: "Construction Period To",
            field: "ConstructionPeriodTo",
            minWidth: 200,

        },
        {
            headerName: "Position",
            field: "Position",
            minWidth: 120,

        },
        {
            headerName: "Description",
            field: "Description",
            minWidth: 130,

        },


    ];
    function GetCandidateExperiencebyProject() {
        document.getElementById("kgrdCandidateProject").innerHTML = "";
        gridConfig(
            "kgrdCandidateProject",
            "/Career/CandidateProfile/ReadCandidateProjectData?candidateProfileId=" + '@Model.Id',
            columnDefsProject,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
     function OnCreateCandProject() {
        var candId = '@Model.Id';

        @*iframeOpenUrl = '@Url.Action("CreateCandidateProject", "CandidateProfile", new { @area= "Recruitment" })?candidateProfileId=' + candId;
         OpenIframePopup(550, 1200, 'Manage Project');*@
          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateCandidateProject", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId;
         win.OpenWindow({ Title: 'Manage Project', Width: 550, Height: 900 });
        return false;
    }
    function OnEditCandProject(noteId) {

          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditCandidateProject", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId;
        win.OpenWindow({ Title: 'Manage Project', Width: 550, Height: 900 });
        return false;
    }
    function OnDeleteCandProject(noteId) {

        var flag = confirm('Do you really want to delete ?');
        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteCandidateProject", "CandidateProfile", new { @area= "Career" })?noteId=' + noteId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        //$("#kgrdCandidateProject").data("kendoGrid").dataSource.read();
                        GetCandidateExperiencebyProject();
                       kendo.alert("Deleted Successfully.");
                    }
                },
                error: function (ert) {
                    //
                    //$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }
    function ViewAttachment(id)
    {
        @*iframeOpenUrl = '@Url.Action("ViewAttachment", "Task", new { @area= "Cms" })?fileId=' + id;
        OpenIframePopup(1000, 1000, 'View Attachment');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ViewAttachment", "Task", new { @area= "Cms" })?fileId=' + id;
        win.OpenWindow({ Title: 'View Attachment', Width: 1000, Height: 1000 });
        return false;
    }
    function onPrintableView() {
        var candId = '@Model.Id';
        @*iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area= "Recruitment" })?candidateProfileId=' + candId;
        OpenIframePopup(1000, 1000, 'Candidate Profile');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area= "Career" })?candidateProfileId=' + candId;
        win.OpenWindow({ Title: 'Candidate Profile', Width: 1000, Height: 1000 });
        return false;
    }

    @*function onViewDocuments() {
        var candId = '@Model.Id';
        iframeOpenUrl = '@Url.Action("GetDocuments", "CandidateProfile", new { @area= "Recruitment" })?candidateProfileId=' + candId;
        OpenIframePopup(500,1000,'Documents');
    }*@
     function OnExpLevelChange(e) {
         var dataItem = e.sender.dataItem();
             $.ajax({
                 url: '@Url.Action("GetLOVCode", "CandidateProfile", new { @area= "Career" })?lovId=' + dataItem.Id,
                    type: "GET",
                    contentType: "application/json",
                    dataType: "JSON",
                    success: function (response) {
                        if (response.success) {
                            $("#ExperienceLevelCode").val(response.data);
                        }
                    }
                    });

    }
     function OnQualificationChange(e) {
         var dataItem = e.sender.dataItem();
             $.ajax({
                 url: '@Url.Action("GetLOVCode", "CandidateProfile", new { @area= "Career" })?lovId=' + dataItem.Id,
                    type: "GET",
                    contentType: "application/json",
                    dataType: "JSON",
                    success: function (response) {
                        if (response.success) {
                            $("#OtherQualificationCode").val(response.data);
                        }
                    }
                    });

    }
    function OnQualificationDataBound(e) {
         var dataItem = e.sender.dataItem();
             $.ajax({
                 url: '@Url.Action("GetLOVCode", "CandidateProfile", new { @area= "Career" })?lovId=' + dataItem.Id,
                    type: "GET",
                    contentType: "application/json",
                    dataType: "JSON",
                    success: function (response) {
                        if (response.success) {
                            $("#OtherQualificationCode").val(response.data);
                        }
                    }
                    });
    }
    function OnTrainingChange(e) {
         var dataItem = e.sender.dataItem();
             $.ajax({
                 url: '@Url.Action("GetLOVCode", "CandidateProfile", new { @area= "Career" })?lovId=' + dataItem.Id,
                    type: "GET",
                    contentType: "application/json",
                    dataType: "JSON",
                    success: function (response) {
                        if (response.success) {
                            $("#TrainingCode").val(response.data);
                        }
                    }
             });
    }
    function OnTrainingDataBound(e) {
         var dataItem = e.sender.dataItem();
             $.ajax({
                 url: '@Url.Action("GetLOVCode", "CandidateProfile", new { @area= "Career" })?lovId=' + dataItem.Id,
                    type: "GET",
                    contentType: "application/json",
                    dataType: "JSON",
                    success: function (response) {
                        if (response.success) {
                            $("#TrainingCode").val(response.data);
                        }
                    }
             });
    }
    function OnComputerProfChange(e) {
         var dataItem = e.sender.dataItem();
             $.ajax({
                 url: '@Url.Action("GetLOVCode", "CandidateProfile", new { @area= "Career" })?lovId=' + dataItem.Id,
                    type: "GET",
                    contentType: "application/json",
                    dataType: "JSON",
                    success: function (response) {
                        if (response.success) {
                            $("#ComputerProficiencyCode").val(response.data);
                        }
                    }
                    });
    }
    function OnComputerProfDataBound(e) {
         var dataItem = e.sender.dataItem();
             $.ajax({
                 url: '@Url.Action("GetLOVCode", "CandidateProfile", new { @area= "Career" })?lovId=' + dataItem.Id,
                    type: "GET",
                    contentType: "application/json",
                    dataType: "JSON",
                    success: function (response) {
                        if (response.success) {
                            $("#ComputerProficiencyCode").val(response.data);
                        }
                    }
             });
    }
    function OnLanguageChange(e) {
         var dataItem = e.sender.dataItem();
             $.ajax({
                 url: '@Url.Action("GetLOVCode", "CandidateProfile", new { @area= "Career" })?lovId=' + dataItem.Id,
                    type: "GET",
                    contentType: "application/json",
                    dataType: "JSON",
                    success: function (response) {
                        if (response.success) {
                            $("#LanguageCode").val(response.data);
                        }
                    }
                    });
    }
    function OnLanguageDataBound(e) {
         var dataItem = e.sender.dataItem();
             $.ajax({
                 url: '@Url.Action("GetLOVCode", "CandidateProfile", new { @area= "Career" })?lovId=' + dataItem.Id,
                    type: "GET",
                    contentType: "application/json",
                    dataType: "JSON",
                    success: function (response) {
                        if (response.success) {
                            $("#LanguageCode").val(response.data);
                        }
                    }
             });
    }
    function OnDrivingLicChange(e) {
         var dataItem = e.sender.dataItem();
             $.ajax({
                 url: '@Url.Action("GetLOVCode", "CandidateProfile", new { @area= "Career" })?lovId=' + dataItem.Id,
                    type: "GET",
                    contentType: "application/json",
                    dataType: "JSON",
                    success: function (response) {
                        if (response.success) {
                            $("#DrivingLicenseCode").val(response.data);
                        }
                    }
                    });
    }
    function OnDrivingLicDataBound(e) {
         var dataItem = e.sender.dataItem();
             $.ajax({
                 url: '@Url.Action("GetLOVCode", "CandidateProfile", new { @area= "Career" })?lovId=' + dataItem.Id,
                    type: "GET",
                    contentType: "application/json",
                    dataType: "JSON",
                    success: function (response) {
                        if (response.success) {
                            $("#DrivingLicenseCode").val(response.data);
                        }
                    }
             });
    }
    //Pulkit Start
    //Pulkit END

    //Shifana Start
    //Shifana END
    function Competence()
    {
        @*iframeOpenUrl = '@Url.Action("ViewAttachment", "Task", new { @area= "Cms" })?fileId=' + id;
        OpenIframePopup(1000, 1000, 'View Attachment');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CompetenceMatrix", "RecruitmentTransaction", new { @area= "Rec" })';
        win.OpenWindow({ Title: 'Competence Matrix', Width: 1000, Height: 1000 });
        return false;
    }
    function PersonalData()
    {
        @*iframeOpenUrl = '@Url.Action("ViewAttachment", "Task", new { @area= "Cms" })?fileId=' + id;
        OpenIframePopup(1000, 1000, 'View Attachment');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("PersonalData", "RecruitmentTransaction", new { @area= "Rec" })';
        win.OpenWindow({ Title: 'Personal Data', Width: 1000, Height: 1000 });
        return false;
    }
    function Declaration()
    {
        @*iframeOpenUrl = '@Url.Action("ViewAttachment", "Task", new { @area= "Cms" })?fileId=' + id;
        OpenIframePopup(1000, 1000, 'View Attachment');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Declaration", "RecruitmentTransaction", new { @area= "Rec" })';
        win.OpenWindow({ Title: 'Declaration', Width: 1000, Height: 1000 });
        return false;
    }
    function Confidentiality()
    {
        @*iframeOpenUrl = '@Url.Action("ViewAttachment", "Task", new { @area= "Cms" })?fileId=' + id;
        OpenIframePopup(1000, 1000, 'View Attachment');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ConfidentialityAgreement", "RecruitmentTransaction", new { @area= "Rec" })';
        win.OpenWindow({ Title: 'Confidentiality Agreement', Width: 1000, Height: 1000 });
        return false;
    }
      function JoiningReport()
    {
        @*iframeOpenUrl = '@Url.Action("ViewAttachment", "Task", new { @area= "Cms" })?fileId=' + id;
        OpenIframePopup(1000, 1000, 'View Attachment');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("JoiningReport", "RecruitmentTransaction", new { @area= "Rec" })';
          win.OpenWindow({ Title: 'Joining Report', Width: 1000, Height: 1000 });
        return false;
    }




</script>

<div id="popup" style="padding-top:80px;">
    <form asp-controller="CandidateProfile" asp-action="ManageCandidateProfile" class="form-horizontal"
          data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
          data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
          data-ajax="true" data-ajax-method="POST">
        <div id="validation-summary" class="text-danger" asp-validation-summary="All"></div>
        @*<div class="text-danger" asp-validation-summary="All"></div>*@
        <div class="container">
            <div class="row pop-tstrip">
                <div class="col-9 col-sm-10 col-lg-11 col-xl-10">
                    <h5 class="popTitle" id="candidateTitle">Candidate Profile</h5>
                    <h5 class="popTitle" id="employmentTitle">Employment Information</h5>
                    <h5 class="popTitle" id="qualificationTitle">Qualification &amp; Others</h5>
                </div>
                <div class="col-3 col-sm-2 col-lg-1 col-xl-2">
                    @*<h5>
                            <i class="fa fa-arrows-alt ico-action ico-spacing"></i>&nbsp;&nbsp;<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" fill="none" class="ico-action ico-spacing">
                                <path d="M16.3394 9.32245C16.7434 8.94589 16.7657 8.31312 16.3891 7.90911C16.0126 7.50509 15.3798 7.48283 14.9758 7.85938L12.0497 10.5866L9.32245 7.66048C8.94589 7.25647 8.31312 7.23421 7.90911 7.61076C7.50509 7.98731 7.48283 8.62008 7.85938 9.0241L10.5866 11.9502L7.66048 14.6775C7.25647 15.054 7.23421 15.6868 7.61076 16.0908C7.98731 16.4948 8.62008 16.5171 9.0241 16.1405L11.9502 13.4133L14.6775 16.3394C15.054 16.7434 15.6868 16.7657 16.0908 16.3891C16.4948 16.0126 16.5171 15.3798 16.1405 14.9758L13.4133 12.0497L16.3394 9.32245Z" fill="currentColor"></path>
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12ZM12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21Z" fill="currentColor"></path>
                            </svg>
                        </h5>*@
                    <input id="savebutton" type="submit" class="btn btn-info" value="Save" onclick="onSave()" style="float:right; margin-top:0px;" />

                    @*<input type="button" class="btn btn-link btn-cancel" value="Cancel" onclick="onCancel()" />*@
                </div>
            </div>
            <div class="row aft-title-spacing">
                <div class="col-xl-3 image-col vertline-col">
                    @if (Model.PhotoId != null)
                    {
                        @*<img class="profile-img" src="/cms/content/getbackgroundimage?id=@Model.PhotoId" style="text-align: center;" />*@
                        <img class="profile-img" src="/cms/Document/GetFileMongo?fileId=@Model.PhotoId" style="text-align: center;" />
                    }
                    else
                    {
                        <img class="profile-img" src="/images/profile.jpg" style="text-align: center;">
                    }
                    @if (Model.Level != null && Model.Level > 0)
                    {
                        <label class="Qlinks">Profile Completed <span id="profilecompleted">0</span>%</label>
                        @*@(Html.Kendo().ProgressBar()
                    .Name("profileCompleteness")
                  .Type(ProgressBarType.Chunk)
                  .ChunkCount(3)
                  .Min(0)
                  .Max(3)
                  .Value(Model.Level.Value)
                  .HtmlAttributes(new {@class="profile-progress-bar" })
                        )*@
                    }

                    <h5>
                        @if (Model.FirstName != null)
                        {

                            <span style="color:black;">@(Model.FirstName+" "+Model.MiddleName+" "+Model.LastName)</span>
                        }
                        @*else
                            {
                                <span>Chandra Shekar Gour</span>
                            }*@
                    </h5>


                    <h6 class="des-title"></h6>
                    <div class="row">
                        <div class="col blnk-space"></div>
                    </div>
                    <label id="candidateTab" class="Qlink-title" onclick="onCandidateInfo();" style="cursor:pointer;">Personal Information</label>
                    <label id="employmentTab" class="Qlinks" onclick="onEmploymentInfo();" style="cursor:pointer;">Employment Info</label>
                    <label id="qualificationTab" class="Qlinks" onclick="onQualificationInfo();" style="cursor:pointer;">Qualification &amp; Others</label>
                    <label id="printViewTab" class="Qlinks" onclick="onPrintableView();" style="cursor:pointer;">Printable View</label>
                    @*<label id="printViewTab" class="Qlinks" onclick="onViewDocuments();" style="cursor:pointer;">View Documents</label>*@
                </div>
                <div id="divCandidateInfo" class="col-xl-9" style="border-radius: 6;border-left-width: 2;">
                    <div class="Qlink-title-mbody">
                        <div class="row">
                            <div id="personalinfo" class="col-xl-11">
                                <h5 class="title-block">1. Personal Information</h5>
                            </div>
                        </div>
                        @*<button onclick="Competence()">Competence</button>
                        <button onclick="PersonalData()">PersonalData</button>
                        <button onclick="Declaration()">Declaration</button>
                        <button onclick="Confidentiality()">Confidentiality</button>
                        <button onclick="JoiningReport()">JoiningReport</button>*@
                    </div>
                    <div class="row data-row-space">
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">Title <span class="required">*</span></label><br />
                            <input type="text" asp-for="TitleId" class="form-control" style="width:100%;" />
                            @*@(Html.Kendo().DropDownListFor(x=>x.TitleId)
        .DataTextField("Name")
        .DataValueField("Id")
        //.Events(e => e.Change("OnGenderchange"))
        .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
        .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Action("GetListOfValueList", "LOV", new { @area = "CMS", @type = "LOV_PERSON_TITLE" });
            });
        })
        //.Value(Model.Gender.ToString())
        //.HtmlAttributes(new { @class= "dropdown-menu", style = "width: 80%" })
        )*@
                        </div>
                        <div class="col-12 col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                First Name <span class="required">*</span><br>
                            </label>
                            @*@Html.Kendo().TextBoxFor(x => x.FirstName).HtmlAttributes(new { @class = "input-box" })*@
                            <input type="text" asp-for="FirstName" class="input-box" />
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Middle Name<br>
                            </label>
                            @*@Html.Kendo().TextBoxFor(x => x.MiddleName).HtmlAttributes(new { @class = "input-box" })*@
                            <input type="text" asp-for="MiddleName" class="input-box" />
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Last Name <span class="required">*</span><br>
                            </label>
                            @*@Html.Kendo().TextBoxFor(x => x.LastName).HtmlAttributes(new { @class = "input-box" })*@
                            <input type="text" asp-for="LastName" class="input-box" />
                        </div>

                    </div>
                    <div class="row data-row-space">
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Age <span class="required">*</span><br>
                            </label>
                            @*@(Html.Kendo().TextBoxFor(x=>x.Age).HtmlAttributes(new { @class = "input-box" }))*@
                            @*@(Html.Kendo().NumericTextBoxFor(x=>x.Age).Min(0).Decimals(0).Format("#"))*@
                            <input type="number" class="input-box" asp-for="Age" />
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Birth Date <span class="required">*</span><br>
                            </label>
                            @*@(Html.Kendo().DatePickerFor(x=>x.BirthDate).Format("dd MMM yyyy"))*@
                            <input type="text" asp-for="BirthDate" id="BirthDate" class="form-control" width="100%" />
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                City/Country of Birth <span class="required">*</span><br>
                            </label>
                            @*@Html.Kendo().TextBoxFor(x => x.BirthPlace).HtmlAttributes(new { @class = "input-box" })*@
                            <input type="text" asp-for="BirthPlace" class="input-box" />
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Nationality <span class="required">*</span><br>
                            </label>
                            <input type="text" asp-for="nationality" class="form-control" style="width:100%;" />
                            @*@(Html.Kendo().DropDownListFor(x=>x.nationality)
        .DataTextField("NationalityName")
        .DataValueField("Id")
        .Filter(FilterType.Contains)
        .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
        .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Action("GetNationalityList", "CandidateProfile", new { @area = "Career" });
            });
        })
        )*@
                        </div>

                    </div>
                    <div class="row data-row-space">
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">Blood Group<br></label>
                            @*@Html.Kendo().TextBoxFor(x => x.BloodGroup).HtmlAttributes(new { @class = "input-box" })*@
                            <input type="text" asp-for="BloodGroup" class="input-box" />
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">Gender <span class="required">*</span></label><br />
                            <input type="text" asp-for="GenderId" class="form-control" style="width:100%;" />
                            @*@(Html.Kendo().DropDownListFor(x=>x.GenderId)
        .DataTextField("Name")
        .DataValueField("Id")
        //.Events(e => e.Change("OnGenderchange"))
        .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
        .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Action("GetListOfValueList", "LOV", new { @area = "CMS", @type = "LOV_GENDER" });
            });
        })
        //.Value(Model.Gender.ToString())
        //.HtmlAttributes(new { @class= "dropdown-menu", style = "width: 80%" })
        )*@
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Marital Status <span class="required">*</span><br>
                            </label>
                            <input type="text" asp-for="MaritalStatusId" class="form-control" style="width:100%;" />
                            @*@(Html.Kendo().DropDownListFor(x=>x.MaritalStatusId)
           .DataTextField("Name")
           .DataValueField("Id")
           //.Events(e => e.Change("OnMaritalStatuschange"))
           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
           .DataSource(source =>
           {
               source.Read(read =>
               {
                   read.Action("GetListOfValueList", "LOV", new { @area = "CMS", @type = "LOV_MARITAL_STATUS" });
               });
           })
        //.Value(Model.MaritalStatus.ToString())
        //.HtmlAttributes(new { @class= "dropdown-menu", style = "width: 80%" })
        )*@
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">Number of Children<br></label>
                            @*@(Html.Kendo().NumericTextBoxFor(x=>x.NoOfChildren).Min(0).Decimals(0).Format("#"))*@
                            <input type="number" asp-for="NoOfChildren" class="input-box" />
                        </div>
                    </div>
                    <div class="row data-row-space">
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">Passport Number <span class="required">*</span></label><br />
                            @*@Html.Kendo().TextBoxFor(x => x.PassportNumber).HtmlAttributes(new { @class = "input-box" })*@
                            <input type="text" asp-for="PassportNumber" class="input-box" />

                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Issuing Country <span class="required">*</span><br>
                            </label>
                            <input type="text" asp-for="PassportIssueCountryId" class="form-control" style="width:100%;" />
                            @*@(Html.Kendo().DropDownListFor(x=>x.PassportIssueCountryId)
        .DataTextField("CountryName")
        .DataValueField("Id")
        .Filter(FilterType.Contains)
        .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
        .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Action("GetCountryList", "CandidateProfile", new { @area = "Career" });
            });
        })
        )*@
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">Expiry Date <span class="required">*</span><br></label>
                            @*@(Html.Kendo().DatePickerFor(x=>x.PassportExpiryDate).Format("dd MMM yyyy"))*@
                            <input type="text" asp-for="PassportExpiryDate" id="PassportExpiryDate" class="form-control" width="100%" />
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">Qatar ID<br></label>
                            @*@Html.Kendo().TextBoxFor(x => x.QatarId).HtmlAttributes(new { @class = "input-box", type = "number" })*@
                            <input type="number" asp-for="QatarId" class="input-box" />
                        </div>
                    </div>

                    <div class="row data-row-space">
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Visa Country<br>
                            </label>
                            <input type="text" asp-for="VisaCountry" class="form-control" style="width:100%;" />

                            @*@(Html.Kendo().DropDownListFor(x=>x.VisaCountry)
        .DataTextField("CountryName")
        .DataValueField("Id")
        .Filter(FilterType.Contains)
        .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
        .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Action("GetCountryList", "CandidateProfile", new { @area = "Career" });
            });
        })
        )*@
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Visa Type<br>
                            </label>
                            <input type="text" asp-for="VisaType" class="form-control" style="width:100%;" />

                            @*@(Html.Kendo().DropDownListFor(x=>x.VisaType)
           .DataTextField("Name")
           .DataValueField("Id")
           .Filter(FilterType.Contains)
           //.Events(e => e.Change("OnMaritalStatuschange"))
           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
           .DataSource(source =>
           {
               source.Read(read =>
               {
                   read.Action("GetListOfValueList", "LOV", new { @area = "CMS", @type = "LOV_VISATYPE" });
               });
           })
        //.Value(Model.MaritalStatus.ToString())
        //.HtmlAttributes(new { @class= "dropdown-menu", style = "width: 80%" })
        )*@
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">Visa Expiry<br></label>
                            @*@(Html.Kendo().DatePickerFor(x=>x.VisaExpiry).Format("dd MMM yyyy"))*@
                            <input type="text" asp-for="VisaExpiry" class="form-control" style="width:100%;" />
                        </div>

                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">Other Visa Type</label><br />
                            @*@Html.Kendo().TextBoxFor(x => x.OtherVisaType).HtmlAttributes(new { @class = "input-box" })*@
                            <input type="text" asp-for="OtherVisaType" class="input-box" />

                        </div>
                    </div>

                    <div class="row data-row-space">
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Other Country Visa<br>
                            </label>
                            <input type="text" asp-for="OtherCountryVisa" class="form-control" style="width:100%;" />
                            @*@(Html.Kendo().DropDownListFor(x=>x.OtherCountryVisa)
        .DataTextField("CountryName")
        .DataValueField("Id")
        .Filter(FilterType.Contains)
        .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
        .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Action("GetCountryList", "CandidateProfile", new { @area = "Career" });
            });
        })
        )*@

                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Other Country Visa Type<br>
                            </label>
                            <input type="text" asp-for="OtherCountryVisaType" class="form-control" style="width:100%;" />
                            @*@(Html.Kendo().DropDownListFor(x=>x.OtherCountryVisaType)
           .DataTextField("Name")
           .DataValueField("Id")
           .Filter(FilterType.Contains)
           //.Events(e => e.Change("OnMaritalStatuschange"))
           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
           .DataSource(source =>
           {
               source.Read(read =>
               {
                   read.Action("GetListOfValueList", "LOV", new { @area = "CMS", @type = "LOV_VISATYPE" });
               });
           })
        //.Value(Model.MaritalStatus.ToString())
        //.HtmlAttributes(new { @class= "dropdown-menu", style = "width: 80%" })
        )*@
                        </div>
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">Other Country Visa Expiry<br></label>
                            @*@(Html.Kendo().DatePickerFor(x=>x.OtherCountryVisaExpiry).Format("dd MMM yyyy"))*@
                            <input type="text" asp-for="OtherCountryVisaExpiry" class="form-control" style="width:100%;" />
                        </div>

                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            @*<label class="col-form-label">Other Visa Type</label><br />
                                @Html.Kendo().TextBoxFor(x => x.OtherVisaType).HtmlAttributes(new { @class = "input-box" })*@

                        </div>
                    </div>
                    <br />
                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">
                            <div class="checkbox-div">
                                @*@(Html.Kendo().CheckBoxFor(x=>x.IsMostRecentCV).Label(""))*@
                                <input type="checkbox" class="form-control" asp-for="IsMostRecentCV" />
                            </div>
                        </div>
                        <div class="col">
                            <label class="col-form-label">Most recent C.V <span class="required">*</span><br /></label>
                        </div>
                    </div>
                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">

                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col-5">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessCV")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileCV" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.ResumeId), Value = Model.ResumeId, CallbackMethod = "onFileUploadSuccessCV" });
                                    }

                                    @if (Model.ResumeId != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.ResumeId" target="_blank"><i class="fas fa-download" title="Download"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.ResumeId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview" onclick="ViewAttachment('@Model.ResumeId');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    @*<div class="row data-row-space">
                            <div class="col-9 col-sm-5 col-md-6 col-lg-3 col-xl-3"><label class="col-form-label">Docs Checklist Completed<br></label></div>
                            <div class="col">
                                <div class="row">
                                    <div class="col-sm-3 col-md-3 col-lg-2 col-xl-2">
                                        <div class="form-check">
                                            @(Html.Kendo().RadioButton().Name("IsDocsChecklistCompletedYes").HtmlAttributes(new { @name = "IsDocsChecklistCompleted" }).Label("Yes"))
                                        </div>
                                    </div>
                                    <div class="col-sm-3 col-md-3 col-xl-2">
                                        <div class="form-check">
                                            @(Html.Kendo().RadioButton().Name("IsDocsChecklistCompletedNo").HtmlAttributes(new { @name = "IsDocsChecklistCompleted" }).Label("No"))
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>*@
                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">
                            <div class="checkbox-div">
                                @*@(Html.Kendo().CheckBoxFor(x=>x.IsCopyofQID).Label(""))*@
                                <input type="checkbox" class="form-control" asp-for="IsCopyofQID" />
                            </div>
                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col-9">    <label class="col-form-label">Copy of ID</label></div>
                                <div class="col-3">

                                </div>
                            </div>


                        </div>
                        <div class="col">

                        </div>

                    </div>

                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">

                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col-3">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessQid")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileQid" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.QIDAttachmentId), Value = Model.QIDAttachmentId, CallbackMethod = "onFileUploadSuccessQid" });
                                    }
                                    @if (Model.QIDAttachmentId != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.QIDAttachmentId" target="_blank"><i class="fas fa-download" title="Download Attachment 1"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.QIDAttachmentId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 1" onclick="ViewAttachment('@Model.QIDAttachmentId');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessQid2")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileQid2" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.QIDAttachmentId2), Value = Model.QIDAttachmentId2, CallbackMethod = "onFileUploadSuccessQid2" });
                                    }
                                    @if (Model.QIDAttachmentId2 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.QIDAttachmentId2" target="_blank"><i class="fas fa-download" title="Download Attachment 2"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.QIDAttachmentId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 2" onclick="ViewAttachment('@Model.QIDAttachmentId2');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessQid3")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileQid3" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.QIDAttachmentId3), Value = Model.QIDAttachmentId3, CallbackMethod = "onFileUploadSuccessQid3" });
                                    }
                                    @if (Model.QIDAttachmentId3 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.QIDAttachmentId3" target="_blank"><i class="fas fa-download" title="Download Attachment 3"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.QIDAttachmentId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 3" onclick="ViewAttachment('@Model.QIDAttachmentId3');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessQid4")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileQid4" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.QIDAttachmentId4), Value = Model.QIDAttachmentId4, CallbackMethod = "onFileUploadSuccessQid4" });
                                    }
                                    @if (Model.QIDAttachmentId4 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.QIDAttachmentId4" target="_blank"><i class="fas fa-download" title="Download Attachment 4"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.QIDAttachmentId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 4" onclick="ViewAttachment('@Model.QIDAttachmentId4');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessQid5")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileQid5" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.QIDAttachmentId5), Value = Model.QIDAttachmentId5, CallbackMethod = "onFileUploadSuccessQid5" });
                                    }
                                    @if (Model.QIDAttachmentId5 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.QIDAttachmentId5" target="_blank"><i class="fas fa-download" title="Download Attachment 5"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.QIDAttachmentId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 5" onclick="ViewAttachment('@Model.QIDAttachmentId5');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">
                            <div class="checkbox-div">
                                @*@(Html.Kendo().CheckBoxFor(x=>x.IsCopyofIDPassport).Label(""))*@
                                <input type="checkbox" asp-for="IsCopyofIDPassport" class="form-control" />
                            </div>
                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col-12"> <label class="col-form-label">Copy of Passport (all relevant pages including last Qatar visa stamped page)<span class="required">*</span></label> </div>
                            </div>
                        </div>
                    </div>
                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">

                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col-3">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessPassport")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "filePassport" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.PassportAttachmentId), Value = Model.PassportAttachmentId, CallbackMethod = "onFileUploadSuccessPassport" });
                                    }
                                    @if (Model.PassportAttachmentId != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.PassportAttachmentId" target="_blank"><i class="fas fa-download" title="Download Attachment 1"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.PassportAttachmentId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 1" onclick="ViewAttachment('@Model.PassportAttachmentId');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
        .Name("file")
        .Async(a => a
        .Save("SaveFile", "Document", new { @area = "cms" })
        .AutoUpload(true)
        )
            .Events(e => e.Success("onFileUploadSuccessPassport2")
            )
            .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
            .HtmlAttributes(new { @class = "hr-xx-large", @id = "filePassport2" })
            )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.PassportAttachmentId2), Value = Model.PassportAttachmentId2, CallbackMethod = "onFileUploadSuccessPassport2" });
                                    }
                                    @if (Model.PassportAttachmentId2 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.PassportAttachmentId2" target="_blank"><i class="fas fa-download" title="Download Attachment 2"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.PassportAttachmentId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 2" onclick="ViewAttachment('@Model.PassportAttachmentId2');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
        .Name("file")
        .Async(a => a
        .Save("SaveFile", "Document", new { @area = "cms" })
        .AutoUpload(true)
        )
            .Events(e => e.Success("onFileUploadSuccessPassport3")
            )
            .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
            .HtmlAttributes(new { @class = "hr-xx-large", @id = "filePassport3" })
            )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.PassportAttachmentId3), Value = Model.PassportAttachmentId3, CallbackMethod = "onFileUploadSuccessPassport3" });
                                    }
                                    @if (Model.PassportAttachmentId3 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.PassportAttachmentId3" target="_blank"><i class="fas fa-download" title="Download Attachment 3"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.PassportAttachmentId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 3" onclick="ViewAttachment('@Model.PassportAttachmentId3');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
        .Name("file")
        .Async(a => a
        .Save("SaveFile", "Document", new { @area = "cms" })
        .AutoUpload(true)
        )
            .Events(e => e.Success("onFileUploadSuccessPassport4")
            )
            .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
            .HtmlAttributes(new { @class = "hr-xx-large", @id = "filePassport4" })
            )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.PassportAttachmentId4), Value = Model.PassportAttachmentId4, CallbackMethod = "onFileUploadSuccessPassport4" });
                                    }
                                    @if (Model.PassportAttachmentId4 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.PassportAttachmentId4" target="_blank"><i class="fas fa-download" title="Download Attachment 4"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.PassportAttachmentId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 4" onclick="ViewAttachment('@Model.PassportAttachmentId4');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessPassport5")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "filePassport5" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.PassportAttachmentId5), Value = Model.PassportAttachmentId5, CallbackMethod = "onFileUploadSuccessPassport5" });
                                    }
                                    @if (Model.PassportAttachmentId5 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.PassportAttachmentId5" target="_blank"><i class="fas fa-download" title="Download Attachment 5"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.PassportAttachmentId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 5" onclick="ViewAttachment('@Model.PassportAttachmentId5');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">
                            <div class="checkbox-div">
                                @*@(Html.Kendo().CheckBoxFor(x=>x.IsCopyofAcademicCertificates).Label(""))*@
                                <input type="checkbox" asp-for="IsCopyofAcademicCertificates" class="form-control" />
                            </div>
                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col-12"><label class="col-form-label">Copy of Academic Certificates<span class="required">*</span></label>  </div>
                            </div>
                        </div>
                    </div>
                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">

                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col-3">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessAcademic")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileAcademic" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AcademicCertificateId), Value = Model.AcademicCertificateId, CallbackMethod = "onFileUploadSuccessAcademic" });
                                    }
                                    @if (Model.AcademicCertificateId != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.AcademicCertificateId" target="_blank"><i class="fas fa-download" title="Download Attachment 1"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.AcademicCertificateId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 1" onclick="ViewAttachment('@Model.AcademicCertificateId');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessAcademic2")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileAcademic2" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AcademicCertificateId2), Value = Model.AcademicCertificateId2, CallbackMethod = "onFileUploadSuccessAcademic2" });
                                    }
                                    @if (Model.AcademicCertificateId2 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.AcademicCertificateId2" target="_blank"><i class="fas fa-download" title="Download Attachment 2"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.AcademicCertificateId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 2" onclick="ViewAttachment('@Model.AcademicCertificateId2');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessAcademic3")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileAcademic3" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AcademicCertificateId3), Value = Model.AcademicCertificateId3, CallbackMethod = "onFileUploadSuccessAcademic3" });
                                    }
                                    @if (Model.AcademicCertificateId3 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.AcademicCertificateId3" target="_blank"><i class="fas fa-download" title="Download Attachment 3"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.AcademicCertificateId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 3" onclick="ViewAttachment('@Model.AcademicCertificateId3');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessAcademic4")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileAcademic4" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AcademicCertificateId4), Value = Model.AcademicCertificateId4, CallbackMethod = "onFileUploadSuccessAcademic4" });
                                    }
                                    @if (Model.AcademicCertificateId4 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.AcademicCertificateId4" target="_blank"><i class="fas fa-download" title="Download Attachment 4"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.AcademicCertificateId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 4" onclick="ViewAttachment('@Model.AcademicCertificateId4');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessAcademic5")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileAcademic5" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AcademicCertificateId5), Value = Model.AcademicCertificateId5, CallbackMethod = "onFileUploadSuccessAcademic5" });
                                    }
                                    @if (Model.AcademicCertificateId5 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.AcademicCertificateId5" target="_blank"><i class="fas fa-download" title="Download Attachment 5"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.AcademicCertificateId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 5" onclick="ViewAttachment('@Model.AcademicCertificateId5');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">
                            <div class="checkbox-div">
                                @*@(Html.Kendo().CheckBoxFor(x=>x.IsCopyofOtherCertificates).Label(""))*@
                                <input type="checkbox" asp-for="IsCopyofOtherCertificates" class="form-control" />
                            </div>
                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col-12">  <label class="col-form-label">Copy of Other Certificates (Experience, training, professional)<span class="required">*</span></label></div>
                            </div>
                        </div>
                    </div>

                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">
                            <div class="checkbox-div">

                            </div>
                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col-3">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessOther")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileOther" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.OtherCertificateId), Value = Model.OtherCertificateId, CallbackMethod = "onFileUploadSuccessOther" });
                                    }
                                    @if (Model.OtherCertificateId != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.OtherCertificateId" target="_blank"><i class="fas fa-download" title="Download Attachment 1"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.OtherCertificateId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 1" onclick="ViewAttachment('@Model.OtherCertificateId');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessOther2")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileOther2" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.OtherCertificateId2), Value = Model.OtherCertificateId2, CallbackMethod = "onFileUploadSuccessOther2" });
                                    }
                                    @if (Model.OtherCertificateId2 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.OtherCertificateId2" target="_blank"><i class="fas fa-download" title="Download Attachment 2"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.OtherCertificateId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 2" onclick="ViewAttachment('@Model.OtherCertificateId2');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessOther3")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileOther3" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.OtherCertificateId3), Value = Model.OtherCertificateId3, CallbackMethod = "onFileUploadSuccessOther3" });
                                    }
                                    @if (Model.OtherCertificateId3 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.OtherCertificateId3" target="_blank"><i class="fas fa-download" title="Download Attachment 3"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.OtherCertificateId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 3" onclick="ViewAttachment('@Model.OtherCertificateId3');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessOther4")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileOther4" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.OtherCertificateId4), Value = Model.OtherCertificateId4, CallbackMethod = "onFileUploadSuccessOther4" });
                                    }
                                    @if (Model.OtherCertificateId4 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.OtherCertificateId4" target="_blank"><i class="fas fa-download" title="Download Attachment 4"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.OtherCertificateId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 4" onclick="ViewAttachment('@Model.OtherCertificateId4');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                                <div class="col-2">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessOther5")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileOther5" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.OtherCertificateId5), Value = Model.OtherCertificateId5, CallbackMethod = "onFileUploadSuccessOther5" });
                                    }
                                    @if (Model.OtherCertificateId5 != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.OtherCertificateId5" target="_blank"><i class="fas fa-download" title="Download Attachment 5"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.OtherCertificateId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview Attachment 5" onclick="ViewAttachment('@Model.OtherCertificateId5');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">
                            <div class="checkbox-div">
                                @*@(Html.Kendo().CheckBoxFor(x=>x.IsMostRecentColorPhoto).Label(""))*@
                                <input type="checkbox" asp-for="IsMostRecentColorPhoto" class="form-control" />
                            </div>
                        </div>
                        <div class="col">
                            <label class="col-form-label">Most recent color photo<br /></label>
                        </div>
                    </div>
                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">

                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col-5">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessPhoto")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png" }).MaxFileSize(10485760))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "filephoto" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.PhotoId), Value = Model.PhotoId, CallbackMethod = "onFileUploadSuccessPhoto" });
                                    }
                                    @if (Model.PhotoId != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.PhotoId" target="_blank"><i class="fas fa-download" title="Download"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.PhotoId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview" onclick="ViewAttachment('@Model.PhotoId');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">
                            <div class="checkbox-div">
                                @*@(Html.Kendo().CheckBoxFor(x=>x.IsLatestOfferLetterSalarySlip).Label(""))*@
                                <input type="checkbox" asp-for="IsLatestOfferLetterSalarySlip" class="form-control" />
                            </div>
                        </div>
                        <div class="col">
                            <label class="col-form-label">Latest offer letter &amp; Salary slip<br /></label>
                        </div>
                    </div>
                    <div class="row data-row-space">
                        <div class="col-1 col-sm-1 col-md-1 col-lg-1 col-xl-1">

                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col-5">
                                    @*@(Html.Kendo().Upload().Multiple(false)
            .Name("file")
            .Async(a => a
            .Save("SaveFile", "Document", new { @area = "cms" })
            .AutoUpload(true)
            )
                .Events(e => e.Success("onFileUploadSuccessSlip")
                )
                .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx" }).MaxFileSize(52428800))
                .HtmlAttributes(new { @class = "hr-xx-large", @id = "fileSlip" })
        )*@
                                    @{
                                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.CoverLetterId), Value = Model.CoverLetterId, CallbackMethod = "onFileUploadSuccessSlip" });
                                    }
                                    @if (Model.CoverLetterId != null)
                                    {
                                        <a href="/cms/Document/GetFileMongo?fileId=@Model.CoverLetterId" target="_blank"><i class="fas fa-download" title="Download"></i></a>
                                        @*<a href="#" onclick="ViewAttachment('@Model.CoverLetterId');" style="margin-left: 10px;"><i class="fas fa-eye" title="Preview"></i></a>*@
                                        <i class="fas fa-eye view_attach" title="Preview" onclick="ViewAttachment('@Model.CoverLetterId');" style="margin-left: 10px;color:#64aae1;cursor:pointer"></i>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row data-row-space">
                        <div class="col txt-highlight-box"><label class="col-form-label txt-note">Note:<br>1. Passport should be valid for a minimum six months for processing visa.<br>2. Documents not enclosed with application, to be obtained from individual at the time of interview.</label></div>
                    </div>
                    <div class="Qlink-title-mbody">
                        <div class="row">
                            <div id="residenceaddress" class="col-xl-11">
                                <h5>2. Residence Address</h5>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div class="row Title-strip-orange">
                                <div class="col-10 col-xl-11">
                                    <h5 class="sub-title-h5"><strong>2.1 Current Residence Address</strong><br></h5>
                                </div>
                                <div class="col-2 col-xl-1">@*<i class="fas fa-plus-square"></i>*@</div>
                            </div>
                            <div class="row">
                                <div class="col-lg-2 col-xl-2">
                                    <label class="col-form-label">
                                        House/Flat No.<br>
                                    </label>
                                    <div class="row">
                                        @*@Html.Kendo().TextBoxFor(x => x.CurrentAddressHouse).HtmlAttributes(new { @class = "input-box" })*@
                                        <input type="text" asp-for="CurrentAddressHouse" class="input-box" />
                                    </div>

                                </div>
                                <div class="col-lg-2 col-xl-2">
                                    <label class="col-form-label">
                                        Street/Lane<br>
                                    </label>
                                    <div class="row">
                                        @*@Html.Kendo().TextBoxFor(x => x.CurrentAddressStreet).HtmlAttributes(new { @class = "input-box" })*@
                                        <input type="text" asp-for="CurrentAddressStreet" class="input-box" />
                                    </div>

                                </div>
                                <div class="col-lg-2 col-xl-2">
                                    <label class="col-form-label">
                                        City/District<br>
                                    </label>
                                    <div class="row">
                                        @*@Html.Kendo().TextBoxFor(x => x.CurrentAddressCity).HtmlAttributes(new { @class = "input-box" })*@
                                        <input type="text" asp-for="CurrentAddressCity" class="input-box" />
                                    </div>

                                </div>
                                <div class="col-lg-2 col-xl-2">
                                    <label class="col-form-label">
                                        State/Province<br>
                                    </label>
                                    <div class="row">
                                        @*@Html.Kendo().TextBoxFor(x => x.CurrentAddressState).HtmlAttributes(new { @class = "input-box" })*@
                                        <input asp-for="CurrentAddressState" class="input-box" />
                                        
                                    </div>

                                </div>
                                <div class="col-lg-2 col-xl-2">
                                    <label class="col-form-label">
                                        Country<br>
                                    </label>
                                    <div class="row">
                                        <input type="text" asp-for="CurrentAddressCountryId" class="form-control" style="width:100%;" />
                                        @*@Html.Kendo().TextBoxFor(x => x.CurrentAddressCountryId).HtmlAttributes(new { @class = "input-box" })*@
                                        @*@(Html.Kendo().DropDownListFor(x=>x.CurrentAddressCountryId)
        .DataTextField("CountryName")
        .DataValueField("Id")
        .Filter(FilterType.Contains)
        .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
        .DataSource(source =>
            {
            source.Read(read =>
            {
                read.Action("GetCountryList", "CandidateProfile", new { @area = "Career" });
            });
            })
        )*@
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div class="row Title-strip-orange">
                                <div class="col-10 col-xl-11">
                                    <h5 class="sub-title-h5"><strong>2.2 Permanent Address (Home Country)</strong><br></h5>
                                </div>
                                <div class="col-2 col-xl-1">@*<i class="fas fa-plus-square"></i>*@</div>
                            </div>
                            <div class="row">
                                <div class="col-lg-2 col-xl-2">
                                    <label class="col-form-label">
                                        House/Flat No.<span class="required">*</span><br>
                                    </label>
                                    <div class="row">
                                        @*@(Html.Kendo().TextBoxFor(x=>x.PermanentAddressHouse).HtmlAttributes(new { @class= "input-box" }))*@
                                        <input type="text" asp-for="PermanentAddressHouse" class="input-box" />
                                    </div>

                                </div>
                                <div class="col-lg-2 col-xl-2">
                                    <label class="col-form-label">
                                        Street/Lane<span class="required">*</span><br>
                                    </label>
                                    <div class="row">
                                        @*@(Html.Kendo().TextBoxFor(x=>x.PermanentAddressStreet).HtmlAttributes(new { @class= "input-box" }))*@
                                        <input type="text" asp-for="PermanentAddressStreet" class="input-box" />
                                    </div>

                                </div>
                                <div class="col-lg-2 col-xl-2">
                                    <label class="col-form-label">
                                        City/District<span class="required">*</span><br>
                                    </label>
                                    <div class="row">
                                        @*@(Html.Kendo().TextBoxFor(x=>x.PermanentAddressCity).HtmlAttributes(new { @class= "input-box" }))*@
                                        <input type="text" asp-for="PermanentAddressCity" class="input-box" />
                                    </div>

                                </div>
                                <div class="col-lg-2 col-xl-2">
                                    <label class="col-form-label">
                                        State/Province<span class="required">*</span><br>
                                    </label>
                                    <div class="row">
                                        @*@(Html.Kendo().TextBoxFor(x=>x.PermanentAddressState).HtmlAttributes(new { @class= "input-box" }))*@
                                        <input type="text" asp-for="PermanentAddressState" class="input-box" />
                                    </div>

                                </div>
                                <div class="col-lg-2 col-xl-2">
                                    <label class="col-form-label">
                                        Country<span class="required">*</span><br>
                                    </label>
                                    <div class="row">
                                        <input type="text" asp-for="PermanentAddressCountryId" class="form-control" style="width:100%;" />

                                        @*@(Html.Kendo().TextBoxFor(x=>x.PermanentAddressCountryId).HtmlAttributes(new { @class= "input-box" }))*@
                                        @*@(Html.Kendo().DropDownListFor(x=>x.PermanentAddressCountryId)
        .DataTextField("CountryName")
        .DataValueField("Id")
        .Filter(FilterType.Contains)
        .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
        .DataSource(source =>
            {
            source.Read(read =>
            {
                read.Action("GetCountryList", "CandidateProfile", new { @area = "Career" });
            });
            })
        )*@
                                    </div>

                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div id="contactinfo" class="col-xl-11">
                                <h5>3 Contact Information (please provide country code)<br></h5>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-lg-3 col-xl-3">
                                    <label class="col-form-label">
                                        Permanent Phone No @*Phone(Home Town)*@<br>
                                    </label>
                                    @*@(Html.Kendo().TextBoxFor(x=>x.ContactPhoneHome).HtmlAttributes(new { @class= "input-box", type = "number" }))*@
                                    <input type="number" asp-for="ContactPhoneHome" class="input-box" />

                                </div>
                                <div class="col-lg-3 col-xl-3">
                                    <label class="col-form-label">
                                        Current Phone No @*Phone(Local)*@<span class="required">*</span><br>
                                    </label>
                                    @*@(Html.Kendo().TextBoxFor(x=>x.ContactPhoneLocal).HtmlAttributes(new { @class= "input-box", type = "number" }))*@
                                    <input type="number" asp-for="ContactPhoneLocal" class="input-box" />
                                </div>
                                <div class="col-lg-3 col-xl-3">
                                    <label class="col-form-label">
                                        Email Address<span class="required">*</span><br>
                                    </label>
                                    @*@(Html.Kendo().TextBoxFor(x=>x.Email).HtmlAttributes(new { @class= "input-box", @type = "email" }))*@
                                    <input type="email" asp-for="Email" class="input-box" />

                                </div>
                            </div>
                        </div>
                    </div>


                </div>

                <div id="divEmploymentInfo" class="col-xl-9" style="border-radius: 6;border-left-width: 2;">

                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div id="employementhistory" class="col-10 col-md-11 col-xl-11">
                                <h5>4. Employment History (Start with most recent)<span class="required">*</span><br></h5>
                            </div>
                            <div class="col">@*<i class="fas fa-plus-square"></i>*@</div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div>
                                <div class="row">
                                    <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                                        Total Work Experience @*@(Html.Kendo().NumericTextBoxFor(x=>x.TotalWorkExperience).Min(0).Decimals(0).Format("#"))*@
                                        <input type="number" asp-for="TotalWorkExperience" class="input-box" />

                                    </div>
                                    <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">

                                        Experience Level <span class="required">*</span>
                                        <input type="text" asp-for="ExperienceLevelId" class="form-control" style="width:100%;" />

                                        @*@(Html.Kendo().DropDownListFor(x=>x.ExperienceLevelId)
           .DataTextField("Name")
           .DataValueField("Id")
           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
           .Events(x => x.Change("OnExpLevelChange"))
           .DataSource(source =>
           {
               source.Read(read =>
               {
                   read.Action("GetListOfValueList", "LOV", new { @area = "CMS", @type = "LOV_EXPERIENCE_LEVEL" });
               });
           })
        )*@
                                    </div>
                                </div><br />
                                <div class="row">

                                    <div class="col-12">
                                    <button type='button' class='btn btn-primary' onclick='OnCreateCandExperience();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br />
                                    <div id="kgrdCandidateExperience" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                     @*   @(Html.Kendo().Grid<CandidateExperienceViewModel>()
                                        .Name("kgrdCandidateExperience")
                                            .Columns(columns =>
                                            {
                                                columns.Command(command => {
                                                    command.Custom("Edit").Text(" ").Click("OnEditCandExperience").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                                                    command.Custom("Delete").Text(" ").Click("OnDeleteCandExperience").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                                                }).Width(120);
                                                columns.Bound(p => p.Employer).Title("Employer").Width(200);
                                                columns.Bound(p => p.Location).Title("Location").Width(200);
                                                columns.Bound(p => p.JobTitle).Title("Job Title").Width(200);
                                                columns.Bound(p => p.From).Title("From").Width(200).Format("{0:dd/MM/yyyy}");
                                                columns.Bound(p => p.To).Title("To").Width(200).Format("{0:dd/MM/yyyy}");
                                               // columns.Bound(p => p.DurationStr).Title("Duration").Width(150);
                                                columns.Bound(p => p.Responsibilities).Title("Responsibilities").Width(500);
                                                columns.Bound(p => p.AttachmentName).Title("Attachment").ClientTemplate("#if(AttachmentName!=null){#<a style='color:blue; text-decoration:underline' href='/cms/Document/GetFileMongo?fileId=#:AttachmentId#' target='_blank'>#:AttachmentName#</a>#}#").Width(300); ;
                                            })
                                            .Events(e => e.DataBound("OnCandExpBound"))
                                            .ToolBar(toolbar =>
                                            {
                                                toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCandExperience();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>");
                                            })
                                            .Editable(editable => editable.Mode(GridEditMode.PopUp))
//.Pageable()
                                    .Scrollable(scrollable => scrollable.Height("auto"))

                                            .Sortable()
                                            .Selectable(select => select.Enabled(false))
                                            .HtmlAttributes(new { style = "height:auto" })
                                            .DataSource(dataSource => dataSource
                                                .Ajax()
                                                //.PageSize(10)
                                                //.Events(events => events.Error("error_handler"))
                                                .Model(model => model.Id(p => p.Id))
                                                //.Create(update => update.Action("EditingInline_Create", "Grid"))
                                                .Read(read => read.Action("ReadCandidateExperienceData", "CandidateProfile",new { @area= "Recruitment", @candidateProfileId=Model.Id}))
                                            //.Update(update => update.Action("EditingInline_Update", "Grid"))
                                            //.Destroy(update => update.Action("EditingInline_Destroy", "Grid"))
                                            )
                                        )*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div id="analysis" class="col-10 col-md-11 col-xl-11">
                                <h5>5. Analysis of Experience<br></h5>
                            </div>
                            <div class="col"></div>
                        </div>
                    </div>

                    @*<div class="card">
                            <div class="card-body">
                                <div class="row Title-strip-orange">
                                    <div class="col-10 col-md-11 col-xl-11">
                                        <h5 class="sub-title-h5"><strong>5.1 Experience by Country</strong><br></h5>
                                    </div>
                                    <div class="col-2 col-md-1 col-xl-1"><i class="fas fa-plus-square"></i></div>
                                </div>
                                <div>
                                    <div class="row">
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Sl. No.</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-5 col-xl-5 no-space"><span class="txt-13">Country</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-5 col-xl-5 no-space"><span class="txt-13">Number of Years</span><input type="text" class="sml-text"></div>
                                    </div>
                                </div>
                            </div>
                        </div>*@
                    <div class="card">
                        <div class="card-body">
                            <div class="row Title-strip-orange">
                                <div class="col-10 col-md-11 col-xl-11">
                                    <h5 class="sub-title-h5"><strong>5.1 Experience by Country</strong><br></h5>
                                </div>
                                <div class="col-2 col-md-1 col-xl-1">@*<i class="fas fa-plus-square"></i>*@</div>
                            </div>
                            <div>
                                <div class="row">
                                    <div class="col-12">
                                        <br/>
                                        <button type='button' class='btn btn-primary' onclick='OnCreateCandExpByCountry();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br />
                                        <div id="kgrdCandExpByCountry" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                        @*@(Html.Kendo().Grid<CandidateExperienceByCountryViewModel>()
            .Name("kgrdCandExpByCountry")
                .Columns(columns =>
                {
                    columns.Command(command => {
                        command.Custom("Edit").Text(" ").Click("OnEditCandExpByCountry").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                        command.Custom("Delete").Text(" ").Click("OnDeleteCandExpByCountry").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                    }).Width(120);
                    columns.Bound(p => p.SequenceOrder).Title("Sl. No.").Width(100);
                    columns.Bound(p => p.CountryName).Title("Country").Width(200);
                    columns.Bound(p => p.NoOfYear).Title("NoOfYear").Width(200);
                })
                //.Events(e => e.Save("onCEGridSave"))
                .ToolBar(toolbar =>
                {
                    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCandExpByCountry();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>");
                })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
        //.Pageable()
        .Scrollable(scrollable => scrollable.Height("auto"))
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .HtmlAttributes(new { /*style = "height:300px;"*/ })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    //.Events(events => events.Error("error_handler"))
                    .Model(model => model.Id(p => p.Id))
                    //.Create(update => update.Action("EditingInline_Create", "Grid"))
                    .Read(read => read.Action("ReadCandExpByCountryData", "CandidateProfile",new { @area= "Recruitment", @candidateProfileId=Model.Id}))
                //.Update(update => update.Action("EditingInline_Update", "Grid"))
                //.Destroy(update => update.Action("EditingInline_Destroy", "Grid"))
                )
            )*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*<div class="card">
                            <div class="card-body">
                                <div class="row Title-strip-orange">
                                    <div class="col-10 col-md-11 col-xl-11">
                                        <h5 class="sub-title-h5"><strong>5.2 Experience by Job Title</strong><br></h5>
                                    </div>
                                    <div class="col-2 col-md-1 col-xl-1"><i class="fas fa-plus-square"></i></div>
                                </div>
                                <div>
                                    <div class="row">
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Sl. No.</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-5 col-xl-5 no-space"><span class="txt-13">Job Titles</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-5 col-xl-5 no-space"><span class="txt-13">Number of Years</span><input type="text" class="sml-text"></div>
                                    </div>
                                </div>
                            </div>
                        </div>*@
                    <div class="card">
                        <div class="card-body">
                            <div class="row Title-strip-orange">
                                <div class="col-10 col-md-11 col-xl-11">
                                    <h5 class="sub-title-h5"><strong>5.2 Experience by Job</strong><br></h5>
                                </div>
                                <div class="col-2 col-md-1 col-xl-1">@*<i class="fas fa-plus-square"></i>*@</div>
                            </div>
                            <div>
                                <div class="row">
                                    <div class="col-12">
                                        <br/>
                                        <button type='button' class='btn btn-primary' onclick='OnCreateCandExpByJob();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br />
                                        <div id="kgrdCandExpByJob" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                        @*@(Html.Kendo().Grid<CandidateExperienceByJobViewModel>()
            .Name("kgrdCandExpByJob")
                .Columns(columns =>
                {
                    columns.Command(command => {
                        command.Custom("Edit").Text(" ").Click("OnEditCandExpByJob").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                        command.Custom("Delete").Text(" ").Click("OnDeleteCandExpByJob").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                    }).Width(120);
                    columns.Bound(p => p.SequenceOrder).Title("Sl. No.").Width(100);
                    columns.Bound(p => p.JobName).Title("Job").Width(200);
                    columns.Bound(p => p.NoOfYear).Title("NoOfYear").Width(200);
                })
                //.Events(e => e.Save("onCEGridSave"))
                .ToolBar(toolbar =>
                {
                    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCandExpByJob();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>");
                })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
        //.Pageable()
        .Scrollable(scrollable => scrollable.Height("auto"))
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .HtmlAttributes(new { /*style = "height:300px;"*/ })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    //.Events(events => events.Error("error_handler"))
                    .Model(model => model.Id(p => p.Id))
                    //.Create(update => update.Action("EditingInline_Create", "Grid"))
                    .Read(read => read.Action("ReadCandExpByJobData", "CandidateProfile",new { @area= "Recruitment", @candidateProfileId=Model.Id}))
                //.Update(update => update.Action("EditingInline_Update", "Grid"))
                //.Destroy(update => update.Action("EditingInline_Destroy", "Grid"))
                )
            )*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @*<div class="card">
                            <div class="card-body">
                                <div class="row Title-strip-orange">
                                    <div class="col-10 col-md-11 col-xl-11">
                                        <h5 class="sub-title-h5"><strong>5.3 Experience by Nature of Work</strong><br></h5>
                                    </div>
                                    <div class="col-2 col-md-1 col-xl-1"><i class="fas fa-plus-square"></i></div>
                                </div>
                                <div>
                                    <div class="row">
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Sl. No.</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-5 col-xl-5 no-space"><span class="txt-13">Nature of Work</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-5 col-xl-5 no-space"><span class="txt-13">Number of Years</span><input type="text" class="sml-text"></div>
                                    </div>
                                </div>
                            </div>
                        </div>*@
                    <div class="card">
                        <div class="card-body">
                            <div class="row Title-strip-orange">
                                <div class="col-10 col-md-11 col-xl-11">
                                    <h5 class="sub-title-h5"><strong>5.3 Experience by Nature of Work</strong><br></h5>
                                </div>
                                @*<div class="col-2 col-md-1 col-xl-1"><i class="fas fa-plus-square"></i></div>*@
                            </div>
                            <div>
                                <div class="row">
                                    <div class="col-12">
                                        <br />
                                        <button type='button' class='btn btn-primary' onclick='OnCreateCandExpByNature();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br />
                                        <div id="kgrdCandExpByNature" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                        @*@(Html.Kendo().Grid<CandidateExperienceByNatureViewModel>()
            .Name("kgrdCandExpByNature")
                .Columns(columns =>
                {
                    columns.Command(command => {
                        command.Custom("Edit").Text(" ").Click("OnEditCandExpByNature").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                        command.Custom("Delete").Text(" ").Click("OnDeleteCandExpByNature").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                    }).Width(120);
                    columns.Bound(p => p.SequenceOrder).Title("Sl. No.").Width(100);
                    columns.Bound(p => p.NatureOfWork).Title("Nature Of Work").Width(200);
                    columns.Bound(p => p.NoOfYear).Title("No Of Years").Width(200);

                    //columns.Bound(p => p.AttachmentId).Title("Attachment").Width(400);
                })
                //.Events(e => e.Save("onCEGridSave"))
                .ToolBar(toolbar =>
                {
                    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCandExpByNature();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>");
                })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
        //.Pageable()
        .Scrollable(scrollable => scrollable.Height("auto"))
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .HtmlAttributes(new { /*style = "height:300px;"*/ })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    //.Events(events => events.Error("error_handler"))
                    .Model(model => model.Id(p => p.Id))
                    //.Create(update => update.Action("EditingInline_Create", "Grid"))
                    .Read(read => read.Action("ReadCandidateExpByNatureData", "CandidateProfile",new { @area= "Recruitment", @candidateProfileId=Model.Id}))
                //.Update(update => update.Action("EditingInline_Update", "Grid"))
                //.Destroy(update => update.Action("EditingInline_Destroy", "Grid"))
                )
            )*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @*<div class="card">
                            <div class="card-body">
                                <div class="row Title-strip-orange">
                                    <div class="col-10 col-md-11 col-xl-11">
                                        <h5 class="sub-title-h5"><strong>5.4 Experience by Sector &amp; Industry</strong><br></h5>
                                    </div>
                                    <div class="col-2 col-md-1 col-xl-1"><i class="fas fa-plus-square"></i></div>
                                </div>
                                <div>
                                    <div class="row">
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="txt-13">Sl. No.</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-3 col-xl-3 no-space"><span class="txt-13">Sector</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-3 col-xl-3 no-space"><span class="txt-13">Industry</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-3 col-xl-3 no-space"><span class="txt-13">Category</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Number of Years</span><input type="text" class="sml-text"></div>
                                    </div>
                                </div>
                            </div>
                        </div>*@
                    <div class="card">
                        <div class="card-body">
                            <div class="row Title-strip-orange">
                                <div class="col-10 col-md-11 col-xl-11">
                                    <h5 class="sub-title-h5"><strong>5.4 Experience by OtherType</strong><br></h5>
                                </div>
                                @*<div class="col-2 col-md-1 col-xl-1"><i class="fas fa-plus-square"></i></div>*@
                            </div>
                            <div>
                                <div class="row">
                                    <div class="col-12">
                                        <br />
                                        <button type='button' class='btn btn-primary' onclick='OnCreateCandExpByOther();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br />
                                        <div id="kgrdCandExpByOther" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                        @*@(Html.Kendo().Grid<CandidateExperienceByOtherViewModel>()
            .Name("kgrdCandExpByOther")
                .Columns(columns =>
                {
                    columns.Command(command => {
                        command.Custom("Edit").Text(" ").Click("OnEditCandExpByOther").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                        command.Custom("Delete").Text(" ").Click("OnDeleteCandExpByOther").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                    }).Width(120);
                    columns.Bound(p => p.SequenceOrder).Title("Sl. No.").Width(100);
                    columns.Bound(p => p.OtherTypeName).Title("OtherType").Width(200);
                    columns.Bound(p => p.NoOfYear).Title("No Of Years").Width(200);

                    //columns.Bound(p => p.AttachmentId).Title("Attachment").Width(400);
                })
                //.Events(e => e.Save("onCEGridSave"))
                .ToolBar(toolbar =>
                {
                    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCandExpByOther();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>");
                })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
        //.Pageable()
        .Scrollable(scrollable => scrollable.Height("auto"))
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .HtmlAttributes(new { /*style = "height:300px;"*/})
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(10)
                    //.Events(events => events.Error("error_handler"))
                    .Model(model => model.Id(p => p.Id))
                    //.Create(update => update.Action("EditingInline_Create", "Grid"))
                    .Read(read => read.Action("ReadCandidateExpByOtherList", "CandidateProfile",new { @area= "Recruitment", @candidateProfileId=Model.Id}))
                //.Update(update => update.Action("EditingInline_Update", "Grid"))
                //.Destroy(update => update.Action("EditingInline_Destroy", "Grid"))
                )
            )*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div class="row Title-strip-orange">
                                <div class="col-10 col-md-11 col-xl-11">
                                    <h5 class="sub-title-h5"><strong>5.5 Experience by Sector &amp; Industry</strong><br></h5>
                                </div>
                                @*<div class="col-2 col-md-1 col-xl-1"><i class="fas fa-plus-square"></i></div>*@
                            </div>
                            <div>
                                <div class="row">
                                    <div class="col-12">
                                        <br />
                                        <button type='button' class='btn btn-primary' onclick='OnCreateCandExpBySector();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br />
                                        <div id="kgrdCandExpBySector" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                        @*@(Html.Kendo().Grid<CandidateExperienceBySectorViewModel>()
            .Name("kgrdCandExpBySector")
                .Columns(columns =>
                {
                    columns.Command(command => {
                        command.Custom("Edit").Text(" ").Click("OnEditCandExpBySector").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                        command.Custom("Delete").Text(" ").Click("OnDeleteCandExpBySector").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                    }).Width(120);
                    columns.Bound(p => p.SequenceOrder).Title("Sl. No.").Width(100);
                    columns.Bound(p => p.SectorName).Title("Sector").Width(200);
                    columns.Bound(p => p.IndustryName).Title("Industry").Width(200);
                    columns.Bound(p => p.CategoryName).Title("Category").Width(200);
                    columns.Bound(p => p.NoOfYear).Title("No Of Years").Width(200);

                    //columns.Bound(p => p.AttachmentId).Title("Attachment").Width(400);
                })
                //.Events(e => e.Save("onCEGridSave"))
                .ToolBar(toolbar =>
                {
                    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCandExpBySector();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>");
                })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
                .Sortable()
        //.Pageable()
        .Scrollable(scrollable => scrollable.Height("auto"))
                .Selectable(select => select.Enabled(false))
                .HtmlAttributes(new { /*style = "height:300px;"*/ })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    //.Events(events => events.Error("error_handler"))
                    .Model(model => model.Id(p => p.Id))
                    //.Create(update => update.Action("EditingInline_Create", "Grid"))
                    .Read(read => read.Action("ReadCandidateExpBySectorList", "CandidateProfile",new { @area= "Recruitment", @candidateProfileId=Model.Id}))
                //.Update(update => update.Action("EditingInline_Update", "Grid"))
                //.Destroy(update => update.Action("EditingInline_Destroy", "Grid"))
                )
            )*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div id="salarydetail" class="col-xl-11">
                                <h5>6. Current Salary Details<br></h5>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            @*<div>
                                    <div class="row">
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="txt-13">Sl. No.</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-3 col-xl-3 no-space"><span class="txt-13">Overseas Salary</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-3 col-xl-3 no-space"><span class="txt-13">Indian Salary</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-3 col-xl-3 no-space"><span class="text-nowrap txt-13">Net Salary after Income Tax</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Other Allowances</span><input type="text" class="sml-text"></div>
                                    </div>
                                </div>*@
                            <div>
                                <div class="row">
                                    <div class="col-md-3">


                                        <div>  <Label>Net Salary Currency</Label></div>
                                        <input type="text" asp-for="NetSalaryCurrency" class="form-control" style="width:100%;" />

                                        @*@(Html.Kendo().DropDownListFor(x=>x.NetSalaryCurrency)
        .DataTextField("Name")
        .DataValueField("Id")
        .Filter(FilterType.Contains)
        .DataSource(source =>
            {
            source.Read(read =>
            {
                read.Action("GetCurrencyList", "CandidateProfile", new { @area = "Career",@style="Width:100%"});
            });
            })
        )*@

                                    </div>
                                    <div class="col-md-3">


                                        <div>  <Label>Net Salary after Income Tax <span class="required">*</span></Label></div>
                                        @*@Html.Kendo().TextBoxFor(x => x.NetSalary).HtmlAttributes(new { @class = "input-box" })*@
                                        <input type="text" asp-for="NetSalary" class="input-box" />

                                    </div>
                                    <div class="col-md-3">


                                        <div>
                                            <Label>Other Allowances<span class="required">*</span></Label>
                                        </div>
                                        @*@Html.Kendo().TextBoxFor(x => x.OtherAllowances).HtmlAttributes(new { @class = "input-box" })*@
                                        <input type="text" asp-for="OtherAllowances" class="input-box" />

                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div id="anotherposition" class="col-xl-11">
                                <h5>7. If not selected for the post, indicate option for another position<br></h5>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div>
                                <div class="row">
                                    <div class="col-lg-12 col-xl-12 no-space">
                                        @*@(Html.Kendo().TextAreaFor(x=>x.OptionForAnotherPosition).Rows(4).HtmlAttributes(new { @class= "text-ml" }))*@
                                        <textarea asp-for="OptionForAnotherPosition" class="text-ml"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div id="timerequire" class="col-xl-11">
                                <h5>8. Time required to join (in days)<br></h5>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div>
                                <div class="row">
                                    <div class="col-lg-4 col-xl-4 no-space"><span class="txt-13">Days to join</span><span class="required">*</span></div>
                                    <div class="col-lg-4 col-xl-4 no-space">
                                        @*@(Html.Kendo().NumericTextBoxFor(x=>x.TimeRequiredToJoin).Min(0).Decimals(0).Format("#"))*@
                                        <input type="number" asp-for="TimeRequiredToJoin" class="input-box" />

                                        @*<input type="text" class="sml-text">*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div id="projectbrief" class="col-10 col-md-11 col-xl-11">
                                <h5>9. Give brief on the largest project associated with<br></h5>
                            </div>
                            @*  <div class="col-2 col-md-1 col-xl-1"><i class="fas fa-plus-square"></i></div>*@
                        </div>
                    </div>
                    @*<div class="card">
                            <div class="card-body">
                                <div>
                                    <div class="row row-scroll">
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="text-nowrap txt-13">Currency  </span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="text-nowrap txt-13">Value       </span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="text-nowrap txt-13">Client</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="text-nowrap txt-13">Consultant</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-3 no-space"><span class="text-nowrap txt-13">Construction Period(From)</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-3 no-space"><span class="text-nowrap txt-13">Construction Period(To)</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-3 no-space"><span class="txt-13">Your Position</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-9 no-space"><span class="text-nowrap txt-13">Brief Descriiption of the project</span><input type="text" class="sml-text"></div>
                                    </div>
                                </div>
                            </div>
                        </div>*@
                    <div class="card">
                        <div class="card-body">
                            <div>
                                <div class="row">
                                    <div class="col-12">
                                        <br />
                                        <button type='button' class='btn btn-primary' onclick='OnCreateCandProject();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br />
                                        <div id="kgrdCandidateProject" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                        @*@(Html.Kendo().Grid<CandidateProjectViewModel>()
            .Name("kgrdCandidateProject")
                .Columns(columns =>
                {
                    columns.Command(command => {
                        command.Custom("Edit").Text(" ").Click("OnEditCandProject").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                        command.Custom("Delete").Text(" ").Click("OnDeleteCandProject").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                    }).Width(120);
                    columns.Bound(p => p.SequenceOrder).Title("Sl. No.").Width(100);
                    columns.Bound(p => p.Currency).Title("Currency").Width(200);
                    columns.Bound(p => p.Value).Title("Value").Width(200);
                    columns.Bound(p => p.Client).Title("Client").Width(200);
                    columns.Bound(p => p.Consultant).Title("Consultant").Width(200);
                    columns.Bound(p => p.ConstructionPeriodFrom).Title("Construction Period From").Width(200).Format("{0:dd/MM/yyyy}");
                    columns.Bound(p => p.ConstructionPeriodTo).Title("Construction Period To").Width(200).Format("{0:dd/MM/yyyy}");
                    columns.Bound(p => p.Position).Title("Position").Width(200);
                    columns.Bound(p => p.Description).Title("Description").Width(200);
                    //columns.Bound(p => p.AttachmentId).Title("Attachment").Width(400);
                })
                //.Events(e => e.Save("onCEGridSave"))
                .ToolBar(toolbar =>
                {
                    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCandProject();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>");
                })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
        //.Pageable()
        .Scrollable(scrollable => scrollable.Height("auto"))
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .HtmlAttributes(new { /*style = "height:300px;"*/ })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    //.Events(events => events.Error("error_handler"))
                    .Model(model => model.Id(p => p.Id))
                    //.Create(update => update.Action("EditingInline_Create", "Grid"))
                    .Read(read => read.Action("ReadCandidateProjectData", "CandidateProfile",new { @area= "Recruitment", @candidateProfileId=Model.Id}))
                //.Update(update => update.Action("EditingInline_Update", "Grid"))
                //.Destroy(update => update.Action("EditingInline_Destroy", "Grid"))
                )
            )*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div class="col-xl-11">
                                <h5>10. Your Manager’s Job Title &amp; Number of Subordinates<br></h5>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div>
                                <div class="row">
                                    <div id="managerjob" class="col-lg-12 col-xl-12 no-space">
                                        <textarea asp-for="ManagerJobTitleAndNoOfSubordinate" class="text-ml"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="divQualificationInfo" class="col-xl-9" style="border-radius:6;border-left-width:2;">
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div id="EduQd" class="col-sm-10 col-md-11 col-xl-11">
                                <h5>11. Educational Qualification (Minimum 1 record is mandatory)<span class="required">*</span><br></h5>
                            </div>
                            <div class="col-sm-1 col-md-1"></div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div>
                                @*<div class="row">
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Qualification</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Specification</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="txt-13">Type</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="text-nowrap txt-13">Institute</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">Country</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">Duration</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">Passing Year</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">% Marks</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">Attach</span><input type="text" class="sml-text"></div>
                                    </div>*@
                                <div class="row">
                                    <div class="col-12">
                                     <button type='button' class='btn btn-primary' onclick='OnCreateCandEducational();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br /><br />
                                        <div id="kgrdCandidateEducational" style="width: 100%;height:250px" class="ag-theme-alpine"></div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">

                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Other Qualification <span class="required">*</span><br>
                            </label>
                            <input type="text" asp-for="OtherQualificationId" class="form-control" style="width:100%;" />

                            @*@(Html.Kendo().DropDownListFor(x=>x.OtherQualificationId)
           .DataTextField("Name")
           .DataValueField("Id")
           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
            .Events(x => x.Change("OnQualificationChange").DataBound("OnQualificationDataBound"))
           .DataSource(source =>
           {
               source.Read(read =>
               {
                   read.Action("GetListOfValueList", "LOV", new { @area = "CMS", @type = "LOV_OTHER_QUALIFICATION" });
               });
           })
        )*@
                        </div>
                    </div>
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div id="certificate" class="col-10 col-md-11 col-xl-11">
                                <h5>12. Certifications<br></h5>
                            </div>
                            <div class="col">@*<i class="fas fa-plus-square"></i>*@</div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div>
                                @*<div class="row">
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Certification</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Specification</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="txt-13">Type</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="text-nowrap txt-13">Institute</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">Country</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">Duration</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">Passing Year</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">% Marks</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">Attach</span><input type="text" class="sml-text"></div>
                                    </div>*@
                                <div class="row">
                                    <div class="col-12">
                                    <button type='button' class='btn btn-primary' onclick='OnCreateCandCertifications();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br /><br />
                                        <div id="kgrdCandidateCertifications" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                       
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Trainings <span class="required">*</span><br>
                            </label>
                            <input type="text" asp-for="TrainingId" class="form-control" style="width:100%;" />
                            @*@(Html.Kendo().DropDownListFor(x=>x.TrainingId)
           .DataTextField("Name")
           .DataValueField("Id")
           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
            .Events(x => x.Change("OnTrainingChange").DataBound("OnTrainingDataBound"))
           .DataSource(source =>
           {
               source.Read(read =>
               {
                   read.Action("GetListOfValueList", "LOV", new { @area = "CMS", @type = "LOV_OTHER_QUALIFICATION" });
               });
           })
        )*@
                        </div>
                    </div>
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div class="col-10 col-md-11 col-xl-11">
                                <h5>13. Trainings<br></h5>
                            </div>
                            <div class="col">@*<i class="fas fa-plus-square"></i>*@</div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div>
                                @*<div class="row">
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Training</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Specification</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="txt-13">Type</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="text-nowrap txt-13">Institute</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">Country</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">Duration</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">Passing Year</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">% Marks</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="text-nowrap txt-13">Attach</span><input type="text" class="sml-text"></div>
                                    </div>*@
                                <div class="row">
                                    <div class="col-12">
                                        <button type='button' class='btn btn-primary' onclick='OnCreateCandTrainings();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br /><br />
                                        <div id="kgrdCandidateTrainings" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                        @*@(Html.Kendo().Grid<CandidateEducationalViewModel>()
            .Name("kgrdCandidateTrainings")
                .Columns(columns =>
                {
                    columns.Command(command =>
                    {
                        command.Custom("Edit").Text(" ").Click("OnEditCandTrainings").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                        command.Custom("Delete").Text(" ").Click("OnDeleteCandEducational").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                    }).Width(120);
                    columns.Bound(p => p.QualificationName).Title("Qualification").Width(200);
                    columns.Bound(p => p.SpecializationName).Title("Specialization").Width(200);
                    columns.Bound(p => p.EducationTypeName).Title("Type").Width(200);
                    columns.Bound(p => p.Institute).Title("Institute").Width(200);
                    columns.Bound(p => p.CountryName).Title("Country").Width(200);
                    columns.Bound(p => p.Duration).Title("Duration").Width(200);
                    columns.Bound(p => p.PassingYear).Title("Passing Year").Width(200);
                    columns.Bound(p => p.Marks).Title("% Marks").Width(200);
                    columns.Bound(p => p.AttachmentName).Title("Attachment").ClientTemplate("#if(AttachmentName!=null){#<a style='color:blue; text-decoration:underline' href='/cms/Document/GetFileMongo?fileId=#:AttachmentId#' target='_blank'>#:AttachmentName#</a>#}#").Width(400);
                })
                //.Events(e => e.Save("onCTGridSave"))
                .ToolBar(toolbar =>
                {
                    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCandTrainings();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>");
                })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
        //.Pageable()
        .Scrollable(scrollable => scrollable.Height("auto"))
                .Sortable()
                .HtmlAttributes(new { /*style = "height:300px;"*/ })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    //.Events(events => events.Error("error_handler"))
                    .Model(model => model.Id(p => p.Id))
                    //.Create(update => update.Action("EditingInline_Create", "Grid"))
                    .Read(read => read.Action("ReadCandidateTrainingsData", "CandidateProfile",new { @area= "Recruitment", @candidateProfileId=Model.Id}))
                //.Update(update => update.Action("EditingInline_Update", "Grid"))
                //.Destroy(update => update.Action("EditingInline_Destroy", "Grid"))
                )
            )*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Computer Proficiency <span class="required">*</span><br>
                            </label>
                            <input type="text" asp-for="ComputerProficiencyId" class="form-control" style="width:100%;" />
                            @*@(Html.Kendo().DropDownListFor(x=>x.ComputerProficiencyId)
           .DataTextField("Name")
           .DataValueField("Id")
           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
            .Events(x => x.Change("OnComputerProfChange").DataBound("OnComputerProfDataBound"))
           .DataSource(source =>
           {
               source.Read(read =>
               {
                   read.Action("GetListOfValueList", "LOV", new { @area = "CMS", @type = "LOV_OTHER_QUALIFICATION" });
               });
           })
        )*@
                        </div>
                    </div>
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div id="computer" class="col-sm-10 col-md-11 col-xl-11">
                                <h5>14. Computer Proficiency<br></h5>
                            </div>
                            @*<div class="col-sm-1 col-xl-1"><i class="fas fa-plus-square"></i></div>*@
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div>
                                @*<div class="row">
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="txt-13">Sl. No.</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-5 col-xl-5 no-space"><span class="txt-13">Application/Program</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-5 col-xl-5 no-space"><span class="txt-13">Proficiency Level</span><input type="text" class="sml-text"></div>
                                    </div>*@
                                <div class="row">
                                    <div class="col-12">
                                        <br />
                                        <button type='button' class='btn btn-primary' onclick='OnCreateCandComputer();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br />
                                        <div id="kgrdCandidateComputer" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                        @*@(Html.Kendo().Grid<CandidateComputerProficiencyViewModel>()
            .Name("kgrdCandidateComputer")
                .Columns(columns =>
                {
                    columns.Command(command =>
                    {
                        command.Custom("Edit").Text(" ").Click("OnEditCandComputer").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                        command.Custom("Delete").Text(" ").Click("OnDeleteCandComputer").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                    }).Width(120);
                    columns.Bound(p => p.SequenceOrder).Title("Sl. No.").Width(120);
                    columns.Bound(p => p.Program).Title("Application/Program").Width(200);
                    columns.Bound(p => p.ProficiencyLevelName).Title("Proficiency Level").Width(200);
                })
                //.Events(e => e.Save("onCTGridSave"))
                .ToolBar(toolbar =>
                {
                    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCandComputer();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>");
                })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
        //.Pageable()
        .Scrollable(scrollable => scrollable.Height("auto"))
                .Sortable()
                .HtmlAttributes(new { /*style = "height:300px;"*/ })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    .Model(model => model.Id(p => p.Id))
                    .Read(read => read.Action("ReadCandidateComputerProfData", "CandidateProfile",new { @area= "Recruitment", @candidateProfileId=Model.Id}))
                )
            )*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Languages <span class="required">*</span><br>
                            </label>
                            <input type="text" asp-for="LanguageId" class="form-control" style="width:100%;" />
                            @*@(Html.Kendo().DropDownListFor(x=>x.LanguageId)
           .DataTextField("Name")
           .DataValueField("Id")
           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
            .Events(x => x.Change("OnLanguageChange").DataBound("OnLanguageDataBound"))
           .DataSource(source =>
           {
               source.Read(read =>
               {
                   read.Action("GetListOfValueList", "LOV", new { @area = "CMS", @type = "LOV_OTHER_QUALIFICATION" });
               });
           })
        )*@
                        </div>
                    </div>
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div id="language" class="col-10 col-md-11 col-xl-11">
                                <h5>15. Languages<br></h5>
                            </div>
                            @* <div class="col-2 col-md-1 col-xl-1"><i class="fas fa-plus-square"></i></div>*@
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            @*<div>
                                    <div class="row">
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="txt-13">Sl. No.</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-5 col-xl-5 no-space"><span class="txt-13">Language Name</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-5 col-xl-5 no-space"><span class="txt-13">Proficiency Level</span><input type="text" class="sml-text"></div>
                                    </div>
                                </div>*@
                            <div>
                                <div class="row">
                                    <div class="col-12">
                                        <br />
                                        <button type='button' class='btn btn-primary' onclick='OnCreateCandLanguage();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br />
                                        <div id="kgrdCandidateLanguage" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                        @*@(Html.Kendo().Grid<CandidateLanguageProficiencyViewModel>()
                                        .Name("kgrdCandidateLanguage")
                                            .Columns(columns =>
                                            {
                                                columns.Command(command =>
                                                {
                                                    command.Custom("Edit").Text(" ").Click("OnEditCandLanguage").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                                                    command.Custom("Delete").Text(" ").Click("OnDeleteCandLanguage").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                                                }).Width(120);
                                                columns.Bound(p => p.SequenceOrder).Title("Sl. No.").Width(120);
                                                columns.Bound(p => p.LanguageName).Title("Language Name").Width(200);
                                                columns.Bound(p => p.ProficiencyLevelName).Title("Proficiency Level").Width(200);
                                            })
                                            //.Events(e => e.Save("onCTGridSave"))
                                            .ToolBar(toolbar =>
                                            {
                                                toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCandLanguage();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>");
                                            })
                                            .Editable(editable => editable.Mode(GridEditMode.PopUp))
                                    //.Pageable()
                                    .Scrollable(scrollable => scrollable.Height("auto"))
                                            .Sortable()
                                            .HtmlAttributes(new { /*style = "height:300px;"*/ })
                                            .DataSource(dataSource => dataSource
                                                .Ajax()
                                                .PageSize(20)
                                                .Model(model => model.Id(p => p.Id))
                                                .Read(read => read.Action("ReadCandidateLanguageProfData", "CandidateProfile",new { @area= "Recruitment", @candidateProfileId=Model.Id}))
                                            )
                                        )*@
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="row">
                        <div class="col-sm-6 col-md-6 col-lg-3 col-xl-3">
                            <label class="col-form-label">
                                Driving License <span class="required">*</span><br>
                            </label>
                            <input type="text" asp-for="DrivingLicenseId" class="form-control" style="width:100%;" />
                            @*@(Html.Kendo().DropDownListFor(x=>x.DrivingLicenseId)
           .DataTextField("Name")
           .DataValueField("Id")
           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
            .Events(x => x.Change("OnDrivingLicChange").DataBound("OnDrivingLicDataBound"))
           .DataSource(source =>
           {
               source.Read(read =>
               {
                   read.Action("GetListOfValueList", "LOV", new { @area = "CMS", @type = "LOV_OTHER_QUALIFICATION" });
               });
           })
        )*@
                        </div>
                    </div>
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div id="driving" class="col-10 col-md-11 col-xl-11">
                                <h5>16. Driving License<br></h5>
                            </div>
                            @*<div class="col-2 col-md-1 col-xl-1"><i class="fas fa-plus-square"></i></div>*@
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            @*<div>
                                    <div class="row">
                                            <div class="col-lg-1 col-xl-1 no-space"><span class="txt-13">Sl. No.</span><input type="text" class="sml-text"></div>
                                            <div class="col-lg-3 col-xl-3 no-space"><span class="txt-13">Country Name</span><input type="text" class="sml-text"></div>
                                            <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Type</span><input type="text" class="sml-text"></div>
                                            <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Issue Date</span><input type="text" class="sml-text"></div>
                                            <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Valid Upto</span><input type="text" class="sml-text"></div>
                                            <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Attachments</span><input type="text" class="sml-text"></div>
                                    </div>
                                </div>*@
                            <div>
                                <div class="row">
                                    <div class="col-12">
                                        <br />
                                        <button type='button' class='btn btn-primary' onclick='OnCreateCandDrivingLicense();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br />
                                        <div id="kgrdCandDrivingLicense" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                        @*@(Html.Kendo().Grid<CandidateDrivingLicenseViewModel>()
            .Name("kgrdCandDrivingLicense")
                .Columns(columns =>
                {
                    columns.Command(command => {
                        command.Custom("Edit").Text(" ").Click("OnEditCandDrivingLicense").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                        command.Custom("Delete").Text(" ").Click("OnDeleteCandDrivingLicense").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                    }).Width(120);
                    columns.Bound(p => p.SequenceOrder).Title("Sl. No.").Width(100);
                    columns.Bound(p => p.CountryName).Title("Country Name").Width(200);
                    columns.Bound(p => p.LicenseTypeName).Title("License Type").Width(300);
                    columns.Bound(p => p.IssueDate).Title("Issued Date").Width(200).Format("{0:dd/MM/yyyy}");
                    columns.Bound(p => p.ValidUpTo).Title("Valid Up To").Width(200).Format("{0:dd/MM/yyyy}");

                    //columns.Bound(p => p.AttachmentId).Title("Attachment").Width(400);
                })
                //.Events(e => e.Save("onCEGridSave"))
                .ToolBar(toolbar =>
                {
                    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCandDrivingLicense();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>");
                })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
        //.Pageable()
        .Scrollable(scrollable => scrollable.Height("auto"))
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .HtmlAttributes(new { /*style = "height:300px;"*/ })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(10)
                    //.Events(events => events.Error("error_handler"))
                    .Model(model => model.Id(p => p.Id))
                    //.Create(update => update.Action("EditingInline_Create", "Grid"))
                    .Read(read => read.Action("ReadCandidateDrivingLicenseData", "CandidateProfile",new { @area= "Recruitment", @candidateProfileId=Model.Id}))
                //.Update(update => update.Action("EditingInline_Update", "Grid"))
                //.Destroy(update => update.Action("EditingInline_Destroy", "Grid"))
                )
            )*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div class="col-xl-11">
                                <h5>17. Additional Information, if any (Awards, Appreciations, etc.,)<br></h5>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div>
                                <div class="row">
                                    <div class="col-lg-12 col-xl-12 no-space">
                                        <textarea asp-for="AdditionalInformation" class="text-ml"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="Qlink-title-mbody card-space">
                        <div class="row">
                            <div class="col-10 col-md-11 col-xl-11">
                                <h5>18. References<br></h5>
                            </div>
                            <div class="col-2 col-md-1 col-xl-1">@*<i class="fas fa-plus-square"></i>*@</div>
                        </div>
                    </div>
                    @*<div class="card">
                            <div class="card-body">
                                <div>
                                    <div class="row">
                                        <div class="col-lg-1 col-xl-1 no-space"><span class="txt-13">Sl. No.</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-3 col-xl-3 no-space"><span class="txt-13">Name</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Position</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="text-nowrap txt-13">Company</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Phone</span><input type="text" class="sml-text"></div>
                                        <div class="col-lg-2 col-xl-2 no-space"><span class="txt-13">Email</span><input type="text" class="sml-text"></div>
                                    </div>
                                </div>
                            </div>
                        </div>*@
                    <div class="card">
                        <div class="card-body">

                            <div>
                                <div class="row">
                                    <div class="col-12">
                                        <br />
                                        <button type='button' class='btn btn-primary' onclick='OnCreateCandRefer();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>
                                        <br />
                                        <div id="kgrdCandReference" style="width: 100%;height:250px" class="ag-theme-alpine"></div>
                                        @*<div id="kgrdCandDrivingLicense" style="width: 100%;height:250px" class="ag-theme-alpine"></div>*@
                                        @*@(Html.Kendo().Grid<CandidateReferencesViewModel>()
            .Name("kgrdCandrefer")
                .Columns(columns =>
                {
                    columns.Command(command => {
                        command.Custom("Edit").Text(" ").Click("OnEditCandRefer").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                        command.Custom("Delete").Text(" ").Click("OnDeleteCandRefer").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                    }).Width(120);

                    columns.Bound(p => p.SequenceOrder).Title("Sl No.").Width(100);
                    columns.Bound(p => p.Name).Title("Name").Width(200);
                    columns.Bound(p => p.Position).Title("Position").Width(200);
                    columns.Bound(p => p.Company).Title("Company").Width(200);
                    columns.Bound(p => p.Phone).Title("Phone").Width(200);
                    columns.Bound(p => p.Email).Title("Email").Width(200);
                })
                //.Events(e => e.Save("onCEGridSave"))
                .ToolBar(toolbar =>
                {
                    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCandRefer();'><i class='fa fas fa-plus'></i>&nbsp;Add</button>");
                })
                .Editable(editable => editable.Mode(GridEditMode.PopUp))
        //.Pageable()
        .Scrollable(scrollable => scrollable.Height("auto"))
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .HtmlAttributes(new { /*style = "height:300px;"*/ })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(20)
                    //.Events(events => events.Error("error_handler"))
                    .Model(model => model.Id(p => p.Id))
                    //.Create(update => update.Action("EditingInline_Create", "Grid"))
                    .Read(read => read.Action("ReadCandRefer", "CandidateProfile",new { @area= "Recruitment", @candidateProfileId=Model.Id}))
                //.Update(update => update.Action("EditingInline_Update", "Grid"))
                //.Destroy(update => update.Action("EditingInline_Destroy", "Grid"))
                )
            )*@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @*<div class="Qlink-title-mbody card-space">
                            <div class="row">
                                <div class="col-xl-11">
                                    <h5>19. Self Declaration<br></h5>
                                </div>
                            </div>
                        </div>*@
                    @*<div class="card">
                            <div class="card-body">
                                <div>
                                    <div class="row">
                                        <div class="col-lg-1 col-xl-12 no-space"><span class="txt-13">I hereby declare that the particulars given are correct and true to be the best my knowledge and belief and no attempt has been made by me to conceal or withhold pertinent information, which you are at liberty to verify at any time. I also understand that any misrepresentation of facts in the application is sufficient cause for termination of my service, if appointed.</span></div>
                                        <div class="col-lg-1 col-xl-6 no-space">
                                            <span class="txt-13">Date<span class="required">*</span></span>
                                            @Html.Kendo().DatePickerFor(x => x.SignatureDate).Format("dd MMM yyyy")
                                        </div>
                                        <div class="col-lg-1 col-xl-6 no-space">
                                            <span class="txt-13">Type your Name as Signature<span class="required">*</span></span>
                                            @Html.Kendo().TextBoxFor(x => x.Signature).HtmlAttributes(new { @class = "sml-text" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>*@
                </div>
            </div>
        </div>
        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.DataAction)
        @Html.HiddenFor(x => x.PhotoId)
        @Html.HiddenFor(x => x.QIDAttachmentId)
        @Html.HiddenFor(x => x.QIDAttachmentId2)
        @Html.HiddenFor(x => x.QIDAttachmentId3)
        @Html.HiddenFor(x => x.QIDAttachmentId4)
        @Html.HiddenFor(x => x.QIDAttachmentId5)
        @Html.HiddenFor(x => x.PassportAttachmentId)
        @Html.HiddenFor(x => x.PassportAttachmentId2)
        @Html.HiddenFor(x => x.PassportAttachmentId3)
        @Html.HiddenFor(x => x.PassportAttachmentId4)
        @Html.HiddenFor(x => x.PassportAttachmentId5)
        @Html.HiddenFor(x => x.AcademicCertificateId)
        @Html.HiddenFor(x => x.AcademicCertificateId2)
        @Html.HiddenFor(x => x.AcademicCertificateId3)
        @Html.HiddenFor(x => x.AcademicCertificateId4)
        @Html.HiddenFor(x => x.AcademicCertificateId5)
        @Html.HiddenFor(x => x.OtherCertificateId)
        @Html.HiddenFor(x => x.OtherCertificateId2)
        @Html.HiddenFor(x => x.OtherCertificateId3)
        @Html.HiddenFor(x => x.OtherCertificateId4)
        @Html.HiddenFor(x => x.OtherCertificateId5)
        @Html.HiddenFor(x => x.ResumeId)
        @Html.HiddenFor(x => x.CoverLetterId)
        @Html.HiddenFor(x => x.UserId)
        @Html.HiddenFor(x => x.CurrentTabInfo)
        @Html.HiddenFor(x => x.TotalWorkExperienceYear)
        @Html.HiddenFor(x => x.Level)
        @Html.HiddenFor(x => x.SourceFrom)
        @Html.HiddenFor(x => x.TaskId)
        @Html.HiddenFor(x => x.AgencyId)
        @Html.HiddenFor(x => x.ExperienceLevelCode)
        @Html.HiddenFor(x => x.OtherQualificationCode)
        @Html.HiddenFor(x => x.TrainingCode)
        @Html.HiddenFor(x => x.ComputerProficiencyCode)
        @Html.HiddenFor(x => x.DrivingLicenseCode)
        @Html.HiddenFor(x => x.LanguageCode)
    </form>
</div>

@*</script>*@

<script>
    function RefreshCE() {
        /*$("#kgrdCandidateExperience").data("kendoGrid").dataSource.read();*/
        GetCandidateEmploymentHistory();
    }

    function RefreshCC() {
        /*$("#kgrdCandExpByCountry").data("kendoGrid").dataSource.read();*/
        GetCandidateExperiencebyCountry();
    }

    function RefreshCJ() {

        /*$("#kgrdCandExpByJob").data("kendoGrid").dataSource.read();*/
        GetCandidateExperiencebyJob();
    }

    function RefreshCCP() {
        /*$("#kgrdCandidateComputer").data("kendoGrid").dataSource.read();*/
        GetCandidateComputerProf();
    }

    function RefreshCDL() {
        /*$("#kgrdCandDrivingLicense").data("kendoGrid").dataSource.read();*/
        GetCandidateDrivingLicense();
    }

    function RefreshCED() {
        /*$("#kgrdCandidateEducational").data("kendoGrid").dataSource.read();*/
        /*$("#kgrdCandidateCertifications").data("kendoGrid").dataSource.read();*/
        /*$("#kgrdCandidateTrainings").data("kendoGrid").dataSource.read();*/

        GetCandidateEducationalQualification();
        GetCandidateCertifications();
        GetCandidateTrainings();
    }

    function RefreshCN() {
        /*$("#kgrdCandExpByNature").data("kendoGrid").dataSource.read();*/
        GetCandidateExperiencebyNature();
    }


    function RefreshCO() {
        /*$("#kgrdCandExpByOther").data("kendoGrid").dataSource.read();*/
        GetCandidateExperiencebyOther();
    }


    function RefreshCS() {
        /*$("#kgrdCandExpBySector").data("kendoGrid").dataSource.read();*/
        GetCandidateExperiencebySector();
    }


    function RefreshCLP() {
        /*$("#kgrdCandidateLanguage").data("kendoGrid").dataSource.read();*/
        GetCandidateLanguageProf();
    }


    function RefreshCPRO() {
        /*$("#kgrdCandidateProject").data("kendoGrid").dataSource.read();*/
        GetCandidateExperiencebyProject();
    }


    function RefreshCREF() {
        /*$("#kgrdCandrefer").data("kendoGrid").dataSource.read();*/
        GetCandidateReference();
    }



</script>