using Synergy.App.DataModel;
using Synergy.App.ViewModel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Synergy.App.Common;
using System.Data;
////using Kendo.Mvc.UI;

namespace Synergy.App.Business
{
    public interface INtsQueryBusiness : IBusinessBase<NoteViewModel, NtsNote>
    {
        #region ServiceBusiness
        Task<IList<NTSMessageViewModel>> GetServiceAttachedReplies(string userId, string serviceId);
        Task UpdateBookSequenceOrder(string parentServiceId, long? sequenceOrder, string serviceId, string type);
        Task UpdateCategorySequenceOrderOnDelete(string parentServiceId, long? sequenceOrder, string serviceId, string TemplateCode);
        Task UpdateBookSequenceOrderOnDelete(string parentServiceId, long? sequenceOrder, string serviceId);
        Task RollBackServiceData(TableMetadataViewModel table, ServiceTemplateViewModel model);
        Task<TableMetadataViewModel> GetTableMetadataByServiceId(string serviceId);
        Task<ServiceTemplateViewModel> GetSelectQueryServiceTemplateData(string selectQuery);
        Task<DataTable> GetSelectQueryServiceTemplateDataTable(string selectQuery);
        Task<List<ColumnMetadataViewModel>> GetViewableColumnsPrimaryKeyColumns(TableMetadataViewModel tableMetaData);
        Task<List<ColumnMetadataViewModel>> GetViewableColumnsForeignKeyColumns(TableMetadataViewModel tableMetaData);
        Task<string> GenerateNextServiceNo(ServiceTemplateViewModel model);
        Task<ServiceTemplateViewModel> GetServiceTemplateForNewService(ServiceTemplateViewModel vm);
        Task<List<UserViewModel>> SetSharedList(ServiceTemplateViewModel model);
        Task DeleteService(ServiceTemplateViewModel model, TableMetadataViewModel tableMetaData);
        Task<List<ServiceTemplateViewModel>> GetServiceIndexPageCount(ServiceIndexPageTemplateViewModel model, PageViewModel page);
        Task<IList<ServiceViewModel>> GetNtsServiceIndexPageGridData(NtsActiveUserTypeEnum ownerType, string serviceStatusCode, string categoryCode, string templateCode, string moduleCode);
        Task<List<ServiceTemplateViewModel>> GetNtsServiceIndexPageCount(NtsServiceIndexPageViewModel model);
        Task<List<ServiceViewModel>> GetWorklistDashboardCountServiceGoal(string userId, string moduleCodes = null, string templateCategoryCode = null, string taskTemplateIds = null, string serviceTemplateIds = null);
        Task<List<ServiceViewModel>> GetWorklistDashboardCountServiceShare(string userId, string moduleCodes = null, string templateCategoryCode = null, string taskTemplateIds = null, string serviceTemplateIds = null);
        Task<List<TaskViewModel>> GetWorklistDashboardCountTask(string userId, string moduleCodes = null, string templateCategoryCode = null, string taskTemplateIds = null, string serviceTemplateIds = null);
        Task<List<TaskViewModel>> GetWorklistDashboardCountTaskShare(string userId, string moduleCodes = null, string templateCategoryCode = null, string taskTemplateIds = null, string serviceTemplateIds = null);
        Task<List<ServiceViewModel>> GetSearchResult(ServiceSearchViewModel searchModel);
        Task<bool> IsServiceSubjectUnique(string templateId, string subject, string serviceId);
        Task<List<ProjectGanttTaskViewModel>> GetDatewiseServiceSLA(ServiceSearchViewModel searchModel);
        Task<List<IdNameViewModel>> GetSharedList(string ServiceId);
        Task<List<ServiceViewModel>> IsExitEntryFeeAvailed(string userId);
        Task<List<ServiceViewModel>> GetFBDashboardCountService(string userId, string moduleId = null);
        Task<List<TaskViewModel>> GetFBDashboardCountTask(string userId, string moduleId = null);
        Task<List<NoteViewModel>> GetFBDashboardCountNote(string userId, string moduleId = null);
        Task<List<ServiceViewModel>> GetServiceByUser(string userId);
        Task<List<NtsLogViewModel>> GetVersionDetails(string serviceId);
        Task<List<DashboardCalendarViewModel>> GetWorkPerformanceCount(string userId, string moduleCodes = null, DateTime? fromDate = null, DateTime? toDate = null);
        Task<List<IdNameViewModel>> GetCMSExternalRequest(string templatesin);
        Task<List<ServiceViewModel>> GetServiceList(string portalId, string moduleCodes, string templateCodes, string categoryCodes, string requestby = null, bool showAllOwnersService = false, string statusCodes = null, string parentServiceId = null);
        Task<List<ServiceViewModel>> GetInternalServiceListFromExternalRequestId(string serviceId, string udfs);
        Task<List<ProjectDashboardChartViewModel>> GetExternalServiceChartByStatus();
        Task<List<ProjectDashboardChartViewModel>> GetExternalUserServiceChartByStatus();
        Task<List<ProjectDashboardChartViewModel>> GetInternalServiceChartByStatus();
        Task<List<ProjectDashboardChartViewModel>> GetExternalUserInternalServiceChartByStatus();
        Task<List<ProjectDashboardChartViewModel>> GetInternalDashboardChartByStatus(ServiceSearchViewModel search);
        Task<List<ProjectDashboardChartViewModel>> GetInternalDashboardTaskChart(ServiceSearchViewModel search);
        Task<List<ProjectGanttTaskViewModel>> GetExternalServiceSLA(ServiceSearchViewModel searchModel);
        Task<List<ProjectGanttTaskViewModel>> GetRequestSLA(ServiceSearchViewModel searchModel);
        Task<List<ProjectGanttTaskViewModel>> GetExternalUserExternalServiceSLA(ServiceSearchViewModel searchModel);
        Task<List<ServiceViewModel>> GetSEBIServiceList();
        Task<List<ServiceViewModel>> GetSEBIExternalServiceList(string tasktemplatecode);
        Task<List<ServiceViewModel>> GetExternalSEBIServiceList();
        Task<List<ServiceViewModel>> GetInternalDashboardServiceList(ServiceSearchViewModel searchModel);
        Task<List<NtsLogViewModel>> GetServiceLog(string ServiceId, string TemplateCode);
        Task<string> GetUdfQuery(string TemplateType, string categoryCode, string templateCodes, string excludeTemplateCodes, params string[] columns);
        Task<List<string>> GetUdfColumnList(string TemplateType, string categoryCode, string templateCodes, string excludeTemplateCodes, params string[] columns);
        Task<List<IdNameViewModel>> GetServiceUserList(string serviceId);
        Task<List<TreeViewViewModel>> GetDocumentTreeviewListByService(string serviceId);
        Task<List<TreeViewViewModel>> GetDocumentIndexTreeviewListByService(string docServiceId);
        Task<ServiceTemplateViewModel> GetBookDetails(string serviceId);
        Task<List<NtsViewModel>> GetBookList(string serviceId, string templateId, bool includeitemDetails = false);
        Task<NtsBookItemViewModel> GetBookById(string id);
        Task<List<ServiceViewModel>> ReadServiceBookData(string moduleCodes, string templateCodes, string categoryCodes);
        Task<List<NtsBookItemViewModel>> GetBookItemChildList(string serviceId, string noteId, string taskId);
        Task<List<ColumnMetadataViewModel>> GetServiceViewableColumnsPrimaryKeyColumns();
        Task<ServiceTemplateViewModel> GetFormIoDataByService(string serviceId);
        Task<DataRow> GetFormIoDataRow(ServiceTemplateViewModel data, string serviceId);
        Task<List<BookViewModel>> GetGroupBookByCategoryId(string categoryId);
        Task<List<BookViewModel>> GetAllBook(string templateCodes, string templateIds, string bookIds, string search, string categoryIds, string permission);
        Task<List<IdNameViewModel>> GetProcessBookType(string templateCodes);
        Task<List<IdNameViewModel>> GetProcessBook(string templateCodes);
        Task<List<IdNameViewModel>> GetBookAllPages(string bookid);
        Task<List<IdNameViewModel>> GetBookAllDirectPages(string bookid);
        Task<List<IdNameViewModel>> GetChildPageList(string bookid);
        Task<List<IdNameViewModel>> GetBookByPageIdPages(string pageid);
        Task<BookViewModel> GetBookDetail(string bookid);
        Task<List<BookViewModel>> GetBookPageDetail(string bookid, string currentPageId);
        Task<List<BookViewModel>> GetAllCategoryByPermission(string templateCodes, string permission);
        Task<List<BookViewModel>> GetGroupBookByCategoryPermission(string categoryId, string permission);
        Task<List<BookViewModel>> GetBookAllPagesByBookId(string bookid);
        Task<List<BookViewModel>> GetAllBookPages();
        Task<List<BookViewModel>> GetAllProcessBook(string templateCodes);
        Task<List<BookRealtionViewModel>> GetAllBookRelationBySourceId(string sourceId);
        Task DeleteBookPageMapping(string bookId, string pageId);
        #endregion

        Task<List<TableMetadataViewModel>> ManageBulkNoteData(string id);
        Task<List<ColumnMetadataViewModel>> GetUdfQueryData(string categoryId, string categoryCode);
        Task<List<TableMetadataViewModel>> ValidateBulkNoteData(string id);
        Task<bool> InsertIntoLogTableData(TableMetadataViewModel tableMetaData);
        Task<bool> createLogTableData(TableMetadataViewModel tableMetadata);
        Task<List<TableMetadataViewModel>> BulkInsertNoteUdfTableData(string tempid);
        Task<bool> EditUdfTableLogData(TableMetadataViewModel tableMetaData);
        Task CreateAttachmentsData(NoteTemplateViewModel model, string attachments);
        Task<TableMetadataViewModel> GetNoteTemplateByIdData(NoteTemplateViewModel viewModel);
        Task<NoteTemplateViewModel> GetNoteTemplateForNewNoteData(NoteTemplateViewModel vm);
        Task<long?> GenerateNextNoteNoData();
        Task<long?> GenerateNextNoteNoData(long count);
        Task<List<ColumnMetadataViewModel>> GetViewableColumnsData(TableMetadataViewModel tableMetaData);
        Task<List<ColumnMetadataViewModel>> GetViewableColumnsData2(TableMetadataViewModel tableMetaData);
        Task<List<ColumnMetadataViewModel>> GetNoteViewableColumnsData();
        Task<NoteTemplateViewModel> GetSelectQueryData(TableMetadataViewModel tableMetaData);
        Task<string> GetNoteIndexPageCountData(PageViewModel page);
        Task<List<NtsTaskSharedViewModel>> GetNoteIndexPageGridData(string userId);
        Task<List<NtsNoteSharedViewModel>> GetNoteIndexPageGridData1(string userId);
        Task<List<UserViewModel>> SetsharedListData(NoteTemplateViewModel model);
        Task<List<NTSMessageViewModel>> GetNoteMessageListData(string userId, string noteId);
        Task<List<NoteTemplateViewModel>> GetNtsNoteIndexPageCountData(NtsNoteIndexPageViewModel model);
        Task<IList<NoteViewModel>> GetNtsNoteIndexPageGridData(NtsActiveUserTypeEnum ownerType, string noteStatusCode, string categoryCode, string templateCode, string moduleCode, NtsViewTypeEnum? ntsViewType);
        Task<List<NoteViewModel>> NotesDashboardCountData(string userId, string type = "ALL", string moduleName = null, string noteTemplateIds = null);
        Task<List<NoteViewModel>> NotesDashboardCountData1(string userId, string type = "ALL", string moduleName = null, string noteTemplateIds = null);
        Task<List<NoteViewModel>> NotesDashboardCountData2(string userId, string type = "ALL", string moduleName = null, string noteTemplateIds = null);
        Task<List<NoteViewModel>> GetSearchResultData(NoteSearchViewModel searchModel);
        Task RollBackData1(NoteTemplateViewModel model);
        Task<List<SynergySchemaViewModel>> GetSyneryListData();
        Task<DateTime> GetLastUpdatedSynerySchemaData();
        Task<SynergySchemaViewModel> GetSynerySchemaByIdData(string Id);
        Task<bool> DeleteSchemaData(string NoteId);
        Task<IList<NoteViewModel>> GetAllDashboardMasterData();
        Task<IList<DashboardMasterViewModel>> GetAllGridStackDashboardData();
        Task<IList<KanbanBoardViewModel>> GetKanbanBoardData();
        Task<KanbanBoardViewModel> GetKanbanBoardDetailsData(string noteId);
        Task<DashboardMasterViewModel> GetDashboardMasterDetailsData(string noteId);
        Task UpdateModelData(string data, string id);
        Task<DashboardItemMasterViewModel> GetDashboardItemMasterDetailsData(string noteId);
        Task<MapLayerItemViewModel> GetMapLayerItemDetailsData(string noteId);
        Task<List<MapLayerItemViewModel>> GetMapLayerItemListData(string parentNoteId);
        Task<WidgetItemViewModel> GetWidgetItemDetailsData(string noteId);
        Task<List<WidgetItemViewModel>> GetWidgetItemListData(string parentId);
        Task<WidgetItemViewModel> GetWidgetItemDetailsByNameData(string name);
        Task<List<DashboardItemMasterViewModel>> GetDashboardItemMasterListData(string parentId);
        Task<DashboardItemMasterViewModel> GetDashboardItemDetailsWithChartTemplateData(string noteId);
        Task<DashboardItemMasterViewModel> GetDashboardItemDetailsByNameData(string name);
        Task<DashboardItemMasterViewModel> GetDashboardItemDetailsByIdData(string id);
        Task<IList<IdNameViewModel>> GetAllChartTemplateData();
        Task<IdNameViewModel> GetChartTemplateByIdData(string id);
        Task<List<IdNameViewModel>> GetAllDashboardItemDetailsWithDashboardData();
        Task<List<IdNameViewModel>> GetLibraryDashboardItemDetailsWithDashboardData();
        Task<List<IdNameViewModel>> GetTagIdNameListData(string portalId);
        Task<List<TagCategoryViewModel>> GetTagCategoryListData(string TemplateId);
        Task<List<TagCategoryViewModel>> GetTagListByCategoryIdData(string CategoryId);
        Task<TagCategoryViewModel> GetCategoryByTagIdData(string tagId);
        Task<IList<NoteViewModel>> GetNoteDataListByTemplateCodeData(string templateCode);
        Task<IList<DirectoryContent>> GetAllDocumentsData(string parentId);
        Task<List<DirectoryContent>> GetAllChildDocumentsData(string parentId);
        Task<List<DirectoryContent>> GetAllFolderDocumentsData(string parentId);
        Task<TemplateViewModel> GetAllDocumentFilesData(string documentId);
        Task<DirectoryContent> GetAllDocumentFilesData1(string field, string tableName, string documentId);
        Task<bool> IsNoteSubjectUniqueData(string templateId, string subject, string noteId);
        Task<IList<SocialWebsiteViewModel>> GetAllSocialWebsiteData();
        Task<IList<FacebookViewModel>> GetFacebookData(string searchStr);
        Task<IList<TwitterViewModel>> GetTwitterData();
        Task<IList<YoutubeViewModel>> GetYoutubeData();
        Task<IList<WhatsAppViewModel>> GetWhatsAppData();
        Task<IList<InstagramViewModel>> GetInstagramData();
        Task<List<DbConnectionViewModel>> GetDbConnectionData();
        Task<List<ApiConnectionViewModel>> GetApiConnectionData();
        Task<DbConnectionViewModel> GetDbConnectionDetailsData(string noteId);
        Task<ApiConnectionViewModel> GetApiConnectionDetailsData(string noteId);
        Task<List<IdNameViewModel>> GetSharedListData(string NoteId);
        Task<List<RssFeedViewModel>> GetRssFeedData();
        Task<List<RssFeedViewModel>> GetRssFeedDataForScheduling();
        Task<List<SchedulerSyncViewModel>> GetScheduleSyncData();
        Task<List<RssFeedViewModel>> GetRssFeedDataForSchedulingByTemplateCode(string templateCode);
        Task UpdateScheduleSyncData(string id, DateTime trackingDate, string content);
        Task<RssFeedViewModel> GetRssFeedDetailsData(string noteId);
        Task<AlertViewModel> GetNotificationALertDetailsData(string noteId);
        Task<WatchlistViewModel> GetWatchlistDetailsData(string noteId);
        Task<List<AlertViewModel>> GetAlertRulelistData();
        Task<List<string>> GetKeywordListByTrackIdData(string noteId);
        Task<List<string>> GetCanAlertKeywordListByTrackIdData(string noteId);
        Task<IList<MapMarkerViewModel>> GetDistictByStateData(string stateId);
        Task<IList<MapMarkerViewModel>> GetPoliceStationByDistictData(string districtId);
        Task<IList<MapMarkerViewModel>> GetLocationByPoliceStationData(string policeStationId);
        Task UpdateLocationData(string id, string count);
        Task UpdatePoliceStationData(string id, string count);
        Task UpdateDistrictData(string id, string count);
        Task<IList<MapMarkerViewModel>> GetMarkersByDistrictData(string locationId);
        Task<List<TagCategoryViewModel>> GetTrackListData();
        Task<List<TagCategoryViewModel>> GetKeywordListData(string trackId);
        Task<List<NoteViewModel>> GetDocumentByNoteAndRevisionData(string tableMetadata, string templateId, string noteno, string revData);
        Task<List<ColumnMetadataViewModel>> DynamicUdfColumnsData(string templateId);
        Task<string> GetServiceWorkflowTemplateId(long id);
        Task<string> GetServiceDocumentId(string serviceId, string udfs);
        Task<IList<FileViewModel>> GetInlineCommentResultData(string NoteId, string udfs);
        Task<NoteViewModel> GetWorkspaceIdData(string noteId);
        Task<bool> DeleteWorkspaceData(string NoteId);
        Task<string> GetFolderWorkspaceData(string id);
        Task<List<NtsLogViewModel>> GetVersionDetailsData(string noteId);
        Task<NoteTemplateViewModel> GetBookDetailsData(string noteId);
        Task<List<NtsViewModel>> GetBookListData(string noteId);
        Task<NtsBookItemViewModel> GetBookByIdData(string id);
        Task<List<NtsBookItemViewModel>> GetBookItemChildListData(string serviceId, string noteId, string taskId);
        Task<NoteTemplateViewModel> GetFormIoData(string noteId);
        Task<DataRow> GetFormIoData1(string noteId, string data);
        Task<List<NoteViewModel>> NotesCountForDashboardData(string userId, string bookId);
        Task<List<NoteViewModel>> ProcessBookCountForDashboardData(string userId, string bookId);
        Task<List<NoteViewModel>> ProcessStageCountForDashboardData(string userId, string bookId);
        Task<SynergyWebsiteViewModel> GetSynergyWebsiteData(string id);
        Task<List<SynergyWebsiteViewModel>> GetAllSynergyWebsiteData();
        Task<List<SynergyWebsiteViewModel>> GetAllSynergyWebsiteNoteData();
        Task<List<MeasuresViewModel>> GetMeasuresData();
        Task<List<MeasuresViewModel>> GetMeasuresDataDisplay();
        Task<List<DimensionsViewModel>> GetDimensionsData();
        Task<List<DimensionsViewModel>> GetDimensionsByMeasueData(string measure);
        Task<List<DimensionsViewModel>> GetDimensionsByMeasueDataDisplay(string measure);
        Task<List<DimensionsColumnViewModel>> GetDimensionsColumnByMeasueData(string measure);
        Task<IList<SocailScrappingApiViewModel>> GetAllCCTNSApiMethodsData();
        Task<IList<IdNameViewModel>> GetAllDistrictData();
        Task<IList<IdNameViewModel>> GetAllVDPDistrictData();
        Task<IdNameViewModel> GetVDPDistrictDataByCode(string code);
        Task<IdNameViewModel> GetVDPDistrictDataById(string id);
        Task<SchedulerLogViewModel> GetSchedulerLogData(string subject, string districtCode);
        Task<SocailScrappingApiViewModel> GetAllCCTNSApiMethodsDetails(string id);
        Task<IList<SocailScrappingApiParameterViewModel>> GetAllCCTNSApiMethodsParameterData(string parameterIds);
        Task<IList<IdNameViewModel>> GetAdhocNoteTemplateListData();
        Task<IList<NotificationViewModel>> GetNotificationListData(string userId, string portalId, long count = 20, string referenceId = null, string id = null);
        Task<IList<NotificationViewModel>> GetAllNotificationsData(string userId, string portalId, int? count = null, bool? isArchived = null, ReadStatusEnum? readStatus = null);
        Task<NotificationViewModel> GetNotificationDetailsData(string notificationId);
        Task<long> GetNotificationCountData(string userId, string portalId);
        Task MarkNotificationAsReadData(string id);
        Task MarkNotificationAsNotReadData(string id);
        Task ArchiveNotificationData(string id);
        Task UnArchiveNotificationData(string id);
        Task StarNotificationData(string id);
        Task UnStarNotificationData(string id);
        Task MarkAllNotificationAsRead(string userId, string portalId);
        Task<List<NotificationViewModel>> GetNotificationListData(DateTime date, DateTime FirstDate, DateTime LastDate, ReferenceTypeEnum? refType = null, string refTypeId = null);
        Task<List<ServiceViewModel>> UpdateNotStartedNtsData();
        Task<List<TaskViewModel>> UpdateNotStartedNtsData2();
        Task<List<ServiceViewModel>> UpdateOverdueNtsData();
        Task<List<TaskViewModel>> UpdateOverdueNtsData1();
        Task<List<ServiceViewModel>> DisbaleGrievenceReopenServiceData(DateTime dateTime);
        Task DisbaleGrievenceReopenServiceData1();
        Task<List<TaskViewModel>> CancelCommunityHallBookingOnExpiredData(DateTime dateTime);
        Task UpdateRentServiceData(string noteId, string ColumnName);
        Task UpdateRentalStatusForVacatingData(string rentalstatus, string rentalAgreementNumber, string reason);
        Task<List<NtsNoteCommentViewModel>> GetSearchResultData(string NoteId);
        Task<List<NtsNoteCommentViewModel>> GetCommentTreeData(string NoteId, string Id = null);
        Task<List<NtsNoteCommentViewModel>> GetAllCommentTreeData(string NoteId);
        Task<List<NtsNoteCommentViewModel>> GetAllCommentTreeData1(string p);
        Task<List<NtsNoteSharedViewModel>> GetSearchResult(string NoteId);
        Task<List<NtsServiceCommentViewModel>> GetSearchResultData1(string ServiceId);
        Task<List<NtsServiceCommentViewModel>> GetCommentTreeData1(string ServiceId, string Id = null);
        Task<List<NtsServiceCommentViewModel>> GetAllCommentTree(string serviceId);
        Task<List<NtsServiceCommentViewModel>> GetAllCommentTree1(string p);
        Task<List<NtsServiceSharedViewModel>> GetSearchSharedResult(string ServiceId);
        Task<bool> UpdateStagingByBatchIdData(string batchId);
        Task<List<NtsTaskCommentViewModel>> GetSearchCommentResultData(string TaskId);
        Task<List<NtsTaskCommentViewModel>> GetTaskCommentTreeData(string TaskId, string Id = null);
        Task<List<IdNameViewModel>> GetTaskCommentUserListData(string TaskId);
        Task<List<NtsTaskCommentViewModel>> GetAllTaskCommentTreeData(string taskId);
        Task<List<NtsTaskCommentViewModel>> GetAllTaskCommentTreeData1(string p);
        Task<List<NtsTaskPrecedenceViewModel>> GetSearchTaskPrecedenceResult(string taskId);
        Task<List<NtsTaskPrecedenceViewModel>> GetTaskPredecessorData(string taskId);
        Task<List<NtsTaskPrecedenceViewModel>> GetTaskSuccessorData(string taskId);
        Task<List<NtsTaskSharedViewModel>> GetSearchTaskCommentResult(string TaskId);
        Task<List<TaskTimeEntryViewModel>> GetSearchTaskTimeEntryResult(string taskId);
        Task<List<TaskTimeEntryViewModel>> GetTimeEntriesData(string serviceId, DateTime timelog, string userId = null);
        Task<IList<IdNameViewModel>> GetAdhocServiceTemplateListData();
        #region TaskBusiness
        Task RollBackTaskData(TaskTemplateViewModel model, TableMetadataViewModel table);
        Task<List<UserViewModel>> SetSharedTaskListData(TaskTemplateViewModel model);
        Task<List<TaskTemplateViewModel>> GetTaskIndexPageCountData(TaskIndexPageTemplateViewModel model, PageViewModel page);
        Task<TableMetadataViewModel> GetTaskTemplateByIdData(TaskTemplateViewModel viewModel);
        Task<dynamic> GetTaskTemplateByIdData1(TaskTemplateViewModel viewModel);
        Task<List<NTSMessageViewModel>> GetTaskMessageListData(string userId, string taskId);
        Task<List<ColumnMetadataViewModel>> GetViewableTaskColumnsData(TableMetadataViewModel tableMetaData);
        Task<List<ColumnMetadataViewModel>> GetViewableTaskColumnsData1(TableMetadataViewModel tableMetaData);
        Task<List<ColumnMetadataViewModel>> GetTaskViewableColumnsData();
        Task<long?> GenerateNextTaskNoData();
        Task<TaskTemplateViewModel> GetTaskTemplateForNewTaskData(TaskTemplateViewModel vm);
        Task<IList<TaskViewModel>> GetNtsTaskIndexPageGridData(DataSourceRequest request, NtsActiveUserTypeEnum ownerType, string taskStatusCode, string categoryCode, string templateCode, string moduleCode);
        Task<List<TaskTemplateViewModel>> GetNtsTaskIndexPageCountData(NtsTaskIndexPageViewModel model);
        Task<IList<NtsTaskIndexPageViewModel>> GetTaskCountByServiceTemplateCodesData(string categoryCodes = null, string portalId = null, bool showAllTaskForAdmin = false, string templateCodes = null, string portalNames = null, string statusCodes = null, string userId = null);
        Task<IList<TaskViewModel>> GetTaskListByServiceCategoryCodesData(string categoryCodes = null, string status = null, string portalId = null, bool showAllTaskForAdmin = false, string templateCodes = null, string portalNames = null, string userId = null);
        Task<IList<NtsServiceIndexPageViewModel>> GetServiceCountByServiceTemplateCodesData(string categoryCodes, string portalId, bool isIncluded = false);
        Task<IList<ServiceViewModel>> GetServiceListByServiceCategoryCodesData(string categoryCodes, string status, string portalId);
        Task<IList<TaskViewModel>> GetServiceAdhocTaskGridData(DataSourceRequest request, string adhocTaskTemplateIds, string serviceId);
        Task<IList<TaskViewModel>> GetTaskSearchResultData(TaskSearchViewModel searchModel);
        Task<NoteViewModel> IsTaskSubjectUniqueData(string templateId, string subject, string taskId);
        Task<IList<ProjectGanttTaskViewModel>> GetDatewiseTaskSLAData(TaskSearchViewModel searchModel, string userId);
        Task<List<IdNameViewModel>> GetTaskSharedListData(string TaskId);
        Task<IList<TaskViewModel>> GetTaskByUserData(string userId);
        Task<IList<TaskViewModel>> GetTaskListData(string portalId, string moduleCodes = null, string templateCodes = null, string categoryCodes = null, string statusCodes = null, string parentServiceId = null, string userId = null, string parentNoteId = null, string serId = null, string serTempCodes = null);
        Task<IList<TaskViewModel>> GetWorkboardTaskListData(string portalId, string moduleCodes = null, string templateCodes = null, string categoryCodes = null, string statusCodes = null, string parentServiceId = null, string userId = null, string parentNoteId = null);
        Task<IList<TaskViewModel>> GetWorkPerformanceTaskListData(TaskSearchViewModel search);
        Task<List<NtsLogViewModel>> GetVersionDetailsTaskData(string taskId);
        Task<List<DashboardCalendarViewModel>> GetWorkPerformanceCountData(string userId, string moduleCodes = null, DateTime? fromDate = null, DateTime? toDate = null);
        Task<List<IdNameViewModel>> GetTaskUserListData(string taskId);
        Task<TaskTemplateViewModel> GetFormIoData(string templateId, string taskId, string userId);
        Task<DataRow> GetFormIoTaskData(string data, string taskId);
        Task<List<TaskViewModel>> TaskCountForDashboardData(string userId, string bookId);
        Task<List<TaskViewModel>> TaskDashboardIndexData(string userId, string statusFilter = null);
        Task<List<NoteViewModel>> LoadWorkBooksData(string userId, string statusFilter = null);
        Task<List<NoteViewModel>> LoadProcessBooksData(string userId, string statusFilter = null);
        Task<List<NoteViewModel>> LoadProcessStageData(string userId, string statusFilter = null);
        Task<List<NoteViewModel>> GetNextNoteSequenceNoData(string notePlusId);
        Task<long> GetNextServiceSequenceNoData(string servicePlusId);
        Task<List<NotificationViewModel>> NotificationDashboardIndexData(string userId, string bookId);
        Task<bool> UpdateStepTaskAssigneeData(string taskId, string ownerUserId);
        #endregion
        Task<List<IIPCameraViewModel>> GetIIPCameraData();
        Task<List<IIPCameraViewModel>> GetIIPCameraDatabyIds(string ids);
        Task<List<CctvCameraViewModel>> GetCctvCameraData(DateTime? lastUpdatedDate = null);
        Task<NtsSummaryViewModel> GetTaskSummary(string portalId, string userId);
        Task<NtsSummaryViewModel> GetServiceSummary(string portalId, string userId);
        //Task<List<RoipViewModel>> GetRoipData(string host, string user, string database, string port, string password, string table);
        Task<IList<TrendingLocationViewModel>> GetAllTrendingLocationData();
        Task<IList<string>> GetAllKeywordForHarvesting();
        Task<IList<IdNameViewModel>> GetAllDial100Event();
        Task<IList<IdNameViewModel>> GetAllDial100SubEvent();
        Task<IList<IdNameViewModel>> GetAllDial100SubEvent(string eventCode);
        Task<List<IdNameViewModel>> GetAllTracks();
        Task<List<IdNameViewModel>> GetAllKeywords(string trackId);
        Task<IList<IdNameViewModel>> GetAllFacebookUserData();
        Task<IdNameViewModel> GetFacebookCredentialData();
        Task<List<IdNameViewModel>> GetSEBIInvestorListedCompanyIdNameList(string entityStatus);
        Task<SEBIEntityRegistrationViewModel> GetSEBIInvestorListedCompanyData(string listedCompanyId);
        Task<IList<NtsServiceIndexPageViewModel>> GetTemplatesListWithServiceCount(string templateCodes = null, string catCodes = null, string groupCodes = null, bool showAllServicesForAdmin = false);
        Task<IList<NtsTaskIndexPageViewModel>> GetTemplatesListWithTaskCount(string templateCodes = null, string catCodes = null, string groupCodes = null, bool showAllTasksForAdmin = false);
        Task<IList<TaskViewModel>> GetTaskListWithHoursSpentData(string portalId, string statusCodes = null, string userId = null);
        Task<List<ProjectDashboardChartViewModel>> GetStatusWiseChartByTemplateCode(string templateCode, string requestby = null);
        Task<List<ProjectDashboardChartViewModel>> GetServiceStatusByTemplateCode(string templateCode, string userId, string portalId);
        Task<IList<NtsServiceIndexPageViewModel>> GetServiceCountByDifferentCodes(string categoryCodes, string templateCodes, string portalNames, string moduleCodes);
        Task<IList<ServiceViewModel>> GetServiceListWithDepartment(string categoryCodes = null, string templateCodes = null, string portalNames = null, string moduleCodes = null, string status = null, string departmentId = null, string templateId = null, string userId = null);
        Task<IList<NtsServiceIndexPageViewModel>> GetServiceCountWithDepartment(string categoryCodes = null, string templateCodes = null, string moduleCodes = null, string portalNames = null, string departmentId = null, string templateId = null, string userId = null);
        Task<List<ServiceViewModel>> GetAllServicesList(string portalId, string moduleCodes, string templateCodes, string categoryCodes, string requestby = null, bool showAllOwnersService = false, string statusCodes = null, string parentServiceId = null);
        Task<string> GetNextServiceNo(DateTime asofDate, string templateId = null);
        Task<string> GetNextGrievanceServiceNo(int year, string department, string ward);
        Task<string> GetNextBLSFileNumber(int year);
        Task<IList<TaskViewModel>> GetTaskListDataByWithNoteReferenceId(string portalId, string moduleCodes = null, string templateCodes = null, string categoryCodes = null, string statusCodes = null, string parentServiceId = null, string userId = null, string parentNoteId = null, string serId = null, string serTempCodes = null);
    }
}
