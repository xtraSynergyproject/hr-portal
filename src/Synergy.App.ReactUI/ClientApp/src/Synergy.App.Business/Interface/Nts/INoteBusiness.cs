using Synergy.App.Common;
using Synergy.App.DataModel;
using Synergy.App.ViewModel;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Synergy.App.Business
{
    public interface INoteBusiness : IBusinessBase<NoteViewModel, NtsNote>
    {
        Task<CommandResult<NoteTemplateViewModel>> ManageNote(NoteTemplateViewModel model);
        Task<CommandResult<List<NoteTemplateViewModel>>> ManageBulkNote(List<NoteTemplateViewModel> model);
        Task<CommandResult<NoteTemplateViewModel>> DeleteNote(NoteTemplateViewModel model);
        Task<NoteTemplateViewModel> GetNoteDetails(NoteTemplateViewModel viewModel);
        Task GetNoteIndexPageCount(NoteIndexPageTemplateViewModel model, PageViewModel page);
        Task<DataTable> GetNoteIndexPageGridData(DataSourceRequest request, string indexPageTemplateId, NtsActiveUserTypeEnum ownerType, string noteStatusCode, string userId = null, bool ignoreJoins = true);
        Task<NoteIndexPageTemplateViewModel> GetNoteIndexPageViewModel(PageViewModel page);
        Task<string> GetSelectQuery(TableMetadataViewModel tableMetaData, string where = null, string filtercolumns = null, string filter = null, bool isLog = false, string logId = null, bool ignoreJoins = false, string returnColumns = null, int? limit = null, int? skip = null);
        Task<DataTable> GetNoteDataTableById(string noteId, TableMetadataViewModel tableMetadata, bool isLog = false, string logId = null);
        Task<List<NtsLogViewModel>> GetVersionDetails(string noteId);
        Task<List<NTSMessageViewModel>> GetNoteMessageList(string userId, string noteId);
        Task GetNtsNoteIndexPageCount(NtsNoteIndexPageViewModel model);
        Task UpdateModel(string data, string id);
        Task<IList<NoteViewModel>> GetNtsNoteIndexPageGridData(DataSourceRequest request, NtsActiveUserTypeEnum ownerType, string noteStatusCode, string categoryCode, string templateCode, string moduleCode, NtsViewTypeEnum? ntsViewType);
        Task<DashboardNoteViewModel> NotesDashboardCount(string userId, string type = "ALL", string moduleName = null, string noteTemplateIds = null);

        Task<List<ColumnMetadataViewModel>> GetViewableColumns(TableMetadataViewModel tableMetaData, bool ignoreJoins = false);
        Task<IList<NoteViewModel>> GetSearchResult(NoteSearchViewModel searchModel);
        Task<IList<NoteViewModel>> GetAllDashboardMaster();
        Task<IList<DashboardMasterViewModel>> GetAllGridStackDashboard();
        Task<IList<KanbanBoardViewModel>> GetKanbanBoard();
        Task<KanbanBoardViewModel> GetKanbanBoardDetails(string noteId);
        Task<DashboardMasterViewModel> GetDashboardMasterDetails(string noteId);
        Task<DashboardItemMasterViewModel> GetDashboardItemMasterDetails(string noteId);
        Task<MapLayerItemViewModel> GetMapLayerItemDetails(string noteId);
        Task<List<MapLayerItemViewModel>> GetMapLayerItemList(string parentNoteId);
        Task<WidgetItemViewModel> GetWidgetItemDetails(string noteId);
        Task<List<WidgetItemViewModel>> GetWidgetItemList(string parentId);
        Task<WidgetItemViewModel> GetWidgetItemDetailsByName(string name);
        Task<List<DashboardItemMasterViewModel>> GetDashboardItemMasterList(string parentId);
        Task<IList<IdNameViewModel>> GetAllChartTemplate();
        Task<IdNameViewModel> GetChartTemplateById(string id);
        Task<DashboardItemMasterViewModel> GetDashboardItemDetailsWithChartTemplate(string noteId);
        Task<DashboardItemMasterViewModel> GetDashboardItemDetailsByName(string name);
        Task<DashboardItemMasterViewModel> GetDashboardItemDetailsById(string id);
        Task<List<IdNameViewModel>> GetAllDashboardItemDetailsWithDashboard();
        Task<List<IdNameViewModel>> GetLibraryDashboardItemDetailsWithDashboard();
        Task<List<IdNameViewModel>> GetTagIdNameList(string portalId);
        Task<List<TagCategoryViewModel>> GetTagCategoryList(string TemplateId);
        Task<List<TagCategoryViewModel>> GetTagListByCategoryId(string CategoryId);
        Task<TagCategoryViewModel> GetCategoryByTagId(string tagId);
        Task RollbackUdfTable(TableMetadata tableMetaData, Dictionary<string, object> rowData, string recordId);
        Task<IList<NoteViewModel>> GetNoteDataListByTemplateCode(string templateCode);
        Task<IList<DirectoryContent>> GetAllDocuments(string parentId);
        Task<List<DirectoryContent>> GetAllChildDocuments(string parentId);
        Task<List<DirectoryContent>> GetAllFolderDocuments(string parentId);
        Task<List<DirectoryContent>> GetAllDocumentFiles(string documentId);
        Task<IList<SocialWebsiteViewModel>> GetAllSocialWebsite();
        Task<IList<FacebookViewModel>> GetFacebookData(string searchStr);
        Task<IList<TwitterViewModel>> GetTwitterData();
        Task<IList<YoutubeViewModel>> GetYoutubeData();
        Task<IList<WhatsAppViewModel>> GetWhatsAppData();
        Task<IList<InstagramViewModel>> GetInstagramData();
        Task<List<DbConnectionViewModel>> GetDbConnectionData();
        Task<List<ApiConnectionViewModel>> GetApiConnectionData();
        Task<DbConnectionViewModel> GetDbConnectionDetails(string noteId);
        Task<ApiConnectionViewModel> GetApiConnectionDetails(string noteId);
        Task<List<IdNameViewModel>> GetSharedList(string NoteId);
        Task<List<RssFeedViewModel>> GetRssFeedData();
        Task<RssFeedViewModel> GetRssFeedDetails(string noteId);
        Task<AlertViewModel> GetNotificationALertDetails(string noteId);
        Task<WatchlistViewModel> GetWatchlistDetails(string noteId);
        Task<List<AlertViewModel>> GetAlertRulelist();
        Task<List<string>> GetKeywordListByTrackId(string noteId);
        Task<List<string>> GetCanAlertKeywordListByTrackId(string noteId);
        Task<IList<MapMarkerViewModel>> GetDistictByState(string stateId);
        Task<IList<MapMarkerViewModel>> GetPoliceStationByDistict(string districtId);
        Task<IList<MapMarkerViewModel>> GetLocationByPoliceStation(string policeStationId);
        Task UpdateLocation(string id, string count);
        Task UpdatePoliceStation(string id, string count);
        Task UpdateDistrict(string id, string count);
        Task<IList<MapMarkerViewModel>> GetMarkersByDistrict(string locationId);
        Task<List<TagCategoryViewModel>> GetTrackList();
        Task<List<TagCategoryViewModel>> GetKeywordList(string trackId);
        Task<List<RssFeedViewModel>> GetRssFeedDataForScheduling();
        Task<List<RssFeedViewModel>> GetRssFeedDataForSchedulingByTemplateCode(string templateCode);
        Task<List<SchedulerSyncViewModel>> GetScheduleSyncData();
        Task<IList<NtsNoteCommentViewModel>> GetInlineCommentResult(string NoteId);
        Task UpdateScheduleSyncData(string id, DateTime trackingDate, string content);
        Task<List<NoteViewModel>> GetDocumentByNoteAndRevision(string templateId, string noteno, string revision);
        Task<List<ColumnMetadataViewModel>> DynamicUdfColumns(string templateId);
        Task<string> GetServiceWorkflowTemplateId(string id);
        Task<string> GetUdfQuery(string categoryId, string categoryCode, string templateCodes, string excludeTemplateCodes, params string[] columns);
        Task<List<NoteViewModel>> GetWorkspaceDataForAdmin();
        Task<NoteTemplateViewModel> CopyDocument(string copyFromId, string copyToNewParent, bool allowSubFolder, string ToWorkspaceId, string FromWorkspaceId, string ownerUserId);
        //Task<List<FolderView>> GetWorkspaceDataForAdmin();
        Task Archive(string id);
        Task<List<JsonViewModel>> GetUdfJsonModel(string json);
        Task CreateLogTable(TableMetadataViewModel tableMetadata);
        Task<CommandResult<NoteTemplateViewModel>> EditNoteUdfTable(NoteTemplateViewModel viewModel, string data, string noteId);
        Task<string> CreateFileForPostAttachment(string fileName, string fileExt, long contentLength);
        Task UpdateOldIsLatestRevision(string noteNo, string noteId, string templateId);
        Task<NoteViewModel> GetWorkspaceId(string noteId);
        Task<string> UpdateWorkspaceId(NoteViewModel model);
        Task<bool> DeleteWorkspace(string NoteId);
        Task<string> GetFolderWorkspace(string id);
        Task<string> GetServiceDocumentId(string serviceId);
        Task SendNotification(NoteTemplateViewModel viewModel, NotificationTemplate item, string toUserId);
        Task<List<NtsViewModel>> GetBookList(string noteId, string templateId, bool includeitemDetails = false);
        Task<NoteTemplateViewModel> GetBookDetails(string noteId);
        Task<List<NtsViewModel>> GetNoteBookDetails(string noteId);
        Task<CommandResult<NoteViewModel>> GetQueryValidate(string query);
        Task<NtsBookItemViewModel> GetBookById(string id);
        Task<CommandResult<NoteViewModel>> ManageMoveToParent(NoteViewModel model);
        Task DeleteServiceBookItem(string noteId, string parentId, NtsTypeEnum parentType);
        Task<List<ColumnMetadataViewModel>> GetNoteViewableColumns();

        Task<DataTable> GetQueryResult(string Query);
        Task<List<SynergySchemaViewModel>> GetSyneryList();
        Task<SynergySchemaViewModel> GetSynerySchemaById(string Id);
        Task<DashboardNoteViewModel> NotesCountForDashboard(string userId, string bookId);
        Task<DashboardNoteViewModel> ProcessBookCountForDashboard(string userId, string bookId);
        Task<DashboardNoteViewModel> ProcessStageCountForDashboard(string userId, string bookId);
        Task<NoteTemplateViewModel> GetFormIoData(string templateId, string noteId, string userId);
        Task UpdateDocumentCountCustom(NoteTemplateViewModel viewModel, dynamic udf, IUserContext uc, IServiceProvider sp);
        Task<DateTime> GetLastUpdatedSynerySchema();
        Task<SynergyWebsiteViewModel> GetSynergyWebsite(string id);
        Task<List<SynergyWebsiteViewModel>> GetAllSynergyWebsite();
        Task<List<SynergyWebsiteViewModel>> GetAllSynergyWebsiteNote();
        Task DeleteNoteBook(string noteId);
        Task<List<MeasuresViewModel>> GetMeasures();
        Task<List<MeasuresViewModel>> GetMeasuresDisplay();
        Task<List<DimensionsViewModel>> GetDimensions();
        Task<List<DimensionsViewModel>> GetDimensionsByMeasue(string measure);
        Task<List<DimensionsViewModel>> GetDimensionsByMeasueDisplay(string measure);
        Task<List<DimensionsColumnViewModel>> GetDimensionsColumnByMeasue(string measure);
        Task<bool> DeleteAor(NoteTemplateViewModel model);
        Task<IList<SocailScrappingApiViewModel>> GetAllCCTNSApiMethods();
        Task<SocailScrappingApiViewModel> GetCCTNSApiMethodsDetails(string id);
        Task<IList<IdNameViewModel>> GetAllDistrict();
        Task<IList<IdNameViewModel>> GetAllVDPDistrict();
        Task<IdNameViewModel> GetVDPDistrictByCode(string code);
        Task<IdNameViewModel> GetVDPDistrictById(string id);
        Task<SchedulerLogViewModel> GetSchedulerLog(string subject, string districtCode);
        Task<IList<SocailScrappingApiParameterViewModel>> GetAllCCTNSApiMethodsParameter(string parameterIds);
        Task<List<IIPCameraViewModel>> GetIIPCamera();
        Task<List<IIPCameraViewModel>> GetIIPCameraByIds(string ids);
        Task<List<CctvCameraViewModel>> GetCctvCamera(DateTime? lastUpdatedDate = null);
        Task<List<string>> GenerateItemSerialNumbers(long count);
        Task TriggerHangfire(AlertViewModel model);
        Task ManageSchedulerLog(SchedulerLogViewModel model);
        Task<string> GenerateNextNoteNo(NoteTemplateViewModel model);
        //Task<List<RoipViewModel>> GetRoipData(string host, string user, string database, string port, string password, string table);
        Task<IList<TrendingLocationViewModel>> GetAllTrendingLocation();
        Task<IList<string>> GetAllKeywordForHarvesting();
        Task<IList<IdNameViewModel>> GetAllDial100Event();
        Task<IList<IdNameViewModel>> GetAllDial100SubEvent();
        Task<IList<IdNameViewModel>> GetAllDial100SubEvent(string eventCode);
        Task<IList<IdNameViewModel>> GetAllTracks();
        Task<IList<IdNameViewModel>> GetAllKeywords(string trackId);
        Task<IList<IdNameViewModel>> GetAllFacebookUser();
        Task<IdNameViewModel> GetFacebookCredential();
        Task<bool> CreateGeneralDocument(string noteNo, List<string> folders, string fileId, string fileName, string userId);
    }
}
