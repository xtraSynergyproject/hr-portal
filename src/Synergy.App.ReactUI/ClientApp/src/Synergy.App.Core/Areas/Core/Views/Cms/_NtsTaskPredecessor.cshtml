@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using Newtonsoft.Json;

@{
    ViewData["Title"] = "Portal";
    Layout = "~/Areas/Core/Views/Shared/_PopupLayout.cshtml";
}
@inject Synergy.App.Common.IUserContext _userContext
@model NtsTaskPrecedenceViewModel
<style>
    h5 {
        color: black;
    }

    .k-upload {
        width: 100%;
    }

    .SYN-Main-wrapper {
        width: 700px;
        height: auto;
        padding: 0;
        margin: 20px auto;
        box-shadow: 4px 4px 10px #CBD0CE;
        border-radius: 6px;
    }

    .SYN-upload-row {
        width: 96%;
        padding: 0;
        margin: 4px auto;
        background-color: #10B0ED;
        border-radius: 6px;
    }

    .SYN-ico-pdf {
        width: 96%;
        padding: 20px;
        margin: 0 auto;
    }

    .SYN-ico-action {
        padding: 26px 4px;
        margin: 4px;
        float: left;
    }

    .SYN-ico-action-eye {
        padding: 26px 4px;
        margin: 4px;
        float: left;
        color: blue;
        cursor: pointer;
    }

    .SYN-ico-action-down {
        padding: 26px 4px;
        margin: 4px;
        float: left;
        color: greenyellow;
        cursor: pointer;
    }

    .SYN-ico-action-del {
        padding: 26px 4px;
        margin: 4px;
        float: left;
        color: red;
        cursor: pointer;
    }

    .SYN-tag-field {
        padding: 0;
        margin: 0;
        font-size: 14px;
        color: #939598;
    }

    .SYN-txt-field {
        padding: 0;
        margin: 0;
    }

    .SYN-row-gap {
        padding: 0;
        margin: 12px 0;
    }

    .SYN-dummy-row {
        width: 96%;
        padding: 4px;
        margin: 4px auto;
    }

    .SYN-list-box {
        width: 96%;
        padding: 0;
        margin: 4px auto;
        background-color: #ffffff;
        border-radius: 6px;
        border: 1px solid #C4C4C4;
    }

    .SYN-sub-docName {
        padding: 2px 0 2px 0;
        font-size: 14px;
    }

    .SYN-sub-white-txt {
        padding: 2px 0 2px 12px;
        font-size: 14px;
    }

    .SYN-inn-title-row {
        width: 96%;
        padding: 0;
        margin: 4px auto;
        background-color: #353535;
        border-radius: 6px;
        color: #fff;
    }

    .SYN-ico-close {
        width: 96%;
        padding: 6px;
        margin: 6px auto;
        height: auto;
    }

    .SYN-ico-expand {
        width: 96%;
        padding: 6px;
        margin: 6px auto;
        height: auto;
    }

    .SYN-inn-row {
        width: 96%;
        padding: 5px;
        margin: 4px auto;
    }

    .SYN-sub-title {
        font-weight: 500;
        font-size: 14px;
    }

    .SYN-white-text {
        font-weight: 500;
        font-size: 16px;
        color: #fff;
    }

    .SYN-main-title {
        font-weight: 500;
        font-size: 16px;
        padding: 16px 0;
    }

    /* .k-button {
        border-color: #353535;
        color: #fff;
        background-color: #353535;
    }*/



    .div-time-entry {
        border: 1px solid silver;
        border-radius: 5px;
    }
</style>

<script>

    $(document).ready(function () {

        getData();
        getData1();

        $("#PredecessorType").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
			value: "@Model.PredecessorType",
            filter: "contains",
            change: onTypeChange,
            dataSource: {
                transport: {
                        read: {
                            url: "/Home/GetEnumIdNameList?enumType=NtsTypeEnum",
                        }
                }
            }
        });

        $("#PrecedenceRelationshipType").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
			value: "@Model.PrecedenceRelationshipType",
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/Home/GetEnumIdNameList?enumType=PrecedenceRelationshipTypeEnum",
                    }
                }
            }
        });
    });

    var columnDefs = [

        { headerName: "Name", field: "PredecessorsName", },
        { headerName: "Task No", field: "TaskNo" },
        { headerName: "Predecessor Type", field: "PredecessorType" },
        { headerName: "Precedence Relationship Type", field: "PrecedenceRelationshipType" },
        {
            field: "Id", headerName: "Action",
            cellRenderer: params => {
                if (params.data.Id != null) {
                    return "<i class='fa fa-trash' title='Delete' onclick='onDeleteEntry(\"" + params.data.Id + "\");'></i>";
                }
            }
        },
    ];

    function getData() {
        var tId = '@Model.NtsTaskId';
        document.getElementById("kgdPredecessors").innerHTML = "";
        gridConfig(
            "kgdPredecessors",
            "/Cms/ReadTaskPrecedenceEntriesData?taskId=" + tId,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    var columnDefs1 = [

        { headerName: "Name", field: "PredecessorsName", },
        { headerName: "Task No", field: "TaskNo" },
        { headerName: "Predecessor Type", field: "PredecessorType" },
        { headerName: "Precedence Relationship Type", field: "PrecedenceRelationshipType" },
        {
            field: "Id", headerName: "Action",
            cellRenderer: params => {
                if (params.data.Id != null) {
                    return "<i class='fa fa-trash' title='Delete' onclick='onDeleteEntry(\"" + params.data.Id + "\");'></i>";
                }
            }
        },
    ];

    function getData1() {
        var tId = '@Model.NtsTaskId';
        document.getElementById("kgdSuccessors").innerHTML = "";
        gridConfig(
            "kgdSuccessors",
            "/Cms/ReadTaskSuccessorsEntriesData?taskId=" + tId,
            columnDefs1,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>


<form asp-controller="Cms" asp-action="ManageTaskPrecedence" asp-area="" method="post" class="form-horizontal" id="frmTaskTimeEntry"
      data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
      data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
      data-ajax="true" data-ajax-method="POST">
    <div id="validation-summary" class="text-danger" asp-validation-summary="All"></div>
    <div class="p-3">
        <div id="div-add-time">
            <button type="button" id="addPrecedence" class="btn btn-primary" onclick="onShowPrecedence()">Add Precedence</button>
        </div>
        <div class="row  div-time-entry ml-0 mr-0" id="PrecedenceDiv" style="display:none;">
            <div class="form-group col-10">
                <label class="col-form-label">
                    Type
                </label>
                <div>
                    @*@(Html.Kendo().DropDownListFor(x => x.PredecessorType)
                           .DataSource(source =>
                                   {
                                       source.Read(read =>
                                       {
                                           read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "NtsTypeEnum" });
                                       });
                                   })
                        .DataTextField("Name")
                        .DataValueField("Id")
                        .Events(x=>x.Change("onTypeChange"))
                           .Filter(FilterType.Contains)
                           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)

                           .HtmlAttributes(new { @class = "form-control" })
                            )*@
                    <input asp-for="PredecessorType" id="PredecessorType" class="form-control" />

                </div>
            </div>

            <div class="form-group col-10">
                <label class="col-form-label">
                    Predecessors
                </label>
                <div>
                    @*@(Html.Kendo().MultiSelectFor(x => x.PredecessorsIds)
                           .DataSource(source =>
                                   {
                                       source.Read(read =>
                                       {
                                           read.Action("GetPredecessorList", "cms", new { @area = "" }).Data("FilterPredecessor");
                                       });
                                   })
                           .AutoBind(false)

                        .DataTextField("Name")
                        .DataValueField("Id")
                           .Filter(FilterType.Contains)
                           .Placeholder(ApplicationConstant.PlaceHolder_SelectOption)

                           .HtmlAttributes(new { @class = "form-control" })
                            )*@

                    <select asp-for="PredecessorsIds" id="PredecessorsIds" style="width:80%"></select>
                </div>
            </div>
            <div class="form-group col-10">
                <label class="col-form-label">
                    Relation
                </label>
                <div>
                    @*@(Html.Kendo().DropDownListFor(x => x.PrecedenceRelationshipType)
                           .DataSource(source =>
                                   {
                                       source.Read(read =>
                                       {
                                           read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "PrecedenceRelationshipTypeEnum" });
                                       });
                                   })
                        .DataTextField("Name")
                        .DataValueField("Id")
                           .Filter(FilterType.Contains)
                           .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)

                           .HtmlAttributes(new { @class = "form-control" })
                            )*@
                    <input asp-for="PrecedenceRelationshipType" id="PrecedenceRelationshipType" class="form-control" />

                </div>
            </div>





            <div class="form-group col-12" style="text-align: right;">
                <button type="submit" class="btn btn-primary" onclick="OnSubmit(event);">Save</button>
                <button type="button" class="btn btn-light" onclick="onHidePrecedence()">Cancel</button>
            </div>
            @Html.HiddenFor(x => x.NtsTaskId)
            @Html.HiddenFor(x => x.DataAction)
        </div>

        <div class="pt-3">
            <h5>
                Task Predecessors
            </h5>
            <div id="kgdPredecessors" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

            @*@(Html.Kendo().Grid<NtsTaskPrecedenceViewModel>()
                    .Name("kgdPredecessors")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.PredecessorsName).Title("Name").Width(200);
                        columns.Bound(p => p.TaskNo).Width(160);
                        columns.Bound(p => p.PredecessorType).Width(160);
                        columns.Bound(p => p.PrecedenceRelationshipType).Width(150);

                        columns.Command(command =>
                        {
                            command.Custom("deleteEntry").Text("<i class='fa fa-trash' title='Delete'></i>").Click("onDeleteEntry").HtmlAttributes(new { @class = "action-icon" });
                        }).Width(50).Title("Action");

                    })
                    //.ColumnMenu(col=>col.Filterable(false))
                    .Height(400)
                    .Editable()
                    .Pageable()
                    .Sortable()
                    .Navigatable()
                    .Resizable(r=>r.Columns(true))
                    .Reorderable(r => r.Columns(true))
                    //.Groupable(g=>g.ShowFooter(false))
                    //.Filterable()
                    .Scrollable()
                    //.Events(events => events.DataBound("onDataBound"))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .PageSize(20)
                        .AutoSync(true)
                        .ServerOperation(false)
                        .Model(model =>
                        {
                            model.Id(p => p.Id);

                        })
                        .Read("ReadTaskPrecedenceEntriesData", "Cms", new { @area = "", taskId = Model.NtsTaskId })


                    )
                )*@
        </div>
        <div class="pt-3">
            <h5>
                Task Successors
            </h5>
            <div id="kgdSuccessors" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

            @*@(Html.Kendo().Grid<NtsTaskPrecedenceViewModel>()
                    .Name("kgdSuccessors")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.PredecessorsName).Title("Name").Width(200);
                        columns.Bound(p => p.TaskNo).Width(160);
                        columns.Bound(p => p.PredecessorType).Width(160);
                        columns.Bound(p => p.PrecedenceRelationshipType).Width(150);

                        columns.Command(command =>
                        {
                            command.Custom("deleteEntry").Text("<i class='fa fa-trash' title='Delete'></i>").Click("onDeleteEntry").HtmlAttributes(new { @class = "action-icon" });
                        }).Width(50).Title("Action");

                    })
                    //.ColumnMenu(col=>col.Filterable(false))
                    .Height(400)
                    .Editable()
                    .Pageable()
                    .Sortable()
                    .Navigatable()
                    .Resizable(r=>r.Columns(true))
                    .Reorderable(r => r.Columns(true))
                    //.Groupable(g=>g.ShowFooter(false))
                    //.Filterable()
                    .Scrollable()
                    //.Events(events => events.DataBound("onDataBound"))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .PageSize(20)
                        .AutoSync(true)
                        .ServerOperation(false)
                        .Model(model =>
                        {
                            model.Id(p => p.Id);

                        })
                        .Read("ReadTaskSuccessorsEntriesData", "Cms", new { @area = "", taskId = Model.NtsTaskId })


                    )
                )*@
        </div>
    </div>
</form>
<script type="text/javascript">
    function FilterPredecessor()
    {
        return {
            Id: '@Model.NtsTaskId',
            type: $("#PredecessorType").data("kendoDropDownList").value()
        }
    }
    function onTypeChange(e)
    {
        var search = FilterPredecessor();
        $("#PredecessorsIds").data("kendoMultiSelect").dataSource.read(search);
    }
    $(document).ready(function () {
        Id = '@Model.NtsTaskId';
        type = $("#PredecessorType").data("kendoDropDownList").value();
        $("#PredecessorsIds").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Id",
            dataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/cms/GetPredecessorList?Id="+Id+ "&type=" +type,
                        dataType: "json"
                    }
                },
            }),
            autoClose: false,
            placeholder: "Select ...",
            value: @Html.Raw(JsonConvert.SerializeObject(Model.PredecessorsIds)),
            valuePrimitive: true,
            serverFiltering: true,
            filter: '@FilterType.Contains',
        });






    });
     var onAjaxSuccess = function (res) {

        if (res.success) {

            ShowNotification("Saved Successfully", "success");
            //$("#kgdSuccessors").data("kendoGrid").dataSource.read();
            //$("#kgdPredecessors").data("kendoGrid").dataSource.read();
            getData();
            getData1();
            $("#PredecessorType").data("kendoDropDownList").value('');
            $("#PredecessorsIds").data("kendoMultiSelect").value([]);
            $("#PrecedenceRelationshipType").data("kendoDropDownList").value('');
            onHidePrecedence();
        }
        else {
            showError(res.error);
        }
    };
    function OnSubmit(e)
    {

        var PredecessorType = $("#PredecessorType").data("kendoDropDownList").value()
        if (PredecessorType == '' || PredecessorType == null || PredecessorType == undefined) {
            $("#validation-summary").removeClass("validation-summary-valid");
            $("#validation-summary").addClass("validation-summary-errors");
            $("#validation-summary").html(" Type is required");
            e.preventDefault();
            return false;
        }
        var predecessor = $("#PredecessorsIds").data("kendoMultiSelect").value();
        if (predecessor.length==0)
        {
            $("#validation-summary").removeClass("validation-summary-valid");
            $("#validation-summary").addClass("validation-summary-errors");
            $("#validation-summary").html(" Predecessors are required");
            e.preventDefault();
            return false;
        }
        var PrecedenceRelationshipType = $("#PrecedenceRelationshipType").data("kendoDropDownList").value()
        if (PrecedenceRelationshipType == '' || PrecedenceRelationshipType == null || PrecedenceRelationshipType == undefined) {
            $("#validation-summary").removeClass("validation-summary-valid");
            $("#validation-summary").addClass("validation-summary-errors");
            $("#validation-summary").html(" Relation is required");
            e.preventDefault();
            return false;
        }
        //e.preventDefault();
    }
    var showError = function (error) {

        //#validation-summary-manageform
        $("#validation-summary").html(error);
        $("#validation-summary").css("display", "block")
    }
    function onDeleteEntry(Id) {

        var flag = confirm('Are you sure you want to delete the selected entry?');
        if (flag) {
            $.ajax({
                type: "POST",
                url: '/cms/DeleteTaskPrecedence',
                data: { id: Id },
                success: function (data) {
                    getData();
                    getData1();
                    kendo.alert("Entry Deleted Successfully");
                },
                dataType: "json",
            });
        }

        return false;
    }
    //function onDeleteEntry(e) {
    //    e.preventDefault();
    //    var dataItem = this.dataItem($(e.currentTarget).closest("tr"))ApplicationConstant
    //    var flag = confirm('Are you sure you want to delete the selected entry?');
    //    if (flag) {
    //        $.ajax({
    //            type: "POST",
    //            url: '/cms/DeleteTaskPrecedence',
    //            data: { id: dataItem.id },
    //            success: function (data) {
    //                $("#kgdSuccessors").data("kendoGrid").dataSource.read();
    //                $("#kgdPredecessors").data("kendoGrid").dataSource.read();
    //                kendo.alert("Entry Deleted Successfully");
    //            },
    //            dataType: "json",
    //        });
    //    }

    //    return false;
    //}
    function OnStartDateDueDateChange() {
        var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        var ed = kendo.toString($("#EndDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        if (new Date(ed) > new Date(sd)) {
            var sec = GetSLAInSeconds(sd, ed);
            $('#Duration').data('durationPicker').setValue(sec);
        }
    }
    function GetSLAInSeconds(startDate, endDate) {
        var query = "startDate=" + startDate + "&endDate=" + endDate;
        var diff = window.parent.UtilityAjax("GetSLAInSeconds", query);
        return diff;
    }
    function GetAddSeconds(startDate, seconds) {
        var query = "date=" + startDate + "&seconds=" + seconds;
        var diff = window.parent.UtilityAjax("AddSeconds", query);
        return diff;
    }
    (function ($) {
        $('#Duration').durationPicker({
            showSeconds: false,
            onChanged: function (newVal, init) {
                if (!init) {
                    var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
                    var ed = GetAddSeconds(sd, newVal);
                    var f = new Date(ed);
                    console.log(f);
                    $("#EndDate").data("kendoDateTimePicker").value(f)
                }

            }
        });
    })(jQuery);
    function onShowPrecedence() {
        $("#addPrecedence").hide('slow');
        $("#PrecedenceDiv").show('slow');
    }
    function onHidePrecedence() {

        $("#addPrecedence").show('slow');
        $("#PrecedenceDiv").hide('slow');
    }
</script>
