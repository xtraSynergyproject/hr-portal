@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@{
    Layout = null;
}
@model TaskIndexPageTemplateViewModel;
<script>
     function OnCreate() {
            var id = '@Model.Page.Id';
            var type = '@Model.Page.PageType.ToString()';
            var source = '@RequestSourceEnum.Create.ToString()';
            var action = '@DataActionEnum.Create.ToString()';
            LoadPageById(id, type, source, action);
            return false;
        }
        function OnEdit(e) {
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var id = '@Model.Page.Id';
            var type = '@Model.Page.PageType.ToString()';
            var source = '@RequestSourceEnum.Edit.ToString()';
            var action = '@RequestSourceEnum.Edit.ToString()';
            LoadPageById(id, type, source, action, dataItem.Id);
            return false;
        }
        function OnDelete(e) {
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var id = '@Model.Page.Id';
            var type = '@Model.Page.PageType.ToString()';
            var source = '@RequestSourceEnum.Delete.ToString()';
            var action = '@RequestSourceEnum.Delete.ToString()';
            LoadPageById(id, type, source, action, dataItem.Id);
            return false;
        }
</script>
<div class="row pad-15">
    <div>
        <h4>@Model.Page.Title</h4>
    </div>
    <div>
        @*@(Html.Kendo().Grid<dynamic>
    ()
    .Name("kgridIndex")
    .Columns(columns =>
    {
        columns.Bound("Id").Visible(false);
        var c = columns.Command(command =>
        {
            if (Model.EnableEditButton)
            {
                command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEdit").HtmlAttributes(new { @class = "action-icon" });
            }
            if (Model.EnableDeleteButton)
            {
                command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon" });
            }
        }).Width(120);
        foreach (var column in Model.SelectedTableRows)
        {

            columns.Bound(column.ColumnName);

        }

    })

    .ToolBar(toolbar =>
    {
        if (Model.EnableCreateButton)
        {
            toolbar.ClientTemplate($"<button type='button' class='btn btn-primary' onclick='OnCreate();'><i class='fa fas fa-plus'></i>&nbsp;{Model.CreateButtonText.ToDefaultCreateButtonText()}</button>");
        }
    })
    //.Events(e => e.DataBound(string.Concat("OnDataBound_", Model.FieldName)))
    .Scrollable(x => x.Enabled(true))
    .Sortable(srt => srt.Enabled(true))
    .Selectable(select => select.Enabled(false))
    .Filterable(f => f.Extra(false))
    .Pageable(pageable => pageable
    .Refresh(true)

    .PageSizes(true)
    .ButtonCount(5))
    //.AutoBind(true)
    .DataSource(
    dataSource => dataSource
    .Ajax()
    .PageSize(10)

    //.Events(events => events.Error("OnError"))
    .Read(read => read.Action("LoadIndexPageGrid", "Home", new { indexPageTemplateId = Model.Id }))
    //.Model(model => model.Id(p => p.Id))

    )

    )*@
    </div>
</div>

