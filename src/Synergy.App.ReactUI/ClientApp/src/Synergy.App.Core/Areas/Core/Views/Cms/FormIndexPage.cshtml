@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@*@using Kendo.Mvc.UI;*@
@{
    Layout = ViewBag.Layout;
}
@model FormIndexPageTemplateViewModel;
<style>
    .form-drp.show {
        display: block !important;
    }
</style>
<script>
    function ReloadIndexPage(res) {

        var id = '@Model.Page.Id';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.Main.ToString()';
        var action = '@DataActionEnum.Read.ToString()';
        LoadPageById(id, type, source, action);
    }
    function OnCreate() {
        var tcode = '@Model.Page.TemplateCodes';
        var id = '@Model.Page.Id';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.Create.ToString()';
        var action = '@DataActionEnum.Create.ToString()';
        LoadPageById(id, type, source, action, null, true, 1200, 600, 'Create @Model.PageTitle', 'ReloadIndexPage', null, tcode);
        return false;
    }
    function OnEdit(fromId) {
        var tcode = '@Model.Page.TemplateCodes';
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var id = '@Model.Page.Id';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.Edit.ToString()';
        var action = '@RequestSourceEnum.Edit.ToString()';
        LoadPageById(id, type, source, action, fromId, true, 1200, 600, 'Edit @Model.PageTitle', 'ReloadIndexPage', null, tcode);
        return false;
    }
    var deleteEvent = null;
    function OnDelete(id) {
        if ('@Model.EnableDeleteConfirmation' === 'True') {
            deleteEvent = id;
            $('#confirmDeleteModal').modal('show');

        }
        else {
            DeleteItem(id);
        }

    }
    function DeleteItem(parmId) {

        var tcode = '@Model.Page.TemplateCodes';
        var id = '@Model.Page.Id';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.Post.ToString()';
        var action = '@RequestSourceEnum.Delete.ToString()';
        LoadPageById(id, type, source, action, parmId, false, 1200, 600, 'Delete @Model.PageTitle', 'ReloadIndexPage', null, tcode);
        return false;
    }
    function ConfirmDelete() {
        $('#confirmDeleteModal').modal('hide');
        DeleteItem(deleteEvent);
    }
</script>
<div class="row no-gutters p-3">
    <div class="pb-3">
        <h4>@Model.Page.Template.DisplayName</h4>
    </div>
    <div style="width:100%">
        <script>
            function dateFormatter(params) {
                return '123';
                var dateAsString = params.data.date;
                alert(dateAsString);
                var dateParts = dateAsString.split('/');
                return `${dateParts[0]}.${dateParts[1]}.${dateParts[2]}`;
            }

            var columnDefs = [

            @foreach (var item in Model.SelectedTableRows)
            {
                if (item.ColumnMetadata.DataType == DataColumnTypeEnum.Integer)
                {
                    @:{ field: '@item.ColumnName', headerName: '@item.HeaderName', cellClass: 'ag-right-aligned-cell' },
                }
                else if (item.ColumnMetadata.DataType == DataColumnTypeEnum.DateTime)
                {
                    @:{ field: '@item.ColumnName', headerName: '@item.HeaderName',cellRenderer: params => { return moment(params.value).format('@ApplicationConstant.DateAndTime.DefaultJqueryDateFormatForMoment');} },
                }
                else
                {
                    @:{ field: '@item.ColumnName', headerName: '@item.HeaderName' },
                }
            },
                {
                    headerName: "Actions",
                    initialWidth: 90,
                    field: "Id",
                    cellRenderer: params => {
                        if ("@Model.EnableEditButton" == "True" || "@Model.EnableDeleteButton" == "True") {
                            return "<div class='btn-group grid-menu' id='tree-menuBinTableData' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\"><i class='fas fa-ellipsis-v'></i></div>"
                        }
                        return "";
                    }
                },
            ];
            console.log(columnDefs);
            $(function () {
                GetData_kgrid();
                $.contextMenu({
                    selector: '#tree-menuBinTableData',
                    trigger: 'left',
                    build: function ($trigger, e) {
                        var id = $trigger.data('idvalue');
                        switch (0) {
                            case 0:
                                return {
                                    callback: function (key, options) {
                                        switch (key) {
                                            case 'edit':
                                                OnEdit(id);
                                                break;
                                            case 'delete':
                                                OnDelete(id);
                                                break;
                                            default:
                                        }
                                    },
                                    items: {
            @if (Model.EnableEditButton)
            {
                @:"edit": { name: "Edit", icon: "fas fa-edit" },
            }
            @if (Model.EnableEditButton)
            {
                @:"delete": { name: "Delete", icon: "fas fa-trash" },
            }
                                                            }
                    };


                }
                                            }
                                        });
                                    });

            function GetData_kgrid() {
                document.getElementById("kgridIndex").innerHTML = "";
                var p = 'indexPageTemplateId=@Model.Id';
                gridConfig(
                    "kgridIndex",
                    "/cms/LoadFormIndexPageGrid?" + p,
                    columnDefs,
                    false,
                    true,
                    true,
                    true,
                    1,
                    true,
                    10);
            }
            function onDownLoadSampleFile() {
                location.href = '@Url.Action("DownloadSampleFile", "Template", new { @area= "Cms" })?TemplateId=@Model.TemplateId';
            }
            function onDownLoadTemplateFile() {
                location.href = '@Url.Action("DownloadTemplateDataFile", "Template", new { @area= "Cms" })?TemplateId=@Model.TemplateId';
            }
            function UploadTemplate() {

                var win = GetMainWindow();
                win.iframeOpenUrl = '@Url.Action("UploadTemplate", "Template", new { @area= "Cms" })?TemplateId=@Model.TemplateId';
                win.OpenWindow({ Title: 'Upload Template', Width: 450, Height: 550 });

            }
            function datefun(d) {
                alert(d);

                alert(d.getDate());
                alert(d.getMonth());
                alert(d.getFullYear());
                alert(d.getHours());
                alert(d.getMinutes());
                var h = addZero(d.getHours());
                var m = addZero(d.getMinutes());
                alert(h + ":" + m);

                return d.getDate() + "." + (d.getMonth() + 1) + "." + d.getFullYear() + " " + h + ":" + m;
            }

            function addZero(i) {
                if (i < 10) { i = "0" + i }
                alert(i);
                return i;
            }
        </script>

        @if (Model.EnableCreateButton)
        {
            <button type='button' class='btn btn-primary' onclick='OnCreate();'><i class='fa fas fa-plus'></i>&nbsp;@Model.CreateButtonText.ToDefaultCreateButtonText()</button>
        }
        <div class="btn-group" style="float:right;">
            <button type="button" class="btn btn-dark dropdown-toggle" data-toggle="dropdown" data-target=".btn-group" aria-haspopup="true" aria-expanded="false">
                Import/Export
            </button>
            <div class="dropdown-menu form-drp">
                <a class="dropdown-item" href="javascript:onDownLoadSampleFile();">Download Template</a>
                <a class="dropdown-item" href="javascript:onDownLoadTemplateFile();">Download Data</a>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" href="javascript:UploadTemplate();">Upload Template</a>
            </div>
        </div>
        <div id="kgridIndex" style="width: 100%;height:550px" class="ag-theme-alpine pt-2"></div>
    </div>
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title" id="exampleModalLabel">Confirm Delete</h6>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">@Model.DeleteConfirmationMessage</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">@SharedResource["No"]</button>
                    <button class="btn btn-primary" type="button" onclick="ConfirmDelete();">@SharedResource["YesProceed"]</button>
                </div>
            </div>
        </div>
    </div>
</div>

