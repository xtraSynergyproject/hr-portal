@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@{
    ViewData["Title"] = "Portal";
    Layout = ViewBag.Layout;// null;
    //Layout = "~/Areas/Core/Views/Shared/_PopupLayout.cshtml";
}
@inject Synergy.App.Common.IUserContext _userContext
@model StepTaskComponentViewModel
    <link rel="stylesheet" href="~/lib/duration-picker/dist/jquery-duration-picker.min.css">
    <script src="~/lib/duration-picker/dist/jquery-duration-picker.min.js"></script>
    <style>
        .cms-slidebar-footer {
            position:relative;
        }
            .modal-backdrop {
                position: fixed;
                top: 0;
                left: 0;
                z-index: 99;
                width: 100vw;
                height: 100vh;
                background-color: #000;
            }
            /* .modal-backdrop.show {
            opacity: 0;
        }*/
            .form-label-group {
                position: relative;
                margin-bottom: 0px;
            }

            .cms-manageportal-footer {
                /*        position: absolute;*/
                left: 0;
                bottom: 0;
                padding: 10px;
                padding-right: 20px;
                width: 100%;
                background-color: #F8F8F8 !important;
                color: white;
                text-align: right;
            }

            .slidenav-flow {
                overflow-x: hidden;
                overflow-y: auto !important;
                height: 75%;
            }

            .style-myiconimage {
                /*border-radius: 50%;*/
                height: 100px;
                width: 100px;
            }

            .style-mybgimage {
                /*border-radius: 50%;*/
                height: 100px;
                width: 100px;
            }

            .style-mybannerimage {
                /*border-radius: 50%;*/
                height: 100px;
                width: 100px;
            }

            .style-image {
                width: 30%;
                float: left;
            }

            .style-upload {
                width: 70%;
                float: left;
            }

            .style-pickerleft {
                width: 50%;
                float: left;
                padding-bottom: 15px;
            }
            /*    k-colorpicker {
            width: 100px;
        }

        .k-colorpicker .k-selected-color {
                width: 100px;
        }*/

    </style>
    <script type="text/javascript">


        var tasktemplateid = null;
        var tempSavedRecords = null;

    //function OnEditUDF(e)
    //{
    //    var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
    //    $('#udfId').val(dataItem.Id);
    //    $('#UdfName').val(dataItem.Name);
    //    $('#EditableContext').data("kendoMultiSelect").value(dataItem.EditableContext);
    //    $('#ViewableContext').data("kendoMultiSelect").value(dataItem.ViewableContext);
    //    $('#ViewableBy').data("kendoMultiSelect").value(dataItem.ViewableBy);
    //    $('#EditableBy').data("kendoMultiSelect").value(dataItem.EditableBy);
    //}

    function OnEditUDF1(data) {

            $('#udfId').val(data.Id);
            $('#UdfName').val(data.Name);
            var select1 = $("#EditableContext").data("kendoMultiSelect");
            select1.value(data.EditableContext);
            var select2 = $("#ViewableContext").data("kendoMultiSelect");
            select2.value(data.ViewableContext);
            var select3 = $("#ViewableBy").data("kendoMultiSelect");
            select3.value(data.ViewableBy);
            var select4 = $("#EditableBy").data("kendoMultiSelect");
            select4.value(data.EditableBy);
            $('#myModal').modal('show');
        }

    //function OnBulkUpdate() {
    //        var udfs = '';
    //        var grid = $("#kgridUDFS").data("kendoGrid");
    //        grid.tbody.find("input:checked").closest("tr").each(function (index) {
    //            udfs = udfs + grid.dataItem(this).Id + ',';
    //            //alert(grid.dataItem(this).Id);
    //        });
    //        if (udfs == '' || udfs == ',') {
    //            kendo.alert("Please Select atleast one item from the list");
    //        }
    //        else {
    //
    //            grid.tbody.find("input:checked").closest("tr").each(function (index) {
    //                $('#EditableContext1').data("kendoMultiSelect").value(grid.dataItem(this).EditableContext);
    //                $('#ViewableContext1').data("kendoMultiSelect").value(grid.dataItem(this).ViewableContext);
    //                $('#ViewableBy1').data("kendoMultiSelect").value(grid.dataItem(this).ViewableBy);
    //                $('#EditableBy1').data("kendoMultiSelect").value(grid.dataItem(this).EditableBy);
    //            });
    //            var modal = document.getElementById("bulkUpdateModal");
    //            modal.style.display = "block";

    //        }
    //}

    function OnBulkUpdate1() {

        var udfs = '';
        var grid = $("#kgridUDFS1").data("JSGrid");

       

        for (var i = 0; i < grid.data.length; i++) {
            if (grid.data[i].Select == true) {
                udfs = udfs + grid.data[i].Id + ',';
            }
        }

        //var grid = $("#kgridUDFS").data("kendoGrid");
        //grid.tbody.find("input:checked").closest("tr").each(function (index) {
        //      udfs = udfs + grid.dataItem(this).Id + ',';
        //      //alert(grid.dataItem(this).Id);
        //});

        if (udfs == '' || udfs == ',') {
            kendo.alert("Please Select atleast one item from the list");
        }
        else {

            $('#EditableContext1').data("kendoMultiSelect").value(grid.data[0].EditableContext);
            $('#ViewableContext1').data("kendoMultiSelect").value(grid.data[0].ViewableContext);
            $('#ViewableBy1').data("kendoMultiSelect").value(grid.data[0].ViewableBy);
            $('#EditableBy1').data("kendoMultiSelect").value(grid.data[0].EditableBy);

            var modal = document.getElementById("bulkUpdateModal");
            modal.style.display = "block";
        }
    }

    function CloseModal() {
        var modal = document.getElementById("bulkUpdateModal");
        modal.style.display = "none";
    }

    //function OnSaveUdf(e)
    //{
    //    var grid = $("#kgridUDFS").data("kendoGrid");
    //    var griddata = grid.dataSource.data();
    //    for (var i = 0; i < griddata.length; i++)
    //    {
    //        if (griddata[i].Id == $('#udfId').val())
    //        {
    //            griddata[i].Name = $('#UdfName').val();
    //            griddata[i].EditableContext = $('#EditableContext').data("kendoMultiSelect").value();
    //            griddata[i].EditableBy = $('#EditableBy').data("kendoMultiSelect").value();
    //            griddata[i].ViewableContext = $('#ViewableContext').data("kendoMultiSelect").value();
    //            griddata[i].ViewableBy = $('#ViewableBy').data("kendoMultiSelect").value();
    //            var multi1 = $("#EditableContext").getKendoMultiSelect(),
    //                multiDataItems1 = multi1.dataItems(),
    //                selectedProducts1 = [];

    //            for (var k = 0; k < multiDataItems1.length; k += 1) {
    //                var currentProduct = multiDataItems1[k];

    //                selectedProducts1.push(
    //                   currentProduct.Name
    //                )
    //            }
    //            griddata[i].EditableContextDisplay = selectedProducts1.join(",");
    //            var multi2 = $("#EditableBy").getKendoMultiSelect(),
    //                multiDataItems2 = multi2.dataItems(),
    //                selectedProducts2 = [];

    //            for (var k = 0; k < multiDataItems2.length; k += 1) {
    //                var currentProduct = multiDataItems2[k];

    //                selectedProducts2.push(
    //                    currentProduct.Name
    //                )
    //            }
    //            griddata[i].EditableByDisplay = selectedProducts2.join(",");
    //            var multi3 = $("#ViewableContext").getKendoMultiSelect(),
    //                multiDataItems3 = multi3.dataItems(),
    //                selectedProducts3 = [];

    //            for (var k = 0; k < multiDataItems3.length; k += 1) {
    //                var currentProduct = multiDataItems3[k];

    //                selectedProducts3.push(
    //                    currentProduct.Name
    //                )
    //            }
    //            griddata[i].ViewableContextDisplay = selectedProducts3.join(",");
    //            var multi4 = $("#ViewableBy").getKendoMultiSelect(),
    //                multiDataIServiceTemplateIderviceTemplateIdems4 = multi4.dataItems(),
    //                selectedProducts4 = [];

    //            for (var k = 0; k < multiDataItems4.length; k += 1) {
    //                var currentProduct = multiDataItems4[k];

    //                selectedProducts4.push(
    //                    currentProduct.Name
    //                )
    //            }
    //            griddata[i].ViewableByDisplay = selectedProducts4.join(",");
    //        }
    //    }
    //    grid.refresh();
    //    $('#myModal').modal('toggle');

    //    }

    //update jsgrid

        function OnSaveUdf1(e) {

            //var grid = $("#kgridUDFS").data("kendoGrid");
            var grid = $("#kgridUDFS1").data("JSGrid");

            //for (var i = 0; i < grid.data.length; i++) {
            //    if (grid.data[i].Select == true) {
            //        udfs = udfs + grid.data[i].Id + ',';
            //    }
            //}
            //var griddata = grid.data();
            for (var i = 0; i < grid.data.length; i++) {
                if (grid.data[i].Id == $('#udfId').val()) {
                    grid.data[i].Name = $('#UdfName').val();
                    grid.data[i].EditableContext = $('#EditableContext').data("kendoMultiSelect").value();
                    grid.data[i].EditableBy = $('#EditableBy').data("kendoMultiSelect").value();
                    grid.data[i].ViewableContext = $('#ViewableContext').data("kendoMultiSelect").value();
                    grid.data[i].ViewableBy = $('#ViewableBy').data("kendoMultiSelect").value();
                    var multi1 = $("#EditableContext").getKendoMultiSelect(),
                        multiDataItems1 = multi1.dataItems(),
                        selectedProducts1 = [];

                    for (var k = 0; k < multiDataItems1.length; k += 1) {
                        var currentProduct = multiDataItems1[k];

                        selectedProducts1.push(
                            currentProduct.Name
                        )
                    }
                    grid.data[i].EditableContextDisplay = selectedProducts1.join(",");
                    var multi2 = $("#EditableBy").getKendoMultiSelect(),
                        multiDataItems2 = TaskTemplateIdmulti2.dataItems(),
                        selectedProducts2 = [];

                    for (var k = 0; k < multiDataItems2.length; k += 1) {
                        var currentProduct = multiDataItems2[k];

                        selectedProducts2.push(
                            currentProduct.Name
                        )
                    }
                    grid.data[i].EditableByDisplay = selectedProducts2.join(",");
                    var multi3 = $("#ViewableContext").getKendoMultiSelect(),
                        multiDataItems3 = multi3.dataItems(),
                        selectedProducts3 = [];

                    for (var k = 0; k < multiDataItems3.length; k += 1) {
                        var currentProduct = multiDataItems3[k];

                        selectedProducts3.push(
                            currentProduct.Name
                        )
                    }
                    grid.data[i].ViewableContextDisplay = selectedProducts3.join(",");
                    var multi4 = $("#ViewableBy").getKendoMultiSelect(),
                        multiDataItems4 = multi4.dataItems(),
                        selectedProducts4 = [];

                    for (var k = 0; k < multiDataItems4.length; k += 1) {
                        var currentProduct = multiDataItems4[k];

                        selectedProducts4.push(
                            currentProduct.Name
                        )
                    }
                    grid.data[i].ViewableByDisplay = selectedProducts4.join(",");
                }
            }
            //grid.refresh();
            $("#kgridUDFS1").jsGrid("refresh");
            $('#myModal').modal('toggle');

        }


    //function OnSaveBulkUdf(e) {

    //    var udfs = '';

    //    var grid = $("#kgridUDFS").data("JSGrid");
    //    grid.updateItem();
    //    for (var i = 0; i < grid.data.length; i++) {
    //        if (grid.data[i].Select == true) {
    //            udfs = udfs + grid.data[i].Id + ',';
    //        }
    //    }

    //        //var grid = $("#kgridUDFS").data("kendoGrid");
    //        //grid.tbody.find("input:checked").closest("tr").each(function (index) {
    //        //    udfs = udfs + grid.dataItem(this).Id + ',';
    //        //    //alert(grid.dataItem(this).Id);
    //        //});

    //        var ids = udfs.split(",");

    //        var grid = $("#kgridUDFS").data("kendoGrid");
    //        var griddata = grid.dataSource.data();
    //        for (var i = 0; i < griddata.length; i++) {
    //            for (var j = 0; j < ids.length; j++) {

    //                if (griddata[i].Id == ids[j]) {
    //                    //griddata[i].Name = $('#UdfName').val();
    //                    griddata[i].EditableContext = $('#EditableContext1').data("kendoMultiSelect").value();
    //                    griddata[i].EditableBy = $('#EditableBy1').data("kendoMultiSelect").value();
    //                    griddata[i].ViewableContext = $('#ViewableContext1').data("kendoMultiSelect").value();
    //                    griddata[i].ViewableBy = $('#ViewableBy1').data("kendoMultiSelect").value();
    //                    var multi1 = $("#EditableContext1").getKendoMultiSelect(),
    //                        multiDataItems1 = multi1.dataItems(),
    //                        selectedProducts1 = [];

    //                    for (var k = 0; k < multiDataItems1.length; k += 1) {
    //                        var currentProduct = multiDataItems1[k];

    //                        selectedProducts1.push(
    //                            currentProduct.Name
    //                        )
    //                    }
    //                    griddata[i].EditableContextDisplay = selectedProducts1.join(",");
    //                    var multi2 = $("#EditableBy1").getKendoMultiSelect(),
    //                        multiDataItems2 = multi2.dataItems(),
    //                        selectedProducts2 = [];

    //                    for (var k = 0; k < multiDataItems2.length; k += 1) {
    //                        var currentProduct = multiDataItems2[k];

    //                        selectedProducts2.push(
    //                            currentProduct.Name
    //                        )
    //                    }
    //                    griddata[i].EditableByDisplay = selectedProducts2.join(",");
    //                    var multi3 = $("#ViewableContext1").getKendoMultiSelect(),
    //                        multiDataItems3 = multi3.dataItems(),
    //                        selectedProducts3 = [];

    //                    for (var k = 0; k < multiDataItems3.length; k += 1) {
    //                        var currentProduct = multiDataItems3[k];

    //                        selectedProducts3.push(
    //                            currentProduct.Name
    //                        )
    //                    }
    //                    griddata[i].ViewableContextDisplay = selectedProducts3.join(",");
    //                    var multi4 = $("#ViewableBy1").getKendoMultiSelect(),
    //                        multiDataItems4 = multi4.dataItems(),
    //                        selectedProducts4 = [];

    //                    for (var k = 0; k < multiDataItems4.length; k += 1) {
    //                        var currentProduct = multiDataItems4[k];

    //                        selectedProducts4.push(
    //                            currentProduct.Name
    //                        )
    //                    }
    //                    griddata[i].ViewableByDisplay = selectedProducts4.join(",");
    //                }
    //            }

    //        }
    //    grid.refresh();
    //    var modal = document.getElementById("bulkUpdateModal");
    //    modal.style.display = "none";
    //    }

//------------------------------------------------
    //Bulk update permission jsgrid

        function OnSaveBulkUdf1(e) {

        var udfs = '';

        var grid = $("#kgridUDFS1").data("JSGrid");

        for (var i = 0; i < grid.data.length; i++) {
            if (grid.data[i].Select == true) {
                udfs = udfs + grid.data[i].Id + ',';
            }
        }

            //var grid = $("#kgridUDFS").data("kendoGrid");
            //grid.tbody.find("input:checked").closest("tr").each(function (index) {
            //    udfs = udfs + grid.dataItem(this).Id + ',';
            //    //alert(grid.dataItem(this).Id);
            //});

            var ids = udfs.split(",");

            //var grid = $("#kgridUDFS").data("kendoGrid");
            //var griddata = grid.dataSource.data();
            for (var i = 0; i < grid.data.length; i++) {
                for (var j = 0; j < ids.length; j++) {

                    if (grid.data[i].Id == ids[j]) {
                        //griddata[i].Name = $('#UdfName').val();
                        grid.data[i].EditableContext = $('#EditableContext1').data("kendoMultiSelect").value();
                        grid.data[i].EditableBy = $('#EditableBy1').data("kendoMultiSelect").value();
                        grid.data[i].ViewableContext = $('#ViewableContext1').data("kendoMultiSelect").value();
                        grid.data[i].ViewableBy = $('#ViewableBy1').data("kendoMultiSelect").value();
                        var multi1 = $("#EditableContext1").getKendoMultiSelect(),
                            multiDataItems1 = multi1.dataItems(),
                            selectedProducts1 = [];

                        for (var k = 0; k < multiDataItems1.length; k += 1) {
                            var currentProduct = multiDataItems1[k];

                            selectedProducts1.push(
                                currentProduct.Name
                            )
                        }
                        grid.data[i].EditableContextDisplay = selectedProducts1.join(",");
                        var multi2 = $("#EditableBy1").getKendoMultiSelect(),
                            multiDataItems2 = multi2.dataItems(),
                            selectedProducts2 = [];

                        for (var k = 0; k < multiDataItems2.length; k += 1) {
                            var currentProduct = multiDataItems2[k];

                            selectedProducts2.push(
                                currentProduct.Name
                            )
                        }
                        grid.data[i].EditableByDisplay = selectedProducts2.join(",");
                        var multi3 = $("#ViewableContext1").getKendoMultiSelect(),
                            multiDataItems3 = multi3.dataItems(),
                            selectedProducts3 = [];

                        for (var k = 0; k < multiDataItems3.length; k += 1) {
                            var currentProduct = multiDataItems3[k];

                            selectedProducts3.push(
                                currentProduct.Name
                            )
                        }
                        grid.data[i].ViewableContextDisplay = selectedProducts3.join(",");
                        var multi4 = $("#ViewableBy1").getKendoMultiSelect(),
                            multiDataItems4 = multi4.dataItems(),
                            selectedProducts4 = [];

                        for (var k = 0; k < multiDataItems4.length; k += 1) {
                            var currentProduct = multiDataItems4[k];

                            selectedProducts4.push(
                                currentProduct.Name
                            )
                        }
                        grid.data[i].ViewableByDisplay = selectedProducts4.join(",");
                    }
                }

            }
        $("#kgridUDFS1").jsGrid("refresh");
        var modal = document.getElementById("bulkUpdateModal");
        modal.style.display = "none";

            for (var i = 0; i < grid.data.length; i++) {
                grid.data[i].Select = false;
            }
    }


    function onClose()
    {
        if ('@Model.IsDiagram' == 'True') {
            var win = GetMainWindow();
            win.CloseWindow({ MethodName: "TemplateChangeCallback", Prms: { TemplateId: $("#ServiceTemplateId").val() } });
        }
        else {
            closeNavCategory();
        }
    }


    var dataitem=$.fn.serializeObject = function () {
     //
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    };

    function OnCancel(args) {

    }

    function closeNavPortal() {

        var win = GetMainWindow();
        win.CloseWindow();
        return false;
        }

   function Filter() {
       //

             var value = $("#AssignedToHierarchyMasterId").val();
        return {
            Id: value

        }


    }


        function getteamowner() {
            var teamId = $("#AssignedToTeamId").data("kendoDropDownList").value();
            $.ajax({
                url: "/cms/user/GetTeamOwnerUser?id=" + teamId ,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    if (data.success) {
                        $("#AssignedToUserId").data("kendoDropDownList").value(data.userId);
                    }

                }
            });
        }

    function onchangetype() {
       // var search = FilterUsers();
       // $("#AssignedToUserId").data("kendoDropDownList").dataSource.read(search);
        assigneToUserDropdown();
        var userId = $("#AssignedToTypeCode").data("kendoDropDownList").value();
        if (userId == "TASK_ASSIGN_TO_USER") {
            $("#AssignedToTeamId").data("kendoDropDownList").value("");
            $("#userid").show();
            $("#teamid").hide();
           // $("#userteamid").hide();
            $("#hmid").hide();
            $("#hmlevelid").hide();
        }
        else if (userId == "TASK_ASSIGN_TO_TEAM") {
            $("#userid").show();
            $("#teamid").show();
           // $("#userteamid").show();
            $("#hmid").hide();
            $("#hmlevelid").hide();
        }
        else if (userId == "TASK_ASSIGN_TO_USER_HIERARCHY") {
            $("#userid").hide();
            $("#teamid").hide();
          //  $("#userteamid").hide();
            $("#hmid").show();
            $("#hmlevelid").show();
        }
        else {
            $("#userid").hide();
            $("#teamid").hide();
          //  $("#userteamid").hide();
            $("#hmid").hide();
            $("#hmlevelid").hide();
        }

    }

    function onchangeteam() {
//var search = FilterUsers();
      //  $("#AssignedToUserId").data("kendoDropDownList").dataSource.read(search);
        assigneToUserDropdown();
        getteamowner();
    }

        function FilterUsers(value) {
        var search =
        {
            assigneeType: $("#AssignedToTypeCode").data("kendoDropDownList").value(),
            teamId: $("#AssignedToTeamId").data("kendoDropDownList").value(),
           // filterValue: value
        }
        return search;
    }

    var onAjaxSuccess = function (res) {
        if (res.success) {
            if ('@Model.DataAction'=='@DataActionEnum.Create')
            {
                ShowNotification("Saved Successfully", "success");

            }
            if ('@Model.DataAction'=='@DataActionEnum.Edit')
            {
                ShowNotification("Updated Successfully", "success");
            }
            if ('@Model.IsDiagram' == 'True') {
                var win = GetMainWindow();
                win.CloseWindow({ MethodName: "TemplateChangeCallback", Prms: { TemplateId: $("#ServiceTemplateId").val() } });
            }
            else
            {
                // window.parent.parent.$("#documentTypeTreeView").data("kendoTreeView").dataSource.read();
                var Id = res.Id;
                closeNavIcon1();
            }

        }
        else {
           // alert(res)
            showError(res.error);
        }
    };

    function onFileUploadSuccessBanner(e) {
        if (e.response.success) {
            //alert(e.response.fileId);
            //console.log(e);
            //return true;
            $(".style-mybannerimage").attr("src", "/cms/Document/GetImageMongo?id=" + e.response.fileId);
            $("#BannerFileId").val(e.response.fileId);
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessIcon(e) {
        if (e.response.success) {
            //alert(e.response.fileId);
            //console.log(e);
            //return true;
            $(".style-myiconimage").attr("src", "/cms/Document/GetImageMongo?id=" + e.response.fileId);
            $("#IconFileId").val(e.response.fileId);
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onFileUploadSuccessBackground(e) {
        if (e.response.success) {
            //alert(e.response.fileId);
            //console.log(e);
            //return true;
            $(".style-mybgimage").attr("src", "/cms/Document/GetImageMongo?id=" + e.response.fileId);
            $("#BackgroundFileId").val(e.response.fileId);
        }
        else {
            //var msg = ExtractError(e.response.errors, true);
            //alert(msg);
        }
        return true;
    }

    function onBackgroundDel() {
      //
        //        alert("Banner Delete");
        $(".style-mybgimage").attr("src", "/images/200.png");
        $("#BackgroundFileId").val('');
        //var bgupload = $("#files3").data("kendoUpload");
        ////console.log(logoupload);
        //bgupload.clearFile(function (file) { return true; });

        $("#backgroundiconFile").dmUploader("reset");
    }
    function onBannerDel() {
     //
        //        alert("Banner Delete");
        $(".style-mybannerimage").attr("src", "/images/200.png");
        $("#BannerFileId").val('');
        //var bannerupload = $("#files2").data("kendoUpload");
        ////console.log(bannerupload);
        //bannerupload.clearFile(function (file) { return true; });
        $("#bannericonFile").dmUploader("reset");
    }

    function onIconDel() {
       //
        //        alert("Banner Delete");
        $(".style-myiconimage").attr("src", "/images/200.png");
        $("#IconFileId").val('');
        //var iconupload = $("#files").data("kendoUpload");
        ////console.log(bannerupload);
        //iconupload.clearFile(function (file) { return true; });

        $("#iconFile").dmUploader("reset");
    }

    function onslachange() {

        var value = document.getElementById("chksla").checked;
        $("#AllowSLAChange").val(value);
    }

        function onCreateTemplate() {


            var win = GetMainWindow();
            win.iframeOpenUrl = '@Url.Action("StepTaskTemplate", "ProcessDesign", new { @area="Cms"})?templateId=@Model.ServiceTemplateId' + '&moduleId=' + '@Model.ModuleId';
            win.OpenWindow({ Title: 'Create Step Task Template', Width: 450, Height: 800, Position:'Right' });
        return false;
        }
        function onEditTemplate() {

            
              var win = GetMainWindow();
            win.iframeOpenUrl = '@Url.Action("EditStepTaskTemplate", "ProcessDesign", new { @area="Cms"})?templateId=@Model.TemplateId' + '&moduleId=' +'@Model.ModuleId'+ '&taskTempId=' +'@Model.TaskTemplateId' ;
            win.OpenWindow({ Title: 'Edit Step Task Template', Width: 450, Height: 800, Position:'Right' });
        return false;
        }

        function OnSave(evt) {
            if ($("#TaskTemplateId").val() == "") {
                $(".text-danger").removeClass("validation-summary-valid");
                $(".text-danger").addClass("validation-summary-errors");
                $(".text-danger").html("Task template is required");
                evt.preventDefault();
                return false;
            }
            var userId = $("#AssignedToTypeCode").data("kendoDropDownList").value();
            if (userId == "TASK_ASSIGN_TO_USER") {
                if ($("#AssignedToHierarchyMasterLevelId").val() == "") {
                    $("#AssignedToHierarchyMasterLevelId").val(0);
                }
                if ($("#AssignedToUserId").val() == "") {
                    $(".text-danger").removeClass("validation-summary-valid");
                    $(".text-danger").addClass("validation-summary-errors");
                    $(".text-danger").html("Assignee to user is required");
                    evt.preventDefault();
                    return false;
                }
            } else if (userId == "TASK_ASSIGN_TO_TEAM")
            {
                if ($("#AssignedToHierarchyMasterLevelId").val() == "") {
                    $("#AssignedToHierarchyMasterLevelId").val(0);
                }
                if ($("#AssignedToTeamId").val() == "") {
                    $(".text-danger").removeClass("validation-summary-valid");
                    $(".text-danger").addClass("validation-summary-errors");
                    $(".text-danger").html("Assignee to team is required");
                    evt.preventDefault();
                    return false;
                } else if($("#AssignedToUserId").val() == "") {
                    $(".text-danger").removeClass("validation-summary-valid");
                    $(".text-danger").addClass("validation-summary-errors");
                    $(".text-danger").html("Assignee to user is required");
                    evt.preventDefault();
                    return false;
                }
            }
            else if (userId == "TASK_ASSIGN_TO_USER_HIERARCHY")
            {
                if ($("#AssignedToHierarchyMasterId").val() == "") {
                    $(".text-danger").removeClass("validation-summary-valid");
                    $(".text-danger").addClass("validation-summary-errors");
                    $(".text-danger").html("Assignee to hierarchy master is required");
                    evt.preventDefault();
                    return false;
                }
                else if ($("#AssignedToHierarchyMasterLevelId").val() == "") {
                    $(".text-danger").removeClass("validation-summary-valid");
                    $(".text-danger").addClass("validation-summary-errors");
                    $(".text-danger").html("Assignee to hierarchy master level is required");
                    evt.preventDefault();
                    return false;
                }
            }


                if ('@Model.IsDiagram' == 'True') {
                    //$("#NoteUDFs").val(JSON.stringify($("#kgridUDFS").data("kendoGrid").dataSource.data()));
                    $("#NoteUDFs").val(JSON.stringify($("#kgridUDFS1").data("JSGrid").data));
                }
                else
                {
                    e.preventDefault();
            //$("#NoteUDFs").val(JSON.stringify($("#kgridUDFS").data("kendoGrid").dataSource.data()));
                    $("#NoteUDFs").val(JSON.stringify($("#kgridUDFS1").data("JSGrid").data));
           // var bid = document.getElementById("blockid").value;
           // var blockpropid = "StepTask_block_" + bid;
            window.parent.$("#prop_@Model.ComponentId").val(JSON.stringify($('#steptaskform').serializeObject()));

              closeNavCategory();
            return false;
                    e.preventDefault();
            }

            if ($('#AssignedToHierarchyMasterLevelId').val()=="") {
                $('#AssignedToHierarchyMasterLevelId').val(0);
            }

        }

        function getTaskTemplateId(id) {
            tasktemplateid = id;
            $('#TaskTemplateId').data("kendoDropDownList").dataSource.read();
        }
        function OnDataBound() {
           //
            if (tasktemplateid != null) {
                var tasktemplate = $('#TaskTemplateId').data("kendoDropDownList");
                tasktemplate.value(tasktemplateid);
            }
        }

        function OnClickRunTimeComponent() {
            debugger;
            var checked = $('#IsRuntimeComponent').is(":checked");
            if (checked) {
                $("#enableRuntimeWorkflow").show();
            } else {                
                $('#EnableRuntimeWorkflow').prop('checked', false);
                $('#RuntimeAssigneeUserListUrl').val('');
                $('#RuntimeAssigneeTeamListUrl').val('');

                $("#enableRuntimeWorkflow").hide();
                $("#runtimeAssigneeUserList").hide();
                $("#runtimeAssigneeTeamList").hide();
            }
        }

        function OnClickRunTimeWorkflow() {
            
            var checked = $('#EnableRuntimeWorkflow').is(":checked");
            if (checked) {
                $("#runtimeAssigneeUserList").show();
                $("#runtimeAssigneeTeamList").show();
            } else {
                $('#RuntimeAssigneeUserListUrl').val('');
                $('#RuntimeAssigneeTeamListUrl').val('');
                $("#runtimeAssigneeUserList").hide();
                $("#runtimeAssigneeTeamList").hide();
            }
        }

    </script>




    <div class="pad-15">
        <form asp-controller="ProcessDesign" asp-action="ManageStepTaskComponentWithProperty" class="form-horizontal" id="steptaskform" data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
              data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
              data-ajax="true" data-ajax-method="POST">
            @*onsubmit='return onSubmit(this)'>*@
            <div class="text-danger" asp-validation-summary="All"></div>
            <div class="row" style="padding:10px;">


                <div class="col-12 pad-10">
                    <div class="col-10">Parent</div>
                    <div class="row">
                        <div class="form-label-group col-10">
                            <input asp-for="ParentId" id="ParentId" class="form-control" />
                        </div>

                    </div>
                </div>

                <div class="col-12 pad-10">
                    <div class="col-10">Step Task Template</div>
                    <div class="row">
                        <div class="form-label-group col-10">


                            <input asp-for="TaskTemplateId" id="TaskTemplateId" class="form-control" />
                        </div>
                        <div class="col-1">
                            <button type="button" class="btn btn-primary" title="Create" onclick="onCreateTemplate();"><i class='fa fas fa-plus'></i></button>
                        </div>
                        @if (Model.DataAction == DataActionEnum.Edit)
                        {
                            <div class="col-1">
                                <button type="button" class="btn btn-primary" title="Create" onclick="onEditTemplate();"><i class='fa fas fa-pencil'></i></button>
                            </div>
                        }

                    </div>
                </div>


                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="Subject" type="text" class="form-control" placeholder="Subject" required="required" autocomplete="off" />
                        <label for="Subject">Subject</label>
                    </div>
                </div>

                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <textarea asp-for="Description" class="form-control" autocomplete="off"></textarea>
                        <label for="Description">Description</label>
                    </div>
                </div>

                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="SubjectText" type="text" placeholder="Subject Label Text" class="form-control" />
                        <label for="SubjectText">Subject Label Text</label>
                    </div>

                </div>
                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="DescriptionText" type="text" placeholder="Description Label Text" class="form-control" />
                        <label for="DescriptionText">Description Label Text</label>
                    </div>

                </div>

                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="OwnerUserText" type="text" placeholder="Owner User Label Text" class="form-control" />
                        <label for="OwnerUserText">Owner User Label Text</label>
                    </div>

                </div>
                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="RequestedByUserText" type="text" placeholder="Requested By User Label Text" class="form-control" />
                        <label for="RequestedByUserText">Requested By User Label Text</label>
                    </div>

                </div>

                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="AssignedToUserText" type="text" placeholder="Assigned To User Label Text" class="form-control" />
                        <label for="AssignedToUserText">Assigned To User Label Text</label>
                    </div>

                </div>

                <div class="col-12">
                    SLA
                </div>
                <div class="col-12">
                    <div class="row">
                        <div class="col-6 pad-10">
                            @*@Html.Kendo().TextBoxFor(x => x.SLASeconds).HtmlAttributes(new { @style = "width:100%;" })*@
                            <input asp-for="SLASeconds" type="text" class="form-control" style="width:100%" />
                        </div>
                        <div class="col-6 pad-10">
                            <input id="chksla" onchange="onslachange()" type="checkbox" /><span>&nbsp;&nbsp;&nbsp;Allow SLA Change</span>
                            @*@Html.Kendo().CheckBoxFor(x => x.AllowSLAChange).Label("Allow SLA Change").HtmlAttributes(new { @id= "chksla" })*@
                        </div>
                    </div>
                </div>

                <div class="col-12 pad-10">
                    <div class="form-label-group">

                        <input asp-for="SequenceOrder" type="number" class="form-control" placeholder="Enter Sequence Order" autocomplete="off" style="width:80%" />

                        <label for="SequenceOrder">Sequence Order </label>

                    </div>
                </div>


                <!--<div class="col-12 pad-10">
        <div class="form-group">
            <label class="form-label-group">
                SLA
            </label>
            <div>
               @*@Html.Kendo().TextBoxFor(x => x.SLASeconds).HtmlAttributes(new { @style = "width:100%;" })*@
                     <input asp-for="SLASeconds" type="text" class="form-control" style="width:100%" />
            </div>
        </div>
    </div>

    <div class="col-12 pad-10">
        <div class="form-label-group">
            <input id="chksla" onchange="onslachange()" type="checkbox" class="k-checkbox" />    <span>&nbsp;&nbsp;&nbsp;Allow SLA Change</span>-->
                @*@Html.Kendo().CheckBoxFor(x => x.AllowSLAChange).Label("Allow SLA Change").HtmlAttributes(new { @id= "chksla" })*@
                <!--</div>

    </div>-->

                <div class=" col-12 pad-10">
                    <div class="col-12">Assignee Type </div>
                    <div class="form-label-group">

                        @*@(Html.Kendo().DropDownListFor(x => x.AssignedToTypeCode)
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetLOVIdNameList", "LOV", new { @area = "Cms", lovType = "TASK_ASSIGN_TO_TYPE" });
                    });
                })
                //.Filter(FilterType.Contains)
                .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                .DataTextField("Name")
                .DataValueField("Code").Events(e => e.Change("onchangetype"))
                .HtmlAttributes(new { @class = "form-control"/*, @style="width:90%;"*/})
                                     )*@

                        <input asp-for="AssignedToTypeCode" id="AssignedToTypeCode" class="form-control" style="width:80%" />
                    </div>
                </div>


                <div class=" col-12 pad-10" id="teamid" @*style="display:none"*@>

                    <div class="col-12">TeamWork Assignment Type</div>
                    <div class="form-label-group">
                        <input asp-for="TeamAssignmentType" class="form-control" />
                    </div>
                    <div class="col-12">Assignee To Team </div>
                    <div class="form-label-group">

                        @*@(Html.Kendo().DropDownListFor(x => x.AssignedToTeamId)
                       .DataSource(source =>
                       {
                           source.Read(read =>
                           {
                               read.Action("ReadTeamData", "ProcessDesign", new { @area = "Cms" });
                           });
                       }).OptionLabel("select")
                        .DataTextField("Name")
                        .DataValueField("Id").Events(e => e.Change("onchangeteam"))
                        .HtmlAttributes(new { @class = "form-control" })
                )*@

                        <input asp-for="AssignedToTeamId" id="AssignedToTeamId" class="form-control" />
                    </div>


                </div>

                <div class=" col-12 pad-10" id="userid" @*style="display:none"*@>
                    <div class="col-12">Assignee To User </div>
                    <div class="form-label-group">

                        @*@(Html.Kendo().DropDownListFor(x => x.AssignedToUserId)
                                    .DataSource(source =>
                                    {
                                        source.Read(read =>
                                        {
                                            //read.Action("ReadUserData", "User", new { @area = "Cms" });
                                            read.Action("GetUsersListOnTypeBasis", "User", new { @area = "cms" }).Data("FilterUsers");

                                        })/*.ServerFiltering(true)*/;
                                    }).OptionLabel("select")
                         .DataTextField("Name")
                         .Value(Model.AssignedToUserId)
                         .Filter(FilterType.Contains)
                         .DataValueField("Id")//.CascadeFrom("AssignedToTypeCode")
                         //.AutoBind(false)
                                   .HtmlAttributes(new { @class = "form-control"})
                )*@
                        <input asp-for="AssignedToUserId" id="AssignedToUserId" class="form-control" />

                    </div>


                </div>


                <div class=" col-12 pad-10" id="hmid" @*style="display:none"*@>
                    <div class="col-12">Assigned To Hierarchy Master </div>
                    <div class="form-label-group">

                        @*@(Html.Kendo().DropDownListFor(x => x.AssignedToHierarchyMasterId)
                                    .DataSource(source =>
                                    {
                                        source.Read(read =>
                                        {
                                            read.Action("ReadHierarchyMasterData", "ProcessDesign", new { @area = "Cms" });
                                        });
                                    }).OptionLabel("Select...")
                         .DataTextField("Name")
                         .DataValueField("Id")
                                   .HtmlAttributes(new { @class = "form-control" })
                )*@

                        <input asp-for="AssignedToHierarchyMasterId" id="AssignedToHierarchyMasterId" class="form-control" />
                    </div>


                </div>

                <div class=" col-12 pad-10" id="hmlevelid" @*style="display:none"*@>
                    <div class="col-12">Assigned To Hierarchy Master Level </div>
                    <div class="form-label-group">

                        @*@(Html.Kendo().DropDownListFor(x => x.AssignedToHierarchyMasterLevelId)
                      //.Name("level")
                      .HtmlAttributes(new { style = "width:100%" })
                      .OptionLabel("Select...")
                      .DataTextField("Name")
                      .DataValueField("Id")
                      .DataSource(source =>
                      {
                          source.Read(read =>
                          {
                             read.Action("ReadHierarchyMasterLevelDataById", "ProcessDesign", new { @area = "Cms" })
                                  .Data("Filter");
                          })
                          .ServerFiltering(true);
                      })
                      .Enable(false)
                      .AutoBind(false)
                      .CascadeFrom("AssignedToHierarchyMasterId")
                )*@

                        <input asp-for="AssignedToHierarchyMasterLevelId" id="AssignedToHierarchyMasterLevelId" class="form-control" />

                    </div>


                </div>
                <div class=" col-12 pad-10">
                    <button type="button" class="btn btn-primary" onclick="ManageCustomAssignee(event);">Manage Custom Assignee</button>
                    <div id="krdStepTaskAssigneeLogic" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
                    <button type="button" class="btn btn-primary" onclick="ManageCustomSkip(event);">Manage Custom Skip Logic</button>
                    <div id="krdStepTaskSkipLogic" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
                    <button type="button" class="btn btn-primary" onclick="ManageEscalation(event);">Manage Escalation</button>
                    <div id="krdStepTaskEscalation" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
                </div>


                <div class=" col-12 pad-10">
                    <div class="col-12">Priority </div>
                    <div class="form-label-group">

                        @*@(Html.Kendo().DropDownListFor(x => x.PriorityId)
                      //.Name("level")
                      .HtmlAttributes(new { style = "width:100%" })
                      .OptionLabel("Select...")
                      .DataTextField("Name")
                      .DataValueField("Id")
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        // read.Action("GetListOfValueList", "LOV", new { Type = "TASK_PRIORITY" });
                        read.Action("GetLOVIdNameList", "LOV", new { lovType = "TASK_PRIORITY" });

                    });


                })

                // .AutoBind(false)

                )*@
                        <input asp-for="PriorityId" id="PriorityId" class="form-control" />

                    </div>
                </div>
                <div class=" col-12 pad-10">
                    <div class="col-12">Work flow Visibility </div>
                    <div class="form-label-group">



                        <input asp-for="WorkflowVisibility" id="WorkflowVisibility" class="form-control" />

                    </div>
                </div>

                <div class="col-12 pad-10">

                    <input type="checkbox" asp-for="OpenSameTaskOnServiceReSubmit" />
                    <label>Open Same Task On Service ReSubmit</label>
                </div>


                <div class="col-12 pad-10">
                    @*@(Html.Kendo().CheckBoxFor(m=>m.EnableChangingNextTaskAssignee).Label("Enable Changing Next Task Assignee"))*@
                    <input type="checkbox" asp-for="EnableChangingNextTaskAssignee" />
                    <label>Enable Changing Next Task Assignee</label>
                </div>

                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="ChangingNextTaskAssigneeTitle" type="text" class="form-control" placeholder="Changing Next Task Assignee Title" autocomplete="off" style="width:80%" />
                        <label for="ChangingNextTaskAssigneeTitle">Changing Next Task Assignee Title</label>
                    </div>
                </div>

                <div class="col-12 pad-10">
                    @*@(Html.Kendo().CheckBoxFor(m=>m.EnableReturnTask).Label("Enable Return Task"))*@
                    <input type="checkbox" asp-for="EnableReturnTask" class="k-checkbox" />
                    <label>Enable Return Task</label>
                </div>


                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="ReturnTaskTitle" type="text" class="form-control" placeholder="Return Task Title" autocomplete="off" style="width:80%" />

                        <label for="ReturnTaskTitle">Return Task Title</label>
                    </div>
                </div>


                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="ReturnTaskButtonText" type="text" class="form-control" placeholder="Return Task Button Text" autocomplete="off" style="width:80%" />
                        <label for="ReturnTaskButtonText">Return Task Button Text</label>
                    </div>
                </div>

                <div class="col-12 pad-10">
                    @*@(Html.Kendo().CheckBoxFor(m=>m.DisableNextTaskTeamChange).Label("Disable Next Task Team Change"))*@
                    <input type="checkbox" asp-for="DisableNextTaskTeamChange" />
                    <label>Disable Next Task Team Change</label>
                </div>

                <div class="col-12 pad-10">

                    @*@(Html.Kendo().CheckBoxFor(m=>m.EnableNextTaskAttachment).Label("Enable Next Task Attachment"))*@
                    <input type="checkbox" asp-for="EnableNextTaskAttachment" />
                    <label>Enable Next Task Attachment</label>
                </div>
                <div class="col-12 pad-10">
                    @*@(Html.Kendo().CheckBoxFor(m=>m.EnableServiceComplete).Label("Enable Service Complete"))*@
                    <input type="checkbox" asp-for="EnableServiceComplete" />
                    <label>Enable Service Complete</label>
                </div>

                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="WorkflowStatusName" type="text" class="form-control" placeholder="Workflow Status Name" autocomplete="off" style="width:80%" />
                        <label for="WorkflowStatusName">Workflow Status Name</label>
                    </div>
                </div>
                <div class="col-12 pad-10">

                    <input type="checkbox" asp-for="EnablePlanning" />
                    <label>Enable Planning</label>
                </div>

                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="DraftWorkflowStatus" type="text" class="form-control" placeholder="Draft Workflow Status" autocomplete="off" style="width:80%" />
                        <label for="DraftWorkflowStatus">Draft Workflow Status</label>
                    </div>
                </div>
                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="InprogressWorkflowStatus" type="text" class="form-control" placeholder="Inprogress Workflow Status" autocomplete="off" style="width:80%" />
                        <label for="InprogressWorkflowStatus">Inprogress Workflow Status</label>
                    </div>
                </div>
                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="OverdueWorkflowStatus" type="text" class="form-control" placeholder="Overdue Workflow Status" autocomplete="off" style="width:80%" />
                        <label for="OverdueWorkflowStatus">Overdue Workflow Status</label>
                    </div>
                </div>
                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="CanceledWorkflowStatus" type="text" class="form-control" placeholder="Canceled Workflow Status" autocomplete="off" style="width:80%" />
                        <label for="CanceledWorkflowStatus">Canceled Workflow Status</label>
                    </div>
                </div>
                <div class="col-12 pad-10">
                    <div class="form-label-group">
                        <input asp-for="RejectedWorkflowStatus" type="text" class="form-control" placeholder="Rejected Workflow Status" autocomplete="off" style="width:80%" />
                        <label for="RejectedWorkflowStatus">Rejected Workflow Status</label>
                    </div>
                </div>

                <div class="col-12 pad-10">
                    <input type="checkbox" asp-for="IsRuntimeComponent" onclick="OnClickRunTimeComponent();" />
                    <label>Is Runtime Component</label>
                </div>
                <div class="col-12 pad-10" id="enableRuntimeWorkflow" style="display:none;">
                    <input type="checkbox" asp-for="EnableRuntimeWorkflow" onclick="OnClickRunTimeWorkflow();" />
                    <label>Enable Runtime Workflow</label>
                </div>
                <div class="col-12 pad-10" id="runtimeAssigneeUserList" style="display:none;">
                    <div class="form-label-group">
                        <input asp-for="RuntimeAssigneeUserListUrl" type="text" class="form-control" placeholder="Runtime Assignee User List Url" autocomplete="off" style="width:80%" />
                        <label for="RuntimeAssigneeUserListUrl">Runtime Assignee User List Url</label>
                    </div>
                </div>
                <div class="col-12 pad-10" id="runtimeAssigneeTeamList" style="display:none;">
                    <div class="form-label-group">
                        <input asp-for="RuntimeAssigneeTeamListUrl" type="text" class="form-control" placeholder="Runtime Assignee Team List Url" autocomplete="off" style="width:80%" />
                        <label for="RuntimeAssigneeTeamListUrl">Runtime Assignee Team List Url</label>
                    </div>
                </div>

                <div class="col-12">Icon</div>
                <div class="col-12 pad-15" style="min-height:130px;">
                    @*<div class="style-image">
                @if (Model.IconFileId != "" && Model.IconFileId != null)
                {
                    <img class="style-myiconimage" src="/cms/Document/GetImageMongo?id=@Model.IconFileId" onerror='OnPhotoError(this);' />
                }
                else
                {
                    <img class="style-myiconimage" style="background-color:gray;" src="~/images/200.png" />
                }

            </div>
            <div class="style-upload">*@
                    @*@(Html.Kendo().Upload().Multiple(false)
                .Name("files")
                .Async(a => a
                .Save("SaveFile", "Document", new { @Area="Cms"})
                .AutoUpload(true)
                )
                .Events(e => e.Success("onFileUploadSuccessIcon")
                )
                    .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png" })
                    //.MaxFileSize(2097152)
                    )
                    .HtmlAttributes(new { @class = "hr-large" })
            )*@

                    @*<div class="row">
            <div class="col">
                <div id="iconFile" class="dm-uploader">
                    <h6 class=" text-muted">Drag &amp; drop files here</h6>

                    <div class="btn btn-primary btn-block ">
                        <span>Open the file Browser</span>
                        <input type="file" title='Click to add Files' />
                    </div>
                </div>

            </div>*@
                    @*if multiple use this*@

                    @*<div class="col">
                <div class="card h-100">
                    <div class="card-header">
                        File List
                    </div>
                    <ul class="list-unstyled p-2 d-flex flex-column col" id="files">
                        <li id="nofiles" class="text-muted text-center empty">No files uploaded.</li>
                    </ul>
                </div>
            </div>*@
                    @*if multiple use this*@
                    @*</div>

                <button type="button" class="btn btn-light" title="Delete" onclick="onIconDel();"><i class='fa fas fa-trash'></i></button>
            </div>*@

                    @{
                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.IconFileId), Value = Model.IconFileId });
                    }

                </div>
                <div class="col-12">Banner</div>
                <div class="col-12 pad-15" style="min-height:130px;">
                    @*<div class="style-image">
                @if (Model.BannerFileId != "" && Model.BannerFileId != null)
                {
                    <img class="style-mybannerimage" src="/cms/Document/GetImageMongo?id=@Model.BannerFileId" onerror='OnPhotoError(this);' />
                }
                else
                {
                    <img class="style-mybannerimage" style="background-color:gray;" src="~/images/200.png" />
                }

            </div>
            <div class="style-upload">*@
                    @*@(Html.Kendo().Upload().Multiple(false)
                .Name("files")
                .Async(a => a
                .Save("SaveFile", "Document", new { @Area="Cms"})
                .AutoUpload(true)
                )
                .Events(e => e.Success("onFileUploadSuccessBanner")
                )
                    .Validation(validation => validation.AllowedExtensions(new string[] { ".gif", ".jpg", ".jpeg", ".png" })
                    //.MaxFileSize(2097152)
                    )
                    .HtmlAttributes(new { @class = "hr-large", @id = "files2" })
            )*@

                    <!--<div class="row">
        <div class="col">
            <div id="bannericonFile" class="dm-uploader">
                <h6 class=" text-muted">Drag &amp; drop files here</h6>

                <div class="btn btn-primary btn-block ">
                    <span>Open the file Browser</span>
                    <input type="file" title='Click to add Files' />
                </div>
            </div>

        </div>-->
                    @*if multiple use this*@

                    @*<div class="col">
                <div class="card h-100">
                    <div class="card-header">
                        File List
                    </div>
                    <ul class="list-unstyled p-2 d-flex flex-column col" id="files">
                        <li id="nofiles" class="text-muted text-center empty">No files uploaded.</li>
                    </ul>
                </div>
            </div>*@
                    @*if multiple use this*@
                    <!--</div>
            <button type="button" class="btn btn-light" title="Delete" onclick="onBannerDel();"><i class='fa fas fa-trash'></i></button>
        </div>-->

                    @{
                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.BannerFileId), Value = Model.BannerFileId });
                    }

                </div>
                <div class="col-12">Background</div>
                <div class="col-12 pad-15" style="min-height:130px;">


                    @{
                        await Html.RenderPartialAsync("~/Areas/Core/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.BackgroundFileId), Value = Model.BackgroundFileId });
                    }

                </div>



            </div>
                <div>
                    <button type='button' class='btn btn-primary' onclick='OnBulkUpdate1();'>Bulk Update Permission</button>
                    <div id="kgridUDFS1"></div>


                </div>
                <input type="hidden" name="Id" value="@Model.Id" id="Id" />
                @*@Html.HiddenFor(x => x.Id)*@
                @Html.HiddenFor(x => x.ComponentId)
                @Html.HiddenFor(x => x.TemplateId)
                @Html.HiddenFor(x => x.ServiceTemplateId)
                @Html.HiddenFor(x => x.DataAction)
                @Html.HiddenFor(x => x.blockid)
                @Html.HiddenFor(x => x.blockprop)
                @Html.HiddenFor(x => x.AllowSLAChange)
                @Html.HiddenFor(x => x.IconFileId)
                @Html.HiddenFor(x => x.BannerFileId)
                @Html.HiddenFor(x => x.BackgroundFileId)
                @Html.HiddenFor(x => x.NoteUDFs)
                @Html.HiddenFor(x => x.IsDiagram)
                @Html.HiddenFor(x => x.ProcessDesignId)
                @*@Html.HiddenFor(x => x.ParentId)*@
                <div class="cms-slidebar-footer">
                    <input type="button" class="btn btn-light" value="Close" onclick="onClose()" />
                    <input type="submit" class="btn btn-primary" value="Save" onclick="OnSave(event)" />
                </div>
</form>
        <!-- The Modal -->
        <div class="modal" id="myModal" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog">
                <div class="modal-content">

                    <!-- Modal Header -->
                    <div class="modal-header">
                        <h4 class="modal-title">Edit UDF</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>

                    <!-- Modal body -->
                    <div class="modal-body">
                        <input type="hidden" name="udfId" id="udfId" />
                        <div class="col-12 pad-10">
                            <div class="form-label-group">
                                <input name="Name" id="UdfName" type="text" class="form-control" placeholder=" Name" required="required" autocomplete="off" />
                                <label for="Name"> Name <span class="required" style="color:red;">*</span></label>
                            </div>
                        </div>
                        <div class="col-12 pad-10">
                            <label for="EditableBy">EditableBy</label>
                            @*@(Html.Kendo().MultiSelect()
          .Name("EditableBy")
          .HtmlAttributes(new { style = "width:100%" })
          .Placeholder("Select...")
          .DataTextField("Name")
           //.DataValueField("EnumId")
           .DataValueField("Name")
    .DataSource(source =>
    {
        source.Read(read =>
        {

            read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "NtsActiveUserTypeEnum" });

        });
    }))*@
                            <select id="EditableBy" data-placeholder="Select..." style="width:100%"></select>

                        </div>
                        <div class="col-12 pad-10">
                            <label for="ViewableBy">ViewableBy</label>
                            @*@(Html.Kendo().MultiSelect()
          .Name("ViewableBy")
          .HtmlAttributes(new { style = "width:100%" })
          .Placeholder("Select...")
          .DataTextField("Name")
    //.DataValueField("EnumId")
    .DataValueField("Name")
    .DataSource(source =>
    {
        source.Read(read =>
        {

            read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "NtsActiveUserTypeEnum" });

        });
    }))*@
                            <select id="ViewableBy" data-placeholder="Select..." style="width:100%"></select>

                        </div>
                        <div class="col-12 pad-10">
                            <label for="EditableContext">EditableContext</label>
                            @*@(Html.Kendo().MultiSelect()
          .Name("EditableContext")
          .HtmlAttributes(new { style = "width:100%" })
          .Placeholder("Select...")
          .DataTextField("Name")
          .DataValueField("Code")
    .DataSource(source =>
    {
        source.Read(read =>
        {

            read.Action("GetLOVIdNameList", "LOV", new { lovType = "LOV_TASK_STATUS" });

        });
    }))*@
                            <select id="EditableContext" data-placeholder="Select..." style="width:100%"></select>

                        </div>
                        <div class="col-12 pad-10">
                            <label for="ViewableContext">ViewableContext</label>
                            @*@(Html.Kendo().MultiSelect()
          .Name("ViewableContext")
          .HtmlAttributes(new { style = "width:100%" })
          .Placeholder("Select...")
          .DataTextField("Name")
          .DataValueField("Code")
    .DataSource(source =>
    {
        source.Read(read =>
        {

            read.Action("GetLOVIdNameList", "LOV", new { lovType = "LOV_TASK_STATUS" });

        });
    }))*@
                            <select id="ViewableContext" data-placeholder="Select..." style="width:100%"></select>

                        </div>
                    </div>

                    <!-- Modal footer -->
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="OnSaveUdf1(eval);">Save changes</button>
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                    </div>

                </div>
            </div>
        </div>

        @*Bulk Update Modal*@
    <div class="modal" id="bulkUpdateModal" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Edit UDF</h4>
                    <button type="button" class="close" onclick="CloseModal();">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    @*<input type="hidden" name="udfId" id="udfId" />
                    <div class="col-12 pad-10">
                        <div class="form-label-group">
                            <input name="Name" id="UdfName" type="text" class="form-control" placeholder=" Name" required="required" autocomplete="off" />
                            <label for="Name"> Name <span class="required" style="color:red;">*</span></label>
                        </div>
                    </div>*@
                    <div class="col-12 pad-10">
                        <label for="EditableBy">EditableBy</label>
                        @*@(Html.Kendo().MultiSelect()
          .Name("EditableBy1")
          .HtmlAttributes(new { style = "width:100%" })
          .Placeholder("Select...")
          .DataTextField("Name")
           //.DataValueField("EnumId")
           .DataValueField("Name")
    .DataSource(source =>
    {
        source.Read(read =>
        {

            read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "NtsActiveUserTypeEnum" });

        });
    }))*@
                        <select id="EditableBy1" data-placeholder="Select..." style="width:100%"></select>

                    </div>
                    <div class="col-12 pad-10">
                        <label for="ViewableBy">ViewableBy</label>
                        @*@(Html.Kendo().MultiSelect()
              .Name("ViewableBy1")
              .HtmlAttributes(new { style = "width:100%" })
              .Placeholder("Select...")
              .DataTextField("Name")
        //.DataValueField("EnumId")
        .DataValueField("Name")
        .DataSource(source =>
        {
            source.Read(read =>
            {

                read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "NtsActiveUserTypeEnum" });

            });
        }))*@

                        <select id="ViewableBy1" data-placeholder="Select..." style="width:100%"></select>                        

                    </div>
                    <div class="col-12 pad-10">
                        <label for="EditableContext">EditableContext</label>
                        @*@(Html.Kendo().MultiSelect()
          .Name("EditableContext1")
          .HtmlAttributes(new { style = "width:100%" })
          .Placeholder("Select...")
          .DataTextField("Name")
          .DataValueField("Code")
    .DataSource(source =>
    {
        source.Read(read =>
        {

            read.Action("GetLOVIdNameList", "LOV", new { lovType = "LOV_TASK_STATUS" });

        });
    }))*@
                        <select id="EditableContext1" data-placeholder="Select..." style="width:100%"></select>

                    </div>
                    <div class="col-12 pad-10">
                        <label for="ViewableContext">ViewableContext</label>
                        @*@(Html.Kendo().MultiSelect()
          .Name("ViewableContext1")
          .HtmlAttributes(new { style = "width:100%" })
          .Placeholder("Select...")
          .DataTextField("Name")
          .DataValueField("Code")
    .DataSource(source =>
    {
        source.Read(read =>
        {

            read.Action("GetLOVIdNameList", "LOV", new { lovType = "LOV_TASK_STATUS" });

        });
    }))*@
                        <select id="ViewableContext1" data-placeholder="Select..." style="width:100%"></select>

                    </div>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="OnSaveBulkUdf1(eval);">Save changes</button>
                    <button type="button" class="btn btn-danger" onclick="CloseModal();">Close</button>
                </div>

            </div>
        </div>
    </div>
    </div>

    <script>


        $("#kgridUDFS1").jsGrid({
        width: "100%",
        height: "auto",

        inserting: false,
        editing: true,
        sorting: true,
        paging: false,
        autoload: true,
        //pageSize: 14,
        //pageButtonCount: 5,
        deleteConfirm: "Do you really want to delete client?",

        //data: clients,
        controller: {
            loadData: function (filter) {
                return $.ajax({
                    type: "GET",
                    url: "/cms/ProcessDesign/LoadServiceNoteUdf1?templateId=@Model.ServiceTemplateId&componentId=@Model.ComponentId",
                    data: filter,
                    dataType: "json"
                });
            },

            updateItem: function (item) {

            },

        },
        onItemEditing: function (e) {
            if (e.grid._container.find(".jsgrid-edit-row")[0] != undefined) {
                //
                e.grid.updateItem();
            }
                                },

        fields: [
            //{ name: "Select", type: "checkbox", editing: true },

            {
                //name: "Select", /*type: "checkbox",*/ width: 60,
                headerTemplate: function () {
                    return $("<input>").attr("type", "checkbox").attr("id", "selectAllCheckbox")
                },
                align: "center",
                itemTemplate: function (value, item) {
                    return $("<input>").attr("type", "checkbox")
                        .attr("checked", function () {
                            if (item.CheckFlag === false) {
                                $(this).prop("checked", false);
                                item.Select = false;
                            } else if (item.CheckFlag === true) {
                                $(this).prop("checked", true);
                                item.Select = true;
                            }
                        })
                        .attr("class","singleCheckbox")
                        .on("click", function () {
                            
                            if (item.CheckFlag === true) {
                                item.CheckFlag = false;
                                item.Select = false;
                                $(this).prop("checked", false);
                            } else {
                                item.CheckFlag = true;
                                item.Select = true;
                                $(this).prop("checked", true);
                            }
                        });
                }
            },

            { name: "Name", type: "text", editing: false, width: 200},
            { name: "EditableByDisplay", type: "text", editing: false, width: 180},
            { name: "EditableContextDisplay", type: "text", editing: false, width: 180 },
            { name: "ViewableByDisplay", type: "text", editing: false, width: 180},
            { name: "ViewableContextDisplay", type: "text", editing: false, width: 180},
            { name: "EditableBy", type: "text", editing: false, visible: false },
            { name: "EditableContext", type: "text", editing: false, visible: false},
            { name: "ViewableBy", type: "text", editing: false, visible: false},
            { name: "ViewableContext", type: "text", editing: false, visible: false },
            {
                name: "Id", type: "control", editButton: false, deleteButton: false,
                itemTemplate: function (value, item) {
                    var $result = jsGrid.fields.control.prototype.itemTemplate.apply(this, arguments);

                    var $customEditButton = $("<i>").attr({ class: "fa fas fa-pencil" })
                        .click(function (e) {
                            //alert("ID: " + item.Id);
                            OnEditUDF1(item);
                            e.stopPropagation();
                        });


                    //return $("<div>").append($customEditButton);
                    return $result.add($customEditButton);
                },
            }
        ]
    });


        $('#selectAllCheckbox').change(function () {
            
            if ($(this).is(":checked")) {

                $(this).attr("checked", true);
                $(".singleCheckbox").prop('checked', true);
                var grid = $("#kgridUDFS1").data("JSGrid");
                
                for (var i = 0; i < grid.data.length; i++) {
                    grid.data[i].Select = true;
                }
            } else {
                $(this).attr("checked", false);
                $(".singleCheckbox").prop('checked', false);
                var grid = $("#kgridUDFS1").data("JSGrid");
                
                for (var i = 0; i < grid.data.length; i++) {
                    grid.data[i].Select = false;
                }
            }
        });

        //$("#selectAllCheckbox").click(function (item) {
        
        //    var chk = item;
        //    //if (item.checked) { // check select status
        //    //    //$('.singleCheckbox').each(function () {
        //    //    //    this.prop('checked', true);
        //    //    //});
        //    //    $(".singleCheckbox").prop('checked', true);
        //    //} else {

        //    //    $('.singleCheckbox').each(function () {
        //    //        this.prop('checked', false);
        //    //    });
        //    //}
        //});



        function assigneToUserDropdown() {
            var assigneeType = $("#AssignedToTypeCode").data("kendoDropDownList").value();
            var teamId = $("#AssignedToTeamId").data("kendoDropDownList").value();
            $("#AssignedToUserId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.AssignedToUserId',
            dataSource:
            {
            transport:
                {
                read:
                    {
                        url: "/Cms/User/GetUsersListOnTypeBasis?assigneeType=" + assigneeType + "&teamId=" + teamId,
                    }
                }
            }
        });
    }

        function assigneToLevel() {
            var value = $("#AssignedToHierarchyMasterId").data("kendoDropDownList").value();

            $("#AssignedToHierarchyMasterLevelId").kendoDropDownList({

             dataTextField: "Name",
            dataValueField: "Id",
          //  filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.AssignedToHierarchyMasterLevelId',
            dataSource: {
            transport: {
                    read: {
                    url: "/Cms/ProcessDesign/ReadHierarchyMasterLevelDataById?Id=" + value,
                    }
                }
            }
        });
        }

        $(document).ready(function () {
            OnClickRunTimeComponent();
            OnClickRunTimeWorkflow();

            $("#ParentId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
           //optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.ParentId',
            //dataBound: OnDataBound,
            dataSource: {
            transport: {
                read: {
                    url: "/cms/ProcessDesign/GetStepTaskParents?templateId=@Model.ServiceTemplateId&componentId=" + $("#ComponentId").val(),
                    }
                }
            }
              });
            $("#TeamAssignmentType").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value:'@Model.TeamAssignmentType.ToString()',
            dataSource: {
                transport: {
                    read: {
                        url: "/Home/GetEnumIdNameList?enumType=WorkAssignmentTypeEnum",
                    }
                }
            }
         });
            if ("@Model.DataAction" == "Create") {
                $("#ParentId").data("kendoDropDownList").readonly();
            }
            else
            {
                $("#ParentId").data("kendoDropDownList").readonly(false);
            }
            $("#EditableBy").kendoMultiSelect({
                dataTextField: "Name",
                dataValueField: "Name",
                filter: "contains",
                autoBind: true,
                autoClose: false,
                dataSource: {
                    transport: {
                        read: {
                            url: "@Url.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "NtsActiveUserTypeEnum" })",
                        }
                    }
                }
            });



            $("#ViewableBy").kendoMultiSelect({
                dataTextField: "Name",
                dataValueField: "Name",
                autoBind: true,
                autoClose: false,
                dataSource: {
                    transport: {
                        read: {
                            url: "@Url.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "NtsActiveUserTypeEnum" })",
                        }
                    }
                }
            });

            $("#EditableContext").kendoMultiSelect({
                dataTextField: "Name",
                dataValueField: "Code",
                autoBind: true,
                autoClose: false,
                dataSource: {
                    transport: {
                        read: {
                            url: "@Url.Action("GetLOVIdNameList", "LOV", new { lovType = "LOV_TASK_STATUS" })",
                        }
                    }
                }
            });

            $("#ViewableContext").kendoMultiSelect({
                dataTextField: "Name",
                dataValueField: "Code",
                autoBind: true,
                autoClose: false,
                dataSource: {
                    transport: {
                        read: {
                            url: "@Url.Action("GetLOVIdNameList", "LOV", new { lovType = "LOV_TASK_STATUS" })",
                        }
                    }
                }
            });

            $("#EditableBy1").kendoMultiSelect({
                dataTextField: "Name",
                dataValueField: "Name",
                autoBind: true,
                autoClose: false,
                dataSource: {
                    transport: {
                        read: {
                            url: "@Url.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "NtsActiveUserTypeEnum" })",
                        }
                    }
                }
           });

            $("#ViewableBy1").kendoMultiSelect({
                dataTextField: "Name",
                dataValueField: "Name",
                autoBind: true,
                autoClose: false,
                dataSource: {
                    transport: {
                        read: {
                            url: "@Url.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "NtsActiveUserTypeEnum" })",
                        }
                    }
                }
            });

            $("#EditableContext1").kendoMultiSelect({
                dataTextField: "Name",
                dataValueField: "Code",
                autoBind: true,
                autoClose: false,
                dataSource: {
                    transport: {
                        read: {
                            url: "@Url.Action("GetLOVIdNameList", "LOV", new { lovType = "LOV_TASK_STATUS" })",
                        }
                    }
                }
            });

            $("#ViewableContext1").kendoMultiSelect({
                dataTextField: "Name",
                dataValueField: "Code",
                autoBind: true,
                autoClose: false,
                dataSource: {
                    transport: {
                        read: {
                            url: "@Url.Action("GetLOVIdNameList", "LOV", new { lovType = "LOV_TASK_STATUS" })",
                        }
                    }
                }
            });

            $("#TaskTemplateId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.TaskTemplateId',
            dataBound: OnDataBound,
            dataSource: {
            transport: {
                read: {
                    url: "/Cms/TaskTemplate/ReadData",
                    }
                }
            }
        });


            $("#AssignedToTypeCode").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Code",
         //   filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.AssignedToTypeCode',
            change: onchangetype,
            dataSource: {
            transport: {
                read: {
                    url: "/Cms/LOV/GetLOVIdNameList?lovType=TASK_ASSIGN_TO_TYPE",
                    }
                }
            }
        });


            $("#PriorityId").kendoDropDownList({
        dataTextField: "Name",
            dataValueField: "Id",
         //   filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.PriorityId',
            dataSource: {
            transport: {
                read: {
                    url: "/Cms/LOV/GetLOVIdNameList?lovType=TASK_PRIORITY",
                    }
                }
            }
        });

            $("#AssignedToTeamId").kendoDropDownList({
        dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.AssignedToTeamId',
            change: onchangeteam,
            dataSource: {
            transport: {
                read: {
                    url: "/Cms/ProcessDesign/ReadTeamData",
                    }
                }
            }
        });
            assigneToUserDropdown();


            $("#AssignedToHierarchyMasterId").kendoDropDownList({
        dataTextField: "Name",
            dataValueField: "Id",
          //  filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.AssignedToHierarchyMasterId',
            change: assigneToLevel,
            dataBound: assigneToLevel,
            dataSource: {
            transport: {
                read: {
                    url: "/Cms/ProcessDesign/ReadHierarchyMasterData",
                    }
                }
            }
            });
                 $("#WorkflowVisibility").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
           // filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.WorkflowVisibility.ToString()',
           // change: formTypeChange,
            dataSource: {
               // serverFiltering: true,
                transport: {
                    read: {
                        url: "/Home/GetEnumIdNameList?enumType=WorkflowVisibilityEnum",
                    }
                }
            }
        });


        $('#SLASeconds').durationPicker();
        if ($("#AllowSLAChange").val() == "False") {
            document.getElementById("chksla").checked = false;
            }
        else {
                document.getElementById("chksla").checked = true;
                }

                var userId = $("#AssignedToTypeCode").val();@*'@Model.AssignedToType';*@
            if (userId == "TASK_ASSIGN_TO_USER") {

            $("#userid").show();
            $("#teamid").hide();
           // $("#userteamid").hide();
            $("#hmid").hide();
            $("#hmlevelid").hide();
        }
            else if (userId == "TASK_ASSIGN_TO_TEAM") {
            $("#userid").show();
            $("#teamid").show();
            $("#userteamid").show();
            $("#hmid").hide();
            $("#hmlevelid").hide();
        }
            else if (userId == "TASK_ASSIGN_TO_USER_HIERARCHY") {
            $("#userid").hide();
            $("#teamid").hide();
          //  $("#userteamid").hide();
            $("#hmid").show();
            $("#hmlevelid").show();
        }
        else {
            $("#userid").hide();
            $("#teamid").hide();
            $("#hmid").hide();
            $("#hmlevelid").hide();
        }
          if ($("#NoteUDFs").val() != "" && $("#NoteUDFs").val() != undefined && $("#NoteUDFs").val() != null) {

              var existingUdf = JSON.parse($("#NoteUDFs").val());
              var grid = $("#kgridUDFS").data("kendoGrid");
              grid.options.autoBind = true;
              grid.setDataSource(existingUdf);
              grid.refresh();

          }
          else {
              $("#kgridUDFS").data("kendoGrid").dataSource.read();

        }
            $('#steptaskform').submit(function (e) {

                if ('@Model.IsDiagram' == 'True') {
                    //$("#NoteUDFs").val(JSON.stringify($("#kgridUDFS").data("kendoGrid").dataSource.data()));
                    $("#NoteUDFs").val(JSON.stringify($("#kgridUDFS1").data("JSGrid").data()));
                }
                else
                {
                    e.preventDefault();
            //$("#NoteUDFs").val(JSON.stringify($("#kgridUDFS").data("kendoGrid").dataSource.data()));
                    $("#NoteUDFs").val(JSON.stringify($("#kgridUDFS1").data("JSGrid").data()));
           // var bid = document.getElementById("blockid").value;
           // var blockpropid = "StepTask_block_" + bid;
            window.parent.$("#prop_@Model.ComponentId").val(JSON.stringify($('#steptaskform').serializeObject()));

              closeNavCategory();
            return false;
                    e.preventDefault();
                }
            });
          //  uploadFile();
        });

        var columnDefs = [
            {
                field: "SequenceOrder",
            },
            {
                field: "Name",
            },
            { field: "ExecutionLogicDisplay" },
            { field: "SuccessResult" },
            {
                field: "AssignedToType",

            },
            {
                field: "Assignee",

            },
            {
                headerName: "Actions",
                field: "Id",
                cellRenderer: params => {
                    return "<div class='btn-group grid-menu' id='tree-menuBinUser' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
                }
            }
        ];
        var columnDefs1 = [
            {
                field: "SequenceOrder",
            },
            {
                field: "Name",
            },
            { field: "ExecutionLogicDisplay" },
            { field: "SuccessResult" },

            {
                headerName: "Actions",
                field: "Id",
                cellRenderer: params => {
                    return "<div class='btn-group grid-menu' id='tree-menuBinUser1' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
                }
            }
        ];

        var columnDefs2 = [
            {
                field: "Name",
            },
            {
                
                field: "Assignee",
            },
            {
                field: "ParentName",
            },
            {
                field: "TriggerDaysAfterOverDue",
            },

            {
                field: "NotificationtemplateName",
            },
            {
                field: "EscalatedNotificationtemplateName",
            },

            {
                headerName: "Actions",
                field: "Id",
                cellRenderer: params => {
                    return "<div class='btn-group grid-menu' id='tree-menuEscalation' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
                }
            }
        ];

        $(function () {

            GetStepTaskAssigneeLogic();
            GetStepTaskSkipLogic();
            GetStepTaskEsclation();
            $.contextMenu({
                selector: '#tree-menuBinUser',
                trigger: 'left',
                build: function ($trigger, e) {


                    var id = $trigger.data('idvalue');

                    //var portalName = $trigger.data('portal-name');

                    switch (0) {
                        case 0:
                            return {
                                callback: function (key, options) {
                                    switch (key) {
                                        case 'edit':
                                            EditCustomAssignee(id)
                                            break;
                                        case 'del':
                                            OnDeleteStepTaskAssigneeLogic(id);
                                            break;


                                        default:
                                    }
                                },
                                items: {
                                    "edit": { name: "Edit", icon: "fas fa-pencil" },
                                    "del": { name: "Delete", icon: "fas fa-trash" },

                                }
                            };


                    }
                }
            });

            $.contextMenu({
                selector: '#tree-menuBinUser1',
                trigger: 'left',
                build: function ($trigger, e) {


                    var id = $trigger.data('idvalue');

                    //var portalName = $trigger.data('portal-name');

                    switch (0) {
                        case 0:
                            return {
                                callback: function (key, options) {
                                    switch (key) {
                                        case 'edit':
                                            EditSkipLogic(id)
                                            break;
                                        case 'del':
                                            OnDeleteStepTaskSkipLogic(id);
                                            break;


                                        default:
                                    }
                                },
                                items: {
                                    "edit": { name: "Edit", icon: "fas fa-pencil" },
                                    "del": { name: "Delete", icon: "fas fa-trash" },

                                }
                            };


                    }
                }
            });

            $.contextMenu({
                selector: '#tree-menuEscalation',
                trigger: 'left',
                build: function ($trigger, e) {


                    var id = $trigger.data('idvalue');

                    //var portalName = $trigger.data('portal-name');

                    switch (0) {
                        case 0:
                            return {
                                callback: function (key, options) {
                                    switch (key) {
                                        case 'edit':
                                            EditEscalation(id)
                                            break;
                                        case 'del':
                                            OnDeleteStepTaskEscalation(id);
                                            break;


                                        default:
                                    }
                                },
                                items: {
                                    "edit": { name: "Edit", icon: "fas fa-pencil" },
                                    "del": { name: "Delete", icon: "fas fa-trash" },

                                }
                            };


                    }
                }
            });
        });
        function OnDeleteStepTaskAssigneeLogic(id) {
        var flag = confirm('Do you really want to delete the User?');

        if (flag) {
            $.ajax({
                url:'@Url.Action("OnDeleteStepTaskAssigneeLogic", "ProcessDesign", new { @area="Cms"})?Id=' + id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {

                    if (result.success) {
                        GetStepTaskAssigneeLogic();
                        kendo.alert("Deleted Successfully.");
                    } else {
                        GetStepTaskAssigneeLogic();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    GetStepTaskAssigneeLogic();
                }
            });
            return false;
        }
    }
        function OnDeleteStepTaskSkipLogic(id) {
        var flag = confirm('Do you really want to delete the User?');

        if (flag) {
            $.ajax({
                url:'@Url.Action("OnDeleteStepTaskSkipLogic", "ProcessDesign", new { @area="Cms"})?Id=' + id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {

                    if (result.success) {
                        GetStepTaskSkipLogic();
                        kendo.alert("Deleted Successfully.");
                    } else {
                        GetStepTaskSkipLogic();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    GetStepTaskSkipLogic();
                }
            });
            return false;
        }
        }

         function OnDeleteStepTaskEscalation(id) {
        var flag = confirm('Do you really want to delete?');

        if (flag) {
            $.ajax({
                url:'@Url.Action("OnDeleteStepTaskEscalation", "ProcessDesign", new { @area="Cms"})?Id=' + id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {

                    if (result.success) {
                        GetStepTaskEsclation();
                        kendo.alert("Deleted Successfully.");
                    } else {
                        GetStepTaskEsclation();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    GetStepTaskEsclation();
                }
            });
            return false;
        }
    }
        function GetStepTaskAssigneeLogic() {
            document.getElementById("krdStepTaskAssigneeLogic").innerHTML = "";
            gridConfig(
                "krdStepTaskAssigneeLogic",
                "/cms/ProcessDesign/ReadStepTaskAssigneeLogicData?stepTaskComponentId=@Model.Id",
                columnDefs,
                false,
                true,
                true,
                true,
                1,
                true,
                10);
        }
        function GetStepTaskSkipLogic() {
            document.getElementById("krdStepTaskSkipLogic").innerHTML = "";
            gridConfig(
                "krdStepTaskSkipLogic",
                "/cms/ProcessDesign/ReadStepTaskSkipLogicData?stepTaskComponentId=@Model.Id",
                columnDefs1,
                false,
                true,
                true,
                true,
                1,
                true,
                10);
        }

         function GetStepTaskEsclation() {
             document.getElementById("krdStepTaskEscalation").innerHTML = "";
            gridConfig(
                "krdStepTaskEscalation",
                "/cms/ProcessDesign/ReadStepTaskEscalation?stepTaskComponentId=@Model.Id",
                columnDefs2,
                false,
                true,
                true,
                true,
                1,
                true,
                10);
        }

         function EditCustomAssignee(id)
        {
            var win = GetMainWindow();
             win.iframeOpenUrl = '/Cms/ProcessDesign/ManageCustomAssignee?stepTaskComponentId=@Model.Id&parentId=' + $("#ParentId").data("kendoDropDownList").value() + "&templateId=@Model.ServiceTemplateId" + "&id=" + id;
            win.OpenWindow({ Title: 'View Details', Width: 800, Height: 600 });
        }
        function EditSkipLogic(id)
        {
            var win = GetMainWindow();
            win.iframeOpenUrl = '/Cms/ProcessDesign/ManageStepTaskSkipLogic?stepTaskComponentId=@Model.Id&parentId=' + $("#ParentId").data("kendoDropDownList").value()+"&templateId=@Model.ServiceTemplateId"+"&id="+id;
            win.OpenWindow({ Title: 'View Details', Width: 800, Height: 600 });
        }
        function ManageCustomAssignee(e)
        {
            var win = GetMainWindow();
            win.iframeOpenUrl = '/Cms/ProcessDesign/ManageCustomAssignee?stepTaskComponentId=@Model.Id&parentId=' + $("#ParentId").data("kendoDropDownList").value()+"&templateId=@Model.ServiceTemplateId";
            win.OpenWindow({ Title: 'View Details', Width: 800, Height: 600 });
        }
        function ManageCustomSkip(e)
        {
            var win = GetMainWindow();
            win.iframeOpenUrl = '/Cms/ProcessDesign/ManageStepTaskSkipLogic?stepTaskComponentId=@Model.Id&parentId=' + $("#ParentId").data("kendoDropDownList").value()+"&templateId=@Model.ServiceTemplateId";
            win.OpenWindow({ Title: 'Skip Logic Details', Width: 800, Height: 600 });
        }

         function ManageEscalation(e)
        {
            var win = GetMainWindow();
             win.iframeOpenUrl = '/Cms/ProcessDesign/ManageStepTaskEscalation?stepTaskComponentId=@Model.Id&parentId=' + $("#ParentId").data("kendoDropDownList").value()+"&templateId=@Model.ServiceTemplateId";
            win.OpenWindow({ Title: 'View Details', Width: 800, Height: 600 });
        }
        function EditEscalation(id)
        {
            var win = GetMainWindow();
            win.iframeOpenUrl = '/Cms/ProcessDesign/ManageStepTaskEscalation?stepTaskComponentId=@Model.Id&parentId=' + $("#ParentId").data("kendoDropDownList").value()+"&templateId=@Model.ServiceTemplateId"+"&id="+id;
            win.OpenWindow({ Title: 'View Details', Width: 800, Height: 600 });
        }

    </script>