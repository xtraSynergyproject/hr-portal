@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@{
    ViewData["Title"] = "Member list";
    Layout = null;
}
<script>

   
    var columnDefs = [
       
           {
            field: "UserName",
           },
         
           {
               field: "Email",
           },
        
      
        {
            field: "CreatedDate",
            cellRenderer: params => {

                var date = new Date(params.value);
                return date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
            }
        },
        
        {
            field: "LastUpdatedDate",
            cellRenderer: params => {

                var date = new Date(params.value);
                return date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
            }
        },
        {
            field: "Status",
            cellRenderer: params => {
                return statusObj[params.value]; //only for enum
            }
        },
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBin11' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        getMemberData();

       // $.contextMenu('update');
      //  $('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-menuBin11',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEdit(id);
                                        break;

                                    case 'delete':
                                        OnDeleteHierarchy(id);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-edit" },
                                //"delete": { name: "Delete", icon: "fas fa-trash" },


                            }
                        };


                }
            }
        });


    });

    function getMemberData() {
        document.getElementById("kgrdMember").innerHTML = "";
        gridConfig(
            "kgrdMember",
            "/cms/Member/ReadMemberData",
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>
<div>
    <h4>@ViewBag.Title</h4>
      
        <hr />
        <div class="col-12">
            <button type='button' class='btn btn-primary' onclick='OnCreate();'><i class='fa fas fa-plus'></i>&nbsp;Create Member</button>
            <br /><br />
            <div id="kgrdMember" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
            @*@(Html.Kendo().Grid<MemberViewModel>
                ().Name("kgrdMember")
                .Columns(col =>
                {
                    col.Command(command =>
                    {
                        command.Custom(" ").Text("").IconClass("fa fas fa-pencil").Click("OnEdit").HtmlAttributes(new { @class = "action-icon" });
                    }).Title("Edit").Width(60);
                    col.Bound(c => c.UserName);
                    col.Bound(c => c.Email);
                    col.Bound(c => c.CreatedDate).Width(150).Format("{0:dd MMM yyyy}");
                    col.Bound(c => c.LastUpdatedDate).Width(150).Format("{0:dd MMM yyyy}");
                })
                .ToolBar(toolbar =>
                {
                    //toolbar.Custom().Text("Create Member").Name("btnAdd").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreate();" });
                    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreate();'><i class='fa fas fa-plus'></i>&nbsp;Create Member</button>");
                })
                //.Events(e => e.DataBound("OnDataBoundNot"))
                .Scrollable(x => x.Enabled(false))
                .Sortable(srt => srt.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                                    .Operators(o => o.ForString(s => s.Clear()
                                                    .Contains("Contains")
                                                    .IsEqualTo("Is equal to")
                                                )))
                .Pageable(pageable => pageable
                .Refresh(true)

                .PageSizes(true)
                .ButtonCount(5))
                .AutoBind(true)
                .DataSource(
                dataSource => dataSource
                .Ajax()
                .PageSize(10)
                //.Events(events => events.Error("OnError"))
                .Read(read => read.Action("ReadMemberData", "Member"))
                .Model(model => model.Id(p => p.Id))
                )

                    )*@
        </div>
</div>

<script type="text/javascript">
   
</script>