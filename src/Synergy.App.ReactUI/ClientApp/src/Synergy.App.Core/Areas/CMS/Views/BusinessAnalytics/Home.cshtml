@inject IStringLocalizer<Synergy.App.WebUtility.Resources.Areas.Cms.Controllers.BusinessAnalyticsController> Resource
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@model Synergy.App.ViewModel.DashboardMasterViewModel
@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@{
    ViewData["Title"] = "Home";
    Layout = null;

}
<style>
    #IIPPHQDail100 {
        border-radius: 25px;
    }
     
    .k-listview {
        border: none;
    }

    .k-listview-content {
        overflow: unset;
    }

    .modal-content {
        top: 100px;
        right: 120px;
        width: 800px;
    }

    .button-text {
        margin-left: 5px;
        font-size: 12px;
    }

    btn-primary {
        background-color: #006bb4;
        border-color: #006bb4;
        color: #fff;
        position: relative;
        top: 0;
        transition: top ease 0.3s;
    }

    .btn-primary:hover {
        background-color: #0060a2;
        top: -2px;
    }

        .btn-primary:hover .button-text {
            text-decoration: underline;
        }

    .text-wrap {
        font-size: 12px;
    }

    #listview_AlertNotification::-webkit-scrollbar {
        display: none;
    }    

    #listview_Notification::-webkit-scrollbar {
        display: none;
    }

    #main-section-charts::-webkit-scrollbar {
        display: none;
    }
    .control-section {
        border: 1px solid rgba(0,0,0,.125);
        padding: 3px;
        border-radius: 28px;
    }
    .card{
        border: 1px solid rgba(20,20,31,.12);
    }
</style>
<style>
    #AlertModal {
        font-family: 'Inter', sans-serif;
    }


    .img-style {
        height: 75px;
        width: 75px;
        margin-top: 15px;
    }

    .notification-item {        
        margin-bottom: 5px !important;
    }

    .notification-heading {
        padding: 0px !important;
        border-left-style: solid;
        border-left-width: 20px;
        border-top-left-radius: 0px;
        border-bottom-left-radius: 0px;
        border-radius: 10px !important;
    }

    .panel {
        margin-top: 0px !important;
        font-size: 12px;
    }

        .panel .panel-heading {
            line-height: unset !important;
        }

            .panel .panel-heading i {
                width: unset !important;
                display: inline-block;
                font-size: 14px;
                border-right: none !important;               
                right: 0px;
                position: absolute;
                font-size: 17px;
                color: black;
            }

    .panel-heading, .modal-header {
        background: #fff;
        color: #212529;
    }
</style>
<style>
    button {
        background: #fff;
        color: #222;
        border: 1px solid #e7e7e7;
        border-bottom: 2px solid #ddd;
        border-radius: 2px;
        padding: 4px 10px;
        /*height: 80%;*/
        font-size: 0.9vw;
    }

    .active {
        background-color: #0096FF;
        color: white;
        /*border: 2px solid cornflowerblue;*/
    }

    .textStyle {
        font-size: 10px;
        font-family: "Lato";
    }
    .fa-stack[data-count]:after{
      position:absolute;
      right:-20%;
      top:-20%;
      content: attr(data-count);
      font-size:60%;
      padding:.6em;
      border-radius:999px;
      line-height:.75em;
      color: white;
      background:rgba(255,0,0,.85);
      text-align:center;
      min-width:2em;
      font-weight:bold;
    }
    .fa-stack{
        margin-left: 10px;
    }
    .c_box_shadow{
        box-shadow: 2px 2px 10px lightblue !important;
    }
</style>
<script>   
    var myinterval;    
    var countInterval;
    var time_delay = 5000;
    var iipalertMap;
    var iipmarkers;
    var iipcameramarkers;
    var iipAlertStatusChart;
    var iipAlertResponseDelayChart;
    var iipAvgAlertResponseChart;
    $(document).ready(function () {         
         $("#date").kendoDatePicker({
			format: "yyyy-MM-dd",
            change: onDateChange,
		});
        alertSummaryByStatus();
        alertSummaryTimeDelay();
        alertSummaryAvgResponse(); 
       $("#listview_AlertNotification").data("kendoListView").dataSource.read();       
        if (skin == 'dark') {           
            document.getElementsByClassName("k-listview")[0].style.backgroundColor= "unset";
        }
        setTimeout(function () {
           loadGisMapforAlert();
          }, 3000);

        setTimeout(function () {            
            if (countInterval ==null || countInterval==undefined) {
                countInterval = window.setInterval(loadcount, 2000);                
            }
        }, 2000);
        
    });
   
    function maxAlertDate() {
        var date = $("#maxAlertDate").val();
        return date;
    }   
    function setAlert() {
        if ($("#maxAlertDate").val() == undefined) {
            window.clearInterval(myinterval);
            myinterval = null;
            return false;
        }
        cubejsApi.load({
            measures: ["IipAlertData.count"],
            dimensions: ["IipAlertData.queryTableId", "IipAlertData.summary", "IipAlertData.colorCode", "IipAlertData.alert_number", "IipAlertData.alertid","IipAlertData.sourceIds", "IipAlertData.alert_date"],
            filters: [
                {
                    member: "IipAlertData.alert_date",
                    operator: "afterDate",
                    values: [maxAlertDate()]
                },
                {
                    member: "IipAlertData.isVisible",
                    operator: "equals",
                    values: ["true"]
                }
            ],
            order: { 'IipAlertData.alert_date': 'asc' },
            limit: 10
        }).then((resultSet) => {            
            var list = resultSet.loadResponse.results[0].data;
            if(dataSource1 != undefined && dataSource1 != null && dataSource1._data.length > 0){
                list.forEach(function (item, index) {                 
                    if (item["IipAlertData.alertid"] != document.getElementById('alertId').value  && item["IipAlertData.sourceIds"] != null && (document.getElementById(item["IipAlertData.sourceIds"]) == undefined || document.getElementById(item["IipAlertData.sourceIds"]) == null)) {
                        var str = "<div class='panel notification-item' id='#=Id#' data-alertid='#=ALERTIDId#' style='font-size:10px;'><div class='panel-heading notification-heading row no-gutters'  style='border-width: 3px 3px 3px 10px; border-style: solid; border-color:#=colorCode# ; border-image: initial;'><div class='col-11 row p-1' style='padding: 5px; color: gray;'>    <div class='col-12 highlight' style='margin-left: 10px; margin-bottom: 5px;'>	<b> Summary : </b>#=summary#</div>    <div class='col-12' style='margin-left: 10px; margin-bottom: 5px;'><b>Alert Number : </b>#=NoteDescription#</div>    <div class='col-12' style='margin-left: 10px; margin-bottom: 5px;'><b>Source : </b>Dail 100</div><div class='col-12' style='margin-left: 10px;'><b>Date &amp; Time : </b>#=alert_date#</div>  </div><div class='col-1  p-1'>    <span style='float: right; cursor: pointer;margin-top:5px;'>        <i class='fal fa-check'></i>    </span>    <button class='btn btn-primary shadow-sm' style='float: right; top: 28px; right: -15px; position: absolute;height: 40%;' onclick='viewDetails(\"#=Id#\",\"#=ALERTIDId#\",\"#=ALERTNO#\")'><span class='fal fa-eye'></span></button></div></div></div>";
                        str = str.replaceAll("#=Id#", item["IipAlertData.sourceIds"]);
                        str = str.replaceAll("#=ALERTIDId#", item["IipAlertData.alertid"]);
                        str = str.replaceAll("#=ALERTNO#", item["IipAlertData.alert_number"]);
                        str = str.replaceAll("#=colorCode#", item["IipAlertData.colorCode"]);
                        str = str.replaceAll("#=summary#", item["IipAlertData.summary"]);
                        str = str.replaceAll("#=NoteDescription#", item["IipAlertData.alert_number"]);
                        var dateIST = new Date(item["IipAlertData.alert_date"]);
                        //dateIST.setHours(dateIST.getHours() + 5);
                        //dateIST.setMinutes(dateIST.getMinutes() + 30);
                        str = str.replaceAll("#=alert_date#", kendo.toString(kendo.parseDate(dateIST), 'dddd, dd MMMM yyyy hh:mm tt'));
                        $('#listview_AlertNotification .k-listview-content').prepend($.parseHTML(str));
                        $("#maxAlertDate").val(item["IipAlertData.alert_date"].split('.')[0]);
                        if (document.getElementById("listview_AlertNotification") != undefined && document.getElementById("listview_AlertNotification") != null && $('#listview_AlertNotification .k-listview-content').length > 0) {
                            ShowNotification("New Alert - " + item["IipAlertData.summary"], "success");
                        }                    
                        onCallBackRefresh();
                        loadGisMapforAlert(item["IipAlertData.sourceIds"]);
                   
                    }
               
                })
            }
            else{
                $("#listview_AlertNotification").data("kendoListView").dataSource.read(); 
            }
            
        });
    }

    var dataSource1 = new kendo.data.DataSource({
        transport: {
            read: {
                url: "/Cms/BusinessAnalytics/ReadIIPAlertData",
            },
        },
        change: function (data) {
            var dateIST = new Date(data.items.length > 0 ? data.items[0].alert_date.split('.')[0] :new Date());
            //dateIST.setHours(dateIST.getHours() - 5);
            //dateIST.setMinutes(dateIST.getMinutes() - 30);
            $("#maxAlertDate").val(kendo.toString(kendo.parseDate(dateIST), 'yyyy-MM-ddTHH:mm:ss'));
            if (myinterval ==null || myinterval==undefined) {
                myinterval = window.setInterval(setAlert, time_delay);                
            }            
        },

    });

    $("#listview_AlertNotification").kendoListView({
        dataSource: dataSource1,
        autoBind:true,
        tagName: "div",
        template: kendo.template($("#template_notification").html())
    });
    function viewDetails(id,alertId,alertNumber) {        
        var elem=document.querySelector('[data-alertid="'+alertId+'"]');
        var color=elem!=undefined ? elem.getElementsByClassName("notification-heading")[0].style.borderColor : "#f8f8f8";
        var singletick= elem!=undefined ? elem.querySelector('.fa-check') : null;
        var update=false;
        if(singletick!=null && singletick!=undefined){
            elem.querySelector('.fa-check').style.color="deepskyblue";
            elem.querySelector('.fa-check').className='fal fa-check-double';
            update=true;
        }
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("CCTV", "BusinessAnalytics", new { @area="Cms"})?id='+id+'&alertId='+alertId+'&alertNumber='+alertNumber+'&isUpdate='+update+'&color='+color;
        win.OpenWindow({ Title: 'Details', Width: 1200, Height: 800 });
        win.CallParentfunction = onCallBackRefresh;
        return false; 
    }     
    function ViewAllAlert() {
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("IipAlertList", "BusinessAnalytics", new { @area="Cms"})';
        win.OpenWindow({ Title: 'Alert List', Width: 1200, Height: 800 });
        return false;
    } 
    function convertDateToIST(datetime){
        var dateIST = new Date(datetime);
        dateIST.setHours(dateIST.getHours() + 5);
        dateIST.setMinutes(dateIST.getMinutes() + 30);
        return dateIST;
    }
    function timeDelayCalculation(ct,vt){          
        if(vt==null){
            var now = new Date();
            var diffMs=now-ct;
            var delay = Math.round((diffMs / 1000) / 60);  //minutes
            //var delay = Math.round(Math.abs(diffMs) / 36e5); //hours
            return delay;
        }
        else{

            var diffMs=new Date(vt)-ct;
            var delay=Math.round((diffMs / 1000) / 60); //minutes
            //var delay = Math.round(Math.abs(diffMs) / 36e5); //hours
            return delay;
        }
    }
    function convertDate(dateStr){
        if(dateStr==null){
            return new Date();
        }
        else{
             return new Date(dateStr);
        }
    }
    function groupBy(objectArray, property) {
        //debugger;
        return objectArray.reduce((acc, obj) => {
            const key = obj[property];
            if (!acc[key]) {
                acc[key] = [];
            }
            acc[key].push(obj);
            return acc;
        }, {});
    }
    function fetchData(eventName, dataObj, ds) {        
        var dataArr = [];
        var byHrs = groupBy(dataObj, "hours");
        //var now = new Date().getHours();
        for (var i in byHrs) {            
            const index = ds.findIndex(o => 
                { return o.x === parseInt(i)}
            );
            //ds[index].y = (now - parseInt(i));
            if(index!=-1){
                ds[index].y = eventName;
                ds[index].description = byHrs[i].length;
            }
            
            //var obj = {
            //    x: i,
            //    y: (now-parseInt(i)),
            //};
            //dataArr.push(obj);
        }
        //return dataArr;
        return ds;
    }
    function onBlockClick(lt, rt, seriesName) {
        
        var chart = "Detail List Of Dial 100 Events";
        var ctime = "N/A";

        seriesName = seriesName.toUpperCase();
        seriesName.replaceAll(" ", "_");

        var t = "\""+lt + "\",\"" + rt +"\"";

        var param = param = encodeURIComponent("EVENTTYPE=" + seriesName + "&CTIME=" + ctime + "&TIME=" + t);
        var url = "/CMS/BusinessAnalytics/DrillDownReport?chartName=" + chart + "&param=" + param;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: chart, Width: 1200, Height: 650 });
        return false;
    }
    function separateClosedAndOpenEvents(objarr, prop) {       
        other = [];
        all = [];
        open = [];
        var ttt = objarr.reduce((acc, obj) => {
            const key = obj[prop];
            if (key == null) {

                open.push(obj);
            }
            else {
                other.push(obj);
            }
            return acc;
        }, {});
        all.push(other);
        all.push(open);        
        return all;
    }
    function loadGisMapforAlert(eventnumbers){        
        var ids=[];        
        if(eventnumbers !=null){
            eventnumbers.split(',').forEach(function(id) {            
                ids.push(id);
            });           
        }
        else{
            dataSource1._data.forEach(function(item) {
            item.sourceIds.split(',').forEach(function(id) {            
                ids.push(id);
            });           
        });
        }
        if(ids.length>0){
            ids=JSON.stringify(ids);
        }
        var url='@Configuration.GetSection("CubeJSSettings")["CubeJSBaseUrl"]'.concat('cubejs-api/v1/load');
          $.ajax({
                 type: "POST",
                 url: url,
                 data:`{
                    "query" :
                    {
                        "measures": ["Dial100Data.count"],
                        "dimensions": ["Dial100Data.caller_name","Dial100Data.event_number","Dial100Data.latitude","Dial100Data.longitude","Dial100Data.police_Station","Dial100Data.event_time","Dial100Data.event_type","Dial100Data.event_subType"],
                        "filters": [{
                            "and": [
                            {
                                "member": "Dial100Data.event_number",
                                "operator": "equals",
                                "values": `+ ids +`
                            }]
                        }]
                    } 
                }`,
                 contentType: "application/json; charset=utf-8",
                 crossDomain: true,
                 dataType: "json",
                 success: function (resultSet, status, jqXHR) {
                    if(eventnumbers !=null){

                        var locations = resultSet.data;
                        for (var i = 0; i < locations.length; i++) {               
                            var a = locations[i];
                            var eno = locations[i]['Dial100Data.event_number'];
                            var elem = $('div[id*="'+eno+'"]');
                            if(elem != null && elem !=undefined){
                                var colors=elem[0].children[0].style.borderColor;
                                var summary=elem[0].children[0].children[0].children[0].innerHTML;
                                var iconDes = L.divIcon({
                                html: '<i class="fa fa-map-marker fa-3x" style="color:'+colors+'"></i>',
                                iconSize: [20, 20],
                	            className: 'myDivIcon'
                                })
                                var title = summary+"<p><b>Caller Name :</b>" + locations[i]['Dial100Data.caller_name'] + "</p><p><b>Police Station :</b>" + locations[i]['Dial100Data.police_Station'] + "</p><p><b>Event Type :</b>" + locations[i]['Dial100Data.event_type'] + "</p><p><b>Event Sub Type :</b>" + locations[i]['Dial100Data.event_subType'] + "</p><p><b>Event Date :</b>" + locations[i]['Dial100Data.event_time'] + "</p>";
                                var marker = L.marker([a['Dial100Data.latitude'], a['Dial100Data.longitude']], {icon: iconDes});
                                marker.bindPopup(title);
                                iipmarkers.addLayer(marker);
                            }
                            else{                    
                                var title = "<p><b>Caller Name :</b>" + locations[i]['Dial100Data.caller_name'] + "</p><p><b>Police Station :</b>" + locations[i]['Dial100Data.police_Station'] + "</p><p><b>Event Type :</b>" + locations[i]['Dial100Data.event_type'] + "</p><p><b>Event Sub Type :</b>" + locations[i]['Dial100Data.event_subType'] + "</p><p><b>Event Date :</b>" + locations[i]['Dial100Data.event_time'] + "</p>";                   
                                var marker = L.marker([a['Dial100Data.latitude'], a['Dial100Data.longitude']]);
                                marker.bindPopup(title);
                                iipmarkers.addLayer(marker);
                            }
                        }
                    }
                    else{
                        if(resultSet.data.length == 0){
                                $("#IIPPHQDail100").html("No Open Events Present");
                                $("#IIPPHQDail100").css({
                                               "display" : "flex",
                                               "justify-content": "center",
                                });
                         }
                        else{

                            var locations=resultSet.data;       
                            document.getElementById('IIPPHQDail100').style.height = "500px";

                            var overlayMaps = {};
                            iipmarkers = L.markerClusterGroup({showCoverageOnHover: false});
		                    iipcameramarkers = L.markerClusterGroup({showCoverageOnHover: false});
                            for (var i = 0; i < locations.length; i++) {            
                                var loc = locations[i];
                                var eno = loc['Dial100Data.event_number'];
                                var elem = $('div[id*="'+eno+'"]');           
                                if(elem != null && elem !=undefined){  
                                    var sourceids=elem[0].id;
                                    var alertid=elem[0].getAttribute('data-alertid');
                                    var alertno=elem[0].getAttribute('data-alertno');
                                    var colors=elem[0].children[0].style.borderColor;
                                    var summary=elem[0].children[0].children[0].children[0].innerHTML;
                                    var iconDes = L.divIcon({
                                    html: '<i class="fa fa-map-marker fa-3x" style="color:'+colors+'"></i>',
                                    iconSize: [20, 20],
                                    className: 'myDivIcon'
                                    })
                                    var title = summary+"<p><b>Caller Name :</b>" + loc['Dial100Data.caller_name'] + "</p><p><b>Police Station :</b>" +loc['Dial100Data.police_Station'] + "</p><p><b>Event Type :</b>" + loc['Dial100Data.event_type'] + "</p><p><b>Event Sub Type :</b>" + loc['Dial100Data.event_subType'] + "</p><p><b>Event Date :</b>" + loc['Dial100Data.event_time'] + "</p>";
                                                    var marker = L.marker([loc['Dial100Data.latitude'], loc['Dial100Data.longitude']], {
                                                        icon: iconDes, 
                                                        contextmenu: true,
                                                        contextmenuWidth: 160,
                                                        contextmenuInheritItems: false,
                                                        contextmenuItems: [{
                                                            text: 'View Details',
                                                            callback: viewAlertDetails
                                                        }, '-', {
                                                            text: 'Search By Radius 500 M',
                                                            //icon: 'images/zoom-in.png',
                                                            callback: serachby500
                                                        }, {
                                                            text: 'Search By Radius 1 KM',
                                                            //icon: 'images/zoom-out.png',
                                                            callback: serachby1km
                                                        }, {
                                                            text: 'Search By Radius 5 KM',
                                                            //icon: 'images/zoom-out.png',
                                                            callback: serachby5km
                                                        }, {
                                                                text: 'Search By Radius 50 KM',
                                                                //icon: 'images/zoom-out.png',
                                                                callback: serachby50km
                                                            }, {
                                                            text: 'Search By Radius All',
                                                            //icon: 'images/zoom-out.png',
                                                            callback: serachbyall
                                                        }, {
                                                            text: 'Search By Police Station',
                                                            //icon: 'images/zoom-out.png',
                                                            callback: serachbypolicestation
                                                        }], alertId: alertid, alertNo: alertno, sourceIds: sourceids,policeStation :loc['Dial100Data.police_Station']
                                                    });
                                    marker.bindPopup(title);
                                    //marker.on('mouseover',function(ev) {
                                    //  marker.openPopup();
                                    //});
                                    iipmarkers.addLayer(marker);
                                }
                                else{                    
                                    var title = "<p><b>Caller Name :</b>" + loc['Dial100Data.caller_name'] + "</p><p><b>Police Station :</b>" + loc['Dial100Data.police_Station'] + "</p><p><b>Event Type :</b>" + locations[i]['Dial100Data.event_type'] + "</p><p><b>Event Sub Type :</b>" + locations[i]['Dial100Data.event_subType'] + "</p><p><b>Event Date :</b>" + locations[i]['Dial100Data.event_time'] + "</p>";                   
                                    var marker = L.marker([loc['Dial100Data.latitude'], loc['Dial100Data.longitude']],{contextmenu: true});
                                    marker.bindPopup(title);
                                    iipmarkers.addLayer(marker);
                                }
                            }
                            overlayMaps["Markers"]=iipmarkers;
                            var addressPoints = locations.map(function (p) { return [p['Dial100Data.latitude'], p['Dial100Data.longitude']]; });
                            var heat = L.heatLayer(addressPoints);
                            overlayMaps["Heat Map"]=heat;

                            var customControl =  L.Control.extend({

                                  options: {
                                    position: 'topleft'
                                  },

                                  onAdd: function (map) {
                                    var container = L.DomUtil.create('span');
                                    //container.type="button";
                                    container.title="View selected Camera";
                                    container.className = "fal fa-eye";                
                                    container.style.padding = '9px';
                                    container.style.color = 'blue';
                                    container.style.backgroundColor = 'white';
                                    container.style.border = "2px solid rgba(0,0,0,0.2)"; 
                                    container.onclick = onViewSelectedCctv
                                    return container;
                                  }
                                });
                            var customControl1 =  L.Control.extend({

                                  options: {
                                    position: 'topleft'
                                  },

                                  onAdd: function (map) {
                                    var container = L.DomUtil.create('span');
                                    //container.type="button";
                                    container.title="Clear Selected Camera";
                                    container.className = "fal fa-close";                
                                    container.style.padding = '9px 12px';
                                    container.style.color = 'red';
                                    container.style.top = '-17px';
                                    container.style.backgroundColor = 'white';
                                    container.style.border = "2px solid rgba(0,0,0,0.2)"; 
                                    container.onclick = onClearSelection
                                    return container;
                                  }
                                });
                            iipalertMap = L.map('IIPPHQDail100', {
	                            center: [26.8467, 80.9462],
	                            zoom: 1,
	                            maxZoom:20,
                                scrollWheelZoom: false,
	                            layers: [ iipmarkers,iipcameramarkers ],
                                fullscreenControl: {
                                    pseudoFullscreen: false
                                }
            
                            });
                            L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
                                    attribution: "© OpenStreetMap contributors"
                             }).addTo(iipalertMap);
                             iipalertMap.addControl(new customControl());
                             iipalertMap.addControl(new customControl1());
                            iipmarkers.getBounds().isValid();
                            iipalertMap.fitBounds(iipmarkers.getBounds());
                            L.control.layers(overlayMaps).addTo(iipalertMap);

    
                        }
                    }
                 },
                 error: function (jqXHR, status) {                   
                     console.log(jqXHR);
                     
                 }
              });
        }        
    function loadGisMapforAlert1(eventnumbers){
        var ids=[];        
        if(eventnumbers !=null){
            eventnumbers.split(',').forEach(function(id) {            
                ids.push(id);
            });           
        }
        else{
            dataSource1._data.forEach(function(item) {
            item.sourceIds.split(',').forEach(function(id) {            
                ids.push(id);
            });           
        });
        }
        ids=ids.slice(0,20)
        cubejsApi.load(
        {
            measures: ["Dial100Data.count"],
            dimensions: ["Dial100Data.caller_name","Dial100Data.event_number","Dial100Data.latitude","Dial100Data.longitude","Dial100Data.police_Station","Dial100Data.event_time","Dial100Data.event_type","Dial100Data.event_subType"],
            filters: [{
                "and": [
                {
                    "member": "Dial100Data.event_number",
                    "operator": "equals",
                    "values": ids
                }
                ]
            }],           
        }).then((resultSet) => {
        
        if(eventnumbers !=null){

            var locations = resultSet.loadResponse.results[0].data;
            for (var i = 0; i < locations.length; i++) {               
                var a = locations[i];
                var eno = locations[i]['Dial100Data.event_number'];
                var elem = $('div[id*="'+eno+'"]');
                if(elem != null && elem !=undefined){
                    var colors=elem[0].children[0].style.borderColor;
                    var summary=elem[0].children[0].children[0].children[0].innerHTML;
                    var iconDes = L.divIcon({
                    html: '<i class="fa fa-map-marker fa-3x" style="color:'+colors+'"></i>',
                    iconSize: [20, 20],
                	className: 'myDivIcon'
                    })
                    var title = summary+"<p><b>Caller Name :</b>" + locations[i]['Dial100Data.caller_name'] + "</p><p><b>Police Station :</b>" + locations[i]['Dial100Data.police_Station'] + "</p><p><b>Event Type :</b>" + locations[i]['Dial100Data.event_type'] + "</p><p><b>Event Sub Type :</b>" + locations[i]['Dial100Data.event_subType'] + "</p><p><b>Event Date :</b>" + locations[i]['Dial100Data.event_time'] + "</p>";
                    var marker = L.marker([a['Dial100Data.latitude'], a['Dial100Data.longitude']], {icon: iconDes});
                    marker.bindPopup(title);
                    iipmarkers.addLayer(marker);
                }
                else{                    
                    var title = "<p><b>Caller Name :</b>" + locations[i]['Dial100Data.caller_name'] + "</p><p><b>Police Station :</b>" + locations[i]['Dial100Data.police_Station'] + "</p><p><b>Event Type :</b>" + locations[i]['Dial100Data.event_type'] + "</p><p><b>Event Sub Type :</b>" + locations[i]['Dial100Data.event_subType'] + "</p><p><b>Event Date :</b>" + locations[i]['Dial100Data.event_time'] + "</p>";                   
                    var marker = L.marker([a['Dial100Data.latitude'], a['Dial100Data.longitude']]);
                    marker.bindPopup(title);
                    iipmarkers.addLayer(marker);
                }
            }
        }
        else{
            if(resultSet.loadResponses[0].data.length == 0){
                $("#IIPPHQDail100").html("No Open Events Present");
                $("#IIPPHQDail100").css({
                               "display" : "flex",
                               "justify-content": "center",
                      });
            }
            else{

                var locations=resultSet.loadResponse.results[0].data;       
                document.getElementById('IIPPHQDail100').style.height = "500px";

                var overlayMaps = {};
                iipmarkers = L.markerClusterGroup({showCoverageOnHover: false});
		        iipcameramarkers = L.markerClusterGroup({showCoverageOnHover: false});
                for (var i = 0; i < locations.length; i++) {            
                    var loc = locations[i];
                    var eno = loc['Dial100Data.event_number'];
                    var elem = $('div[id*="'+eno+'"]');           
                    if(elem != null && elem !=undefined){  
                        var sourceids=elem[0].id;
                        var alertid=elem[0].getAttribute('data-alertid');
                        var alertno=elem[0].getAttribute('data-alertno');
                        var colors=elem[0].children[0].style.borderColor;
                        var summary=elem[0].children[0].children[0].children[0].innerHTML;
                        var iconDes = L.divIcon({
                        html: '<i class="fa fa-map-marker fa-3x" style="color:'+colors+'"></i>',
                        iconSize: [20, 20],
                        className: 'myDivIcon'
                        })
                        var title = summary+"<p><b>Caller Name :</b>" + loc['Dial100Data.caller_name'] + "</p><p><b>Police Station :</b>" +loc['Dial100Data.police_Station'] + "</p><p><b>Event Type :</b>" + loc['Dial100Data.event_type'] + "</p><p><b>Event Sub Type :</b>" + loc['Dial100Data.event_subType'] + "</p><p><b>Event Date :</b>" + loc['Dial100Data.event_time'] + "</p>";
                                        var marker = L.marker([loc['Dial100Data.latitude'], loc['Dial100Data.longitude']], {
                                            icon: iconDes, 
                                            contextmenu: true,
                                            contextmenuWidth: 160,
                                            contextmenuInheritItems: false,
                                            contextmenuItems: [{
                                                text: 'View Details',
                                                callback: viewAlertDetails
                                            }, '-', {
                                                text: 'Search By Radius 500 M',
                                                //icon: 'images/zoom-in.png',
                                                callback: serachby500
                                            }, {
                                                text: 'Search By Radius 1 KM',
                                                //icon: 'images/zoom-out.png',
                                                callback: serachby1km
                                            }, {
                                                text: 'Search By Radius 5 KM',
                                                //icon: 'images/zoom-out.png',
                                                callback: serachby5km
                                            }, {
                                                text: 'Search By Radius 50 KM',
                                                //icon: 'images/zoom-out.png',
                                                callback: serachby50km
                                            }, {
                                                text: 'Search By Radius All',
                                                //icon: 'images/zoom-out.png',
                                                callback: serachbyall
                                            }, {
                                                text: 'Search By Police Station',
                                                //icon: 'images/zoom-out.png',
                                                callback: serachbypolicestation
                                            }], alertId: alertid, alertNo: alertno, sourceIds: sourceids,policeStation :loc['Dial100Data.police_Station']
                                        });
                        marker.bindPopup(title);
                        //marker.on('mouseover',function(ev) {
                        //  marker.openPopup();
                        //});
                        iipmarkers.addLayer(marker);
                    }
                    else{                    
                        var title = "<p><b>Caller Name :</b>" + loc['Dial100Data.caller_name'] + "</p><p><b>Police Station :</b>" + loc['Dial100Data.police_Station'] + "</p><p><b>Event Type :</b>" + locations[i]['Dial100Data.event_type'] + "</p><p><b>Event Sub Type :</b>" + locations[i]['Dial100Data.event_subType'] + "</p><p><b>Event Date :</b>" + locations[i]['Dial100Data.event_time'] + "</p>";                   
                        var marker = L.marker([loc['Dial100Data.latitude'], loc['Dial100Data.longitude']],{contextmenu: true});
                        marker.bindPopup(title);
                        iipmarkers.addLayer(marker);
                    }
                }
                overlayMaps["Markers"]=iipmarkers;
                var addressPoints = locations.map(function (p) { return [p['Dial100Data.latitude'], p['Dial100Data.longitude']]; });
                var heat = L.heatLayer(addressPoints);
                overlayMaps["Heat Map"]=heat;

                var customControl =  L.Control.extend({

                      options: {
                        position: 'topleft'
                      },

                      onAdd: function (map) {
                        var container = L.DomUtil.create('span');
                        //container.type="button";
                        container.title="View selected Camera";
                        container.className = "fal fa-eye";                
                        container.style.padding = '9px';
                        container.style.color = 'blue';
                        container.style.backgroundColor = 'white';
                        container.style.border = "2px solid rgba(0,0,0,0.2)"; 
                        container.onclick = onViewSelectedCctv
                        return container;
                      }
                    });
                var customControl1 =  L.Control.extend({

                      options: {
                        position: 'topleft'
                      },

                      onAdd: function (map) {
                        var container = L.DomUtil.create('span');
                        //container.type="button";
                        container.title="Clear Selected Camera";
                        container.className = "fal fa-close";                
                        container.style.padding = '9px 12px';
                        container.style.color = 'red';
                        container.style.top = '-17px';
                        container.style.backgroundColor = 'white';
                        container.style.border = "2px solid rgba(0,0,0,0.2)"; 
                        container.onclick = onClearSelection
                        return container;
                      }
                    });
                iipalertMap = L.map('IIPPHQDail100', {
	                center: [26.8467, 80.9462],
	                zoom: 1,
	                maxZoom:20,
                    scrollWheelZoom: false,
	                layers: [ iipmarkers,iipcameramarkers ],
                    fullscreenControl: {
                        pseudoFullscreen: false
                    }
            
                });
                L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
                        attribution: "© OpenStreetMap contributors"
                 }).addTo(iipalertMap);
                 iipalertMap.addControl(new customControl());
                 iipalertMap.addControl(new customControl1());
                //var legend = L.control({position: 'bottomleft'});

                //legend.onAdd = function (map) {
                //    var div = L.DomUtil.create('div', 'legend');

                //     div.style.fontFamily = "Lato,sans-serif";
                //     div.style.fontSize = "10px";
                //     for(var x in eventTypes){
                //            div.innerHTML +=  '<i class="fa fa-circle" style="color:'+colors[x]+';margin-right: 5px"></i>' + toPascalCase(eventTypes[x]) + '<br>'
                //    } 
                //    return div;
                //};

                //legend.addTo(map);

                iipmarkers.getBounds().isValid();
                iipalertMap.fitBounds(iipmarkers.getBounds());
                L.control.layers(overlayMaps).addTo(iipalertMap);


            }
        }
       
        });
    }    
    function onCallBackRefresh(){ 
        if(iipAlertStatusChart == undefined){
	        alertSummaryByStatus();
	        alertSummaryTimeDelay();
	        alertSummaryAvgResponse();
        }
        else
        {
	        reloadalertSummaryByStatus();
	        reloadAlertSummaryTimeDelay();
	        reloadAlertSummaryAvgResponse();
        }    
        loadcount();
    }
</script>
<div class="container-body" style="padding-top:5px;"> 
    <div class="row" style="margin-bottom:5px;">
         <div class="col-2">
            <input id="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" style="width: 100%" />
         </div>
          <div class="col-2 c_box_shadow" style="/*background: aliceblue;*/ border-radius: 5px;padding-top:4px;border: 1px solid lightblue;max-width:200px;">
              <div class="row">
                  <div class="col-3">
                    <i class="fa-light fa-bell-on" style="font-size: 16px;background: #ad67ff;color: white;border: 1px solid lightgray;padding: 5px;border-radius: 6px;"></i>
                  </div>
                  <div class="col-9">
                       <span style="color:gray;font-weight:600;font-size: 17px;">Alert : </span>
                        <span style="color:gray;font-weight:600;font-size: 18px;" id="totalAlert">0</span>
                  </div>
              </div>
           
         </div>
     </div>
    <div class="row">
        <input type="hidden" id="maxAlertDate" />
        <input type="hidden" id="alertId" />
        <input type="hidden" id="cameraIds" @*value="cfb3273a-e255-4985-9349-76fc2f43e5c9;ffba7128-3f3c-42dc-97ac-0dc4f54685fc;3ca7af4d-ad5a-434e-8e69-aa2fa6a96a49;da42ae19-fdf9-4f5b-91e7-6a39d61bdf43;aaa30bb8-8f68-4e1f-b989-84376f38ca06;9fa63b94-3977-4e02-bf79-946d7a5c3db5"*@ />
        <div id="main-section-charts" class="col-md-8" style="overflow-y: auto; max-height: 640px;padding-top:1px;">
            <div class="row">
                <div class="col-md-6">                    
                    <div class="card c_box_shadow" style="border-radius: 15px; padding: 10px; height: 420px;">
                        <h5 style="font-weight: 300; ">@*@Resource["Dial100OpenEventsByTimeDelay"]*@ Alert Summary By Status</h5>
                            <div id="alertSummaryStatus"></div>
                        

                    </div>
                </div>                
                <div class="col-md-6">                   
                    <div class="card c_box_shadow" style="border-radius: 15px; padding: 10px;height:420px;">
                        <h5 style="font-weight: 300;">Alert Respones Delay Summary</h5>
                            <div id="responseStatusBtns" style="margin-bottom: 15px;">
                                <span><button id="system" class="active">System</button></span>
                                <span><button id="read" class="">User [Read]</button></span>
                                <span><button id="close" class="">User [Close]</button></span>
                            </div>
                            <div id="alertResponedelay"></div>
                        

                    </div>
                </div>

            </div>
            <div class="row">                             
                <div class="col-md-12">                   
                    <div class="card c_box_shadow" style="border-radius: 15px; padding: 10px;">
                        <h5 style="font-weight: 300;">@*@Resource["Dial100TodaysOpen&ClosedEvents"]*@ Average Alert Respone Summary</h5>
                             <div id="avgResponseStatusBtns" style="margin-bottom: 15px;">
                                <span><button id="system1" class="active">System</button></span>
                                <span><button id="read1" class="">User [Read]</button></span>
                                <span><button id="close1" class="">User [Close]</button></span>
                            </div>                         
                            <div id="realtimelinechart"></div>
                        

                    </div>
                </div>

            </div>
            <div class="row pad-t-15">
                <div class="col-md-12">
                    <div class="control-section">
                        <div id="IIPPHQMap">
                            <div id="IIPPHQDail100"></div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <div class="col-md-4" style="padding-left: 0px;">
            <div class="row" style="margin-bottom: 5px; /*position: fixed;*/">
                <div class="col-md-12">
                    <div class="card c_box_shadow" style="border-radius: 28px; padding: 15px; min-height: 640px; width: 98%; ">
                        <div class="row">
                            <div class="col-6" >
                                <h6>@Resource["RecentsAlerts"]</h6>  
                                
                                
                                @*<a href="javascript:ViewAllAlert()" style="right: 16px; position: absolute; top: 0px;">@Resource["ViewAll"]</a>*@
                                
                               
                            </div>     
                            <div class="col-6" style="display: flex;">
                                <span class="fa-stack" onclick="AllAlertByType('#f71fa8')" data-count="0" style="color:rgb(247, 31, 168)">
                                  <i class="fa fa-circle fa-stack-2x"></i>
                                  <i class="fa fa-bell fa-stack-1x fa-inverse"></i>
                                </span>                               
                                <span class="fa-stack" onclick="AllAlertByType('#ffea00')" data-count="0" style="color:rgb(255, 234, 0)">
                                  <i class="fa fa-circle fa-stack-2x"></i>
                                  <i class="fa fa-bell fa-stack-1x fa-inverse"></i>
                                </span>
                                <span class="fa-stack" onclick="AllAlertByType('#32b232')" data-count="0" style="color:rgb(50, 178, 50)">
                                  <i class="fa fa-circle fa-stack-2x"></i>
                                  <i class="fa fa-bell fa-stack-1x fa-inverse"></i>
                                </span>
                                 <span class="fa-stack" onclick="AllAlertByType('#1f00ff')" data-count="0" style="color:rgb(31, 0, 255)"> 
                                  <i class="fa fa-circle fa-stack-2x"></i>
                                  <i class="fa fa-bell fa-stack-1x fa-inverse"></i>
                                </span> 
                                 <span class="fa-stack" onclick="ViewAllAlert()" data-count="All" style="color:gray"> 
                                  <i class="fa fa-circle fa-stack-2x"></i>
                                  <i class="fa fa-bell fa-stack-1x fa-inverse"></i>
                                </span>
                            </div>
                        </div>
                         <div class="row">
                            <div class="col-md-12">
                                <hr />
                                 <div id="listview_AlertNotification" style="overflow-y: auto; max-height: 550px;"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>           
        </div>
    </div>
</div>
<script type="text/x-kendo-tmpl" id="template_notification">
    <div class="panel notification-item" id="#=sourceIds#" data-alertid="#=alertid#" data-alertno="#=alert_number#">
         <div class="panel-heading notification-heading row no-gutters" data-toggle="collapse" data-target="\\#Collapse_#=sourceIds#" style="border-width: 3px 3px 3px 10px; border-style: solid; border-color:#=colorCode# ; border-image: initial;">
             <div class="col-11 row p-1" style="padding: 5px; color: gray;">
                 <div class="col-12 highlight textStyle" style="margin-left: 10px; margin-bottom: 5px;">	<b> Summary : </b>#=summary#</div>
                 <div class="col-12 textStyle" style="margin-left: 10px; margin-bottom: 5px;"><b>Alert Number : </b>#=alert_number#</div>
                 <div class="col-12 textStyle" style="margin-left: 10px; margin-bottom: 5px;"><b>Source : </b>Dail 100</div>                 
                 <div class="col-12 textStyle" style="margin-left: 10px;"><b>Date &amp; Time : </b>#=kendo.toString(kendo.parseDate(alert_date), 'dddd, dd MMMM yyyy hh:mm tt')#</div>
                 
             </div>
             <div class="col-1  p-1">
                 <span style="float: right; cursor: pointer;margin-top:5px;">
                     #if(isRead){#

                        <i class="fal fa-check-double" title='Read' style=color:deepskyblue></i>
                         #}else{#
                             <i class="fal fa-check" title='Unread'></i>
                             #}#
                    
                 </span>
                 <button class="btn btn-primary shadow-sm" style="float: right; top: 40px; right: -15px; position: absolute; height: 40%;" onclick="viewDetails('#=sourceIds#','#=alertid#','#=alert_number#')">
                     <span class="fal fa-eye"></span>
                     
                 </button>
             </div>
         </div>        
     </div>

</script>
<script>
    function alertSummaryByStatus(date) {
        cubejsApi.load({
            measures: ["IipAlertData.count"],
            dimensions: ["IipAlertData.alertid", "IipAlertData.isVisible", "IipAlertData.isRead"],           
            //order: { "IipAlertData.alert_date": "asc" },
            timeDimensions: [
                {
                    dimension: "IipAlertData.alert_date",
                    granularity: "hour",
                     dateRange: date==null || date==undefined  ? "Today" : [
                                date,
                                date
                              ] 
                },
            ],
        }).then((resultSet) => {  
            debugger;
            var dataS = resultSet.loadResponses[0].data;
            if (dataS.length == 0) {
                document.querySelector("#alertSummaryStatus").innerHTML = "<div style='display:flex; justify-content:center;'>No Data Found</div>";
            }
            else {
                var dataObj = dataS.map(i =>
                ({
                    //"xaxis": convertDateToIST(i["IipAlertData.alert_date.hour"]).getHours()+":"+convertDateToIST(i["IipAlertData.alert_date.hour"]).getMinutes()+" - "+(convertDateToIST(i["IipAlertData.alert_date.hour"]).getHours()+1)+":"+convertDateToIST(i["IipAlertData.alert_date.hour"]).getMinutes(),                    
                    "xaxis": new Date(i["IipAlertData.alert_date.hour"]).getHours() + ":00" + " - " + (new Date(i["IipAlertData.alert_date.hour"]).getHours() + 1) + ":00",                                        
                    "yaxis": (i["IipAlertData.isVisible"] && !i["IipAlertData.isRead"] ) ? 'Unread' : (i["IipAlertData.isVisible"] && i["IipAlertData.isRead"]) ? 'Read' : 'Closed',
                }));
                var grpx= groupBy(dataObj, "xaxis");
                var grpy= groupBy(dataObj, "yaxis");
                var dataSource1 = dataObj;	 
			    var catX=[];
			    var catY=[];
			    var ser=[];
			    dataSource1.forEach((index) => {
				    catX.push(index['xaxis']);
				    catY.push(index['yaxis']);					
				
			    });
			    var uniqueCatX = catX.filter(function(itm, i, catX) {
				    return i == catX.indexOf(itm);
			    });
		        var uniqueCatY=['Unread', 'Read','Closed']; 
               
                uniqueCatY.forEach(function(item) {
                    var count=[];
                    for (var x in grpx) { 
                        var q=0;  
                        for (var z in grpx[x]) {                                                      
                            if (grpx[x][z].yaxis == item) {
                                q++;
					        }
                        }
                        count.push(q);
                    }
                    var arr={name:item,data:count};
				    ser.push(arr);
				           
                });   
                    
               
                var options = {
			    chart: {
				type: "bar",
				height:"350",
				stacked: true,
			    },
                    colors: ['#FF0000', '#FFB200', '#228B22'],
                dataLabels: {
                          enabled: false
                        },
			    stroke: {
                show: true,
                  width: 1,
                  colors: ["#fff"]
                        },
                fill: {
                          opacity: 1
                        },
			    theme: {
                    mode: skin=="dark" ? "dark" : "light", 
     
                },
			    plotOptions: {
			      bar: {				
				    distributed: false,
				    horizontal: false
                              


			      }
			    },
 
			    series: ser,
			    xaxis: {
				    categories: uniqueCatX,
				    labels:{show:true,align:"left"},
                    //title: {
                    //    text: 'Hours'
                    //}
			      },
                yaxis: {
  
                },
                tooltip: {
                          y: {
                            formatter: function (val) {
                              return val
                            }
                          }
                        },



			legend:{show:true,position:"top"},
			labels: {
				style: {				 
				  fontSize: "12px"
				}
			}
			}
            //document.getElementById('heatmap').innerHTML = "";
            iipAlertStatusChart = new ApexCharts(document.querySelector("#alertSummaryStatus"), options);
                iipAlertStatusChart.render();
            }           
            //heatMapReloadInterval = window.setInterval(reloadAlertTimeDelayChart, 10000);

            
        });
    }
    function reloadalertSummaryByStatus(date) {
        cubejsApi.load({
            measures: ["IipAlertData.count"],
            dimensions: ["IipAlertData.alertid", "IipAlertData.isVisible", "IipAlertData.isRead"],           
            //order: { "IipAlertData.alert_date": "asc" },
            timeDimensions: [
                {
                    dimension: "IipAlertData.alert_date",
                    granularity: "hour",
                    dateRange: date==null || date==undefined ? "Today" : [
                                date,
                                date
                              ] 
                },
            ],
        }).then((resultSet) => {             
            var dataS = resultSet.loadResponses[0].data;
            if (dataS.length == 0) {
                document.querySelector("#alertSummaryStatus").innerHTML = "<div style='display:flex; justify-content:center;'>No Data Found</div>";
            }
            else {
                var dataObj = dataS.map(i =>
                ({
                    //"xaxis": convertDateToIST(i["IipAlertData.alert_date.hour"]).getHours()+":"+convertDateToIST(i["IipAlertData.alert_date.hour"]).getMinutes()+" - "+(convertDateToIST(i["IipAlertData.alert_date.hour"]).getHours()+1)+":"+convertDateToIST(i["IipAlertData.alert_date.hour"]).getMinutes(),                                      
                    "xaxis": new Date(i["IipAlertData.alert_date.hour"]).getHours() + ":00" + " - " + (new Date(i["IipAlertData.alert_date.hour"]).getHours() + 1) + ":00",                    
                    "yaxis": (i["IipAlertData.isVisible"] && !i["IipAlertData.isRead"] ) ? 'Unread' : (i["IipAlertData.isVisible"] && i["IipAlertData.isRead"]) ? 'Read' : 'Closed',
                }));
                var grpx= groupBy(dataObj, "xaxis");
                var grpy= groupBy(dataObj, "yaxis");
                var dataSource1 = dataObj;	 
			    var catX=[];
			    var catY=[];
			    var ser=[];
			    dataSource1.forEach((index) => {
				    catX.push(index['xaxis']);
				    catY.push(index['yaxis']);					
				
			    });
			    var uniqueCatX = catX.filter(function(itm, i, catX) {
				    return i == catX.indexOf(itm);
			    });
		        var uniqueCatY=['Unread', 'Read','Closed']; 
               
                uniqueCatY.forEach(function(item) {
                    var count=[];
                    for (var x in grpx) { 
                        var q=0;  
                        for (var z in grpx[x]) {                                                      
                            if (grpx[x][z].yaxis == item) {
                                q++;
					        }
                        }
                        count.push(q);
                    }
                    var arr={name:item,data:count};
				    ser.push(arr);
				           
                });
                    
               
                iipAlertStatusChart.updateOptions({
                            xaxis: {
                                categories: uniqueCatX
                            },
                            series:ser,
                        });
           }
            
        });
    }
    function alertSummaryTimeDelay(date) {
        cubejsApi.load({
            measures: ["IipAlertData.count"],
            dimensions: ["IipAlertData.alertid", "IipAlertData.alert_date", "IipAlertData.event_datetime"],            
            //order: { "IipAlertData.alert_date": "asc" },
            timeDimensions: [
                {
                    dimension: "IipAlertData.alert_date",
                    granularity: "day",
                    dateRange: date == null || date==undefined ? "Today" : [
                        date,
                        date
                    ]
                },
            ],
        }).then((resultSet) => {             
            var dataS = resultSet.loadResponses[0].data;
            if (dataS.length == 0) {
                document.querySelector("#alertResponedelay").innerHTML = "<div style='display:flex; justify-content:center;'>No Data Found</div>";
            }
            else {
                $("#totalAlert").text(dataS.length);
                var dataObj = dataS.map(i =>
                ({                    
                    "xaxis": timeDelayCalculation(new Date(i["IipAlertData.event_datetime"]),new Date(i["IipAlertData.alert_date"])) < 16 ? '0-15 Min' : (timeDelayCalculation(new Date(i["IipAlertData.event_datetime"]),new Date(i["IipAlertData.alert_date"])) >15 && timeDelayCalculation(new Date(i["IipAlertData.event_datetime"]),new Date(i["IipAlertData.alert_date"])) <31 ) ?  '16-30 Min' : timeDelayCalculation(new Date(i["IipAlertData.event_datetime"]),new Date(i["IipAlertData.alert_date"])) >30 ? '>30 Min' : 'Close' ,                                       
                }));
                var grpx= groupBy(dataObj, "xaxis");
                var count=[];		
                var cat=['0-15 Min', '16-30 Min','>30 Min'];
                cat.forEach(function(x) {  
                    if(grpx[x] != null && grpx[x] != undefined){
				        count.push(grpx[x].length);

                    }
                    else{
				        count.push(0);

                    }
			    });
                var options = {
                        series: count,
                        chart: {
                            type: "pie",
                        height: "350",
                            width: "100%",
                            //events: {
                            //    dataPointSelection: function (event, chartContext, config) {
                            //        OnSeriesClick(event, chartContext, config);
                            //    }
                            //}
                        },
                        labels: cat,
                    colors: ['#00BFFF', '#FFB200', '#FF0000', '#A9A9A9'],

                        theme: {
                            mode: skin == "dark" ? "dark" : "light",
                        
                        },
                    legend: {
                    position: "bottom",
                    fontSize: '10px',
                    fontFamily: 'Lato',
                    fontWeight: 400,
                },
                stroke: { show: false },
                //dataLabels: {
                //   formatter(val, opts) {
                //     const name = opts.w.globals.labels[opts.seriesIndex]
                //     return [name]
                //     }
                //      },
                responsive: [{
                    breakpoint: undefined,
                    options: {},
                }]


                };
                iipAlertResponseDelayChart = new ApexCharts(document.querySelector("#alertResponedelay"), options);
                iipAlertResponseDelayChart.render();
            }           
            //heatMapReloadInterval = window.setInterval(reloadAlertTimeDelayChart, 10000);

              var resetResponseStatusBtnsClasses = function (activeEl) {                
                var els =document.getElementById("responseStatusBtns").querySelectorAll('button')
                Array.prototype.forEach.call(els, function (el) {
                    el.classList.remove('active')
                })

                activeEl.target.classList.add('active')
            }
            document.querySelector('#system').addEventListener('click', function (e) {    
                 var dt=$("#date").val();
                alertSummarySystemTimeDelay(dt);
                resetResponseStatusBtnsClasses(e);
            })
            document.querySelector('#read').addEventListener('click', function (e) {  
                 var dt=$("#date").val();
                alertSummaryReadTimeDelay(dt);
                resetResponseStatusBtnsClasses(e);

            })
            document.querySelector('#close').addEventListener('click', function (e) { 
                 var dt=$("#date").val();
                alertSummaryCloseTimeDelay(dt);
                resetResponseStatusBtnsClasses(e);
            })
            
        });
    }
    function alertSummarySystemTimeDelay(date) {
        cubejsApi.load({
            measures: ["IipAlertData.count"],
            dimensions: ["IipAlertData.alertid", "IipAlertData.alert_date", "IipAlertData.event_datetime"],            
            //order: { "IipAlertData.alert_date": "asc" },
            timeDimensions: [
                {
                    dimension: "IipAlertData.alert_date",
                    granularity: "day",
                    dateRange: date == null || date==undefined ? "Today" : [
                        date,
                        date
                    ]
                },
            ],
        }).then((resultSet) => {               
            var dataS = resultSet.loadResponses[0].data;
            if (dataS.length == 0) {
                document.querySelector("#alertResponedelay").innerHTML = "<div style='display:flex; justify-content:center;'>No Data Found</div>";
            }
            else {
                $("#totalAlert").text(dataS.length);
                var dataObj = dataS.map(i =>
                ({                    
                    "xaxis": timeDelayCalculation(new Date(i["IipAlertData.event_datetime"]),new Date(i["IipAlertData.alert_date"])) < 16 ? '0-15 Min' : (timeDelayCalculation(new Date(i["IipAlertData.event_datetime"]),new Date(i["IipAlertData.alert_date"])) >15 && timeDelayCalculation(new Date(i["IipAlertData.event_datetime"]),new Date(i["IipAlertData.alert_date"])) <31 ) ?  '16-30 Min' : timeDelayCalculation(new Date(i["IipAlertData.event_datetime"]),new Date(i["IipAlertData.alert_date"])) >30 ? '>30 Min' : 'Close' ,                                       
                }));
                var grpx= groupBy(dataObj, "xaxis");
                var count=[];
			    var cat=['0-15 Min', '16-30 Min','>30 Min'];
                cat.forEach(function(x) {  
                    if(grpx[x] != null && grpx[x] != undefined){
				        count.push(grpx[x].length);

                    }
                    else{
				        count.push(0);

                    }
			    });			 
               iipAlertResponseDelayChart.updateOptions({
                            labels: cat,
                            series:count,
                        });
                
            }           
            //heatMapReloadInterval = window.setInterval(reloadAlertTimeDelayChart, 10000);
           
            
        });
    }
    function alertSummaryReadTimeDelay(date) {
        cubejsApi.load({
            measures: ["IipAlertData.count"],
            dimensions: ["IipAlertData.alertid", "IipAlertData.alert_date", "IipAlertData.open_datetime"],
            //filters: [
            //    {
            //        "member": "IipAlertData.isVisible",
            //        "operator": "equals",
            //        "values": [
            //        "true"
            //        ]
            //    },
            //    {
            //        "member": "IipAlertData.isRead",
            //        "operator": "equals",
            //        "values": [
            //        "true"
            //        ]
            //    },
            //],
            //order: { "IipAlertData.alert_date": "asc" },
            timeDimensions: [
                {
                    dimension: "IipAlertData.alert_date",
                    granularity: "day",
                    dateRange: date == null || date==undefined ? "Today" : [
                        date,
                        date
                    ]
                },
            ],
        }).then((resultSet) => { 
            var dataS = resultSet.loadResponses[0].data;
            if (dataS.length == 0) {
                document.querySelector("#alertResponedelay").innerHTML = "<div style='display:flex; justify-content:center;'>No Data Found</div>";
            }
            else {
                $("#totalAlert").text(dataS.length);
                var dataObj = dataS.map(i =>
                ({                    
                    "xaxis": i["IipAlertData.open_datetime"]== null ? "No Read Response" : timeDelayCalculation(new Date(i["IipAlertData.alert_date"]),i["IipAlertData.open_datetime"]) < 16 ? '0-15 Min' :(timeDelayCalculation(new Date(i["IipAlertData.alert_date"]),i["IipAlertData.open_datetime"]) >15 && timeDelayCalculation(new Date(i["IipAlertData.alert_date"]),i["IipAlertData.open_datetime"]) <31 ) ?  '16-30 Min' : timeDelayCalculation(new Date(i["IipAlertData.alert_date"]),i["IipAlertData.open_datetime"]) >30 ? '>30 Min' : 'Close' ,                                       
                }));
                var grpx= groupBy(dataObj, "xaxis");
                var count=[];
			   var cat=['0-15 Min', '16-30 Min','>30 Min',"No Read Response"];
                cat.forEach(function(x) {  
                    if(grpx[x] != null && grpx[x] != undefined){
				        count.push(grpx[x].length);

                    }
                    else{
				        count.push(0);

                    }
			    });
               iipAlertResponseDelayChart.updateOptions({
                            labels: cat,
                            series:count,
                        });
                
            }           
            //heatMapReloadInterval = window.setInterval(reloadAlertTimeDelayChart, 10000);
           
            
        });
    }
    function alertSummaryCloseTimeDelay(date) {        
        cubejsApi.load({
            measures: ["IipAlertData.count"],
            dimensions: ["IipAlertData.alertid", "IipAlertData.alert_date", "IipAlertData.close_datetime"],
            //filters: [
            //    {
            //        "member": "IipAlertData.isVisible",
            //        "operator": "equals",
            //        "values": [
            //        "false"
            //        ]
            //    }
            //],
            //order: { "IipAlertData.alert_date": "asc" },
            timeDimensions: [
                {
                    dimension: "IipAlertData.alert_date",
                    granularity: "day",
                    dateRange: date == null || date==undefined ? "Today" : [
                        date,
                        date
                    ]
                },
            ],
        }).then((resultSet) => {
            var dataS = resultSet.loadResponses[0].data;
            if (dataS.length == 0) {
                document.querySelector("#alertResponedelay").innerHTML = "<div style='display:flex; justify-content:center;'>No Data Found</div>";
            }
            else {
                $("#totalAlert").text(dataS.length);
                var dataObj = dataS.map(i =>
                ({                    
                    "xaxis": i["IipAlertData.close_datetime"]==null ? "No Close Response" : timeDelayCalculation(new Date(i["IipAlertData.alert_date"]), i["IipAlertData.close_datetime"]) < 16 ? '0-15 Min' : (timeDelayCalculation(new Date(i["IipAlertData.alert_date"]), i["IipAlertData.close_datetime"]) > 15 && timeDelayCalculation(new Date(i["IipAlertData.alert_date"]), i["IipAlertData.close_datetime"]) < 31) ? '16-30 Min' : timeDelayCalculation(new Date(i["IipAlertData.alert_date"]), i["IipAlertData.close_datetime"]) > 30 ? '>30 Min' : 'Close',
                }));
                var grpx= groupBy(dataObj, "xaxis");
                var count=[];
			    var cat=['0-15 Min', '16-30 Min','>30 Min',"No Close Response"];
                cat.forEach(function(x) {  
                    if(grpx[x] != null && grpx[x] != undefined){
				        count.push(grpx[x].length);

                    }
                    else{
				        count.push(0);

                    }
			    });

                iipAlertResponseDelayChart.updateOptions({
                            labels: cat,
                            series:count,
                        });
               
            }           
            //heatMapReloadInterval = window.setInterval(reloadAlertTimeDelayChart, 10000);           
            
        });
    }
    function alertSummaryAvgResponse(date) {
        cubejsApi.load({
            measures: ["IipAlertData.count"],
            dimensions: ["IipAlertData.colorCode", "IipAlertData.alert_date", "IipAlertData.event_datetime"],           
            //order: { "IipAlertData.alert_date": "asc" },
            timeDimensions: [
                {
                    dimension: "IipAlertData.alert_date",
                    granularity: "minute",
                    dateRange: date == null || date==undefined ? "Today" : [
                        date,
                        date
                    ]
                },
            ],
        }).then((resultSet) => {  
            var dataS = resultSet.loadResponses[0].data;
            if (dataS.length == 0) {
                document.querySelector("#realtimelinechart").innerHTML = "<div style='display:flex; justify-content:center;'>No Data Found</div>";
            }
            else {
                var dataObj = dataS.map(i =>
                ({
                    "xaxis": new Date(i["IipAlertData.alert_date.minute"]),
                    "color": i["IipAlertData.colorCode"],
                    "yaxis": timeDelayCalculation(new Date(i["IipAlertData.event_datetime"]),new Date(i["IipAlertData.alert_date"])) ,
                }));
                var grpc = groupBy(dataObj, "color");
                var dataset=[];
                for (var c in grpc) 
                {
                    var grpx = groupBy(grpc[c], "xaxis");
                    for (var x in grpx) {
                        var dur=0;
                        var childGrp=grpx[x];
                        for (var y in childGrp)
                        {
                            dur += childGrp[y].yaxis;
                        }
                        var item={x:x,y:Math.floor(dur/childGrp.length),col:c};
                        dataset.push(item);
                    }
                }
                var catX=[];
			    var catY=[];
			    var ser=[];
			    dataset.forEach((index) => {
				    catX.push(index['x']);
				    catY.push(index['col']);					
				
			    });
			    var uniqueCatX = catX.filter(function(itm, i, catX) {
				    return i == catX.indexOf(itm);
			    });
	
			    var uniqueCatY = catY.filter(function(itm, i, catY) {
				    return i == catY.indexOf(itm);
			    });
		 
			    uniqueCatY.forEach(function(item) {				
					var count=[];
					dataset.forEach((index) => {
						if(item==index['col']){						
							count.push(Array(new Date(index['x']), index['y']));
						}										
					});
                    var color_name = item=="#f71fa8" ? "Pink" :  item=="#ffc70d" ? "Orange" :  item=="#ffea00" ? "Yellow" : "Blue" 
				    var arr={data:count,name:color_name};				 
				    ser.push(arr);
			    });
			
                var options = {
                    colors:uniqueCatY,
                    series: ser,
                    theme: {
                        mode: skin == "dark" ? "dark" : "light",

                    },
                    chart: {
                        id: 'realtimelinechart',
                        height: 350,
                        type: 'line',
                        animations: {
                            enabled: true,
                            easing: 'linear',
                            dynamicAnimation: {
                                speed: 1000
                            }
                        },
                        toolbar: {
                            show: true
                        },
                        zoom: {
                            enabled: true,
                            //autoScaleYaxis: true,
                        },


                    },
                    dataLabels: {
                        enabled: true
                    },
                    stroke: {
                        curve: 'smooth',
                        width: 2,
                    },
                    title: {
                        //text: 'Dynamic Updating Chart for Open Events',
                        //align: 'left'
                    },
                    markers: {
                        size: 0
                    },
                    xaxis: {
                        labels: {
                            datetimeUTC: false
                        },
                        type: 'datetime',    
                        title: {
                            text: 'Time'
                        }
                    },
                    yaxis: {
                       title: {
                            text: 'Minutes'
                          },
                        labels: {
                              formatter: (value) => { return value+" Min" },
                          },
                    },
                    legend: {
                        show: false
                    },
                };
     
                iipAvgAlertResponseChart = new ApexCharts(document.querySelector("#realtimelinechart"), options);
                iipAvgAlertResponseChart.render();
            }

            var resetAvgResponseStatusBtnsClasses = function (activeEl) {                
                var els =document.getElementById("avgResponseStatusBtns").querySelectorAll('button')
                Array.prototype.forEach.call(els, function (el) {
                    el.classList.remove('active')
                })

                activeEl.target.classList.add('active')
            }
			
            
            document.querySelector('#system1').addEventListener('click', function (e) { 
                    var dt=$("#date").val();
                    alertSummarySystemAvgResponse(dt);                   
                    resetAvgResponseStatusBtnsClasses(e);
            })
            document.querySelector('#read1').addEventListener('click', function (e) {
                    var dt=$("#date").val();              
                    alertSummaryReadAvgResponse(dt);
                    resetAvgResponseStatusBtnsClasses(e); 
            })
            document.querySelector('#close1').addEventListener('click', function (e) {  
                 var dt=$("#date").val();
                alertSummaryCloseAvgResponse(dt);
                resetAvgResponseStatusBtnsClasses(e); 
            })

        });
    }
    function alertSummarySystemAvgResponse(date) {
        cubejsApi.load({
            measures: ["IipAlertData.count"],
            dimensions: ["IipAlertData.colorCode", "IipAlertData.alert_date", "IipAlertData.event_datetime"],           
            //order: { "IipAlertData.alert_date": "asc" },
            timeDimensions: [
                {
                    dimension: "IipAlertData.alert_date",
                    granularity: "minute",
                    dateRange: date == null || date==undefined ? "Today" : [
                        date,
                        date
                    ]
                },
            ],
        }).then((resultSet) => {           
            var dataS = resultSet.loadResponses[0].data;
            if (dataS.length == 0) {
                document.querySelector("#realtimelinechart").innerHTML = "<div style='display:flex; justify-content:center;'>No Data Found</div>";
            }
            else {
                var dataObj = dataS.map(i =>
                ({
                    "xaxis":  new Date(i["IipAlertData.alert_date.minute"]),
                    "color": i["IipAlertData.colorCode"],
                    "yaxis": timeDelayCalculation(new Date(i["IipAlertData.event_datetime"]),new Date(i["IipAlertData.alert_date"])) ,
                }));
                var grpc = groupBy(dataObj, "color");
                var dataset=[];
                for (var c in grpc) 
                {
                    var grpx = groupBy(grpc[c], "xaxis");
                    for (var x in grpx) {
                        var dur=0;
                        var childGrp=grpx[x];
                        for (var y in childGrp)
                        {
                            dur += childGrp[y].yaxis;
                        }
                        var item={x:x,y:Math.floor(dur/childGrp.length),col:c};
                        dataset.push(item);
                    }
                }
                var catX=[];
			    var catY=[];
			    var ser=[];
			    dataset.forEach((index) => {
				    catX.push(index['x']);
				    catY.push(index['col']);					
				
			    });
			    var uniqueCatX = catX.filter(function(itm, i, catX) {
				    return i == catX.indexOf(itm);
			    });
	
			    var uniqueCatY = catY.filter(function(itm, i, catY) {
				    return i == catY.indexOf(itm);
			    });
		 
			    uniqueCatY.forEach(function(item) {				
					var count=[];
					dataset.forEach((index) => {
						if(item==index['col']){						
							count.push(Array(new Date(index['x']), index['y']));
						}										
					});
				    var color_name = item=="#f71fa8" ? "Pink" :  item=="#ffc70d" ? "Orange" :  item=="#ffea00" ? "Yellow" : "Blue" 
				    var arr={data:count,name:color_name};				 
				    ser.push(arr);
			    });

                iipAvgAlertResponseChart.updateOptions({
                //            xaxis: {
                //            categories: uniqueCatX,
                //            //type: 'datetime',
				            //labels:{show:true,align:"left"}
			             //   },
                            colors: uniqueCatY,
                            series:ser
                        });
                
              
            } 

        });
    }
    function alertSummaryReadAvgResponse(date) {
    cubejsApi.load({
        measures: ["IipAlertData.count"],
        dimensions: ["IipAlertData.colorCode", "IipAlertData.alert_date", "IipAlertData.open_datetime"],   
         //filters: [              
         //       {
         //           "member": "IipAlertData.isRead",
         //           "operator": "equals",
         //           "values": [
         //           "true"
         //           ]
         //       },
         //   ],
        //order: { "IipAlertData.alert_date": "asc" },
        timeDimensions: [
            {
                dimension: "IipAlertData.alert_date",
                granularity: "minute",
                 dateRange: date == null || date==undefined ? "Today" : [
                        date,
                        date
                    ]
            },
        ],
    }).then((resultSet) => {           
        var dataS = resultSet.loadResponses[0].data;
        if (dataS.length == 0) {
            document.querySelector("#realtimelinechart").innerHTML = "<div style='display:flex; justify-content:center;'>No Data Found</div>";
        }
        else {
            dataS=dataS.filter(function (e) {
                return e["IipAlertData.open_datetime"] != null;
            });
            var dataObj = dataS.map(i =>
            ({
                "xaxis":  new Date(i["IipAlertData.alert_date.minute"]),
                "color": i["IipAlertData.colorCode"],
                "yaxis": timeDelayCalculation(new Date(i["IipAlertData.alert_date"]),i["IipAlertData.open_datetime"]) ,
            }));
            var grpc = groupBy(dataObj, "color");
            var dataset=[];
            for (var c in grpc) 
            {
                var grpx = groupBy(grpc[c], "xaxis");
                for (var x in grpx) {
                    var dur=0;
                    var childGrp=grpx[x];
                    for (var y in childGrp)
                    {
                        dur += childGrp[y].yaxis;
                    }
                    var item={x:x,y:Math.floor(dur/childGrp.length),col:c};
                    dataset.push(item);
                }
            }
            var catX=[];
			var catY=[];
			var ser=[];
			dataset.forEach((index) => {
				catX.push(index['x']);
				catY.push(index['col']);					
				
			});
			var uniqueCatX = catX.filter(function(itm, i, catX) {
				return i == catX.indexOf(itm);
			});
	
			var uniqueCatY = catY.filter(function(itm, i, catY) {
				return i == catY.indexOf(itm);
			});
		 
			uniqueCatY.forEach(function(item) {				
				var count=[];
				dataset.forEach((index) => {
					if(item==index['col']){						
						count.push(Array(new Date(index['x']), index['y']));
					}										
				});
			    var color_name = item=="#f71fa8" ? "Pink" :  item=="#ffc70d" ? "Orange" :  item=="#ffea00" ? "Yellow" : "Blue" 
				var arr={data:count,name:color_name};
			    ser.push(arr);
			});

            iipAvgAlertResponseChart.updateOptions({
            //            xaxis: {
            //            categories: uniqueCatX,
            //            //type: 'datetime',
				        //labels:{show:true,align:"left"}
			         //   },
                        colors: uniqueCatY,
                        series:ser
                    });
                
              
        } 

    });
}
    function alertSummaryCloseAvgResponse(date) {
        cubejsApi.load({
            measures: ["IipAlertData.count"],
            dimensions: ["IipAlertData.colorCode", "IipAlertData.alert_date", "IipAlertData.close_datetime"], 
            // filters: [
            //    {
            //        "member": "IipAlertData.isVisible",
            //        "operator": "equals",
            //        "values": [
            //        "false"
            //        ]
            //    }
            //],
            //order: { "IipAlertData.alert_date": "asc" },
            timeDimensions: [
                {
                    dimension: "IipAlertData.alert_date",
                    granularity: "minute",
                    dateRange: date == null || date==undefined ? "Today" : [
                        date,
                        date
                    ]
                },
            ],
        }).then((resultSet) => {            
            var dataS = resultSet.loadResponses[0].data;
            if (dataS.length == 0) {
                document.querySelector("#realtimelinechart").innerHTML = "<div style='display:flex; justify-content:center;'>No Data Found</div>";
            }
            else {
                 dataS=dataS.filter(function (e) {
                    return e["IipAlertData.close_datetime"] != null;
                });
                var dataObj = dataS.map(i =>
                ({
                    "xaxis":  new Date(i["IipAlertData.alert_date.minute"]),
                    "color": i["IipAlertData.colorCode"],
                    "yaxis": timeDelayCalculation(new Date(i["IipAlertData.alert_date"]),i["IipAlertData.close_datetime"]) ,
                }));
                var grpc = groupBy(dataObj, "color");
                var dataset=[];
                for (var c in grpc) 
                {
                    var grpx = groupBy(grpc[c], "xaxis");
                    for (var x in grpx) {
                        var dur=0;
                        var childGrp=grpx[x];
                        for (var y in childGrp)
                        {
                            dur += childGrp[y].yaxis;
                        }
                        var item={x:x,y:Math.floor(dur/childGrp.length),col:c};
                        dataset.push(item);
                    }
                }
                var catX=[];
			    var catY=[];
			    var ser=[];
			    dataset.forEach((index) => {
				    catX.push(index['x']);
				    catY.push(index['col']);					
				
			    });
			    var uniqueCatX = catX.filter(function(itm, i, catX) {
				    return i == catX.indexOf(itm);
			    });
	
			    var uniqueCatY = catY.filter(function(itm, i, catY) {
				    return i == catY.indexOf(itm);
			    });
		 
			    uniqueCatY.forEach(function(item) {				
					var count=[];
					dataset.forEach((index) => {
						if(item==index['col']){
                        count.push(Array(new Date(index['x']), index['y']));
						}										
					});
				    var color_name = item=="#f71fa8" ? "Pink" :  item=="#ffc70d" ? "Orange" :  item=="#ffea00" ? "Yellow" : "Blue" 
				    var arr={data:count,name:color_name};
				 
				    ser.push(arr);
			    });

                iipAvgAlertResponseChart.updateOptions({
                //            xaxis: {
                //            categories: uniqueCatX,
                //            //type: 'datetime',
				            //labels:{show:true,align:"left"}
			             //   },
                            colors: uniqueCatY,
                            series:ser
                        });
                
              
            } 

        });
    }
    function loadcount(){        
        if ($("#maxAlertDate").val() == undefined) {
            window.clearInterval(countInterval);
            countInterval = null;
            return false;
        }        
        var list=$(".notification-heading");
        var dataObj = list.map(i =>
            ({
                "color": list[i].style.borderColor,
                "x":1
            }));        
        var grpc = groupBy(dataObj.toArray(), "color");
        for (var c in grpc) 
        {
            var att="span[style='color:" + c + "']";
            var sp= $(att);
            if(sp.length>0){
                if(sp[0].dataset.count != grpc[c].length){
                    sp[0].dataset.count = grpc[c].length;
                }
            }
                   
        }
        

    }     
    function onDateChange(e){        
        var d=e.sender._oldText;
        if(iipAlertStatusChart == undefined){
            alertSummaryByStatus(d);
             alertSummaryTimeDelay(d);
                 alertSummaryAvgResponse(d);
        }
        else
        {
            reloadalertSummaryByStatus(d);
            var stbtn=document.getElementById("responseStatusBtns").querySelectorAll('button.active')[0].id;
            if(stbtn=="read"){
                alertSummaryReadTimeDelay(d);
            }
            else if (stbtn=="close"){
                alertSummaryCloseTimeDelay(d);
            }
            else{
                alertSummarySystemTimeDelay(d);
            }
            var avgbtn=document.getElementById("avgResponseStatusBtns").querySelectorAll('button.active')[0].id;
                if(avgbtn=="read1"){
                alertSummaryReadAvgResponse(d);
            }
            else if (avgbtn=="close1"){
                alertSummaryCloseAvgResponse(d);
            }
            else{
                alertSummarySystemAvgResponse(d);
            }  
        }
            
    }
    function reloadAlertSummaryTimeDelay(){ 
        var stbtn=document.getElementById("responseStatusBtns").querySelectorAll('button.active')[0].id;
        if(stbtn=="read"){
            alertSummaryReadTimeDelay();
        }
        else if (stbtn=="close"){
            alertSummaryCloseTimeDelay();
        }
        else{
            alertSummarySystemTimeDelay();
        }          
    }
    function reloadAlertSummaryAvgResponse(){
        var avgbtn=document.getElementById("avgResponseStatusBtns").querySelectorAll('button.active')[0].id;
         if(avgbtn=="read1"){
            alertSummaryReadAvgResponse();
        }
        else if (avgbtn=="close1"){
            alertSummaryCloseAvgResponse();
        }
        else{
            alertSummarySystemAvgResponse();
        }       
    }
    function AllAlertByType(color){        
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("IipAlertList", "BusinessAnalytics", new { @area="Cms"})?colorCode='+color.replace("#","");
        win.OpenWindow({ Title: 'Alert List', Width: 1200, Height: 800 });
        return false;
    }
    function viewAlertDetails(e){
        viewDetails(e.relatedTarget.options.sourceIds,e.relatedTarget.options.alertId,e.relatedTarget.options.alertNo)
    }
    function serachby500(e){        
        loadMap(500,e.latlng.lat,e.latlng.lng,e.latlng);       
    }    
     function serachby1km(e){ 
        loadMap(1000,e.latlng.lat,e.latlng.lng,e.latlng);
       
    }
     function serachby5km(e){        
        loadMap(5000,e.latlng.lat,e.latlng.lng,e.latlng);
        
    }
     function serachby50km(e){        
        loadMap(50000,e.latlng.lat,e.latlng.lng,e.latlng);
        
    }
     function serachbyall(e){       
        loadMap(0,e.latlng.lat,e.latlng.lng,e.latlng);
      
    }
     function serachbypolicestation(e){  
         loadMapByPoliceStation(e.relatedTarget.options.policeStation,e.latlng);
        
    }
    function loadMap(radius,lat,long,latlon) {
        iipalertMap.removeLayer(iipcameramarkers);
        iipcameramarkers = L.markerClusterGroup({showCoverageOnHover: false});         
        $.ajax({
            type: "GET",
            url: "/Cms/BusinessAnalytics/ReadIIPCameraData?radius=" + radius + "&latitude=" + lat + "&longitude=" + long,
            success: function (response) {               
                if (response != "" && response != null) {                                        
                    var locations = response;
                    for (var i = 0; i < locations.length; i++) { 
                        var a = locations[i];
                        if((a['Latitude'] > -90 || a['Latitude'] < 90) && (a['Longitude'] > -180 || a['Longitude'] < 180)){
                             var colors="green";                       
                            var iconDes = L.divIcon({
                            html: '<i class="fa fa-cctv" style="color:'+colors+'"></i>',
                            iconSize: [20, 20],
                	        className: 'myDivIcon'
                            })
                            var title ="<p><b>Camera Name :</b>" + a['NoteSubject'] + "</p><p><b>Police Station :</b>" + a['PoliceStation'] + "</p><p><b>Location :</b>" + a['Location'] + "</p>";
                            var marker = L.marker([a['Latitude'], a['Longitude']], {icon: iconDes,link:a['RtspLink'],id:a['Id'],contextmenu: true,contextmenuInheritItems: false,contextmenuItems: [{text: 'Preview',callback: onPreview},{text: 'Select Marker',callback: onSelectMarker}]});
                            marker.bindPopup(title);                        
                            iipcameramarkers.addLayer(marker);
                           
                        }
                        iipalertMap.addLayer(iipcameramarkers);
                        iipalertMap.panTo(latlon);
                        iipalertMap.zoomIn();
                       
                        //HideLoader($('#cms-content'));
                    }
                                     
                }
                else{
                    alert("No Camera Within Range !");
                }
            },
            error: function (response) {

            },
        });


    }
    function loadMapByPoliceStation(ps,latlon) {
        iipalertMap.removeLayer(iipcameramarkers);
        iipcameramarkers = L.markerClusterGroup({showCoverageOnHover: false});         
        $.ajax({
            type: "GET",
            url: "/Cms/BusinessAnalytics/ReadIIPCameraDataByPoliceStation?ps=" + ps,
            success: function (response) {
                if (response != "" && response != null) {                                        
                    var locations = response;
                    for (var i = 0; i < locations.length; i++) {               
                        var a = locations[i];
                        if((a['Latitude'] > -90 || a['Latitude'] < 90) && (a['Longitude'] > -180 || a['Longitude'] < 180)){
                            var colors="green";                       
                            var iconDes = L.divIcon({
                            html: '<i class="fa fa-cctv" style="color:'+colors+'"></i>',
                            iconSize: [20, 20],
                	        className: 'myDivIcon'
                            })
                            var title ="<p><b>Camera Name :</b>" + a['NoteSubject'] + "</p><p><b>Police Station :</b>" + a['PoliceStation'] + "</p><p><b>Location :</b>" + a['Location'] + "</p>";
                            var marker = L.marker([a['Latitude'], a['Longitude']], {icon: iconDes,link:a['RtspLink'],id:a['Id'],contextmenu: true,contextmenuInheritItems: false,contextmenuItems: [{text: 'Preview',callback: onPreview},{text: 'Select Marker',callback: onSelectMarker}]});
                            marker.bindPopup(title);                        
                            iipcameramarkers.addLayer(marker);
                           
                        }
                        iipalertMap.addLayer(iipcameramarkers);
                        iipalertMap.panTo(latlon);
                        iipalertMap.zoomIn();
                        //HideLoader($('#cms-content'));
                    }
                                     
                }
                else{
                     alert("No Camera in police station !");
                }
            },
            error: function (response) {

            },
        });


    }
    function onPreview(e){
        var rtsplink= e.relatedTarget.options.link;
        var id= e.relatedTarget.options.id;
        var _encodeUrl = encodeURI(rtsplink)
        _encodeUrl = _encodeUrl.replaceAll("&", "^");
        var url = '/Cms/BusinessAnalytics/Streaming?rtspLink=' + _encodeUrl + '&id=' + id;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'CCTV Camera', Width: 1200, Height: 600 });
        return false;
    }
    function onSelectMarker(e){        
        var id=e.relatedTarget.options.id;
        var ids=$("#cameraIds").val();
        if(ids ==undefined || ids == null || ids ==''){
            ids = id;
        }
        else{
            ids += ";" +id;
        }
        $("#cameraIds").val(ids);
    }  
     function onClearSelection(){ 
        $("#cameraIds").val('');
        alert("Selection Cleared !");
    }  
    function onViewSelectedCctv(){
        var ids=$("#cameraIds").val();
        if(ids ==undefined || ids == null || ids ==''){
            alert("No Camera Selected !");
        }
        else{
            var url = '/Cms/IIPPHQ/CctvCardView?ids=' + ids; 
            var win = GetMainWindow();
            win.iframeOpenUrl = url;
            win.OpenWindow({ Title: 'CCTV', Width: 1400, Height: 800 });
            return false;
        }
    }
</script>



