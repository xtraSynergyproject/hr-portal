@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using Newtonsoft.Json;

@{
    ViewData["Title"] = "UserEntityPermission";
    Layout = "~/Areas/Core/Views/Shared/_PopupLayout.cshtml";
}
@model UserEntityPermissionViewModel


<style>
</style>
<div class="row" style="margin-left:15px;margin-bottom:60px;">

    <form asp-controller="User" asp-action="ManageUserEntityPermission" method="post" class="form-horizontal">
        <div class="text-danger" asp-validation-summary="All"></div>
        <div class="row">
            <div class="col-4">
                LegalEntity <span class="required">*</span>

                @*@(Html.Kendo().MultiSelectFor(x=>x.LegalEntityId1)
                    //.Name("LegalEntities")
                    .AutoClose(false)
                    .Placeholder("Select Legal Entities...")
                    .DataSource(source =>
                    {
                    source.Read(read =>
                    {
                    read.Action("GetIdNameList", "LegalEntity",new { @area="Cms"});
                    });

                    })
                    //.Events(x=>x.Change("OnChange"))
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .AutoBind(true)
                    .HtmlAttributes(new { @class = "hr-xx-large", @style = "width:100%" })
                    .ValuePrimitive(true)
                    .Height(300)
                    )*@

                <select asp-for="LegalEntityId1" id="LegalEntityId1" style="width:80%"></select>
            </div>
            <div class="col-4">
                Organization <span class="required">*</span>

                @*@(Html.Kendo().MultiSelectFor(x=>x.OrganisationId)
        // .Name("Organization")
         .AutoClose(false)
         .Placeholder("Select Organisations...")
         .DataSource(source =>
         {
         source.Read(read =>
         {
         read.Action("GetAllOrganisation", "HRCore",new { @area="CHR"});
         });

         })
         //.Events(x=>x.Change("OnChange"))
         .DataTextField("Name")
         .DataValueField("Id")
         .AutoBind(true)
         .HtmlAttributes(new { @class = "hr-xx-large", @style = "width:100%" })
         .ValuePrimitive(true)
         .Height(300)
         )*@
                <select asp-for="OrganisationId" id="OrganisationId" style="width:80%"></select>
            </div>
            <div class="col-4">
                Templates <span class="required">*</span>

                @*@(Html.Kendo().MultiSelectFor(x=>x.TemplateId)
               // .Name("Organization")
                .AutoClose(false)
                .Placeholder("Select Templates...")
                .DataSource(source =>
                {
                source.Read(read =>
                {
                read.Action("GetTemplates", "Template",new { @area="Cms"});
                });

                })
                //.Events(x=>x.Change("OnChange"))
                .DataTextField("Name")
                .DataValueField("Id")
                .AutoBind(true)
                .HtmlAttributes(new { @class = "hr-xx-large", @style = "width:100%" })
                .ValuePrimitive(true)
                .Height(300)
                )*@

                <select asp-for="TemplateId" id="TemplateId" style="width:80%"></select>


            </div>
        </div>
        <br /><br />
              <div class="col-12" style="margin:5px;">
                  <div class="row">
                      <div class="col-6">
                          <span style="font-weight:400">Mange Permissions</span>
                          @if (Model.UserEntityType == UserEntityTypeEnum.User)
                          {
                              @*@(Html.Kendo().TreeView()
                .Name("contentTreeView").HtmlAttributes( new {@class="treeview"})
                .Events(e=>e.Select("OnSelect"))
                .DataTextField("Name")
                .TemplateId("ct-tv-template")
                .DataSource(dataSource => dataSource
                    .Read(read => read
                        .Action("GetPortalTreeList", "User",new { @area="Cms", userId = Model.UserEntityId })
                    )
                )
            )*@
                              @*<div id="contentTreeView" class="demo treeview"></div>*@
                              <div id="portalTreeList" style="height:400px;overflow-y:scroll"></div>

                          }
                          else if (Model.UserEntityType == UserEntityTypeEnum.UserRole)
                          {

                              @*@(Html.Kendo().TreeView()
                .Name("contentTreeView").HtmlAttributes( new {@class="treeview"})
                .Events(e=>e.Select("OnSelect"))
                .DataTextField("Name")
                .TemplateId("ct-tv-template")
                .DataSource(dataSource => dataSource
                    .Read(read => read
                        .Action("GetPortalRoleTreeList", "User",new { @area= "Cms", userId = Model.UserEntityId })
                    )
                )
            )*@

                              <div id="portalRoleTreeList" style="height:400px;overflow-y:scroll"></div>


                          }
                      </div>





                <script id="ct-tv-template" type="text/kendo-ui-template">
    <span style="width:100%;margin-right: 10%;">  #: item.Name # </span>
       #if(item.Type=='Permission'){#<input type="checkbox" id="chk_#:item.id#_#:item.ParentId#"
    #= item.Checked ? checked="checked" : "" #
    onclick='handlePermission(this);'>#}#
    @*<span data-id="#:item.id#" data-type="#:item.Type#" data-portal-name="#:item.Name#" data-parent-id="#:item.ParentId#" data-portal-id="#:item.PortalId#" class="tree-menu" data-level="#:item.ItemLevel#"></span>*@
                </script>
                <div class="col-6">
                    <span style="font-weight:400">User Permissions</span>
                    <div style="height:400px;overflow-y:scroll;background-color: transparent;margin-right:10px;border:solid 1px gray;">
                        <div id="userrole">@Html.Raw(Model.UserRolepermission)</div>
                    </div>
                    @*<span style="font-weight:400">Permissions</span>
        <div id="listView" style = "height:650px;background-color: transparent;margin-right:10px;"></div>*@
                    @*@(Html.Kendo().ListView<IdNameViewModel>()
                  .Name("listView")
                  .TagName("div")
                  .ClientTemplateId("template")
                  .DataSource(dataSource => dataSource
                  .Ajax()
                  .Read(read => read.
                  Action("GetPermissionlist", "User", new { @area = "Cms", userId = Model.UserEntityId }))
                 // .PageSize(21)
                  )
                  .HtmlAttributes(new { @Class = "board", @id = "board", @style = "height:650px;background-color: transparent" })
        //.Events(events => events.DataBound("OnDataBoundDoc"))

        )*@
                    <script id="template" type="text/kendo-ui-template">
                        <div id="perlist" style="margin-left:5px"> <span class="#=Id#"> #=Name# <br/> </span> </div>
                    </script>

                </div>
            </div>
        </div>
        <div class="cms-slidebar-footer">
            <button type="button" class="btn btn-light" style="margin-right:5px" onclick="closeNavMemberGroup();">Close</button>
            <input type="submit" class="btn btn-primary" style="margin-right:10px" value="Save" id="submitBtn" onclick="GetPermission()" />
        </div>
        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.DataAction)
        @Html.HiddenFor(x => x.UserEntityType)
        @Html.HiddenFor(x => x.UserEntityId)
        @Html.HiddenFor(x => x.PermissionIds)

    </form>
</div>
<script>
    var permissionIds;
    $(document).ready(function () {
        if ('@ViewBag.Success' == "True") {
            closeNavMemberGroup();

        }

        //var multiselect = $("#LegalEntityId1").data("kendoMultiSelect");
        //var multiselectvalue = multiselect.value();
        //return {
        //    selectedValues: multiselectvalue.join()
        //};


        $("#LegalEntityId1").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Id",
            dataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/cms/LegalEntity/GetIdNameList",
                        dataType: "json"
                    }
                },
            }),
            autoClose: false,
            placeholder: "Select Legal Entities...",
            value: @Html.Raw(JsonConvert.SerializeObject(Model.LegalEntityId1)),
            valuePrimitive: true,
            serverFiltering: true,
            filter: '@FilterType.Contains',
        });


        $("#OrganisationId").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Id",
            dataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/CHR/HRCore/GetAllOrganisation",
                        dataType: "json"
                    }
                },
            }),
            autoClose: false,
            placeholder: "Select Organisations...",
            value: @Html.Raw(JsonConvert.SerializeObject(Model.OrganisationId)),
            valuePrimitive: true,
            serverFiltering: true,
            filter: '@FilterType.Contains',
        });

        $("#TemplateId").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Id",
            dataSource: new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/cms/Template/GetTemplates",
                        dataType: "json"
                    }
                },
            }),
            autoClose: false,
            placeholder: "Select Templates...",
            value: @Html.Raw(JsonConvert.SerializeObject(Model.TemplateId)),
            valuePrimitive: true,
            serverFiltering: true,
            filter: '@FilterType.Contains',
        });

        if ('@Model.UserEntityType' == '@UserEntityTypeEnum.User') {
            readPortalTreeListData();
        } else if ('@Model.UserEntityType' == '@UserEntityTypeEnum.UserRole') {
            readPortalRoleTreeListData();
        }
        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Cms/User/GetPermissionlist?userId=" + '@Model.UserEntityId',
                    // data: FilterDDl,
                    dataType: "json",
                }
            },
            pageSize: 21
        });

        $("#listView").kendoListView({
            dataSource: dataSource,
            //change: OnChange,
            template: kendo.template($("#template").html())
        });
    });




    function readPortalRoleTreeListData() {
         @*document.getElementById('portalRoleTreeList').innerHTML = "";
        ShowLoader($('#mainDiv'));
          $.ajax({
              url: '/cms/User/GetPortalRoleTreeList?userId=@Model.UserEntityId',
            dataType: "json",
            success: function (result) {


                var root = document.getElementById('portalRoleTreeList');
                var parent = result.filter(x => x.id != null);
                for (var i = 0; i <= parent.length - 1; i++) {
                    var data = parent[i];
                   createTreeList(data, root, result, null);
                }

                var toggler = document.getElementsByClassName("caret");
                var i;

                for (i = 0; i < toggler.length; i++) {
                    toggler[i].addEventListener("click", function () {
                        this.parentElement.querySelector(".nested").classList.toggle("active");
                        this.classList.toggle("caret-down");
                    });
                }
                HideLoader($('#mainDiv'));

            }
        });*@

        $("#portalRoleTreeList").fancytree({
            checkbox: true,
            selectMode: 3,
              source: $.ajax({
                  url: '/cms/User/GetPortalRoleFancyTreeList?userId=@Model.UserEntityId',
                  dataType: "json"
              }),
              lazyLoad: function (event, data) {
                  var node = data.node;
                  // Issue an Ajax request to load child nodes
                  data.result = {
                      url: '/cms/User/GetPortalRoleFancyTreeList',
                      data: { id: data.node.key, userId: '@Model.UserEntityId' }
                  }
              },
              renderNode: function (event, data) {
                  // Optionally tweak data.node.span
                  var node = data.node;
                  node.renderTitle();
              },
              expand: function (event, data) {
                  expandedItem = data.node.expanded;
            },
            select: function (event, data) {


                //var newpermid = "chk_" + data.node.key + "_" + data.node.parent.key + "_" + true;
                //permissionIds += $("#PermissionIds").val() + newpermid + ",";

                // var permissionIds = $("#PermissionIds").val() + "," + data.node.key;
                //$("#PermissionIds").val(permissionIds);
                var selKeys = $.map(data.tree.getSelectedNodes(), function (node) {
                    return node.key;
                });
                $("#PermissionIds").val(selKeys);
                const str = JSON.stringify(selKeys);
                var d1 = str.replaceAll(",", "#");
                $.ajax({
                    type: "POST",
                    url: "/PortalAdmin/User/GetNewRolePermissionlist",
                    data: { 'permission': d1,'userRoleId': '@Model.UserEntityId'},
                    dataType: "json",
                    success: function (response) {
                        $("#userrole").html(response);
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            },
          });
    }

    function createTreeList(data, root, result, ul) {

        var child = [];
        if (data.id != null) {
            child = searchChild(data.id, result, root);
        } else {
            chid = [];
        }
        if (ul == null) {
             ul = document.createElement('ul');
        }
       // li.classList.add("nested");
        var li = document.createElement('li');
        if (child.length > 0) {
            li.classList.add("caret");
        }
                    var p1 = "";
                    var p2 = "";
                    var p3 = "";


        if (data.Checked) {
            p3 = 'checked'
        }
        if (data.Type == 'Permission') {

            p2 = "<input type='checkbox' id='chk_" + data.id + "_" + data.ParentId +  p3 + "onclick = 'handlePermission(this,\"" + data.PageName + "\",\"" + data.DisplayName + "\");' >";
        }

        p1 = "  <span style='width:100 %;margin-right: 10%;'> " + data.Name + " </span>";
        li.innerHTML = p1 + p2;

        ul.appendChild(li);
        root.appendChild(ul);

        if (child != [])
        {
            var ul = document.createElement('ul');
            ul.classList.add("nested");
            for (var x = 0; x <= child.length - 1; x++)
            {
                createTreeList(child[x], li, result, ul);
            }
        }
       // return root;
    }

    function searchChild(nameKey, myArray) {
        var newArray  = [];
        for (var i = 0; i < myArray.length; i++) {
            if (myArray[i].ParentCommentId === nameKey) {
                newArray.push( myArray[i]);
            }
        }
        return newArray;
    }
    var selectedItem = [];
      function readPortalTreeListData() {
          @*document.getElementById('portalTreeList').innerHTML = "";
        ShowLoader($('#mainDiv'));
          $.ajax({
              url: '/cms/User/GetPortalTreeList?userId=@Model.UserEntityId',
            dataType: "json",
            success: function (result) {


                var root = document.getElementById('portalTreeList');
                var parent = result.filter(x => x.id != null);
                for (var i = 0; i <= parent.length - 1; i++) {
                    var data = parent[i];
                   createTreeList(data, root, result, null);
                }

                var toggler = document.getElementsByClassName("caret");
                var i;

                for (i = 0; i < toggler.length; i++) {
                    toggler[i].addEventListener("click", function () {
                        this.parentElement.querySelector(".nested").classList.toggle("active");
                        this.classList.toggle("caret-down");
                    });
                }
                HideLoader($('#mainDiv'));

            }
        });*@

          $("#portalTreeList").fancytree({
              checkbox: true,
              selectMode: 3,
              source: $.ajax({
                  url: '/cms/User/GetPortalFancyTreeList?userId=@Model.UserEntityId',
                  dataType: "json"
              }),
              lazyLoad: function (event, data) {
                  var node = data.node;
                  // Issue an Ajax request to load child nodes
                  data.result = {
                      url: '/cms/User/GetPortalFancyTreeList',
                      data: { id: data.node.key, userId: '@Model.UserEntityId' }

                  }
              },
              renderNode: function (event, data) {
                  // Optionally tweak data.node.span
                  var node = data.node;
                  node.renderTitle();
              },
              expand: function (event, data) {
                  expandedItem = data.node.expanded;
              },
              select: function (event, data) {
                  var selKeys = $.map(data.tree.getSelectedNodes(), function (node) {
                      return node.key;
                  });

                  //var newpermid = "chk_" + data.node.key + "_" + data.node.parent.key + "_" + true;
                  //permissionIds += $("#PermissionIds").val() + newpermid + ",";

                 // var permissionIds = $("#PermissionIds").val() + "," + data.node.key;
                 // $("#PermissionIds").val(permissionIds);
                  $("#PermissionIds").val(selKeys);
                  const str = JSON.stringify(selKeys);
                  var d1 = str.replaceAll(",", "#");
                  $.ajax({
                      type: "POST",
                      url: "/PortalAdmin/User/GetNewPermissionlist",
                      data: { 'userId': '@Model.UserEntityId', 'permission': d1 },
                      dataType: "json",
                      success: function (response) {
                          $("#userrole").html(response);
                      },
                      error: function (response) {
                          alert(response.responseText);
                      }
                  });
              },
          });
    }
    function closeNavMemberGroup() {

        var win = GetMainWindow();
        win.CloseWindow();
        return false;
    }


    function OnSelect(e) {
        e.preventDefault();
    }

    function GetPermission(e) {

     //   var permissionIds = "";
        @*var selectedElms;
          if ('@Model.UserEntityType' == '@UserEntityTypeEnum.User') {
              //readPortalTreeListData();
              selectedElms = $('#portalTreeList').jstree("get_checked", true);
        } else if ('@Model.UserEntityType' == '@UserEntityTypeEnum.UserRole')
          {
                 //readPortalRoleTreeListData();
              selectedElms = $('#portalRoleTreeList').jstree("get_checked", true);
          }


       // $('#contentTreeView').jstree("get_checked", true);


        $.each(selectedElms, function () {


            //selectedElmsIds.push(this.id);
            if ("Permission" == this.original.Type) {
                var newpermid = "chk_"+this.id + "_" + this.parent + "_" + true;
                permissionIds += newpermid + ",";
            }

        });
        $("#PermissionIds").val(permissionIds);*@

    }

    function handlePermission(e) {

        //var ids = e.id.split("_");
        //var permissionId = ids[1];
        //var pageId = ids[2];
        var newpermid = e.id + "_" + e.checked;
        permissionIds += newpermid + ",";
        $("#PermissionIds").val(permissionIds);
    }

</script>