@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using System.Web;

@model NoteTemplateViewModel;
@{
    //Layout = string.Concat("~/Areas/Core/Views/Shared/Themes/", Model.Page.Portal.Theme.ToString(), "/_Layout.cshtml");
    Layout = ViewBag.Layout ?? null;// "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
}

<style>

    .post-btn {
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
    }
    .div-readonly {
        font-size: 13px;
        padding-bottom: 5px;
    }
    .header-readonly {
        text-align: center;
        font-size:16px;
        color:gray;
    }
    .icon_comment {
        font-size: 20px !important;
        color: #097ee2fa;
        padding-top: 6px;
    }

    .comment-text {
        font-size: 16px !important;
        color: #097ee2fa;
    }

    .drp-btn {
        width: 100%;
    }
    .drp-btn .k-dropdown-wrap{
        background-color: #007bff !important;
        border:1px solid #007bff !important;
        color:#fff !important;
    }
        .drp-btn .k-dropdown-wrap:hover {
            color: #fff !important;
        }
    .alert-default {
        color: #363e49;
        background-color: #e4e7eb;
        border-color: #d3d8de;
        font-size: 16px;
    }
    .alert-light {
        color: #363e49;
        background-color: #f8f8f8;
        border-color: #f0f0f0;
        padding: 6px 10px;
        border-radius:5px;
    }
    .user-photo{
        height:2.8rem;
        width:2.8rem;
    }
    .action-section {

        border: 1px solid #d3d8de;
        border-radius: 5px;
        padding: 10px;
    }
    .k-maskedtextbox.form-control .k-textbox, .k-textbox.form-control, .k-widget.form-control {
      /*  width:90%*/
    }
    .k-listview-content {
        height: 100% !important;
        overflow-y: auto !important;

    }
    .top-header {
        height: 40px;
    }

    .img {
        object-fit: cover;
        border-radius: 50%;
        width: 40px;
        height: 40px;
    }

    .border-color {
        border-color: #8f8f8f !important;
    }

    .k-editable-area {
      height: 107px;
        background-color:#fff;
    }

    .task-title {
        padding: 10px;
        background-color: #fafafa;
        /* font-weight: bold; */
        text-align: left;
        color: #0b0b0b;
        margin-left: 11px;
        margin-right: 50px;
        border-style: solid;
        border-width: 2px;
        border-color: #dbdbdb;
        font-size: 15px;
        border-radius: 6px;
    }

    .sub-div {
        /*overflow-y: scroll;*/
        height: 100%;
        /*overflow-x: hidden;*/
    }

    table.k-editor {
        width: 100% !important;
        display: table !important;
        vertical-align: top !important;
        table-layout: fixed !important;
        border-collapse: separate !important;
        border-spacing: 0 !important;
        height: 100px !important;
    }

    .card {
        position: relative;
        display: -ms-flexbox;
        display: flex;
        -ms-flex-direction: column;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #eff4f8;
        background-clip: border-box;
        border: 1px solid rgba(0, 0, 0, 0.125);
        border-radius: 0.25rem;
        margin: 10px;
        font-size: 13px;
    }

        /* On mouse-over, add a deeper shadow */
        .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

    .k-listview {
        border: none;
    }

    .detail-box {
        width: 100%;
        margin: 5px;
        font-size: 13px
    }

    .msg-box {
        border-radius: 5px 5px 0px 0px;
        margin-left: 15px;
        margin-right: 15px;
        background-color: #219db9;
        width: 100%;
        height: 40px;
        color: white;
        padding: 10px;
    }

    .border-color {
        border-color: #dddddd !important;
    }

    .no-data {
        text-align: center;
        margin-top: 5%;
        font-size: 16px;
        font-weight: 500;
        display: none;
    }

    .no-data-icon {
        color: #c8aa4d;
        font-size: 40px;
    }

    .treeview {
        margin: 0;
        padding: 0px 0 0 0x;
        font-size: .8125rem;
        list-style: none inside;
        display: block;
        position: relative;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

    .b-title {
        font-weight: bold;
    }
     @*@Model.Page.Css*@
   /* @@media screen and (max-width: 768px) {
        .ribbon-static {
            display: none !important;
        }
    }*/

    /*.page {
        border: 1px solid #a5acb5;
        margin: 20px;
        padding: 15px;
        -webkit-box-shadow: #000000 0px 0px 10px;
        -moz-box-shadow: #000000 0px 0px 10px;
        box-shadow: #000000 0px 0px 10px;
        background: #FFF;
    }

    .ribbon-static {
        display: block;
        float: right;
        margin-right: 10px;
        margin-top: -70px;
        text-align: center;
        font-size: 12px;
    }

    #ribbon {
        cursor: default;
        font-size: 8pt;
        padding-top:0px;*/
    /*    margin-top: -10px;*/
        /*background-color: aliceblue;*/
  /*      border-bottom: 1px solid #8b9097;*/
        /*-webkit-box-shadow: #8b9097 0px 1px 3px;
        -moz-box-shadow: #8b9097 0px 1px 3px;
        box-shadow: #8b9097 0px 1px 3px;
        overflow: inherit;*/
       /* z-index: 25;*/
        /*top: 0;
        left: 0;
        right: 0;*/
    /*    height: 142px;*/
        /*position: relative;
    }
    .ribbon-content {
        padding: 3px;
        text-align: center;
      min-width:60px;
    }*/
    .text-status{
        background-color:red;
        border-radius:8px;

    }
    .text-title {
        font-size: 16px;
        padding: 5px;
        color: #1c88e3;
    }
    .text-label{
    }
    .back-icon {
        font-size: 24px !important;
        color: #1c88e3;
        /* color: dimgray;*/
    }
    .reply-icon {
        font-size: 24px !important;
        color: #1c88e3;
    }
    .attachment-icon {
        font-size: 20px !important;
        color: #a11247;
        padding-top:6px;
    }
    .attachment-text {
        font-size: 16px !important;
        color: #a11247;
    }
    .notification-icon {
        font-size: 20px !important;
        color: #800080;
        padding-top: 6px;
    }

    .notification-text {
        font-size: 16px !important;
        color: #800080;
    }
    .share-icon {
        font-size: 20px !important;
        color: #f4501d;
        padding-top: 6px;
    }
    .share-text {
        font-size: 16px !important;
        color: #f4501d;
    }


    /*#ribbon.backstage {
        height: auto;
        bottom: 0;
    }

        #ribbon .ribbon-window-title {
        }

        #ribbon #ribbon-tab-header-strip {
            margin: 10px 0 0 10px;
            white-space: nowrap;
        }

        #ribbon .ribbon-tab-header {
            display: inline;
            margin: 0 5px;
            padding: 5px 10px;
            font-size: 8pt;
            color: #444;*/ /*border: 1px solid #eaedf1;*/
            /*border-bottom: 1px solid #b6babf;
            -webkit-border-radius: 4px 4px 0px 0px;
            -moz-border-radius: 4px 4px 0px 0px;
            border-radius: 4px 4px 0px 0px;
            position: relative;*/
           /* z-index: 40;*/
        /*}

        #ribbon.backstage .ribbon-tab-header {
            border-bottom: 1px solid #1f48a1;
        }

        #ribbon .ribbon-tab-header:hover {
            background: #f1f3f4;
            border: 1px solid #b6babf;
            margin: -1px 4px;
            cursor: pointer;
        }

        #ribbon.backstage .ribbon-tab-header {
            border-bottom: 1px solid #1f48a1;
        }

        #ribbon .ribbon-tab-header.sel, #ribbon .ribbon-tab-header.sel:hover {
            background: #fff;
            margin: -1px 4px;
            border: 1px solid #b6babf;
            border-bottom: 1px solid #fff;
            cursor: default;*/
       /*     z-index: 45;*/
        /*}

        #ribbon .ribbon-tab-header.file {
            padding: 5px 20px;
            background: #2860b3;
            background: -webkit-gradient(linear, 0 0, 0 bottom, from(#4488e5), to(#2860b3));
            background: -moz-linear-gradient(#4488e5, #2860b3);
            -pie-background: linear-gradient(#4488e5, #2860b3);
            border: 1px solid #1f48a1;
            margin: -1px 4px;
            border-bottom: 1px solid #4488e5;
            cursor: default;
            color: #fff;
        }


            #ribbon .ribbon-tab-header.file:hover {
                background: #3870c3;
                background: -webkit-gradient(linear, 0 0, 0 bottom, from(#5498f5), to(#3870c3));
                background: -moz-linear-gradient(#5498f5, #3870c3);
                -pie-background: linear-gradient(#5498f5, #3870c3);
                border: 1px solid #1f48a1;
                cursor: pointer;
                border-bottom: 1px solid #4488e5;*/
           /*     z-index: 55;*/
                /*position: relative;
            }

            #ribbon .ribbon-tab-header.file.sel {
                background: #4488e5;
                background: -webkit-gradient(linear, 0 0, 0 bottom, from(#2860b3), to(#4488e5));
                background: -moz-linear-gradient(#2860b3, #4488e5);
                -pie-background: linear-gradient(#2860b3, #4488e5);
                border: 1px solid #1f48a1;
                cursor: pointer;
                border-bottom: 1px solid #4488e5;*/
          /*      z-index: 55;*/
                /*position: relative;
            }

        #ribbon .ribbon-tab {
            overflow:inherit;
             height: 60px;
            padding: 5px;

            border-top: 1px solid #b6babf;
            background: #FFF url(rib-back.png) repeat-x bottom;
            background: -webkit-gradient(linear, 0 0, 0 bottom, from(#ffffff), to(#cde3ff));
            background: -moz-linear-gradient(#ffffff, #eaedf1);*/
         /*   overflow: hidden;*/
            /*min-width: 500px;
            behavior: url(/PIE.htc);*/
     /*       z-index: 30;*/
            /*-pie-watch-ancestors: 2;
        }

            #ribbon .ribbon-tab.file {
                padding: 0;
                margin-top: 5px;
                border-top: 1px solid #1f48a1;
                background-color: #4488e5;
                filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1,startColorstr=#4488e5, endColorstr=#ffffff);
                background-image: -moz-linear-gradient(left, #4488e5 15%, #ffffff 100%);
                background-image: -webkit-linear-gradient(left, #4488e5 15%, #ffffff 100%);
                background-image: -ms-linear-gradient(left, #4488e5 15%, #ffffff 100%);
                background-image: linear-gradient(left, #4488e5 15%, #ffffff 100%);
                background-image: -o-linear-gradient(left, #4488e5 15%, #ffffff 100%);
                background-image: -webkit-gradient(linear, left bottom, right bottom, color-stop(15%,#4488e5), color-stop(100%,#ffffff));
                overflow: hidden;
                min-width: 500px;*/
         /*       z-index: 30;*/
            /*}

        #ribbon .ribbon-backstage {
            display: none;
        }


        #ribbon.backstage .ribbon-backstage {
            display: block;
            position: absolute;
            top: 60px;
            left: 0;
            right: 0;
            bottom: 0;
            padding: 10px;
            background-color: #FFF;
        }

        #ribbon .section-title {
            color: #5B626C;
            text-align: center;
            clear: left;
            display: block;
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
        }

    #ribbon .ribbon-section {
        float: left;
        position: relative;
        height: 50px;
        border-right: 1px solid #fff;
    }

        #ribbon .ribbon-section-sep {
            border-left: 1px solid #E0E0E0;
            border-right: 1px solid #fff;
            margin: 0 5px;
            height: 45px;
            position: relative;
            width: 0;
            float: left;
        }

    #ribbon .ribbon-button {*/
        /* padding: 4px 6px;
            border: 1px solid transparent;*/
    /*-webkit-border-radius: 3px 3px 3px 3px;
        -moz-border-radius: 3px 3px 3px 3px;
        border-radius: 3px 3px 3px 3px;
    }

        #ribbon .ribbon-button-large {
            text-align: center;
            height: 58px;
            min-width: 50px;
            float: left;
        }

        #ribbon .ribbon-button-small {
            height: 14px;
            padding: 3px 4px;
            text-align: left;
        }

        #ribbon .ribbon-button .button-help {
            display: none;
        }

        #ribbon .ribbon-button .button-title {
            color: #444;
            font-size:12px;
        }

        #ribbon .ribbon-button-large .button-title {
            clear: left;
            display: block;
        }

        #ribbon .ribbon-button-large .ribbon-icon {
            margin: auto;
        }

        #ribbon .ribbon-button-small .ribbon-icon {
            width: 16px;
            height: 16px;
            float: left;
            clear: left;
            margin: -1px 5px 0px 1px;
        }

        #ribbon .ribbon-button .ribbon-icon.ribbon-hot, #ribbon .ribbon-button .ribbon-icon.ribbon-disabled {
            display: none;
        }

        #ribbon .ribbon-button-large .ribbon-icon.ribbon-normal {
            display: block;
        }

        #ribbon .ribbon-button:hover .ribbon-icon.ribbon-normal {
            display: none;
        }

        #ribbon .ribbon-button-large:hover .ribbon-icon.ribbon-hot {
            display: block;
        }

        #ribbon .ribbon-button-small .ribbon-icon.ribbon-normal {
            display: inline;
        }

        #ribbon .ribbon-button-small:hover .ribbon-icon.ribbon-hot {
            display: inline;
        }

        #ribbon .ribbon-button:hover, #ribbon .ribbon-button.sel {
            border: 1px solid #219db9;
            background: #219db9;
            cursor: pointer;
        }

        #ribbon .ribbon-button:active {
            border: 1px solid #219db9;
            background: #219db9;
            cursor: pointer;

        }

        #ribbon .ribbon-button.disabled .ribbon-icon, #ribbon .ribbon-button.disabled:hover .ribbon-icon {
            display: none;
        }

            #ribbon .ribbon-button.disabled .ribbon-icon.ribbon-disabled {
                display: block;
                opacity: 0.8;
            }

            #ribbon .ribbon-button.disabled .ribbon-icon.ribbon-implicit-disabled {
                opacity: 0.4;
            }

        #ribbon .ribbon-button.disabled:hover {
            border: 1px solid #219db9;
            background: transparent;
            cursor: default;
        }

        #ribbon .ribbon-button.disabled:active {
            border: 1px solid transparent;
            background: transparent;
            cursor: default;
        }

        #ribbon .ribbon-button.disabled .button-title {
            color: #888;
            font-size: 15px;
        }

    .ribbon-tooltip {
        font-family: "Segoe UI", Verdana, Tahoma, Helvetica, sans-serif;
        font-size: 10pt;
        position: fixed;
        z-index: 5000;
        border: 1px solid #8b9097;
        background-color: #e5e5f0;
        background: -webkit-gradient(linear, 0 0, 0 bottom, from(#ffffff), to(#e5e5f0));
        background: -moz-linear-gradient(#ffffff, #e5e5f0);
        -pie-background: linear-gradient(#ffffff, #e5e5f0);
        padding: 5px;
        -webkit-box-shadow: #c6c9cd 1px 1px 3px;
        -moz-box-shadow: #c6c9cd 1px 1px 3px;
        box-shadow: #c6c9cd 1px 1px 3px;
        -webkit-border-radius: 2px 2px 2px 2px;
        -moz-border-radius: 2px 2px 2px 2px;
        border-radius: 2px 2px 2px 2px;
        width: 200px;
        top: 150px !important;
    }

    .dropbtn {
        background-color: #3498DB;
        color: white;
        padding: 16px;
        font-size: 16px;
        border: none;
        cursor: pointer;
    }

        .dropbtn:hover, .dropbtn:focus {
            background-color: #2980B9;
        }

    .dropdown {
        position: relative;
        display: inline-block;
    }*/

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f1f1f1;
        min-width: 160px;
        overflow: auto;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
     /*   z-index: 1;*/
    }

        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }

    .dropdown a:hover {
        background-color: #ddd;
    }

    .show {
        display: block;
    }
    .form-horizontal .form-group {
        border-bottom: 0px solid #eff2f7;
        padding-bottom: 0px;
        margin-bottom: 15px;
    }
    .error-summary ul {
        padding-left: 5px !important;
    }
</style>


<script>
    function onTag()
    {
          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("TagCategoryByTemplateType", "TagCategory", new { @area = "Cms" })?templateId=@Model.TemplateId&Id=@Model.NoteId&TemplateType=Note';
        win.OpenWindow({ Title: 'Tags', Width: 1200, Height: 600 });
        return false;
    }
    var actionName;
    function htmlDecode(value) {
        return value.replace(/&lt;/g, "<").replace(/&gt;/g, ">");
    }
    (function ($) {
        $('#NoteSLASeconds').durationPicker({
            showSeconds: false,
            onChanged: function (newVal,init) {
                if (!init) {
                    var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
                    var ed = GetAddSeconds(sd, newVal);
                    var f = new Date(ed);
                    console.log(f);
                    $("#DueDate").data("kendoDateTimePicker").value(f)
                }

            }
        });
        $.fn.ribbon = function (id) {

            if (!id) {
                if (this.attr('id')) {
                    id = this.attr('id');
                }
            }

            var that = function () {
                return thatRet;
            };

            var thatRet = that;

            that.selectedTabIndex = -1;

            var tabNames = [];

            that.goToBackstage = function () {
                ribObj.addClass('backstage');
            }

            that.returnFromBackstage = function () {
                ribObj.removeClass('backstage');
            }
            var ribObj = null;

            that.init = function (id) {
                if (!id) {
                    id = 'ribbon';
                }

                ribObj = $('#' + id);
                ribObj.find('.ribbon-window-title').after('<div id="ribbon-tab-header-strip"></div>');
                var header = ribObj.find('#ribbon-tab-header-strip');

                ribObj.find('.ribbon-tab').each(function (index) {
                    var id = $(this).attr('id');
                    if (id == undefined || id == null) {
                        $(this).attr('id', 'tab-' + index);
                        id = 'tab-' + index;
                    }
                    tabNames[index] = id;

                    var title = $(this).find('.ribbon-title');
                    var isBackstage = $(this).hasClass('file');
                    //header.append('<div id="ribbon-tab-header-' + index + '" class="ribbon-tab-header"></div>');
                    var thisTabHeader = header.find('#ribbon-tab-header-' + index);
                    thisTabHeader.append(title);
                    if (isBackstage) {
                        thisTabHeader.addClass('file');

                        thisTabHeader.click(function () {
                            that.switchToTabByIndex(index);
                            that.goToBackstage();
                        });
                    } else {
                        if (that.selectedTabIndex == -1) {
                            that.selectedTabIndex = index;
                            thisTabHeader.addClass('sel');
                        }

                        thisTabHeader.click(function () {
                            that.returnFromBackstage();
                            that.switchToTabByIndex(index);
                        });
                    }
                    $(this).hide();
                });

                ribObj.find('.ribbon-button').each(function (index) {
                    var title = $(this).find('.button-title');
                    title.detach();
                    $(this).append(title);

                    var el = $(this);

                    this.enable = function () {
                        el.removeClass('disabled');
                    };

                    this.disable = function () {
                        el.addClass('disabled');
                    };

                    this.isEnabled = function () {
                        return !el.hasClass('disabled');
                    };

                    if ($(this).find('.ribbon-hotTaskId').length == 0) {
                        $(this).find('.ribbon-normal').addClass('ribbon-hot');
                    };

                    if ($(this).find('.ribbon-disabled').length == 0) {
                        $(this).find('.ribbon-normal').addClass('ribbon-disabled');
                        $(this).find('.ribbon-normal').addClass('ribbon-implicit-disabled');
                    };

                    $(this).tooltip({
                        bodyHandler: function () {
                            if (!$(this).isEnabled()) {
                                $('#tooltip').css('visibility', 'hidden');
                                return '';
                            }

                            var tor = '';

                            if (jQuery(this).children('.button-help').size() > 0)
                                tor = (jQuery(this).children('.button-help').html());
                            else
                                tor = '';

                            if (tor == '') {
                                $('#tooltip').css('visibility', 'hidden');
                                return '';
                            }

                            $('#tooltip').css('visibility', 'visible');

                            return tor;
                        },
                        left: 0,
                        extraClass: 'ribbon-tooltip'
                    });
                });

                ribObj.find('.ribbon-section').each(function (index) {
                    $(this).after('<div class="ribbon-section-sep"></div>');
                });

                ribObj.find('div').attr('unselectable', 'on');
                ribObj.find('span').attr('unselectable', 'on');
                ribObj.attr('unselectable', 'on');

                that.switchToTabByIndex(that.selectedTabIndex);


               that.switchToTabByIndex = function (index) {
                    var headerStrip = $('#ribbon #ribbon-tab-header-strip');
                    headerStrip.find('.ribbon-tab-header').removeClass('sel');
                    headerStrip.find('#ribbon-tab-header-' + index).addClass('sel');

                    $('#ribbon .ribbon-tab').hide();
                    $('#ribbon #' + tabNames[index]).show();
                }

                $.fn.enable = function () {
                    if (this.hasClass('ribbon-button')) {
                        if (this[0] && this[0].enable) {
                            this[0].enable();
                        }
                    }
                    else {
                        this.find('.ribbon-button').each(function () {
                            $(this).enable();
                        });
                    }
                }




                $.fn.disable = function () {
                    if (this.hasClass('ribbon-button')) {
                        if (this[0] && this[0].disable) {
                            this[0].disable();
                        }
                    }
                    else {
                        this.find('.ribbon-button').each(function () {
                            $(this).disable();
                        });
                    }
                }

                $.fn.isEnabled = function () {
                    if (this[0] && this[0].isEnabled) {
                        return this[0].isEnabled();
                    } else {
                        return true;
                    }
                }


                that.init(id);

                $.fn.ribbon = that;
            }

        }
    })(jQuery);

    $(document).ready(function () {

        $('.content').richText();

        FillAttachmentCount();
        FillSharingCount();
        FillNotificationCount();
        FillCommentCount();
        SetOwnerAndRequesterVisibility();
        //$(".k-editor-toolbar-wrap").hide();
        $(".richText-toolbar").hide();
      //  onchangetype();
        $('#ribbon').ribbon();

        $('#enable-btn').click(function () {
            $('#del-table-btn').enable();
            $('#del-page-btn').enable();
            $('#save-btn').enable();
            $('#other-btn-2').enable();

            $('#enable-btn').hide();
            $('#disable-btn').show();
        });
        $('#disable-btn').click(function () {
            $('#del-table-btn').disable();
            $('#del-page-btn').disable();
            $('#save-btn').disable();
            $('#other-btn-2').disable();

            $('#disable-btn').hide();
            $('#enable-btn').show();
        });

        $("#CommentToUserId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "All",
            filter: "contains",
            height: 400,
            dataSource: {
                transport: {
                    read: {
                        url: "/cms/User/GetUsersIdNameList",
                    }
                }
            }
        });

        $("#NotePriorityId").kendoDropDownList({
        dataTextField: "Name",
            dataValueField: "Id",
         //   filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.NotePriorityId',

            dataSource: {
            transport: {
                read: {
                    url: "/Cms/LOV/GetLOVIdNameList?lovType=NOTE_PRIORITY",
                    }
                }
            }
        });

        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Cms/NtsNote/GetNoteMessageList?noteId="+'@Model.NoteId',
                    dataType: "json"
                }
            },
        });

        $("#listViewMsg").kendoListView({
            dataSource: dataSource,
            dataBound: OnMsgDatabound,
            scrollable: '@ListViewScrollableMode.Endless',
            template: kendo.template($("#templateListReplies").html())
        });

        $("#StartDate").kendoDateTimePicker({ value: '@Model.StartDate',format: @ApplicationConstant.DateAndTime.DefaultDateTimeFormat});
        $("#ExpiryDate").kendoDateTimePicker({value: '@Model.ExpiryDate', format: @ApplicationConstant.DateAndTime.DefaultDateTimeFormat });
        $("#ReminderDate").kendoDateTimePicker({value: '@Model.ReminderDate', format: @ApplicationConstant.DateAndTime.DefaultDateTimeFormat });

        //$('.ribbon-button').click(function () {
        //    if (this.isEnabled()) {
        //        alert($(this).attr('id') + ' clicked');
        //    }
        //});
    });
    function FillSharingCount() {
        var openUrl = "/cms/GetNoteSharedCount?noteId=@Model.NoteId" ;
        $.ajax({
            url: openUrl,
            type: 'GET',
            cache: false,
            success: function (data) {
                $('#sharedCount').html(data);
            },
            error: function (errData) {
               // OnError(errData);
            }
        });
    }
    function FillCommentCount() {
        var openUrl = "/cms/GetNoteCommentCount?noteId=@Model.NoteId" ;
        $.ajax({
            url: openUrl,
            type: 'GET',
            cache: false,
            success: function (data) {
                $('#commentCount').html(data);
            },
            error: function (errData) {
               // OnError(errData);
            }
        });
    }
     function FillAttachmentCount()
    {
        $.ajax({
            type: "Get",
            url: '/cms/GetNoteAttachmentCount?noteId=@Model.NoteId',
            success: function (data) {
                $("#attchmentCount").html(data);
            },
            dataType: "json",
        });
    }
      function FillNotificationCount()
    {
        $.ajax({
            type: "Get",
            url: '/cms/GetNoteNotificationCount?noteId=@Model.NoteId',
            success: function (data) {
                $("#notificationCount").html(data);
            },
            dataType: "json",
        });
    }
    function SaveAsDraft() {
        
        $("#NoteStatusCode").val('NOTE_STATUS_DRAFT');
        //$("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        var json = $('#formio-container').html();
        if (json === null || json === '') {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        }
        return true;
    }
  function Close() {
      
      $("#NoteStatusCode").val('NOTE_STATUS_CLOSE');
      var reason = $("#CloseComments").val();
      $("#CloseComment").val(reason);
       // $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
      var json = $('#formio-container').html();
      if (json === null || json === '' || json == undefined) {
          $("#Json").val(JSON.stringify({}));
      }
      else {
          $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
      }
        return true;

    }
    //function Reject() {
        @*if ('@Model.IsRejectReasonRequired'=='True')
        {
            actionName = "SubmitReject";
            var dialogue = $('#reason').data("kendoDialog");
            dialogue.title('Reject Reason');
            $("#commentReq").html('Reject Reason is required');
            $("#commentReq").hide();
            $("#CommentTemp").val(null);
            dialogue.open();
            return false;
        }
        else
        {
            $("#CommentTemp").val(null);
            return SubmitReject();
        }*@

    //}
    function SubmitReject() {
        $("#NoteStatusCode").val('NOTE_STATUS_REJECT');
        $("#RejectionReason").val($("#CommentTemp").val());
        //$("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        var json = $('#formio-container').html();
        if (json === null || json === '' || json == undefined) {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        }
        $("#frmNote").submit();
        return false;
    }
      function Complete() {
        @*if ('@Model.IsCompleteReasonRequired'=='True')
        {
            actionName = "SubmitComplete";
            var dialogue = $('#reason').data("kendoDialog");
            dialogue.title('Comment');
            $("#commentReq").html('Comment is required');
            $("#commentReq").hide();
            $("#CommentTemp").val(null);
            dialogue.open();
            return false;
        }*@

            $("#CommentTemp").val(null);
            return SubmitComplete();


    }
    function SubmitComplete() {
        $("#NoteStatusCode").val('NOTE_STATUS_COMPLETE');
        $("#CompleteReason").val($("#CommentTemp").val());
        var json = $('#formio-container').html();
        var isValid = json === null || json === '' || frm.checkValidity(frm.submission.data);
        if (isValid) {
            if (json === null || json === '' || json == undefined) {
                $("#Json").val(JSON.stringify({}));
            }
            else {
                $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
            }
            $("#frmNote").submit();
            return true;
        }
        else {
            frm.submit();
        }
       // $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        //$("#frmNote").submit();
        return false;
    }
    function Submit() {
        var json = $('#formio-container').html();
        var isValid = json === null || json === '' || frm.checkValidity(frm.submission.data);
        if (isValid) {
            $("#NoteStatusCode").val('NOTE_STATUS_INPROGRESS');
            if (json === null || json === '' || json == undefined) {
                $("#Json").val(JSON.stringify({}));
            }
            else {
                $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
            }
            return true;
        }
        else {
            frm.submit();
        }
        //var isValid = frm.checkValidity(frm.submission.data);
        //if (isValid) {
        //    $("#NoteStatusCode").val('NOTE_STATUS_INPROGRESS');
        //    $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        //    return true;
        //}
        //else {
        //    frm.submit();
        //}
        return false;
    }
    var onAjaxSuccess = function (res) {
        if (res.success) {
            ShowNotification(res.msg, 'success');
            var container = $('#cms-content');
            // HideLoader(container);
            if (res.mode === 'Popup') {
                globalNtsPopupCallbackMethod = res.cbm;
                globalNtsPopupCallbackMethodParam = res.vm;

                var win = GetMainWindow();
                var parent = win.GetParentWindow();
                parent.OnAfterNoteCreate(res.vm);
                win.CloseWindow();
            }
            else if (res.reload) {
                LoadPageById(res.pageId, res.pageType, res.source, res.dataAction, res.recordId);
            }
            else if (res.ru !== null && res.ru !== '' && res.ru !== undefined && res.ru !== 'undefined') {
                window.location.href = res.ru;
            }
        }
        else {
            ShowNoteError(res.error);
        }
    };
    function ShowNoteError(error) {
        $("#validation-summary-manageform").html(error);
        $("#validation-summary-manageform").css("display", "block")
    }


    function myFunction() {
        document.getElementById("myDropdown").classList.toggle("show");
    }

    // Close the dropdown if the user clicks outside of it
    //window.onclick = function (event) {
    //    if (!event.target.matches('.dropbtn')) {
    //        var dropdowns = document.getElementsByClassName("dropdown-content");
    //        var i;
    //        for (i = 0; i < dropdowns.length; i++) {
    //            var openDropdown = dropdowns[i];
    //            if (openDropdown.classList.contains('show')) {
    //                openDropdown.classList.remove('show');
    //            }
    //        }
    //    }
    //}

    function onchangetype() {
        var assigneeType = $("#AssignedToTypeCode").data("kendoDropDownList").value();
        SetAssignee(assigneeType);

    }
    function SetAssignee(assigneeType) {
        if (assigneeType == "NOTE_ASSIGN_TO_USER") {
            $("#users").show();
            $("#teams").hide();
            $("#teamusers").hide();
            $("#hm").hide();
            $("#hmlevel").hide();
        }
        else if (assigneeType == "NOTE_ASSIGN_TO_TEAM") {
            $("#users").hide();
            $("#teams").show();
            $("#teamusers").show();
            $("#hm").hide();
            $("#hmlevel").hide();
        }
        else if (assigneeType == "TASK_ASSIGN_TO_USER_HIERARCHY") {
            $("#users").hide();
            $("#teams").hide();
            $("#teamusers").hide();
            $("#hm").show();
            $("#hmlevel").show();
        }
        else {
            $("#users").hide();
            $("#teams").hide();
            $("#teamusers").hide();
            $("#hm").hide();
            $("#hmlevel").hide();
        }
    }
    function PostComment(e)
    {
       // alert($("#comment").val());
        if ($("#comment").val() == "") {
            alert("Please add any Comment ");
        }
        else {
            $.ajax({
                type: "POST",
                url: "/cms/PostNoteComment",
                data: {
                    NtsNoteId: "@Model.NoteId",
                    Comment: $("#comment").val(),
                    CommentToUserId: $("#CommentToUserId").data("kendoDropDownList").value()
                    // FileId: $("#FileId").val(),
                },
                success: function (data) {

                    if (data.success) {
                        ShowNotification("Commented successfully", "success");
                        $("#drpAction").data("kendoDropDownList").value('');
                        $(".action-section").hide();
                        $("#action-add-comment").hide();
                        var editor = $("#comment").data("kendoEditor");
                        // set value
                        editor.value("");
                        $("#CommentToUserId").data("kendoDropDownList").value('');
                        $("#listViewMsg").data("kendoListView").dataSource.read();

                        FillCommentCount();

                    }
                    else {
                        ShowNotification("Please try again!", "error");
                        ShowErrors(data.errors);
                    }
                },
                error: function (err) {

                }

            });
        }
        e.preventDefault();
    }
    function OnActionChange() {
        var code = $("#drpAction").data("kendoDropDownList").value();
        $("#action-add-comment").hide();
        $("#action-complete-task").hide();
        $("#action-change-sla").hide();
        $("#action-close-task").hide();
        $(".action-section").show();
        if (code == "ADD_COMMENT") {
            $(".richText-toolbar").hide();
            //$(".k-editor-toolbar-wrap").hide();
            $("#action-add-comment").show();
        }
        else if (code == "COMPLETE_NOTE") {
            $("#action-complete-task").show();
        }
        else if (code == "CHANGE_SLA") {
            $("#action-change-sla").show();
        }
        else if (code == "CLOSE_NOTE") {
            $("#action-close-task").show();
        }
        else {
            $(".action-section").hide();
        }
    }

    function Filter() {
        var value = $("#AssignedToHierarchyMasterId").val();
        return {
            Id: value
        }
    }

    function OnStartDateDueDateChange() {
        var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        var ed = kendo.toString($("#DueDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        if (new Date(ed) > new Date(sd)) {
            var sec = GetSLAInSeconds(sd, ed);
            $('#NoteSLASeconds').data('durationPicker').setValue(sec);
        }
    }

    function GetSLAInSeconds(startDate, endDate) {
        var query = "startDate=" + startDate + "&endDate=" + endDate;
        var diff = UtilityAjax("GetSLAInSeconds", query);
        return diff;
    }
    function GetAddSeconds(startDate, seconds) {
        var query = "date=" + startDate + "&seconds=" + seconds;
        var diff = UtilityAjax("AddSeconds", query);
        return diff;
    }
   function onclickShare() {

         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("NtsNoteShared", "Cms", new { @area=""})?noteId=@Model.NoteId&IsSharingEnabled=@Model.IsSharingEnabled';
       win.OpenWindow({ Title: 'Share With', Width: 800, Height: 900 });
        return false;
    }
      function onCommentClick()
    {

           var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("NoteComments", "Cms", new { @area= "" })?noteId=@Model.NoteId&IsAddCommentEnabled=@Model.IsAddCommentEnabled';
          win.OpenWindow({ Title: 'Note Comments', Width: 700, Height: 900 });
        return false;
    }
      function AddAttachment(e)
{

           var win = GetMainWindow();
          win.iframeOpenUrl = '@Url.Action("AddNoteAttachment", "Cms", new { @area= "" })?noteId=@Model.NoteId&IsAddAttachmentEnabled=@Model.IsAddAttachmentEnabled';
          win.OpenWindow({ Title: 'Note Attachment', Width: 700, Height: 900 });
        return false;
    }

    function ViewNotification()
    {

         var win = GetMainWindow();
          win.iframeOpenUrl = '@Url.Action("ViewNotification", "Cms", new { @area= "" })?noteId=@Model.NoteId';
        win.OpenWindow({ Title: 'Notifications', Width: 500, Height: 900 });
        return false;
    }
     function closeNavMemberGroup()
    {
          var id = '@Model.Page.Id';
            var type = '@Model.Page.PageType.ToString()';
            var source = '@RequestSourceEnum.Main.ToString()';
            var action = '@DataActionEnum.None.ToString()';
            LoadPageById(id, type, source, action,'','','','','');
    }
     function OnReply(e) {
            var id = '@Model.Page.Id';
            var type = '@Model.Page.PageType.ToString()';
            var source = '@RequestSourceEnum.Edit.ToString()';
            var action = '@RequestSourceEnum.Edit.ToString()';
         //LoadPageById(id, type, source, action, '@Model.NoteId');
  LoadPartailView('@Url.Action("NtsNotePage", "NtsNote", new { @area = "Cms" })?&pageId=@Model.Page.Id&noteId=' + '@Model.NoteId' +'&dataAction='+action, $('#cms-content'));

            return false;
    }
    //$(".enableHtml").click(function () {
    //    if (this.checked) {
    //        $(".k-editor-toolbar-wrap").show();
    //    }
    //    else {
    //        $(".k-editor-toolbar-wrap").hide();
    //    }
    //});
    function OnReasonSave(e) {
        var comment = $("#CommentTemp").val();
        if (comment == null || comment == '') {
            $("#commentReq").show();
            return false;
        }
        else {
            $("#Comment").val(comment);
            $("#frmManageTask").submit();
            window[actionName]();
        }
    }
    function OnChangeOwner() {
        $('#from-display').hide('slow');
        $('#from-edit').show('slow');

        return false;
    }
    function OnChangeOwnerCancel() {
        $('#from-display').show('slow');
        $('#from-edit').hide('slow');
        return false;
    }
    function OnChangeOwnerSave() {
        var owner = $("#owner").data("kendoDropDownList");
        var dataItem = owner.dataItem();
        $("#OwnerUserId").val(dataItem.Id);
        $("#o-img").attr('src', '/Cms/document/getimagemongo/' + dataItem.PhotoId);
        $("#o-name").html(dataItem.Name);
        $("#o-email").html(dataItem.Email);
        $('#from-display').show('slow');
        $('#from-edit').hide('slow');
        SetOwnerAndRequesterVisibility();
        return false;
    }
    function SetOwnerAndRequesterVisibility() {
        var owner = $("#OwnerUserId").val();
        var requester = $("#RequestedByUserId").val();
        if (owner !== requester) {
            $('#div-requested-by').show('slow');
        }
        else {
            $('#div-requested-by').hide('slow');
        }
        return false;
    }
    $('.user-popup-card').webuiPopover('destroy').webuiPopover(userPopoverSettings);
    function OnMsgDatabound() {
        $('.user-popup-card').webuiPopover('destroy').webuiPopover(userPopoverSettings);
    }

    function chkChange() {

        if ($('#enableHtml2').is(":checked")) {
            $(".richText-toolbar").show();
        }
        else {
            $(".richText-toolbar").hide();
        }
    }
</script>

<form asp-controller="NtsNote" asp-action="ManageNtsTaskPage" asp-area="Cms" method="post" class="form-horizontal" id="frmNote"
      data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
      data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
      data-ajax="true" data-ajax-method="POST">
    <div id="ribbon">
        <div class="ribbon-window-title"></div>
        <div class="ribbon-tab" id="format-tab">

            @if (Model.EnableBackButton)
            {
                <div class="ribbon-button ribbon-section" onclick="closeNavMemberGroup();">
                    <div class="ribbon-content">
                        <div class="back-icon fal fa-arrow-circle-left"></div>
                        <div class="text-label">@Model.BackButtonText.ToDefaultBackButtonText()</div>
                    </div>
                </div>
            }
            @if (Model.IsReplyButtonVisible)
            {
                <div class="ribbon-button ribbon-section" onclick="OnReply();">
                    <div class="ribbon-content">
                        <div class="reply-icon fa fa-reply"></div>
                        <div class="text-label">Reply</div>
                    </div>
                </div>
            }
            <div class="ribbon-section">
                <div class="ribbon-content">
                    <div class="text-title">@Model.NoteNo</div>
                    <div class="text-label">Note No</div>
                    @Html.HiddenFor(x => x.NoteNo)

                </div>
            </div>
            <div class="ribbon-section">
                <div class="ribbon-content">
                    <div class="text-title @Model.NoteStatusFontCss">@Model.NoteStatusName</div>
                    <div class="text-label">Status</div>
                    @Html.HiddenFor(x => x.NoteStatusCode)
                </div>
            </div>
            <div class="ribbon-section">
                <div class="ribbon-content">
                    <div class="text-title">@Model.VersionNo</div>
                    <div class="text-label">Version No</div>
                    @Html.HiddenFor(x => x.VersionNo)
                </div>
            </div>
            @if (!Model.IsSubmitButtonVisible)
            {

                <div class="ribbon-section">
                    <div class="ribbon-content">
                        <div class="text-title">@Model.NotePriorityName</div>
                        <div class="text-label">Priority</div>
                        @Html.HiddenFor(x => x.NotePriorityId)
                        @Html.HiddenFor(x => x.NotePriorityCode)
                    </div>
                </div>
                @*<div class="ribbon-section">
                <div class="ribbon-content">
                    <div class="text-title">@Model.NoteSLA</div>
                    <div class="text-label">SLA</div>
                    @Html.HiddenFor(x => x.NoteSLA)
                </div>
            </div>*@
                <div class="ribbon-section">
                    <div class="ribbon-content">
                        <div class="text-title">@Model.StartDate.ToDefaultDateTimeFormat()</div>
                        <div class="text-label">Start Date</div>
                        @Html.HiddenFor(x => x.StartDate)
                    </div>
                </div>
                <div class="ribbon-section">
                    <div class="ribbon-content">
                        <div class="text-title">@Model.ExpiryDate.ToDefaultDateTimeFormat()</div>
                        <div class="text-label">Expiry Date</div>
                        @Html.HiddenFor(x => x.ExpiryDate)
                    </div>
                </div>
                @if (Model.ReminderDate != null)
                {
                    <div class="ribbon-section">
                        <div class="ribbon-content">
                            <div class="text-title">@Model.ReminderDate.ToDefaultDateTimeFormat()</div>
                            <div class="text-label">Reminder Date</div>
                            @Html.HiddenFor(x => x.ReminderDate)
                        </div>
                    </div>

                }
                <div class="ribbon-section ribbon-button" onclick="ViewNotification()">
                    <div class="ribbon-content">
                        <span class="notification-icon far fa-bell"></span>
                        <span class="notification-text" id="notificationCount">0</span>
                        <div class="text-label">Notifications</div>
                    </div>
                </div>
                <div class="ribbon-section ribbon-button" onclick="onCommentClick();">
                    <div class="ribbon-content">
                        <span class="icon_comment far fa-comment-alt"></span>
                        <span class="comment-text" id="commentCount">0</span>
                        <div class="text-label">Comment</div>
                    </div>
                </div>
            }
            <div class="ribbon-section ribbon-button" onclick="AddAttachment();">
                <div class="ribbon-content">
                    <span class="attachment-icon far fa-paperclip"></span>
                    <span class="attachment-text" id="attchmentCount">0</span>
                    <div class="text-label">Attachment</div>
                </div>
            </div>
            <div class="ribbon-section ribbon-button" onclick="onclickShare();">
                <div class="ribbon-content">
                    <span class="share-icon far fa-share-alt"></span>
                    <span class="share-text" id="sharedCount">0</span>
                    <div class="text-label">Share</div>
                </div>
            </div>
            <div class="ribbon-section ribbon-button" onclick="onTag();">
                <div class="ribbon-content">
                    <span class="share-icon far fa-tag"></span>
                    @*<span class="share-text" id="sharedCount"></span>*@
                    <div class="text-label" style="margin-top:4px">Tags</div>
                </div>
            </div>

        </div>
    </div>
    <div class="pad-15" style="background-color:#fff;">
        @Html.HiddenFor(x => x.Json)
        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.NoteId)
        @Html.HiddenFor(x => x.UdfNoteTableId)
        @Html.HiddenFor(x => x.TemplateId)
        @Html.HiddenFor(x => x.TemplateCode)
        @Html.HiddenFor(x => x.PageId)
        @Html.HiddenFor(x => x.DataAction)
        @Html.HiddenFor(x => x.RecordId)
        @Html.HiddenFor(x => x.PortalName)
        @Html.HiddenFor(x => x.CreateReturnType)
        @Html.HiddenFor(x => x.EditReturnType)
        @Html.HiddenFor(x => x.IsSubjectUnique)
        @Html.HiddenFor(x => x.CompleteReason)
        @Html.HiddenFor(x => x.CloseComment)
        @Html.HiddenFor(x => x.NoteSequenceOrder)
        @Html.HiddenFor(x => x.ParentNoteId)
        @Html.HiddenFor(x => x.ActiveUserType)
        @Html.HiddenFor(x => x.ActiveUserId)
        @Html.HiddenFor(x => x.TableMetadataId)
        @Html.HiddenFor(x => x.RequestedByUserId)
        @Html.HiddenFor(x => x.OwnerUserId)
        @Html.HiddenFor(x => x.LayoutMode)
        @Html.HiddenFor(x => x.ReturnUrl)
        @Html.HiddenFor(x => x.CustomUrl)
        @Html.HiddenFor(x => x.PopupCallbackMethod)
        <div id="validation-summary-manageform" class="pt-2 pb-2 error-summary alert alert-danger" asp-validation-summary="All" style="display:none;"></div>
        <div class="row">
            <div class="col">
                @if (Model.IsDraftButtonVisible)
                {
                    <button type="submit" class="btn btn-info" onclick="return SaveAsDraft();">@Model.SaveAsDraftText.ToDefaultSaveAsDraftButtonText()</button>
                }
                @if (Model.IsSubmitButtonVisible)
                {
                    @*<button type="submit" class="btn btn-primary" onclick="return Submit();">@Model.SubmitButtonText.ToDefaultSubmitButtonText()</button>*@
                    <button type="submit" class="btn btn-success" onclick="return Complete();">@Model.CompleteButtonText.ToDefaultCompleteButtonText()</button>
                }
            </div>
        </div>


        <div class="row">
            @if (Model.IsSubmitButtonVisible)
            {
                <div class="col-xs-12 col-sm-8">
                    <div class="form-group">
                        <label class="col-form-label">
                            Subject
                        </label>
                        <div>
                            @*@Html.Kendo().TextBoxFor(x => x.NoteSubject).HtmlAttributes(new { @style = "width:100%;" })*@
                            <input asp-for="NoteSubject" type="text" class="form-control" style="width:100%" />

                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-form-label">
                            Description
                            <span style="float:right;">
                                @*@(Html.Kendo().CheckBox().Name("enableHtml2").HtmlAttributes(new { @class = "enableHtml" }).Label("Enable HTML"))*@
                                <input type="checkbox" id="enableHtml2" class="enableHtml" onchange="chkChange();"/>
                                <label>Enable HTML</label>
                            </span>
                        </label>
                        <div>
                            @*@(Html.Kendo().EditorFor(x => x.NoteDescription).Value(Html.Raw(Model.NoteDescription.HtmlDecode()).ToString())
                .HtmlAttributes(new { style = "width: 100%;", aria_label = "editor" })
                .StyleSheets(css => css.Add(Url.Content("~/css/editorStyles.css"))
                )
                   .Tools(tools => tools
        .Clear()
        .Formatting()
        .Bold().Italic().Underline().Strikethrough()
        .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
        .InsertUnorderedList().InsertOrderedList()
        //.Outdent().Indent()
        .CreateLink().Unlink()
        //.TableEditing()
        .ViewHtml()
        .FontName()
        .FontSize()
        .ForeColor().BackColor()

        )
                            )*@

                            <div class="page-wrapper box-content">
                                <textarea class="content" asp-for="NoteDescription" id="NoteDescription"></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="form-group" id="div-requested-by" style="display:none;">
                        <label class="col-form-label">
                            Requested By
                        </label>
                        <div class="alert-light">
                            <img class="user-photo rounded-circle" src="/Cms/document/getimagemongo/@Model.RequestedByUserPhotoId" onerror="OnPhotoError(this);">
                            <span class="user-popup-card" data-user-id="@Model.RequestedByUserId">
                                <span class="pl-2">@Model.RequestedByUserName</span>
                                <span>&lt;<a>@Model.RequestedByUserEmail</a>&gt;</span>
                            </span>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-form-label">
                            From
                        </label>
                        <div class="alert-light" id="from-display">
                            <img id="o-img" class="user-photo rounded-circle" src="/Cms/document/getimagemongo/@Model.OwnerUserPhotoId" onerror="OnPhotoError(this);">
                            <span id="user-popup-card" class="user-popup-card" data-user-id="@Model.OwnerUserId">
                                <span id="o-name" class="pl-2">@Model.OwnerUserName</span>
                                <span>&lt;<a id="o-email">@Model.OwnerUserEmail</a>&gt;</span>
                            </span>
                            <i title="Change Owner" class="pl-2 fa fa-pencil pt-1" style="font-size:22px;cursor:pointer;" onclick="return OnChangeOwner()"></i>
                        </div>
                        <div id="from-edit" class="row no-gutters" style="display:none;">
                            <div class="col-11">  @await Html.PartialAsync("~/Areas/Core/Views/Shared/_UserDropdown.cshtml", new Tuple<string, string, string, string>(Model.OwnerUserId, "owner", null, "form-control"))</div>
                            <div class="1">
                                <i class="fa fa-check-circle" style="font-size:30px;cursor:pointer;padding-left:5px;padding-top:7px;color:green;" title="Save" onclick="return OnChangeOwnerSave()"></i>
                                <i class="fa fa-times-circle" style="font-size:30px;cursor:pointer;padding-left:5px;padding-top:7px;color:red;" title="Cancel" onclick="return OnChangeOwnerCancel()"></i>
                            </div>

                        </div>
                    </div>


                    <div class="row">

                        <div class="form-group col-6">
                            <label class="col-form-label">
                                Priority
                            </label>
                            <div>
                                @*@(Html.Kendo().DropDownListFor(x => x.NotePriorityId)
        .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Action("GetLOVIdNameList", "LOV", new { @area = "Cms", lovType = "NOTE_PRIORITY" });
            });
        })
        //.Filter(FilterType.Contains)
        .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
        .DataTextField("Name")
        .DataValueField("Id")
        .HtmlAttributes(new { @class = "form-control", @style = "width:100%;" })
                            )*@
                                <input id="NotePriorityId" class="form-control" style="width:100%" />

                               
                            </div>
                        </div>
                        @*<div class="form-group col-6">
                                             <label class="col-form-label">
                                                 Assign To Type
                                             </label>
                                             <div>
                                                 @(Html.Kendo().DropDownListFor(x => x.AssignedToTypeCode)
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetLOVIdNameList", "LOV", new { @area = "Cms", lovType = "TASK_ASSIGN_TO_TYPE" });
                            });
                        })
                        //.Filter(FilterType.Contains)
                        .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                        .DataTextField("Name")
                        .DataValueField("Code").Events(e => e.Change("onchangetype"))
                        .HtmlAttributes(new { @class = "form-control"/*, @style="width:90%;"*/})
                                             )
                                             </div>
                                         </div>*@
                    </div>
                    @*<div class="form-group" id="users" style="display:none">
                                 <label class="col-form-label">
                                     Assign To
                                 </label>
                                 <div>
                                     @(Html.Kendo().DropDownListFor(x => x.AssignedToUserId)
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("ReadUserData", "User", new { @area = "Cms" });
                        });
                    })
                    .Filter(FilterType.Contains)
                    .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .HtmlAttributes(new { @class = "form-control"/*, @style = "width:90%;"*/ })
                                     )
                                 </div>
                             </div>
                             <div class="form-group" id="teams" style="display:none">
                                 <label class="col-form-label">
                                     Assign To Team
                                 </label>
                                 <div>
                                     @(Html.Kendo().DropDownListFor(x => x.AssignedToTeamId)
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("ReadTeamData", "ProcessDesign", new { @area = "Cms" });
                        });
                    })
                    .Filter(FilterType.Contains)
                    .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .HtmlAttributes(new { @class = "form-control", @style = "width:100%;" })
                                     )
                                 </div>
                             </div>
                             <div class="form-group" id="teamusers" style="display:none">
                                 <label class="col-form-label">
                                     Assign To Team User
                                 </label>
                                 <div>


                                     @await Html.PartialAsync("~/Areas/Core/Views/Shared/_UserDropdown.cshtml", new Tuple<string, string, string, string>(Model.AssignedToTeamUserId, nameof(Model.AssignedToTeamUserId), null, "form-control"))

                                 </div>
                             </div>
                             <div class="form-group" id="hm" style="display:none">
                                 <label class="col-form-label">
                                     Assign To Hierarchy
                                 </label>
                                 <div>
                                     @(Html.Kendo().DropDownListFor(x => x.AssignedToHierarchyMasterId)
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("ReadHierarchyMasterData", "ProcessDesign", new { @area = "Cms" });
                        });
                    })
                    .Filter(FilterType.Contains)
                    .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .HtmlAttributes(new { @class = "form-control", @style = "width:100%;" })
                                     )
                                 </div>
                             </div>
                             <div class="form-group" id="hmlevel" style="display:none">
                                 <label class="col-form-label">
                                     Assign To Hierarchy Level
                                 </label>
                                 <div>
                                     @(Html.Kendo().DropDownListFor(x => x.AssignedToHierarchyMasterLevelId)
                                 .DataSource(source =>
                                 {
                                     source.Read(read =>
                                     {
                                         read.Action("ReadHierarchyMasterLevelDataById", "ProcessDesign", new { @area = "Cms" })
                                         .Data("Filter");
                                     })
                                 .ServerFiltering(true);
                                 })
                                 .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                                 .DataTextField("Name")
                                 .DataValueField("ID")
                                 .HtmlAttributes(new { style = "width:100%" })
                                 .Enable(false)
                                 .AutoBind(false)
                                 .CascadeFrom("AssignedToHierarchyMasterId")
                                     )
                                 </div>
                             </div>*@
                    <div class="row">
                        <div class="form-group col-6">
                            <label class="col-form-label">
                                Start Date
                            </label>
                            <div>
                                @*@Html.Kendo().DateTimePickerFor(x => x.StartDate).Format(ApplicationConstant.DateAndTime.DefaultDateTimeFormat).HtmlAttributes(new { @style = "width:100%;" })*@@*.Events(e => e.Change("OnStartDateDueDateChange"))*@
                                <input asp-for="StartDate" id="StartDate" style="width:100%;" />
                            </div>
                        </div>
                        <div class="form-group col-6">
                            <label class="col-form-label">
                                Expiry Date
                            </label>
                            <div>
                                @*@Html.Kendo().DateTimePickerFor(x => x.ExpiryDate).Format(ApplicationConstant.DateAndTime.DefaultDateTimeFormat).HtmlAttributes(new { @style = "width:100%;" })*@@*.Events(e => e.Change("OnStartDateDueDateChange"))*@
                                <input asp-for="ExpiryDate" id="ExpiryDate" style="width:100%;" />
                            </div>
                        </div>


                    </div>
                    <div class="row">
                        @*<div class="form-group col-6">
            <label class="col-form-label">
                SLA
            </label>
            <div>
               @Html.Kendo().TextBoxFor(x => x.NoteSLASeconds).HtmlAttributes(new { @style = "width:100%;" }) 
            <input asp-for="NoteSLASeconds" type="text" class="form-control" />
            </div>
        </div>*@
                        <div class="form-group col-6">
                            <label class="col-form-label">
                                Reminder Date
                            </label>
                            <div>
                                @*@Html.Kendo().DateTimePickerFor(x => x.ReminderDate).Format(ApplicationConstant.DateAndTime.DefaultDateTimeFormat).HtmlAttributes(new { @style = "width:100%;" })*@
                                <input asp-for="ReminderDate" id="ReminderDate" style="width:100%;" />
                            </div>
                        </div>
                    </div>
                    <div id="formio-container"></div>
                </div>
            }

            else
            {

                <div class="col-xs-12 col-sm-8">
                    @{
                        var list = new List<SelectListItem>();
                        if (Model.IsAddCommentEnabled)
                        {
                            list.Add(new SelectListItem()
                            {
                                Text = "Add Comment",
                                Value = "ADD_COMMENT",

                            });
                        }
                        if (Model.IsCloseButtonVisible)
                        {
                            list.Add(new SelectListItem()
                            {
                                Text = "Close Note",
                                Value = "CLOSE_NOTE"
                            });
                        }
                        //if (Model.IsCompleteButtonVisible)
                        //{
                        //    list.Add(new SelectListItem()
                        //    {
                        //        Text = "Complete Note",
                        //        Value = "COMPLETE_TASK",
                        //    });
                        //}
                    }
                    @if (Model.DataAction == DataActionEnum.Edit)
                    {
                    <div class="col-xs-12 pb-3">
                        @*@(Html.Kendo().DropDownList().Name("drpAction")
                            .Events(e => e.Change("OnActionChange"))
                              .Filter(FilterType.Contains)
                               .OptionLabel("Select a response")

                                     .HtmlAttributes(new {  @class = "drp-btn" })
                                      .BindTo(list )

                            )*@
                        <input id="drpAction" class="drp-btn" />
                        <script>
                                $("#drpAction").kendoDropDownList({
                                    optionLabel: "Select a response",
                                    filter: "contains",
                                    dataTextField: "Text",
                                    dataValueField: "Value",
                                    change: OnActionChange,
                                    dataSource: [
                                        @if (Model.IsAddCommentEnabled)
                                            {
                                                @:{ Text: "Add Comment", Value: "ADD_COMMENT" },
                                            }
                                         @if (Model.IsCloseButtonVisible)
                                         {
                                        @:{ Text : "Close Note",Value : "CLOSE_NOTE"},
                                           }
                                        ],

                                 });
                        </script>
                    </div>
                        <div class="col-xs-12 action-section mb-2" style="display:none;">
                            <div id="action-add-comment" class="col-xs-12" style="display:none;">
                                <div class="form-group">
                                    <label class="col-form-label">
                                        Comment
                                        @*<span style="float:right;">
                                            @(Html.Kendo().CheckBox().Name("enableHtml3").HtmlAttributes(new { @class= "enableHtml" }).Label("Enable HTML"))

                                        </span>*@
                                    </label>

                                    <div>

                                        @*@(Html.Kendo().Editor().Name("comment")
                        .HtmlAttributes(new {@class="add-comment-editor", aria_label = "editor" })
                        .StyleSheets(css =>css.Add(Url.Content("~/css/editorStyles.css"))
                        )
                           .Tools(tools => tools
            .Clear()
            .Formatting()
            .Bold().Italic().Underline().Strikethrough()
            .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
            .InsertUnorderedList().InsertOrderedList()
            //.Outdent().Indent()
            .CreateLink().Unlink()
            //.TableEditing()
            .ViewHtml()
            .FontName()
            .FontSize()
            .ForeColor().BackColor()

        )
                )*@

                                        <div class="page-wrapper box-content">

                                            <textarea class="content" name="comment"></textarea>

                                        </div>

                                    </div>
                                    <div class="pt-2">
                                        @*@(Html.Kendo().DropDownList().Name("CommentToUserId")
        .OptionLabel("All")
        .Filter(FilterType.Contains)
        .DataTextField("Name")
        .DataValueField("Id")
        .Height(400)


        .HtmlAttributes(new{ @class="form-control"})
        .AutoBind(true)
        .DataSource(source =>
        {

            source.Read(read =>
            {
                read.Action("GetUsersIdNameList", "User", new { @area = "Cms" });
               // .Data("Filter");
            });

        })

        )*@
                                        <input  id="CommentToUserId" class="form-control"  />
                                       

                                    </div>
                                </div>
                                <button class="btn post-btn" onclick="PostComment(event)">Add Comment</button>
                            </div>
                            <div id="action-complete-task" class="col-xs-12" style="display:none;">
                                <div id="formio-container"></div>
                                <div class="pt-4">
                                    @*@if (Model.IsCompleteButtonVisible)
                                    {
                                        <button type="submit" class="btn btn-success" onclick="return Complete();">@Model.CompleteButtonText.ToDefaultCompleteButtonText()</button>
                                    }*@
                                    @*@if (Model.IsRejectButtonVisible)
                                    {
                                        <button type="button" class="btn btn-danger" onclick="return Reject();">@Model.RejectButtonText.ToDefaultRejectButtonText()</button>
                                    }*@
                                </div>
                            </div>
                            <div id="action-change-sla" class="col-xs-12" style="display:none;">
                                Request SLA
                            </div>
                            <div id="action-close-task" class="col-xs-12" style="display:none;">
                                <div class="form-group">
                                    <label class="col-form-label">
                                        Rating
                                    </label>
                                    <div>
                                        @*@(Html.Kendo().RatingFor(x=>x.UserRating)
        //.Name("closeRating")
        .Min(1)
        .Max(5)
        .Precision("half")
    )*@

                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-form-label">
                                        Comments
                                        @*<span style="float:right;">
                                            @(Html.Kendo().CheckBox().Name("enableHtml2").HtmlAttributes(new { @class= "enableHtml" }).Label("Enable HTML"))

                                        </span>*@
                                    </label>

                                    <div>

                                        @*@(Html.Kendo().Editor().Name("CloseComments")
                        .HtmlAttributes(new {@class="add-comment-editor", aria_label = "editor" })
                        .StyleSheets(css =>css.Add(Url.Content("~/css/editorStyles.css"))
                        )
                           .Tools(tools => tools
            .Clear()
            .Formatting()
            .Bold().Italic().Underline().Strikethrough()
            .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
            .InsertUnorderedList().InsertOrderedList()
            //.Outdent().Indent()
            .CreateLink().Unlink()
            //.TableEditing()
            .ViewHtml()
            .FontName()
            .FontSize()
            .ForeColor().BackColor()

        )
                )*@

                                        <div class="page-wrapper box-content">
                                            <textarea class="content" id="CloseComments"></textarea>
                                        </div>

                                    </div>
                                </div>
                                <button class="btn btn-dark" onclick="Close();">Close Note</button>
                            </div>
                        </div>
                    }

                    <div class="div-readonly">
                        <strong>From:</strong>
                        <span class="pl-1 user-popup-card" data-user-id="@Model.OwnerUserId">
                            <span>
                                @Model.OwnerUserName
                            </span>
                            <a>&lt;@Model.OwnerUserEmail&gt;</a>
                        </span>
                    </div>
                    <div class="div-readonly">
                        <strong>Sent:</strong>
                        <span class="pl-1">
                            @Model.SubmittedDate.Humanize()
                        </span>
                    </div>
                    @*<div class="div-readonly">
                        <strong>To:</strong>
                        <span class="pl-1">
                            <span>
                                @Model.AssignedToUserName
                            </span>
                            <a>&lt;@Model.AssignedToUserEmail&gt;</a>
                        </span>
                    </div>*@

                    @if (Model.SharedList != null && Model.SharedList.Count() > 0)
                    {
                        <div class="div-readonly">
                            <strong>Cc:</strong>


                            @foreach (var item in Model.SharedList)
                            {
                                <span class="pl-1  user-popup-card" data-user-id="@item.Id">
                                    <span>@item.UserName</span><a>&lt;@item.Email&gt;;</a>
                                </span>
                            }
                        </div>
                    }

                    <div class="div-readonly">
                        <strong>Subject:</strong>
                        <span class="pl-1">
                            @Model.NoteSubject
                        </span>
                    </div>
                    <div class="div-readonly">
                        <span class="pl-1">
                            @Html.Raw(Model.NoteDescription.HtmlDecode())
                        </span>
                    </div>
                    <hr style="height:1px;background-color: silver;" />
                    <div>
                        @*@(Html.Kendo().ListView<NTSMessageViewModel>()
                    .Name("listViewMsg")
                    .TagName("div")
                    .Scrollable(ListViewScrollableMode.Endless)
                    .ClientTemplateId("templateListReplies")
                    .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(1000)
                         .Read(read => read.Action("GetNoteMessageList", "NtsNote", new {@area="Cms",noteId=Model.NoteId}))
                        )
                     .Events(events => events.DataBound("OnMsgDatabound"))
                //.Events(events => events.DataBound("OnDataBoundCompleted"))
                )*@

                        <div id="listViewMsg"></div>
                    </div>
                </div>
            }
        </div>

    </div>
    <script type="text/x-kendo-tmpl" id="templateListReplies">
        <div class="col header-readonly">#=Type#</div>
        <div class="div-readonly">
            <strong>From:</strong>
            <span class="pl-1 user-popup-card" data-user-id="#=FromId#">
               <span>#=From#</span><span><a>&lt;#=FromEmail#&gt;</a></span>
            </span>
        </div>
        <div class="div-readonly">
            <strong>Sent:</strong>
            <span class="pl-1">
                #=SentDateDisplay#

            </span>
        </div>
        #if(To!=null){#
            <div class="div-readonly">
                <strong>To:</strong>
                <span class="pl-1 user-popup-card" data-user-id="#=ToId#">
                    <span>#=To#</span><span><a>&lt;#=ToEmail#&gt;</a></span>
                </span>
            </div>
         #}#
         #if(Subject!=null){#
            <div class="div-readonly">
                <strong>Subject:</strong>
                <span class="pl-1">
                       #=Subject#
                </span>
            </div>
         #}#
         #if(Body!=null){#
            <div class="div-readonly">
                <span class="pl-1">
        #= htmlDecode(Body) #
                </span>
            </div>
         #}#
             <hr/>
    </script>

    @*@(Html.Kendo().Dialog()
        .Name("reason")
        .Title("Reason")
        .Content( @"<textarea id='CommentTemp' rows='5' class='form-control'></textarea><div style='display:none;color:red;' id='commentReq'></div>")
        .Animation(a=>a.Open(o=>o.Zoom(ZoomDirection.In)).Close(c=>c.Zoom(ZoomDirection.Out)))
        .Width(450)
        .Height(300)
        .Modal(true)
        .Visible(false)
        .Actions(actions =>
        {
        actions.Add().Text("Cancel");
        actions.Add().Text("Save").Primary(true).Action("OnReasonSave");
        })

    )*@
    @*<div class="modal fade" id="ownerChangePopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @await Html.PartialAsync("~/Areas/Core/Views/Shared/_UserDropdown.cshtml", new Tuple<string, string, string, string>(Model.AssignedToTeamUserId, nameof(Model.AssignedToTeamUserId), null, "form-control"))
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Save changes</button>
                    </div>
                </div>
            </div>
        </div>*@

</form>







