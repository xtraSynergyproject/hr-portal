@using Synergy.App.DataModel
@using Synergy.App.ViewModel
@using Synergy.App.Common

@{
    ViewBag.Title = "Service SLA Dashboard";

    Layout = null;
}
@*@model TemplateViewModel;*@
<style>

    .btn-filter-reset {
        color: #fff;
        background-color: #428bca;
        border-color: #428bca;
    }

    .banner-text {
        position: absolute;
        top: 35px;
        left: 30px;
    }

    .k-datepicker {
        width: 9em !important;
    }
</style>

<script>

    $(document).ready(function () {

        getIssueChart();

        getServiceListData();

        $("#TemplateType").kendoDropDownList({
            dataTextField: "DisplayName",
            dataValueField: "Code",
            optionLabel: "Select Service Type",
            @*value: '@Model.Status.ToString()',*@
            /*change: OnChangeServiceType,*/
            dataSource: {
                transport: {
                    read: {
                        url: "/Cms/NtsService/ReadServiceTemplate?templateCode=@ViewBag.TemplateCodes&portalNames=@ViewBag.PortalNames",
                    }
                }
            }
        });


        $("#DepartmentType").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            optionLabel: "Select Department Type",
            /*change: OnChangeServiceType,*/
            dataSource: {
                transport: {
                    read: {
                        url: "/pms/PerformanceDocument/ReadDepartmentList",
                    }
                }
            }
        });

    });

    var columnDefs = [
        {
            headerName: "Service No",
            field: "ServiceNo",
            cellRenderer: params => {
                return "<input type='button' class='btn btn-link' onclick='OpenService(\"" + params.data.Id + "\",\"" + params.data.TemplateCode + "\" )' value=\"" + params.value + "\" />";
            }
        },
        {
            headerName: "Service",
            field: "ServiceName",
        },
        {
            headerName: "Service Status",
            field: "WorkflowStatus",
        },
        {
            headerName: "Service Status",
            field: "ServiceStatusName",
             cellStyle: params => {
                debugger;
                if (params.value == "Completed") {
                    return { color: 'white', backgroundColor: '#13b713' };
                } else if (params.value == "In Progress") {
                    return { color: 'white', backgroundColor: '#007bff' };
                } else if (params.value == "Draft") {
                    return { color: 'white', backgroundColor: '#17a2b8' };
                } else if (params.value == "Overdue") {
                    return { color: 'white', backgroundColor: '#1700b8' };
                } else {
                    return { color: 'white', backgroundColor: '#17a200' };
                }
            },
            cellRenderer: params => {
                return params.value;
            }
            //cellRenderer: params => {
            //    if (params.value == "Completed") {
            //        return "<label class='text-success' style='font-weight:400;'>" + params.value + "</label>"
            //    }
            //    else if (params.value == "Draft") {
            //        return "<label class='text-info' style='font-weight:400;'>" + params.value + "</label>"
            //    }
            //    else if (params.value == "In Progress") {
            //        return "<label class='text-primary' style='font-weight:400;'>" + params.value + "</label>"
            //    }
            //    else if (params.value == "Overdue") {
            //        return "<label class='text-warning' style='font-weight:400;'>" + params.value + "</label>"
            //    }
            //    else {
            //        return "<label class='text-default' style='font-weight:400;'>" + params.value + "</label>"
            //    }

            //}
        },
        {
            headerName: "Requested By",
            field: "OwnerDisplayName",
        },
        {
            headerName: "Requested Date",
            field: "CreatedDate",
            cellRenderer: params => {
                return moment(params.value).format('@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormatForMoment');
            }
        },
        {
            headerName: "Due Date",
            field: "DueDate",
            cellRenderer: params => {
                return moment(params.value).format('@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormatForMoment');
            }
        }

    ];

    function getServiceListData(templateCode) {
        document.getElementById("serviceSLAGridView").innerHTML = "";

        var catcodes = '@ViewBag.CategoryCodes';
        
        var tempCode = templateCode;
        if (tempCode == undefined) {
            tempCode = "";
        }

        var url = "";
        /*"/cms/NtsService/ReadServiceSLAData?categoryCodes=" + catcodes + "&serviceStatus=" + statuscodes + "&templateCode=" + tempCode,*/
        gridConfig(
            "serviceSLAGridView",
            url,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    function OpenService(serviceId, templateCode) {

        var portalId = $('#GlobalPortalId').val();
        var url = '/Cms/Page?lo=Popup&popup=true&cbm=OnAfterService&source=View&dataAction=View&templateCodes=' + templateCode + '&portalId=' + portalId + '&recordId=' + serviceId;

        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'View Service', Width: 1200, Height: 700 });
        return false;
    }

    function OnChangeServiceType() {
        var search = $("#TemplateType").data("kendoDropDownList").value();
        getServiceListData(search);
    }

    function filterSlaGrid() {
        var deptVal = $("#DepartmentType").val();
        var tempVal = $("#TemplateType").val();
        alert("department Vaue = "+deptVal+"\ntemplate Value = "+tempVal);
    }

</script>

<script>

    function getIssueChart() {
        debugger;
        @*var url = "/cms/NtsService/ReadServiceSLAData2?categoryCodes=@ViewBag.CategoryCodes&templateCodes=@ViewBag.TemplateCodes";*@
        var url = "/cms/NtsService/GetSeriesData";
        $.ajax({
            type: 'GET',
            url: url,
            success: function (res) {
                if (res) {
                    debugger;
                    /*var dueList = res.dueDateList;*/
                    var seriesData = getSeriesData(res);
                    var options = {
                        series: seriesData,
                        theme: {
                            mode: skin == "dark" ? "dark" : "light",

                        },
                        chart: {
                            height: 380,
                            type: 'heatmap',
                            toolbar: {
                                show: false
                            },
                            zoom: {
                                enabled: false,
                            },
                            events: {
                                click: function (event, chartContext, config) {
                                    debugger;
                                    var el = event.target;
                                    var seriesIndex = parseInt(el.getAttribute("i"));
                                    var dataPointIndex = parseInt(el.getAttribute("j"));

                                    var seriesName = config.globals.seriesNames[seriesIndex];
                                    //var hr = config.config.series[seriesIndex].data[dataPointIndex].x;
                                    //var nexthr = hr + 1;
                                    //if (~~(hr / 10) == 0) {
                                    //    hr = '0' + hr;
                                    //}

                                    //if (~~(nexthr / 10) == 0) {
                                    //    nexthr = '0' + nexthr;
                                    //}
                                    //var todayDate = new Date().toISOString().split('T')[0];
                                    //var lt = todayDate + 'T' + hr + ':00:00.000Z';
                                    //var rt = todayDate + 'T' + nexthr + ':00:00.000Z';
                                    //onBlockClick(lt, rt, seriesName);
                                }
                            }
                        },
                        legends: {
                            formatter: function (seriesName, opts) {

                                /*$('[seriesname="closed"]').hide();*/
                                if (seriesname == "closed") {
                                    $(this).hide();
                                }
                                return [seriesName, " - ", opts.w.globals.series[opts.seriesIndex]]
                            }
                        },
                        yaxis: {
                            labels: {
                                style: {
                                    colors: [],
                                    fontSize: '10px',
                                    fontFamily: 'Lato',
                                    fontWeight: 400,
                                    cssClass: 'apexcharts-yaxis-label',
                                },
                                //formatter: (value) => { debugger; return val; },
                            }
                        },
                        xaxis: {
                            type: "categories",
                            //labels: noOfHrs,
                        },
                        plotOptions: {
                            heatmap: {
                                shadeIntensity: 1,
                                radius: 0,
                                //useFillColorAsStroke: true,
                                colorScale: {
                                    ranges: [{
                                        from: -30000,
                                        to: -1,
                                        name: 'closed',
                                        color: '#ffffff',
                                        fill: '#ffffff',
                                    },
                                    {
                                        from: 0,
                                        to: 1,
                                        name: 'high(<1 week)',
                                        color: '#FF2E2E'
                                    },
                                    {
                                        from: 2,
                                        to: 3,
                                        name: 'medium(2-3 weeks)',
                                        color: '#FFFF8A'
                                    },
                                    {
                                        from: 4,
                                        to: 10,
                                        name: 'low(>3 weeks)',
                                        color: '#7EC8E3'
                                    }
                                    ]
                                }
                            }
                        },
                        dataLabels: {
                            enabled: false
                        },
                        stroke: {
                            width: 1
                        },
                        title: {
                            //text: 'HeatMap Chart with Color Range'
                        },
                        tooltip: {
                            custom: function (opts) {
                                //debugger;
                                const desc =
                                    opts.ctx.w.config.series[opts.seriesIndex].data[
                                        opts.dataPointIndex
                                    ].description;

                                const value = opts.series[opts.seriesIndex][opts.dataPointIndex];
                                if (desc == 0) {
                                    //debugger;
                                    return '<div disabled></div>';
                                }

                                return desc;
                            }
                        },
                    };

                    var hchart = new ApexCharts(document.querySelector("#heatmap"), options);

                    hchart.render();
                }
            }
        });

    }

    function getSeriesData(res) {
        debugger;
        var seriesdata = res.seriesList;
        var duedata = res.dueDateList;

        var seriesList = [];
        for (var i = 0; i < seriesdata.length; i++) {
            var obj = {};
            obj["name"] = seriesdata[i][0].TemplateCode;
            var data = [];
            for (var j = 0; j < duedata.length; j++) {
                var dataobj = {};
                dataobj["x"] = new Date(duedata[j]).toLocaleDateString();
                var now = new Date();
                var dataCount = getcount(seriesdata[i], duedata[j]);
                if (dataCount != 0) {
                    dataobj["y"] = diff_weeks(duedata[j], now);
                }
                else {
                    dataobj["y"] = -1;
                }
                
                dataobj["description"] = dataCount;
                data.push(dataobj);
            }
            obj["data"] = data;
            seriesList.push(obj);
        }
        return seriesList;
    }

    function diff_weeks(dt2, dt1) {
        debugger;
        var dt = new Date(dt2)
        var diff = (dt.getTime() - dt1.getTime()) / 1000;
        diff /= (60 * 60 * 24 * 7);
        //if (diff < 0 && diff > -1) {
        //    diff = 0;
        //}
        //else {
        //    diff = Math.round(diff);
        //}
        return Math.abs(Math.round(diff));
        /*return diff;*/

    }

    function getcount(series, duedate) {
        debugger;
        var count = 0;
        for (var i = 0; i < series.length; i++) {
            if (series[i].DueDate == duedate) {
                count++;
            }
        }
        return count;
    }
</script>

<div id="appWrapper" class="wrapper">
    <div class="page">
        <div class="page-inner">
            <div class="page-section">
                <div class="row no-gutters p-2">
                    <div class="col-lg-6 col-md-12">
                        <h5>@ViewBag.Title</h5>
                    </div>
                </div>
                <div class="row p-2 mb-2">
                    <div class="col-lg-4 col-md-4 col-sm-12">
                        <div id="TemplateType" style="width:100%"></div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-12">
                        <div id="DepartmentType" style="width:100%;"></div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-12">
                        <button class="btn btn-primary" onclick="filterSlaGrid();" style="float: right;">Search</button>
                    </div>
                </div>
                <hr />
                <div class="row-12" style="padding:10px;">
                    <div id="heatmap"></div>
                </div>

                <div style="padding:10px;">
                    <div class="row">
                        <div class="col-6"><h5>Service Details</h5></div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-12">
                            <div id="serviceSLAGridView" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>