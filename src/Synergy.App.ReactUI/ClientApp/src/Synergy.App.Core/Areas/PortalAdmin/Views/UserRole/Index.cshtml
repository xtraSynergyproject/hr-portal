@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@*@using Kendo.Mvc.UI;*@
@model UserRoleViewModel
@{
    ViewData["Title"] = ViewBag.PageName;
    Layout = null;
}
<style>
    .fa {
        margin-top: 3px;
    }

    .i-hover:hover {
        background: #0062cc;
        /* padding-left: 4px; */
        border-radius: 50%;
    }

    .fal {
        position: relative;
        display: table-cell;
        width: 60px;
        height: 27px;
        text-align: center;
        vertical-align: middle;
        font-size: 1.3em;
        width: 27px;
        height: 27px;
        background: #0062cc;
    }
</style>
<script>
    var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(StatusEnum)))';
    var statusObj = JSON.parse(status);

    var columnDefs = [
        {
            field: "Name",
        },
        //{ field: "ShortName" },
        //{ field: "Prefix" },
        {
            field: "Status",
            cellRenderer: params => {
                return statusObj[params.value]; //only for enum
            }
        },
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinUserRole' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        getDataUserRole();

        //$.contextMenu('update');
        //$('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-menuBinUserRole',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        onEdit(id);
                                        break;

                                    case 'delete':
                                        OnDelete(id);
                                        break;
                                    case 'permission':
                                        onUserEntityPermission(id);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-edit" },
                                "delete": { name: "Delete", icon: "fas fa-trash" },
                                "permission": { name: "Manage Permission", icon: "fas fa-external-link-square" },

                            }
                        };


                }
            }
        });


    });
       function OnCreateUserRole() {


             var win = GetMainWindow();
           win.iframeOpenUrl =  '@Url.Action("CreateUserRole", "UserRole", new { @area= "PortalAdmin" })?portalId=@Model.PortalId';
          win.OpenWindow({ Title: 'Manage User Role', Width: 500, Height: 650 });
        return false;

    }

    function onEdit(id) {
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("EditUserRole", "UserRole", new { @area= "PortalAdmin" })?Id=' + id;
        win.OpenWindow({ Title: 'Manage User Role', Width: 500, Height: 650 });
        return false;
    }

    function OnDelete(id) {
        var flag = confirm('Do you really want to delete the User Role?');

        if (flag) {
            $.ajax({
                url:'@Url.Action("DeleteUserRole", "UserRole", new { @area= "PortalAdmin" })?Id=' + id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {

                    if (result.success) {
                        getDataUserRole();
                        kendo.alert("User Role Deleted Successfully.");
                    } else {
                        getDataUserRole();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    getDataUserRole();
                }
            });
            return false;
        }
    }
     function onUserEntityPermission(id) {
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));-->

         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ManageUserEntityPermission", "User", new { @area= "PortalAdmin" })?type=userRole&id=' + id;
         win.OpenWindow({ Title: 'Manage Permission', Width: 1200, Height: 650 });
        return false;
    }

    function RefreshUserRoleGrid() {
        getDataUserRole();
    }

   function getDataUserRole() {
       document.getElementById("myGridUserRole").innerHTML = "";
       gridConfig(
           "myGridUserRole",
           "/PortalAdmin/userRole/ReadData",
           columnDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
    }

</script>

@*<div>
    <h4>@ViewBag.Title</h4>
    <hr />
    <div class="row">
        <div class="col-12">
            <button type='button' class='btn btn-primary' onclick='OnCreateUserRole();'><i class='fa fas fa-plus'></i>&nbsp;Create User Role</button>
            <br /><br />
            <div id="myGridUserRole" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        </div>
    </div>
</div>*@

<div id="appWrapper" class="wrapper">
    <div class="page">
        <div class="page-inner">
            <div class="page-section">
                <h4>@ViewBag.Title</h4>
                <hr />
                <div class="row">
                    <div class="col-12">
                        <button type='button' class='btn btn-primary' onclick='OnCreateUserRole();'><i class='fa fas fa-plus'></i>&nbsp;Create User Role</button>
                        <br /><br />
                        <div id="myGridUserRole" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--<script>
    function OnEditUserRole(id) {
       //
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));-->
       
           <!--var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditUserRole", "UserRole", new { @area="PortalAdmin"})?Id=' + id;
        win.OpenWindow({ Title: 'Manage @ViewBag.PageName', Width: 450, Height: 800 });
        return false;
    }

    function OnDeleteUserRole(id) {
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        kendo.confirm("Are you sure that you want to proceed?").then(function () {
            confirmDeleteRole(id);

        }, function () {

        });

    }

    function confirmDeleteRole(id) {
        //

        $.ajax({
           // url: "~/UserRole/DeleteUserRole?Id=" + id,
            url:'@Url.Action("DeleteUserRole", "UserRole", new { @area= "PortalAdmin" })?Id=' + id,
            type: "GET",
            contentType: "application/json",
            dataType: "JSON",
            success: function (response) {
                // $('#dlg_DeleteConfirmation').data("kendoDialog").close();
               //
                $("#UserRolegrid").data("kendoGrid").dataSource.read();
            },
            error: function () {
               //
                $("#UserRolegrid").data("kendoGrid").dataSource.read();
            }
        });


    }
     function onUserEntityPermission(id) {
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

         var win = GetMainWindow();
         win.iframeOpenUrl = '@Url.Action("ManageUserEntityPermission", "User", new { @area= "PortalAdmin" })?type=userRole&id=' + id;
        win.OpenWindow({ Title: 'Manage Permission', Width: 1000, Height: 1000 });
        return false;
    }
      function OnCreateUserRole() {
             var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("CreateUserRole", "UserRole", new { @area= "PortalAdmin", @portalId=Model.PortalId })';
          win.OpenWindow({ Title: 'Manage @ViewBag.PageName', Width: 450, Height: 800 });
        return false;

    }
      $(function () {
        $.contextMenu({
            selector: '#roletree-menu',
            trigger: 'left',
            build: function ($trigger, e) {

                console.log($trigger);
                var id = $trigger.data('idvalue');
                var status = 0;


                switch (status) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditUserRole(id);
                                        break;
                                    case 'del':
                                        OnDeleteUserRole(id);
                                        break;
                                    case 'permission':
                                        onUserEntityPermission(id);
                                        break;
                                    default:
                                    }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                                "permission": { name: "Manage Permission", icon: "fas fa-external-link-square" },

                                }
                        };


                }
            }
        });

    });
</script>


<div>
    <h4>@ViewBag.PageName</h4>

    <hr />


    <div class="row">
        <div class="col-12">

           @* @(Html.Kendo().Grid<UserRoleViewModel>
    ()
    .Name("UserRolegrid")
    .ToolBar(toolbar =>
    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateUserRole();'><i class='fa fas fa-plus'></i>&nbsp;&nbsp; Create " + ViewBag.PageName+"</button>"))

    //toolbar.Custom().Text("Create Group").HtmlAttributes(new { href = "javascript:OnCreateGroup();" }))
    .Columns(columns =>
    {
        //columns.Bound(c => c.Id).Width(140).Hidden(true);
        //  columns.Bound(c => c.Id).Title(" ").Width(100).ClientTemplate("<a class='btn btn-success' onclick='return OnEditGroup(\"#=Id#\");'><i class='fad fa-edit'></i> Edit</a>");
        //columns.Command(command =>
        //{
        //    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditUserRole").HtmlAttributes(new { @class = "action-icon"});
        //    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteUserRole").HtmlAttributes(new { @class = "action-icon"});
        //    command.Custom("UserEntityPermission").Text("<i class='fa fa-external-link-square'></i>").Click("onUserEntityPermission").HtmlAttributes(new { @class = "action-icon" });
        //}).Title("Action").Width(130);

        columns.Bound(c => c.Id).ClientTemplate("<div class='btn-group grid-menu' id='roletree-menu' data-idvalue=\"#:Id#\"  ><i class='fas fa-ellipsis-v'></i></div>").Width(150).Title("" + SharedResource["Action"] + "");
        columns.Bound(c => c.Name);
        columns.Bound(c => c.Status);


    })
     .Scrollable(x => x.Enabled(false))
                .Sortable(srt => srt.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                                    .Operators(o => o.ForString(s => s.Clear()
                                                    .Contains("Contains")
                                                    .IsEqualTo("Is equal to")
                                                )))
                .Pageable(pageable => pageable
                .Refresh(true)

                .PageSizes(true)
                .ButtonCount(5))
                .AutoBind(true)
                .DataSource(
                dataSource => dataSource
                .Ajax()
                .PageSize(10)
                //.Events(events => events.Error("OnError"))
                .Read(read => read.Action("ReadData", "UserRole"))
                .Model(model => model.Id(p => p.Id))
                )
          )*@
        </div>
    </div>

</div>-->

