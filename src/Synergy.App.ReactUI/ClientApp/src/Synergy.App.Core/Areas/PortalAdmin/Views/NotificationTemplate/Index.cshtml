@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@model NotificationTemplateViewModel

@{
    ViewData["Title"] = "Notification Template";
    Layout = null;
}

<script>

     var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(NotificationActionTypeEnum)))';
    var statusObj = JSON.parse(status);
      var HierarchyType1 = '@Html.Raw(EnumExtension.EnumToJson(typeof(NtsTypeEnum)))';
    var HierarchyTypeObj1 = JSON.parse(HierarchyType1);
    var columnDefs = [

           {
            field: "Name",
           },
           {
               field: "Code",

           },
           {
               field: "NtsType",
               headerName: "Type",
               cellRenderer: params => {
                   return HierarchyTypeObj1[params.value]; //only for enum
               }
           },
        //{
        //    field: "ActionStatusCode",
        //},
        //{
        //    field: "Status",
        //    cellRenderer: params => {
        //        return statusObj[params.value]; //only for enum
        //    }
        //},
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                
                return "<div class='btn-group grid-menu' id='tree-menuBin11' data-idvalue='" + params.value + "' data-status=\"0\" data-ntstype='" + params.data.NtsType + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        getNotificatioTempData();



        $.contextMenu({
            selector: '#tree-menuBin11',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var ntsType = $trigger.data('ntstype');
                //alert(ntsType);
                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditNotificationTemplate(id, ntsType);
                                        break;

                                    case 'delete':
                                        OnDeleteNotificationTemplate(id);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-edit" },
                                "delete": { name: "Delete", icon: "fas fa-trash" },


                            }
                        };


                }
            }
        });


    });

    function getNotificatioTempData() {
        document.getElementById("kgrdNotificationTemplate").innerHTML = "";
        gridConfig(
            "kgrdNotificationTemplate",
            "/PortalAdmin/NotificationTemplate/ReadNotificationTemplateDataList",
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>
<script>
      function OnCreateNotificationTemplate() {
       
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("ManageNotification", "NotificationTemplate", new { @area="PortalAdmin"})';
        win.OpenWindow({ Title: 'Manage Notification Template', Width: 450, Height: 800 });
        return false;
    }
    function OnDeleteNotificationTemplate(id, ntstype) {
       // e.preventDefault();
      //  var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var flag = confirm('Do you really want to delete the Notification Template?');

        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteNoteNotification", "NotificationTemplate", new { @area="Cms"})?Id=' + id + '&ntsType=' + ntstype,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        getNotificatioTempData();
                        //$("#kgrdNotificationTemplate").data("kendoGrid").dataSource.read();
                        kendo.alert("Notification Template Deleted Successfully");
                    } else {
                        getNotificatioTempData();
                       // $("#kgrdNotificationTemplate").data("kendoGrid").dataSource.read();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    getNotificatioTempData();
                   // $("#kgrdNotificationTemplate").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }

    function OnEditNotificationTemplate(id,ntstype) {
       // e.preventDefault();
      //  var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        
          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ManageNotification", "NotificationTemplate", new { @area= "PortalAdmin" })?id=' + id + '&ntsType=' + ntstype;
        win.OpenWindow({ Title: 'Manage Notification Template', Width: 450, Height: 800 });
        return false;
    }

</script>

<div>
    <h4>@ViewBag.Title</h4>
    <hr />
    <div class="row">
        <div class="col-12">
            <button type='button' class='btn btn-primary' onclick='OnCreateNotificationTemplate();'><i class='fa fas fa-plus'></i>&nbsp;Create Notification Template</button>
            <br /><br />
            <div id="kgrdNotificationTemplate" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
            @*@(Html.Kendo().Grid<NotificationTemplateViewModel>
                      ().Name("kgrdNotificationTemplate")
                      .Columns(columns =>
                      {
                          columns.Command(command =>
                          {
                              command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditNotificationTemplate").HtmlAttributes(new { @class = "action-icon" });
                              command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteNotificationTemplate").HtmlAttributes(new { @class = "action-icon" });
                          }).Title("Action").Width(100);

                          columns.Bound(p => p.Name);
                          columns.Bound(p => p.Code);
                          columns.Bound(p => p.NtsType).Title("Type");
                          columns.Bound(p => p.ActionStatusCode);
                          columns.Bound(p => p.ActionType);
                      })
                      .ToolBar(toolbar =>
                      {
                          toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateNotificationTemplate();'><i class='fa fas fa-plus'></i>&nbsp;Create Notification Template</button>");
                      })
                      //.Events(e => e.DataBound("OnDataBoundNot"))
                      .Scrollable(x => x.Enabled(false))
                      .Sortable(srt => srt.Enabled(true))
                      .Selectable(select => select.Enabled(false))
                      .Filterable(f => f.Extra(false)
                                        .Operators(o => o.ForString(s => s.Clear()
                                        .Contains("Contains")
                                        .IsEqualTo("Is equal to")
                                        )))
                      .Pageable(pageable => pageable
                      .Refresh(true)
                      .PageSizes(true)
                      .ButtonCount(5))
                      .AutoBind(true)
                      .DataSource(dataSource => dataSource
                      .Ajax()
                      .PageSize(10)
                      .Read(read => read.Action("ReadNotificationTemplateData", "NotificationTemplate", new { @area = "Cms" }))
                      .Model(model => model.Id(p => p.Id))
                      )
                )*@
        </div>
    </div>
</div>

<!--<script>
    function OnDeleteNotificationTemplate(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var flag = confirm('Do you really want to delete the Notification Template?');

        if (flag) {
            $.ajax({
                url: '@Url.Action("DeleteNoteNotification", "NotificationTemplate", new { @area= "PortalAdmin" })?Id=' + dataItem.id + '&ntsType=' + dataItem.NtsType,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        $("#kgrdNotificationTemplate").data("kendoGrid").dataSource.read();
                        kendo.alert("Notification Template Deleted Successfully");
                    } else {
                        $("#kgrdNotificationTemplate").data("kendoGrid").dataSource.read();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    //
                    $("#kgrdNotificationTemplate").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }
     function OnCreateNotificationTemplate() {-->
       
         <!--var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("ManageNotification", "NotificationTemplate", new { @area= "PortalAdmin" })';
        win.OpenWindow({ Title: 'Manage Notification Template', Width: 450, Height: 800 });
        return false;
    }

    function OnEditNotificationTemplate(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));-->
       
          <!--var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ManageNotification", "NotificationTemplate", new { @area= "PortalAdmin" })?Id=' + dataItem.Id + '&ntsType=' + dataItem.NtsType;
        win.OpenWindow({ Title: 'Manage Notification Template', Width: 450, Height: 800 });
        return false;
    }

</script>

<div>
    <h4>@ViewBag.Title</h4>
    <hr />
    <div class="row">
        <div class="col-12">
           @* @(Html.Kendo().Grid<NotificationTemplateViewModel>
                ().Name("kgrdNotificationTemplate")
                .Columns(columns =>
                {                   

                    columns.Bound(p => p.Name);
                    columns.Bound(p => p.Code);
                    columns.Bound(p => p.NtsType).Title("Type");
                   
                })
                .ToolBar(toolbar =>
                {
                    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateNotificationTemplate();'><i class='fa fas fa-plus'></i>&nbsp;Create Notification Template</button>");
                })
              
                .Scrollable(x => x.Enabled(false))
                .Sortable(srt => srt.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                  .Operators(o => o.ForString(s => s.Clear()
                                  .Contains("Contains")
                                  .IsEqualTo("Is equal to")
                                  )))
                .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
                .AutoBind(true)
                .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(10)
                .Read(read => read.Action("ReadNotificationTemplateData", "NotificationTemplate", new { @area = "PortalAdmin" }))
                .Model(model => model.Id(p => p.Id))
                )
          )*@
        </div>
    </div>
</div>-->
