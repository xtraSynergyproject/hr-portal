@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using Kendo.Mvc.UI;

@model PayrollRunViewModel
@{
    Layout = null;// "~/Views/Shared/_LayoutPopup.cshtml";
    var i = 1;
}

<style>
    .ag-header-group-text {
        color:white!important;
    }
    .label-div {
        font-weight: bold;
    }

    .row {
        margin-left: 0px !important;
        margin-right: 0px !important;
    }
    /*.k-tabstrip {display:grid;
    }*/
</style>

@*<script>
    function FilterRunResultGrid() {
        var search = {
            payrollRunId: '@Model.Id',
            elementCategory: '@Model.ElementCategory',
            payrollId: '@Model.PayrollBatchId'

        };
        return search;
    }
</script>*@


<div id="appWrapper" class="row">

    <div class="row no-gutter hr-pad-top-10">

        <div class="form-group col-xs-12 col-sm-4">
            <div class="col-lg-12 label-div">
                Payroll Group Name
            </div>
            <div class="col-lg-12">
                @Html.DisplayFor(m => m.PayrollGroupName)
            </div>
        </div>
        <div class="form-group col-xs-12 col-sm-4">
            <div class="col-lg-12 label-div">
                Payroll Start Date
            </div>
            <div class="col-lg-9">
                @*@Html.DisplayFor(m => m.PayrollStartDate)*@
                @Convert.ToDateTime(Model.PayrollStartDate).ToString(ApplicationConstant.DateAndTime.DefaultJqueryDateFormat)
            </div>
        </div>
        <div class="form-group col-xs-12 col-sm-4">
            <div class="col-lg-12 label-div">
                Payroll State
            </div>
            <div class="col-lg-9">
                @Html.DisplayFor(m => m.PayrollStateEnd)
                @Html.HiddenFor(m => m.PayrollStateEnd)
            </div>
        </div>
        <div class="form-group col-xs-12 col-sm-4">
            <div class="col-lg-12 label-div">
                Name
            </div>
            <div class="col-lg-12">
                @Html.DisplayFor(m => m.Name)
                @Html.HiddenFor(m => m.Name)
            </div>
        </div>

        <div class="form-group col-xs-12 col-sm-4">
            <div class="col-lg-12 label-div">
                Payroll End Date
            </div>
            <div class="col-lg-9">
                @*@Html.DisplayFor(m => m.PayrollEndDate)*@
                @Convert.ToDateTime(Model.PayrollEndDate).ToString(ApplicationConstant.DateAndTime.DefaultJqueryDateFormat)
            </div>
        </div>
        <div class="form-group col-xs-12 col-sm-4">
            <div class="col-lg-12 label-div">
                Execution Status
            </div>
            <div class="col-lg-9">
                @if (Model.ExecutionStatus == PayrollExecutionStatusEnum.NotStarted)
                {
                    <span class="label label-default">@Model.ExecutionStatus</span>
                }
                else if (Model.ExecutionStatus == PayrollExecutionStatusEnum.Submitted)
                {
                    <span class="label label-info">@Model.ExecutionStatus</span>
                }
                else if (Model.ExecutionStatus == PayrollExecutionStatusEnum.InProgress)
                {
                    <span class="label label-warning">@Model.ExecutionStatus</span>
                }
                else if (Model.ExecutionStatus == PayrollExecutionStatusEnum.Completed)
                {
                    <span class="label label-success">@Model.ExecutionStatus</span>
                }
                else if (Model.ExecutionStatus == PayrollExecutionStatusEnum.Error)
                {
                    <span class="label label-danger">@Model.ExecutionStatus</span>
                }

                @Html.HiddenFor(m => m.ExecutionStatus)
            </div>
        </div>

    </div>
</div>
<script>
 
                var columnDefs = [
                    {
                        field: "PersonNo",
                        headerName: "Employee No.", width: 150
                    },
                    { field: "PersonName", width: 200},
                    { field: "DateOfJoin", width: 200},
                    { field: "OrganizationName", width: 200 },
                    { field: "JobName", width: 200 },
                    { field: "GrossSalary", width: 120},
                    {
                        headerName: 'Working Days',
                        children: [
                            { field: 'EmployeeWorkingDays', width: 120 },
                            { field: 'AnnualLeaveDays', width: 120 },
                            { field: 'SickLeaveDays', width: 120 },
                            { field: 'UnpaidLeaveDays', width: 120 },
                            { field: 'OtherLeaveDays', width: 120},
                            { field: 'OverTimeText', width: 120 },
                            { field: 'UnderTimeText', width: 120 },
                        ]
                    },
                    {
                        headerName: 'Monthly Salary & Benefits',
                        children: [
                            { field: 'NetPayableAmount',  width: 150},
            @foreach(var j in Model.SalaryElements)
            {
               @: { field: 'SalaryElement' + @i, headerName:"@j", width: 200 },
                i++;
            }

             ]
       },
    {
        headerName: 'Bank Information',
            children: [
                { field: 'BankAccountNo', width: 200},
                { field: 'BankIBanNo', width: 200 },
                { field: 'BankName', width: 200 },
                { field: 'BankCode', width: 200 },                
            ]
    },

    ];

    $(function () {

        getPayrollRunResult();
    });
    function getPayrollRunResult() {
        document.getElementById("kgrdPayrollPersonInList").innerHTML = "";
        gridConfig(
            "kgrdRunResultRollUp",
            "/Pay/PayrollRunResult/ReadPaySalaryElementData?payrollRunId=@Model.Id&elementCategory=@Model.ElementCategory&payrollId=@Model.PayrollBatchId",
           @*"@Url.Action("ReadPaySalaryElementData", "PayrollRunResult", new {payrollRunId= Model.Id,elementCategory= Model.ElementCategory,payrollId= Model.PayrollBatchId})",*@
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>
<div class="row-12">
    <div id="kgrdRunResultRollUp" style="width: 100%;height:550px" class="ag-theme-alpine">

    </div>
    @*@(Html.Kendo().Grid<PayrollSalaryElementViewModel>
                                    ().Name("kgrdRunResultRollUp")
                                    .Columns(col =>
                                    {
                                        col.Bound(c => c.PersonNo).Title("Employee No").Width(150);
                                        col.Bound(c => c.PersonName).Width(250);
                                        col.Bound(c => c.DateOfJoin).Width(200);
                                        col.Bound(c => c.OrganizationName).Width(200);
                                        col.Bound(c => c.JobName).Width(200);
                                        col.Bound(c => c.GrossSalary).Width(120);

                                        col.Group(g => g.Title("Working Days").HeaderHtmlAttributes(new { @style = "text-align:center;" })
                                          .Columns(wd =>
                                          {
                                              wd.Bound(c => c.EmployeeWorkingDays).Width(120);
                                              wd.Bound(c => c.AnnualLeaveDays).Width(120);
                                              wd.Bound(c => c.SickLeaveDays).Width(120);
                                              wd.Bound(c => c.UnpaidLeaveDays).Width(120);
                                              wd.Bound(c => c.OtherLeaveDays).Width(120);
                                              wd.Bound(c => c.OverTimeText).Width(120);
                                              wd.Bound(c => c.UnderTimeText).Width(120);
                                          })
                                          );
                                        col.Group(g => g.Title("Monthly Salary & Benefits").HeaderHtmlAttributes(new { @style = "text-align:center;" })
                                          .Columns(se =>
                                          {
                                              var i = 1;
                                              foreach (var j in Model.SalaryElements)
                                              {
                                                  se.Bound("SalaryElement" + i).Title(j).Width(200);
                                                  i++;
                                              }
                                              //if (Model.LoggedInUserLegalEntityCode == "CAYAN_KSA")
                                              //{
                                              //    se.Bound(c => c.NetAmount).Width(120);
                                              //}
                                              se.Bound(c => c.NetPayableAmount).Width(150);
                                          })
                                        );
                                        col.Group(g => g.Title("Bank Information").HeaderHtmlAttributes(new { @style = "text-align:center;" })
                                              .Columns(wd =>
                                              {
                                                  wd.Bound(c => c.BankAccountNo).Width(200);
                                                  wd.Bound(c => c.BankIBanNo).Width(200);
                                                  wd.Bound(c => c.BankName).Width(250);
                                                  // wd.Bound(c => c.BankCode).Width(200);
                                              })
                                         );
                                    })
                                    //.ToolBar(toolbar =>
                                    //{
                                    //    toolbar.Custom().Text("Generate Excel Report").Name("btnAdd").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnExportToExcel();" });
                                    //})
                                    //.Events(e => e.DataBound("OnPayrollPersonDataBound"))
                                    .Scrollable(x => x.Enabled(true).Height(350))
                                    .Sortable(srt => srt.Enabled(true))
                                    .Resizable(resize => resize.Columns(true))
                                    .Selectable(select => select.Enabled(false))
                                    .Excel(e => e.FileName("PayrollRunResult.xlsx").AllPages(true))
                                    .Filterable(f => f.Extra(false)
                                    .Operators(o => o.ForString(s => s.Clear()
                                    .Contains("Contains")
                                    .IsEqualTo("Is equal to")
                                    )))
                                    .Pageable(pageable => pageable
                                    .Refresh(true)
                                    .PageSizes(true)
                                    .ButtonCount(10))
                                    .AutoBind(true)
                                    .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .PageSize(20)
                                    .Read(read => read.Action("ReadPaySalaryElementData", "PayrollRunResult").Data("FilterRunResultGrid"))
                                    .Model(model => model.Id(p => p.PersonId)))
                                    )*@
</div>

        @Html.HiddenFor(x => x.DataAction)
        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.PayrollBatchId)
        @Html.HiddenFor(x => x.PersonsNotInList)
        @Html.HiddenFor(x => x.PersonsInList)
        @Html.HiddenFor(x => x.PayrollStateStart)
        @Html.HiddenFor(x => x.PayrollStateEnd)
        @Html.HiddenFor(x => x.ExecutionStartDate)
        @Html.HiddenFor(x => x.ExecutionEndDate)
        @Html.HiddenFor(x => x.PayRollNo)
        @Html.HiddenFor(x => x.PayrollRunDate)
        @Html.HiddenFor(x => x.PayrollGroupId)
        @Html.HiddenFor(x => x.YearMonth)
        @Html.HiddenFor(x => x.TotalEarning)
        @Html.HiddenFor(x => x.TotalDeduction)
        @Html.HiddenFor(x => x.NetAmount)
        @Html.HiddenFor(x => x.TotalProcessed)
        @Html.HiddenFor(x => x.TotalSucceeded)
        @Html.HiddenFor(x => x.NoteId)
   

    


@*<script id="customer-item-template" type="text/x-kendo-template">
    <div style="background-color:aliceblue;padding:5px;">
        <h5 class="k-state-default" style="color:darkorange;">#:Name#</h5>
        <h6 class="k-state-default">#:OrganizationName#</h6>
        <h6 class="k-state-default">#:JobName#</h6>
    </div>
</script>*@

<script type="text/javascript">
    $(document).ready(function () {

    }); 
    
</script>
