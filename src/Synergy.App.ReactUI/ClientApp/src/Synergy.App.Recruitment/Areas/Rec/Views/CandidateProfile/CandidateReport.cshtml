
@using CMS.UI.ViewModel
@using CMS.Common

@{
    ViewData["Title"] = "Manage Job Advertisement";
    Layout = null;
    // Layout = "/Views/Shared/_PopupLayout.cshtml";
    //  Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
}

@model JobAdvertisementViewModel


<script type="text/javascript">
    $('.toggle-menu').bind("click", function (e) {

        var isexist = document.getElementsByClassName("sidebar-closed");
        var grid = document.getElementsByClassName("k-grid-content");
        var g = grid[0].style.width;
        g = g.split('px');
        if (isexist.length > 0) {
            var w = parseInt(g[0]) - 257;
            grid[0].style.width = w + "px";

        }
        else {
            var w = parseInt(g[0]) + 257;
            grid[0].style.width = w + "px";

        }


    });
    function OnEditJobAdvt(e) {
        //e.preventDefault();
        //  
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        var url = "/Recruitment/JobAdvertisement/Index?summaryId=" + dataItem.ManpowerRecruitmentSummaryId + "&jobId=" + dataItem.JobId + "&id=" + dataItem.Id;
        //  window.location.href = url;
        LoadPartailView(url, $('#cms-content'));

    }
    function IframePostbackScript() {
        $("#kgrdManpowerRequirementSummary").data("kendoGrid").dataSource.read();
    }


</script>


<script>

    function ExportToPdf(e)
    {
        console.log(e);
        e.workbook.sheets[0].rows[0].cells[2].value = 'Recuritment Process';
        e.workbook.sheets[0].rows[0].cells[1].value = 'Job Advertisment';
        //var shownColumns = e.sender.columns.filter(function (obj) {
        //
        //    return obj.hidden != true;
        //});

    }
    function cellClickI(jobid) {

        var url = "/Recruitment/JobAdvertisement/ViewJobAdvertisementI?jobId=" + jobid;
      //  window.location.href = url;
        LoadPartailView(url, $('#cms-content'));
      //  alert("open")
    }

    function cellClickA(jobid, orgid) {

        var url = "/Recruitment/JobAdvertisement/ViewJobAdvertisementA?jobId=" + jobid ;
      //   window.location.href = url;
         LoadPartailView(url, $('#cms-content'));
      //  alert("open")
    }
    var expandedRow;
    function detailExpand(e) {
        // Only one open at a time

        if (expandedRow != null && expandedRow[0] != e.masterRow[0]) {
            var grid = $('#kgrdManpowerRequirementSummary').data('kendoGrid');
            grid.collapseRow(expandedRow);
        }
        expandedRow = e.masterRow;
    }

     function OnEdit(id) {
        // e.preventDefault();
         //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
         //iframeOpenUrl = '@Url.Action("Edit", "JobAdvertisement", new { @area = "Recruitment" })?id=' + dataItem.Id;
         @*iframeOpenUrl = '@Url.Action("Edit", "JobAdvertisement", new { @area = "Recruitment" })?id=' +id;
         OpenIframePopup(1000, 1200, 'Edit');*@
         var win = GetMainWindow();
         win.iframeOpenUrl = '@Url.Action("Edit", "JobAdvertisement", new { @area = "Recruitment" })?id=' + id;
         win.OpenWindow({ Title: 'Edit', Width: 1000, Height: 1200 });
        return false;

    }
    function OnCreateComment(e) {
        @*e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        iframeOpenUrl = '@Url.Action("Create", "ManpowerRequirementSummary", new { @area = "Recruitment"})?summaryId=' + dataItem.Id +'&versionNo='+dataItem.VersionNo;
        OpenIframePopup(400,500,'Add Comment');*@

    }
     function OnViewComment(id,userrolecode) {
         @*iframeOpenUrl = '@Url.Action("Comment", "ManpowerRequirementSummary", new { @area = "Recruitment" })?summaryId=' + id +'&userRoleCode='+userrolecode;
         OpenIframePopup(1000, 1200,'View Comment');*@


    }

    function OnDataBound(arg) {
        $("#kgrdManpowerRequirementSummary tbody tr").each(function () {
            var currentDataItem = $("#kgrdManpowerRequirementSummary").data("kendoGrid").dataItem($(this));
            var addjob = $(this).find(".k-grid-Addjob");
            var viewjob = $(this).find(".k-grid-View");
            //if (currentDataItem.Active != 0) {
            //    addjob.remove();
            //    //addjob.prop('disabled', true);
            //    //addjob.css('background', 'grey');
            //}
            //var edit = $(this).find(".k-grid-Edit");
            //if (currentDataItem.Active == 0) {
            //    edit.remove();

            //}
            //if (currentDataItem.Active == 0) {
            //    viewjob.remove();
            //}
        });
    }
  function OnView(appId) {
        @*iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area="Recruitment"})?candidateProfileId=' + Id + '&applicationId=' + appId;
        OpenIframePopup(1000, 1200, 'Candidate Profile Details');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area = "Recruitment" })?applicationId=' + appId;
        win.OpenWindow({ Title: 'Candidate Profile Details', Width: 1000, Height: 1200 });
        return false;
    }
</script>

<script type="x/kendo-template" id="page-template">
    <div class="page-template">
     @* <div class="header">
        <div style="float:right">Page #: pageNum # of #: totalPages #</div>
       Job Advertisement
      </div>
      <div class="watermark">KENDO UI</div>*@
      <div class="footer">
        Page #: pageNum # of #: totalPages #
      </div>
    </div>
</script>


<style>
    .k-pdf-export .k-filterable .k-grid-filter {
        display: none;
    }
    .k-pdf-export .k-grid-toolbar,
    .k-pdf-export .k-pager-wrap {
        display: none;
    }
    /* Page Template for the exported PDF */
    .page-template {
        font-family: "DejaVu Sans", "Arial", sans-serif;
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
    }

        .page-template .header {
            position: absolute;
            top: 30px;
            left: 30px;
            right: 30px;
            border-bottom: 1px solid #888;
            color: #888;
        }

        .page-template .footer {
            position: absolute;
            bottom: 30px;
            left: 30px;
            right: 30px;
            border-top: 1px solid #888;
            text-align: center;
            color: #888;
        }

        .page-template .watermark {
            font-weight: bold;
            font-size: 400%;
            text-align: center;
            margin-top: 30%;
            color: #aaaaaa;
            opacity: 0.1;
            transform: rotate(-35deg) scale(1.7, 1.5);
        }

    .k-grid td, .k-grid th {
        font-size: 14px !important;
    }

    .tb-bg {
        /*background-color:cadetblue;*/
        background-color: #17a2b8 !important;
        color: #fff;
        font-weight: 500 !important;
        text-align: center !important;
    }

    .tb-bg1 {
        /*background-color: cornflowerblue;*/
        background-color: #ffc107 !important;
        color: #000;
        font-weight: 500 !important;
        text-align: center !important;
    }

    .tb-bg2 {
        /* background-color: darkcyan;*/
        background-color: #17a2b8 !important;
        color: #fff;
        font-weight: 500 !important;
        text-align: center !important;
    }

    .k-footer-template {
        background-color: #DAEDFF
    }

    .k-grid-header .k-header, .k-grid-header thead, .k-grid-header .k-hierarchy-cell {
        background-color: #527ab8;
        color: #fff;
    }

        .k-grid-header thead a {
            color: #fff !important;
        }
</style>
<div class="row" style="margin:15px;">


    @*<button type="button" class="btn btn-primary" onclick="OnCreateComment();">Add Comment</button>
        <button type="button" class="btn btn-primary" onclick="OnViewComment();">View Comment</button>*@
    <div class="col bot-margin" style="margin-top:20px">
        <div class="fa-2x pad-b-15">Candidate Report</div>
        @(Html.Kendo().Grid<ApplicationViewModel>()
            .Name("kgrdManpowerRequirementSummary").Excel(e => e.AllPages(true))
            .Pdf(pdf => pdf
            .AllPages()
            .AvoidLinks()
            .PaperSize("A4")
            .Scale(0.6)
            .TemplateId("page-template")
            .Margin("2cm", "1cm", "1cm", "1cm")
            .Landscape()
            .RepeatHeaders())
            .ToolBar(tools =>
            {
                tools.Excel();
            })
              //.Events(x=>x.PdfExport("ExportToPdf"))
              .Columns(col =>
              {
                  col.Bound(c => c.SourceFrom).Title("Source").HeaderHtmlAttributes(new { title = "Source" }).Width(100).Width(150).Locked(true).Lockable(false);
                  col.Bound(p => p.AgencyName).HeaderHtmlAttributes(new { title = "Agency Name" }).Title("Agency Name").Width(150).Locked(true).Lockable(false);
                  col.Bound(p => p.AppliedDate).HeaderHtmlAttributes(new { title = "Application Date" }).Width(150).Format("{0:dd/MM/yyyy}").Locked(true).Lockable(false);
                  col.Bound(c => c.JobName).Title("Job Name").HeaderHtmlAttributes(new { title = "Job Name" }).Width(100).Width(150).Locked(true).Lockable(false);
                  col.Bound(c => c.BatchName).Title("Batch Name").HeaderHtmlAttributes(new { title = "Batch Name" }).Width(100).Width(150);
                  col.Bound(c => c.OrganizationName).Title("Organization Name").HeaderHtmlAttributes(new { title = "Organization Name" }).Width(100).Width(150);
                  col.Bound(c => c.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(150).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='OnView(\"#:ApplicationId#\")'>#:ApplicationNo#</a>").Locked(true).Lockable(false);
                  col.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Status").Width(150);
                  col.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State Name" }).Title("Application State").Width(150);
                  col.Bound(p=>p.ShortlistByHMComment).HeaderHtmlAttributes(new { title = "HM Comments" }).Title("HM Comments").Width(200);
                  col.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150);
                  col.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                  col.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                  col.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);


                  col.Bound(p => p.TotalWorkExperience).HeaderHtmlAttributes(new { title = "Total Work Experience" }).Width(150);
                  col.Bound(p => p.ContactPhoneHome).HeaderHtmlAttributes(new { title = "Contact Phone Home" }).Title("Mobile").Width(150);
                  col.Bound(p => p.Score).HeaderHtmlAttributes(new { title = "Score" }).Width(150);
                  col.Bound(p => p.Gender).HeaderHtmlAttributes(new { title = "Gender" }).Width(150);
                  col.Bound(p => p.BirthDate).HeaderHtmlAttributes(new { title = "Birth Date" }).Width(150).Format("{0:dd/MM/yyyy}");
                  col.Bound(p => p.Age).HeaderHtmlAttributes(new { title = "Age" }).Width(150);
                  col.Bound(p => p.BirthPlace).HeaderHtmlAttributes(new { title = "Birth Place" }).Width(150);
                  col.Bound(p => p.Nationality).HeaderHtmlAttributes(new { title = "Nationality" }).Width(150);
                  col.Bound(p => p.BloodGroup).HeaderHtmlAttributes(new { title = "Blood Group" }).Width(150);
                  col.Bound(p => p.MaritalStatusName).HeaderHtmlAttributes(new { title = "Marital Status Name" }).Title("Marital Status").Width(150);
                  col.Bound(p => p.PassportNumber).HeaderHtmlAttributes(new { title = "Passport Number" }).Width(150);
                  col.Bound(p => p.PassportIssueCountry).HeaderHtmlAttributes(new { title = "Passport Issue Country" }).Width(150);
                  col.Bound(p => p.PassportExpiryDate).HeaderHtmlAttributes(new { title = "Passport Expiry Date" }).Width(150).Format("{0:dd/MM/yyyy}");
                  col.Bound(p => p.QatarId).HeaderHtmlAttributes(new { title = "Qatar Id" }).Width(150);
                  col.Bound(p => p.CurrentAddressHouse).HeaderHtmlAttributes(new { title = "Current Address House" }).Width(150);
                  col.Bound(p => p.CurrentAddressStreet).HeaderHtmlAttributes(new { title = "Current Address Street" }).Width(150);
                  col.Bound(p => p.CurrentAddressCity).HeaderHtmlAttributes(new { title = "Current Address City" }).Width(150);
                  col.Bound(p => p.CurrentAddressState).HeaderHtmlAttributes(new { title = "Current Address State" }).Width(150);
                  col.Bound(p => p.CurrentAddressCountryName).HeaderHtmlAttributes(new { title = "Current Address Country Name" }).Width(150);
                  col.Bound(p => p.PermanentAddressHouse).HeaderHtmlAttributes(new { title = "Permanent Address House" }).Width(150);
                  col.Bound(p => p.PermanentAddressStreet).HeaderHtmlAttributes(new { title = "Permanent Address Street" }).Width(150);
                  col.Bound(p => p.PermanentAddressCity).HeaderHtmlAttributes(new { title = "Permanent Address City" }).Width(150);
                  col.Bound(p => p.PermanentAddressState).HeaderHtmlAttributes(new { title = "Permanent Address State" }).Width(150);
                  col.Bound(p => p.PermanentAddressCountryName).HeaderHtmlAttributes(new { title = "Permanent Address Country Name" }).Width(150);

                  col.Bound(p => p.ContactPhoneLocal).HeaderHtmlAttributes(new { title = "Contact Phone Local" }).Width(150);
                  //col.Bound(p => p.CurrentEmployer).Width(150);
                  //col.Bound(p => p.CurrentEmploymentLocation).Width(250);
                  //col.Bound(p => p.CurrentEmploymentPosition).Width(250);
                  //col.Bound(p => p.CurrentEmploymentStartDate).Width(250).Format("{0:MM/dd/yyyy}");
                  //col.Bound(p => p.CurrentEmploymentEndDate).Width(250);
                  //col.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                  col.Bound(p => p.SalaryCurrencyName).HeaderHtmlAttributes(new { title = "Salary Currency Name" }).Title("Salary Currency").Width(150);
                  //col.Bound(p => p.IndianSalary).Width(150);
                  // col.Bound(p => p.OverseasSalary).Width(150);
                  col.Bound(p => p.NetSalary).HeaderHtmlAttributes(new { title = "Net Salary After Income Tax" }).Title("Net Salary After Income Tax").Width(150);
                  col.Bound(p => p.OtherAllowances).HeaderHtmlAttributes(new { title = "Other Allowances" }).Width(150);



              })

            .Resizable(resizable => resizable.Columns(true))
            .Scrollable(scrollable => scrollable.Enabled(true))
            .Sortable(srt => srt.Enabled(true))
            // .ClientDetailTemplateId("template")
            .Groupable(g => g.ShowFooter(false))
            .Selectable(select => select.Enabled(false))
            .Filterable(f => f.Extra(false)
                .Operators(o => o.ForString(s => s.Clear()
                .Contains("Contains")
            //.IsEqualTo("Is equal to")
            )))
            .AutoBind(true)
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
            .DataSource(
            dataSource => dataSource
            .Ajax()

            .PageSize(10)
            .Read(read => read.Action("ReadCandidateReportData", "CandidateProfile"))
            .Model(model => model.Id(p => p.Id))
            )
            .HtmlAttributes(new { @style = "font-size: 12px;height:100%;" })
)
    </div>

</div>
