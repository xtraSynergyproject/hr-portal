@using CMS.Data.Model
@using CMS.UI.ViewModel
@using CMS.Common;
@using Kendo.Mvc.UI
@{
    ViewBag.Title = "Requirement Dashboard";
    //Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
    Layout = null;
}
@inject CMS.Common.IUserContext _userContext
@model ApplicationViewModel

@{
    var usercontext = _userContext;
}
<style>
    .dropdown-menu {
        line-height: 0.5em;
        /* background-color: rgb(243 241 233);*/
    }

    .btn-group, .btn-group-vertical {
        position: inherit !important;
    }

    .color-bg {
        background-color: #8cb7f8;
        border: 1px solid #3b65f8;
    }

    .card-columns {
        border: 1px solid #d7d7d7;
        border-radius: 6px;
        padding: 2px;
        height: 160px;
        width: 100%;
    }

    .card-box {
        border: 1px solid #ff0000;
        border-radius: 6px;
        overflow: hidden;
        padding: 0;
        margin: 0;
        width: 100%;
    }

    .col-border {
        margin: 0 4px 4px;
        padding: 4px;
        border: 1px solid #bababa;
        border-radius: 6px;
    }

    .numbers {
        padding: 4px;
        font-size: 20px;
        font-weight: 600;
    }

    .numtext {
        color: white;
    }

    .ico-applications {
        padding: 0 10px 0 0;
        color: #fff;
    }

    .col-highlight {
        background-color: #1D6EF4;
    }

    #StateCount1 {
        color: black;
    }

    .k-grid tbody tr td {
        vertical-align: top;
    }

    .Qlink-title {
        border: 1px solid #d7d3d3;
        width: 100%;
        font-weight: 600;
        background-color: #f0f0f0;
        padding: 4px 0 4px 6px;
        border-radius: 6px;
        text-align: left;
        font-size: 18px;
    }

    table tr th {
        color: #fdfdfd;
    }
    .k-grid thead {
        background-color: #1c4893;
    }
    .sidebar-closed .k-grid-content .k-auto-scrollable {
        width: 1000px;
    }
</style>
<script>

    $('.toggle-menu').bind("click", function (e) {

        var isexist = document.getElementsByClassName("sidebar-closed");
        var grid = document.getElementsByClassName("k-grid-content");
        var g = grid[0].style.width;
        g = g.split('px');
        if (isexist.length > 0) {
            var w = parseInt(g[0]) - 257;
            grid[0].style.width = w + "px";

        }
        else {
            var w = parseInt(g[0]) + 257;
            grid[0].style.width = w + "px";

        }
    });

    $(document).ready(function () {
        //
        var u = '@usercontext.UserRoleCodes';
        var userrole = u.split(",");
        for (var i = 0; i < userrole.length;i++) {
            if (userrole[i] == "HR" && '@Model.ApplicationState' =="ShortListByHr") {
                //$("#UserRoleHR").val(userrole[i]);
                $("#btnHR").show();
            }
            if (userrole[i] == "HM" && '@Model.ApplicationState' =="ShortListByHm") {
                $("#btnHM").show();
            }
        }
        //alert(userrole);
            var orgId = '@Model.OrganizationId';
        var jobAdvId ='@Model.JobId';
    //
      //  alert(orgId + " " + jobAdvId);
        var cgrid1 = $("#kgrdCandInterview").data("kendoGrid");

        //var ccount = cgrid1.dataSource.data().length;
        var ccount = cgrid1.dataSource.total();
        $("#StateCount1").val(ccount);

        $.ajax({
            url: "/Recruitment/RecruitmentDashboard/GetRecruitmentDashboardByOrgJob?orgId=" + orgId + "&jobAdvId=" + jobAdvId + "&permission=@ViewBag.Permissions",
                dataType: "json",
                type: "GET",
                contentType: 'application/json; charset=utf-8', //define a contentType of your request
                cache: false,
                success: function (data) {
                    if (data != null) {

                        $('#RequiredbyHC').html(data.Requirement);
                        $('#Available').html(data.Available);
                        $('#Subcontract').html(data.Planning);
                        $('#Transfer').html(data.Transfer);
                        $('#TobeRecruited').html(data.Balance);


                    }
                },
                error: function (xhr) {
                    alert('error');
                }
            });
        });

    function OnDataBound() {

        var cgrid1 = $("#kgrdCandInterview").data("kendoGrid");
        //var ccount = cgrid1.dataSource.data();

      //  alert(ccount.length);
        //$("#StateCount1").html(ccount.length);
        var ccount = cgrid1.dataSource.total();
        $("#StateCount1").html(ccount);

    }
    function UpdateStatus(type, status, appId, candId,state)
    {


            $.ajax({
                type: "GET",
                url: '@Url.Action("UpdateApplicationStatus", "RecruitmentDashboard", new { @area="Recruitment"})?type=' + type + "&status=" + status + "&applicationId=" + appId + "&CandidateProfileId=" + candId + "&state=" + state,
                //data: {
                //    'type': type,
                //    'status': status,
                //    'applicationId': appId,
                //    'CandidateProfileId': candId,
                //    'state': 'ShortListByHr',
                //},
                success: function (data) {

                    $("#kgrdCandInterview").data("kendoGrid").dataSource.read();
                    var cgrid1 = $("#kgrdCandInterview").data("kendoGrid");
                    //var ccount = cgrid1.dataSource.data();
                   // alert(ccount.length);
                    //$("#StateCount1").html(ccount.length);
                    var ccount = cgrid1.dataSource.total();
                    $("#StateCount1").html(ccount);

                },
                //dataType: "json",
            });

    }

    function onShortlistByHR(){
        var url = "/recruitment/CandidateShortlist/CandidateShortlistByHR?jobAdvId=@Model.JobId&orgId=@Model.OrganizationId";
        LoadPartailView(url, $('#cms-content'));
    }
    function onShortlistByHM() {
        var url = "/recruitment/CandidateShortlist/index?jobAdvId=@Model.JobId&orgId=@Model.OrganizationId";
        LoadPartailView(url, $('#cms-content'));
    }
    function back() {
        var url = "/recruitment/recruitmentdashboard/index?jobAdvId=@Model.JobId&orgId=@Model.OrganizationId&permissions=@ViewBag.Permissions";
        LoadPartailView(url, $('#cms-content'));

    }
      function onAddComment(appId, appStateId)
    {
        @*iframeOpenUrl = '@Url.Action("AddComment", "CandidateShortlist", new { @area="Recruitment"})?appId=' + appId + "&appStateId=" + appStateId;
          OpenIframePopup(1000, 1200, 'Manage Comments');*@
           var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("AddComment", "CandidateShortlist", new { @area = "Recruitment" })?appId=' + appId + "&appStateId=" + appStateId;
          win.OpenWindow({ Title: 'Manage Comments', Width: 1000, Height: 1000 });
        return false;

    }
    function onReturnCandidatePool(appId, appStateCode, tempCode)
    {
        @*iframeOpenUrl = '@Url.Action("ReturnCandidatePool", "CandidateShortlist", new { @area="Recruitment"})?appId=' + appId + "&appStateCode=" + appStateCode + "&tempCode="+tempCode;
        OpenIframePopup(1000, 1200, 'Return to Candidate Pool');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ReturnCandidatePool", "CandidateShortlist", new { @area = "Recruitment" })?appId=' + appId + "&appStateCode=" + appStateCode + "&tempCode=" + tempCode;
        win.OpenWindow({ Title: 'Return to Candidate Pool', Width: 1000, Height: 1000 });
        return false;
    }
    function onAddI(appId,state)
    {
        @*iframeOpenUrl = '@Url.Action("RecruitmentElement", "RecruitmentDashboard", new { @area="Recruitment"})?appId=' + appId + "&state=" + state ;
        OpenIframePopup(800, 1200, 'Prepare Intent Offer');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("RecruitmentElement", "RecruitmentDashboard", new { @area = "Recruitment" })?appId=' + appId + "&state=" + state;
        win.OpenWindow({ Title: 'Prepare Intent Offer', Width: 800, Height: 1000 });
        return false;
      //  window.location.href = "/recruitment/recruitmentdashboard/RecruitmentElement?appid=" + appId;
    }

       function onAddF(appId,state)
    {
        @*iframeOpenUrl = '@Url.Action("RecruitmentElement", "RecruitmentDashboard", new { @area="Recruitment"})?appId=' + appId + "&state=" + state ;
           OpenIframePopup(800, 1200, 'Prepare Final Offer');*@
            var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("RecruitmentElement", "RecruitmentDashboard", new { @area = "Recruitment" })?appId=' + appId + "&state=" + state ;
           win.OpenWindow({ Title: 'Prepare Final Offer', Width: 800, Height: 1000 });
        return false;
      //  window.location.href = "/recruitment/recruitmentdashboard/RecruitmentElement?appid=" + appId;
    }

    function onAddSourcing(appId)
    {
        @*iframeOpenUrl = '@Url.Action("JoiningSource", "RecruitmentDashboard", new { @area="Recruitment"})?appId=' + appId ;
        OpenIframePopup(1000, 1200, 'Joining Report Data');*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("JoiningSource", "RecruitmentDashboard", new { @area = "Recruitment" })?appId=' + appId ;
        win.OpenWindow({ Title: 'Joining Report Data', Width: 1000, Height: 1000 });
        return false;
      //  window.location.href = "/recruitment/recruitmentdashboard/RecruitmentElement?appid=" + appId;
    }

    function onAddCompetenceMatrix(appId)
    {
        @*iframeOpenUrl = '@Url.Action("CompetenceMatrix", "RecruitmentDashboard", new { @area="Recruitment"})?appId=' + appId ;
        OpenIframePopup(900, 1000, 'Competence Matrix');*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("CompetenceMatrix", "RecruitmentDashboard", new { @area = "Recruitment" })?appId=' + appId ;
        win.OpenWindow({ Title: 'Competence Matrix', Width: 900, Height: 1000 });
        return false;
      //  window.location.href = "/recruitment/recruitmentdashboard/RecruitmentElement?appid=" + appId;
    }

    function onViewWorker(appId)
    {
        @*iframeOpenUrl = '@Url.Action("JoiningReport", "RecruitmentProcess", new { @area="Recruitment"})?appId=' + appId ;
        OpenIframePopup(1000, 1200, 'Joining Report');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("JoiningReport", "RecruitmentProcess", new { @area = "Recruitment" })?appId=' + appId;
        win.OpenWindow({ Title: 'Joining Report', Width: 1000, Height: 1000 });
        return false;
      //  window.location.href = "/recruitment/recruitmentdashboard/RecruitmentElement?appid=" + appId;
    }
    function onViewPersonal(appId)
    {
        @*iframeOpenUrl = '@Url.Action("PersonalData", "RecruitmentProcess", new { @area="Recruitment"})?appId=' + appId ;
        OpenIframePopup(1000, 1200, 'Personal Data');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("PersonalData", "RecruitmentProcess", new { @area = "Recruitment" })?appId=' + appId;
        win.OpenWindow({ Title: 'Personal Data', Width: 1000, Height: 1000 });
        return false;
      //  window.location.href = "/recruitment/recruitmentdashboard/RecruitmentElement?appid=" + appId;
    }

     function onViewDeclaration(appId)
    {
        @*iframeOpenUrl = '@Url.Action("Declaration", "RecruitmentProcess", new { @area="Recruitment"})?appId=' + appId ;
         OpenIframePopup(1000, 1200, 'Nomination for Benefits');*@
          var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Declaration", "RecruitmentProcess", new { @area = "Recruitment" })?appId=' + appId ;
         win.OpenWindow({ Title: 'Nomination for Benefits', Width: 1000, Height: 1200 });
        return false;
      //  window.location.href = "/recruitment/recruitmentdashboard/RecruitmentElement?appid=" + appId;
    }


    function onView(appId) {
        @*iframeOpenUrl = '@Url.Action("IntentToOffer", "RecruitmentDashboard", new { @area = "Recruitment" })?appid=' + appId;
        OpenIframePopup(1000, 1200, 'Intent To Offer');*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("IntentToOffer", "RecruitmentDashboard", new { @area = "Recruitment" })?appId=' + appId;
        win.OpenWindow({ Title: 'Intent To Offer', Width: 1000, Height: 1000 });
        return false;
    }

    function OnApplication(Id, appId) {
        @*iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area="Recruitment"})?candidateProfileId=' + Id + '&applicationId=' + appId;
        OpenIframePopup(1000, 1200, 'Candidate Profile Details');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area = "Recruitment" })?candidateProfileId=' + Id + '&applicationId=' + appId;
        win.OpenWindow({ Title: 'Candidate Profile Details', Width: 1000, Height: 1000 });
        return false;
    }

    function OnFinalOffer(Id) {
        @*iframeOpenUrl = '@Url.Action("FinalOffer", "RecruitmentProcess", new { @area="Recruitment"})?applicationId=' + Id;
        OpenIframePopup(1000, 1200, 'Final Offer');*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("FinalOffer", "RecruitmentProcess", new { @area = "Recruitment" })?applicationId=' + Id;
        win.OpenWindow({ Title: 'Final Offer', Width: 1000, Height: 800 });
        return false;
    }
    function OnWorkerOffer(Id) {
        @*iframeOpenUrl = '@Url.Action("WorkerServiceAgreement", "RecruitmentProcess", new { @area="Recruitment"})?applicationId=' + Id;
        OpenIframePopup(1000, 1200, 'Contract Offer For Worker');*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("WorkerServiceAgreement", "RecruitmentProcess", new { @area = "Recruitment" })?applicationId=' + Id;
        win.OpenWindow({ Title: 'Contract Offer For Worker', Width: 1000, Height: 1000 });
        return false;
    }
    function OnDriverOffer(Id) {
        @*iframeOpenUrl = '@Url.Action("ServiceAgreement", "RecruitmentProcess", new { @area="Recruitment"})?applicationId=' + Id;
        OpenIframePopup(1000, 1200, 'Contract Offer For Driver');*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("ServiceAgreement", "RecruitmentProcess", new { @area = "Recruitment" })?applicationId=' + Id;
        win.OpenWindow({ Title: 'Contract Offer For Driver', Width: 1000, Height: 1000 });
        return false;
    }

    function OnViewAppStateTrack(Id) {
        @*iframeOpenUrl = '@Url.Action("ApplicationStateTrack", "RecruitmentDashboard", new { @area="Recruitment"})?applicationId=' + Id;
        OpenIframePopup(1200, 1000, 'Application Status Track');*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("ApplicationStateTrack", "RecruitmentDashboard", new { @area = "Recruitment" })?applicationId=' + Id;
        win.OpenWindow({ Title: 'Application Status Track', Width: 1200, Height: 1000 });
        return false;
    }
    function onViewComment(appId, appStateId)
   {
       @*window.parent.iframeOpenUrl = '@Url.Action("AddComment", "CandidateShortlist", new { @area="Recruitment"})?appId=' + appId + "&appStateId=" + appStateId + "&type=" + "view";
        window.parent.OpenIframePopup1(1000, 1200, 'Manage Comments');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("AddComment", "CandidateShortlist", new { @area = "Recruitment" })?appId=' + appId + "&appStateId=" + appStateId + "&type=" + "view";
          win.OpenWindow({ Title: 'Manage Comments', Width: 1000, Height: 1000 });
        return false;
    }
    function onConfAgreement(appId)
    {
       @*window.parent.iframeOpenUrl = '@Url.Action("ConfidentialityAgreement", "RecruitmentProcess", new { @area="Recruitment"})?appId=' + appId;
        window.parent.OpenIframePopup(1000, 1200, 'Confidentiality Agreement');*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("ConfidentialityAgreement", "RecruitmentProcess", new { @area = "Recruitment" })?appId=' + appId;
        win.OpenWindow({ Title: 'Confidentiality Agreement', Width: 1000, Height: 1000 });
        return false;
    }

    function onViewCompetenceMatrix(appId) {
        @*window.parent.iframeOpenUrl = '@Url.Action("CompetenceMatrix", "RecruitmentProcess", new { @area="Recruitment"})?appId=' + appId;
        window.parent.OpenIframePopup(1000, 1200, 'Competence Matrix Report');*@
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CompetenceMatrix", "RecruitmentProcess", new { @area = "Recruitment" })?appId=' + appId;
        win.OpenWindow({ Title: 'Competence Matrix Report', Width: 1000, Height: 1000 });
        return false;
    }
    function onRaiseTask(appId,code,title){
        @*iframeOpenUrl = '@Url.Action("Index", "Task", new { @area= "Cms" })?templateCode=' + code + '&referenceId=' + appId + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application'+'&isPopUp=true';
        OpenIframePopup(1200, 1200, title);*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Index", "Task", new { @area = "Cms" })?templateCode=' + code + '&referenceId=' + appId + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application'+'&isPopUp=true';
        win.OpenWindow({ Title: title, Width: 1200, Height: 1000 });
        return false;
        @*var flag = confirm('Do you want to Raise the Task ?');
        if (flag) {
                    $.ajax({
                        url: '@Url.Action("AssignTaskForAppointment", "Task", new { @area= "Cms" })?applicantId=' + appId,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                       kendo.alert("Task Raised Successfully.");
                    }
                },
                error: function (ert) {

                }
            });
        }*@

    }
    function onViewTask(taskId, code,title) {
        //alert(taskId);
        @*iframeOpenUrl = '@Url.Action("Index", "Task", new { @area= "Cms" })?taskId=' + taskId + '&isPopUp=true' ;
        OpenIframePopup(1200, 1200, "View Task Details");*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Index", "Task", new { @area = "Cms" })?taskId=' + taskId + '&isPopUp=true' ;
        win.OpenWindow({ Title: 'View Task Details', Width: 1200, Height: 1000 });
        return false;
    }
    function onRaiseTaskMedical(appId) {
        @*iframeOpenUrl = '@Url.Action("AssignTaskForMedical", "Task", new { @area= "Cms" })?applicantId=' + appId;
        OpenIframePopup(1000, 1200, 'Raise Medical Task');*@

        var flag = confirm('Do you want to Raise the Task for Medical ?');
        if (flag) {
            $.ajax({
                url: '@Url.Action("AssignTaskForMedical", "Task", new { @area= "Cms" })?applicantId=' + appId,
                dataType: "json",
                type: "GET",
                contentType: 'application/json; charset=utf-8', //define a contentType of your request
                cache: false,
                success: function (result) {
                    if (result.success) {

                        kendo.alert("Task Raised Successfully.");
                    }
                },
                error: function (xhr) {
                    //alert('error');
                }
            });
        }

    }


    function onRaiseService(appId,code,title){
        //alert("Visa Transfer " + appId+" "+code);
        @*iframeOpenUrl = '@Url.Action("Service", "Task", new { @area= "Cms" })?templateCode=' + code + '&referenceId=' + appId + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application'+'&isPopUp=true';
        OpenIframePopup(1200, 1200, title);*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Service", "Task", new { @area = "Cms" })?templateCode=' + code + '&referenceId=' + appId + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application'+'&isPopUp=true';
          win.OpenWindow({ Title: title, Width: 1200, Height: 1000 });
        return false;
    }
    function onViewService(taskId,code,title){
        //alert("Visa Transfer " + taskId+" "+code);
        @*iframeOpenUrl = '@Url.Action("Service", "Task", new { @area= "Cms" })?taskId=' + taskId + '&templateCode1=' + code +'&isPopUp=true' ;
        OpenIframePopup(1200, 1200, title);*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Service", "Task", new { @area = "Cms" })?taskId=' + taskId + '&templateCode1=' + code +'&isPopUp=true' ;
          win.OpenWindow({ Title: title, Width: 1200, Height: 1000 });
        return false;
    }
    function onRaiseServiceAppUser(appId, code,user,title) {
        @*iframeOpenUrl = '@Url.Action("Service", "Task", new { @area= "Cms" })?templateCode=' + code + '&assignTo='+user+'&referenceId=' + appId +'&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application'+'&isPopUp=true';
        OpenIframePopup(1200, 1200, title);*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Service", "Task", new { @area = "Cms" })?templateCode=' + code + '&assignTo='+user+'&referenceId=' + appId +'&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application'+'&isPopUp=true';
          win.OpenWindow({ Title: title, Width: 1200, Height: 1000 });
        return false;

    }
    function onRaiseTaskAppUser(appId, code,user, title) {
        @*iframeOpenUrl = '@Url.Action("Index", "Task", new { @area= "Cms" })?templateCode=' + code + '&assignTo=' + user + '&referenceId=' + appId + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application'+'&isPopUp=true';
        OpenIframePopup(1200, 1200, title);*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Index", "Task", new { @area = "Cms" })?templateCode=' + code + '&assignTo=' + user + '&referenceId=' + appId + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application'+'&isPopUp=true';
          win.OpenWindow({ Title: title, Width: 1200, Height: 1000 });
        return false;
    }
    function IframePostbackScript() {
        //alert("test");
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read();
    }

        function OnCreateDirectHiring(appId, code) {
          var win = GetMainWindow();
            win.iframeOpenUrl = '@Url.Action("Service", "Task", new { @area = "Cms" })?templateCode1=DIRECT_HIRING&isPopUp=true';
            win.OpenWindow({ Title: 'Direct Hiring', Width: 1200, Height: 1200 });
        return false;
    }
</script>
@*class="container"*@
<div style="margin: 20px;">
    <div class="row pop-tstrip">
        <div class="col-xl-11">
            <h5 class="popTitle" style="margin-top:5px;">Job Advertisement - @Model.JobTitle</h5>
        </div>
        <div class="col col-right-cell">
            <input type="button" class="btn btn-light" value="Back" onclick="back()" style="margin-top:-7px;" />
        </div>
    </div>
    <div class="row aft-title-spacing">
        <div class="col">
            <input id="btnHR" type="button" class="btn btn-info" value="Shortlist By HR" onclick="onShortlistByHR()" style="height:30px;display:none;" />
            <input id="btnHM" type="button" class="btn btn-info" value="Shortlist By Hiring Manager" onclick="onShortlistByHM()" style="height:30px;display:none;" />
            @if (Model.ApplicationState == "ShortListByHr")
            {

            }
            else if (Model.ApplicationState == "ShortListByHm")
            {

            }

        </div>
    </div>
    <div class="row">
        <div class="col-xl-9">
            <div class="row">
                <div class="col col-border color-bg"><span class="numbers" id="RequiredbyHC">0</span><span>Required by HC</span></div>
                <div class="col col-border color-bg"><span class="numbers" id="Available">0</span><span>Available</span></div>
                <div class="col col-border color-bg"><span class="numbers" id="Subcontract">0</span><span>Sub Contract</span></div>
                <div class="col col-border color-bg"><span class="numbers" id="Transfer">0</span><span>Transfer</span></div>
                <div class="col col-border color-bg"><span class="numbers" id="TobeRecruited">0</span><span>To be Recruited</span></div>
            </div>
        </div>
        <div class="col col-border col-highlight"><span class="numbers text-center" id="StateCount"><i class="fa fa-group ico-applications"></i><span id="StateCount1">@Model.StateCount</span></span><p class="Qlink-title">@Model.ApplicationStateName</p>

        </div>
        
    </div>
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col"></div>
            </div>
        </div>
    </div>
    <div>
        <div class="table-responsive d-block mt-2">
            @if (Model.ApplicationState == null)
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {
                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
           "</ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);

                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);

                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);

                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(180).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationState).ClientTemplate("#if(ApplicationStateCode=='UnReviewed'){#<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"SHORTLISTED\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"ShortListByHr\")'>Move To HR Shortlist</button>#}#").Title("Action").Width(180).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State Name" }).Title("Application State").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).HeaderHtmlAttributes(new { title = "Position Name" }).Title("Position Name").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).HeaderHtmlAttributes(new { title = "Organization Name" }).Title("Organization Name").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).HeaderHtmlAttributes(new { title = "Batch" }).Title("Batch").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Status").Width(150);

                            columns.Bound(p => p.TotalWorkExperience).HeaderHtmlAttributes(new { title = "Total Work Experience" }).Width(150);
                            columns.Bound(p => p.ContactPhoneHome).HeaderHtmlAttributes(new { title = "Contact Phone Home" }).Title("Mobile").Width(150);
                            columns.Bound(p => p.Score).HeaderHtmlAttributes(new { title = "Score" }).Width(150);
                            columns.Bound(p => p.Gender).HeaderHtmlAttributes(new { title = "Gender" }).Width(150);
                            columns.Bound(p => p.BirthDate).HeaderHtmlAttributes(new { title = "Birth Date" }).Width(150).Format("{0:MM/dd/yyyy}");
                            columns.Bound(p => p.Age).HeaderHtmlAttributes(new { title = "Age" }).Width(150);
                            columns.Bound(p => p.BirthPlace).HeaderHtmlAttributes(new { title = "Birth Place" }).Width(150);
                            columns.Bound(p => p.Nationality).HeaderHtmlAttributes(new { title = "Nationality" }).Width(150);
                            columns.Bound(p => p.BloodGroup).HeaderHtmlAttributes(new { title = "Blood Group" }).Width(150);
                            columns.Bound(p => p.MaritalStatusName).HeaderHtmlAttributes(new { title = "Marital Status Name" }).Title("Marital Status").Width(150);
                            columns.Bound(p => p.PassportNumber).HeaderHtmlAttributes(new { title = "Passport Number" }).Width(150);
                            columns.Bound(p => p.PassportIssueCountry).HeaderHtmlAttributes(new { title = "Passport Issue Country" }).Width(150);
                            columns.Bound(p => p.PassportExpiryDate).HeaderHtmlAttributes(new { title = "Passport Expiry Date" }).Width(150).Format("{0:MM/dd/yyyy}");
                            columns.Bound(p => p.QatarId).HeaderHtmlAttributes(new { title = "Qatar Id" }).Width(150);
                            columns.Bound(p => p.CurrentAddressHouse).HeaderHtmlAttributes(new { title = "Current Address House" }).Width(150);
                            columns.Bound(p => p.CurrentAddressStreet).HeaderHtmlAttributes(new { title = "Current Address Street" }).Width(150);
                            columns.Bound(p => p.CurrentAddressCity).HeaderHtmlAttributes(new { title = "Current Address City" }).Width(150);
                            columns.Bound(p => p.CurrentAddressState).HeaderHtmlAttributes(new { title = "Current Address State" }).Width(150);
                            columns.Bound(p => p.CurrentAddressCountryName).HeaderHtmlAttributes(new { title = "Current Address Country Name" }).Width(150);
                            columns.Bound(p => p.PermanentAddressHouse).HeaderHtmlAttributes(new { title = "Permanent Address House" }).Width(150);
                            columns.Bound(p => p.PermanentAddressStreet).HeaderHtmlAttributes(new { title = "Permanent Address Street" }).Width(150);
                            columns.Bound(p => p.PermanentAddressCity).HeaderHtmlAttributes(new { title = "Permanent Address City" }).Width(150);
                            columns.Bound(p => p.PermanentAddressState).HeaderHtmlAttributes(new { title = "Permanent Address State" }).Width(150);
                            columns.Bound(p => p.PermanentAddressCountryName).HeaderHtmlAttributes(new { title = "Permanent Address Country Name" }).Width(150);

                            columns.Bound(p => p.ContactPhoneLocal).HeaderHtmlAttributes(new { title = "Contact Phone Local" }).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(250);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(250);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(250).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(250);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            columns.Bound(p => p.SalaryCurrencyName).HeaderHtmlAttributes(new { title = "Salary Currency Name" }).Title("Salary Currency").Width(150);
                            //columns.Bound(p => p.IndianSalary).Width(150);
                            // columns.Bound(p => p.OverseasSalary).Width(150);
                            columns.Bound(p => p.NetSalary).HeaderHtmlAttributes(new { title = "Net Salary After Income Tax" }).Title("Net Salary After Income Tax").Width(150);
                            columns.Bound(p => p.OtherAllowances).HeaderHtmlAttributes(new { title = "Other Allowances" }).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable().Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("ReadTotalJobAdvertisementData", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId=Model.OrganizationId, state = Model.ApplicationState }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }
            else if (Model.ApplicationState == "ShortListByHr")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
           " </ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);
                            // columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);

                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);

                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(180).Locked(true).Lockable(false);
                            // columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"ShortListByHm\")'>Move To Hm</button>").Title("Action").Width(280).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).HeaderHtmlAttributes(new { title = "Batch Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State Name" }).Title("Application State").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Status").Width(150);

                            columns.Bound(p => p.TotalWorkExperience).HeaderHtmlAttributes(new { title = "Total Work Experience" }).Width(150);
                            columns.Bound(p => p.ContactPhoneHome).HeaderHtmlAttributes(new { title = "Mobile" }).Title("Mobile").Width(150);
                            columns.Bound(p => p.Score).HeaderHtmlAttributes(new { title = "Score" }).Width(150);
                            columns.Bound(p => p.Gender).HeaderHtmlAttributes(new { title = "Gender" }).Width(150);
                            columns.Bound(p => p.BirthDate).HeaderHtmlAttributes(new { title = "Birth Date" }).Width(150).Format("{0:MM/dd/yyyy}");
                            columns.Bound(p => p.Age).HeaderHtmlAttributes(new { title = "Age" }).Width(150);
                            columns.Bound(p => p.BirthPlace).HeaderHtmlAttributes(new { title = "Birth Place" }).Width(150);
                            columns.Bound(p => p.Nationality).HeaderHtmlAttributes(new { title = "Nationality" }).Width(150);
                            columns.Bound(p => p.BloodGroup).HeaderHtmlAttributes(new { title = "Blood Group" }).Width(150);
                            columns.Bound(p => p.MaritalStatusName).HeaderHtmlAttributes(new { title = "Marital Status" }).Width(150);
                            columns.Bound(p => p.PassportNumber).HeaderHtmlAttributes(new { title = "Passport Number" }).Width(150);
                            columns.Bound(p => p.PassportIssueCountry).HeaderHtmlAttributes(new { title = "Passport Issue Country" }).Width(150);
                            columns.Bound(p => p.PassportExpiryDate).HeaderHtmlAttributes(new { title = "Passport Expiry Date" }).Width(150).Format("{0:MM/dd/yyyy}");
                            columns.Bound(p => p.QatarId).HeaderHtmlAttributes(new { title = "Qatar Id" }).Width(150);
                            columns.Bound(p => p.CurrentAddressHouse).HeaderHtmlAttributes(new { title = "Current Address House" }).Width(150);
                            columns.Bound(p => p.CurrentAddressStreet).HeaderHtmlAttributes(new { title = "Current Address Street" }).Width(150);
                            columns.Bound(p => p.CurrentAddressCity).HeaderHtmlAttributes(new { title = "Current Address City" }).Width(150);
                            columns.Bound(p => p.CurrentAddressState).HeaderHtmlAttributes(new { title = "Current Address State" }).Width(150);
                            columns.Bound(p => p.CurrentAddressCountryName).HeaderHtmlAttributes(new { title = "Current Address Country Name" }).Width(150);
                            columns.Bound(p => p.PermanentAddressHouse).HeaderHtmlAttributes(new { title = "Permanent Address House" }).Width(150);
                            columns.Bound(p => p.PermanentAddressStreet).HeaderHtmlAttributes(new { title = "Permanent Address Street" }).Width(150);
                            columns.Bound(p => p.PermanentAddressCity).HeaderHtmlAttributes(new { title = "Permanent Address City" }).Width(150);
                            columns.Bound(p => p.PermanentAddressState).HeaderHtmlAttributes(new { title = "Permanent Address State" }).Width(150);
                            columns.Bound(p => p.PermanentAddressCountryName).HeaderHtmlAttributes(new { title = "Permanent Address Country Name" }).Width(150);

                            columns.Bound(p => p.ContactPhoneLocal).HeaderHtmlAttributes(new { title = "Contact Phone Local" }).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(250);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(250);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(250).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(250);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            columns.Bound(p => p.SalaryCurrencyName).HeaderHtmlAttributes(new { title = "Salary Currency Name" }).Title("Salary Currency").Width(150);
                            //columns.Bound(p => p.IndianSalary).Width(150);
                            //columns.Bound(p => p.OverseasSalary).Width(150);
                            columns.Bound(p => p.NetSalary).HeaderHtmlAttributes(new { title = "Net Salary" }).Title("Net Salary After Income Tax").Width(150);
                            columns.Bound(p => p.OtherAllowances).HeaderHtmlAttributes(new { title = "Other Allowances" }).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable().Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("ReadJobAdvertisementData", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState,permission= @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }

            else if (Model.ApplicationState == "ShortListByHm")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
           "</ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);

                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);

                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(180).Locked(true).Lockable(false);
                            // columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"InterviewsCompleted\")'>Move To Interviews</button>").Title("Action").Width(280).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).HeaderHtmlAttributes(new { title = "Batch Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State Name" }).Title("Application State").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.HiringManagerName).Title("Hiring Manager").HeaderHtmlAttributes(new { title = "Hiring Manager" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                            //columns.Bound(p => p.BatchName).HeaderHtmlAttributes(new { title = "Batch Name" }).Title("Batch").Width(150);

                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Application Status" }).HeaderHtmlAttributes(new { title = "Name" }).Title("Status").Width(150);

                            columns.Bound(p => p.TotalWorkExperience).HeaderHtmlAttributes(new { title = "Total Work Experience" }).Width(150);
                            columns.Bound(p => p.ContactPhoneHome).HeaderHtmlAttributes(new { title = "Contact Phone Home" }).Title("Mobile").Width(150);
                            columns.Bound(p => p.Score).HeaderHtmlAttributes(new { title = "Score" }).Width(150);
                            columns.Bound(p => p.Gender).HeaderHtmlAttributes(new { title = "Gender" }).Width(150);
                            columns.Bound(p => p.BirthDate).HeaderHtmlAttributes(new { title = "Birth Date" }).Width(150).Format("{0:MM/dd/yyyy}");
                            columns.Bound(p => p.Age).HeaderHtmlAttributes(new { title = "Age" }).Width(150);
                            columns.Bound(p => p.BirthPlace).HeaderHtmlAttributes(new { title = "Birth Place" }).Width(150);
                            columns.Bound(p => p.Nationality).HeaderHtmlAttributes(new { title = "Nationality" }).Width(150);
                            columns.Bound(p => p.BloodGroup).HeaderHtmlAttributes(new { title = "Blood Group" }).Width(150);
                            columns.Bound(p => p.MaritalStatusName).HeaderHtmlAttributes(new { title = "Marital Status" }).Width(150);
                            columns.Bound(p => p.PassportNumber).HeaderHtmlAttributes(new { title = "Passport Number" }).Width(150);
                            columns.Bound(p => p.PassportIssueCountry).HeaderHtmlAttributes(new { title = "Passport Issue Country" }).Width(150);
                            columns.Bound(p => p.PassportExpiryDate).HeaderHtmlAttributes(new { title = "Passport Expiry Date" }).Width(150).Format("{0:MM/dd/yyyy}");
                            columns.Bound(p => p.QatarId).HeaderHtmlAttributes(new { title = "Qatar Id" }).Width(150);
                            columns.Bound(p => p.CurrentAddressHouse).HeaderHtmlAttributes(new { title = "Current Address House" }).Width(150);
                            columns.Bound(p => p.CurrentAddressStreet).HeaderHtmlAttributes(new { title = "Current Address Street" }).Width(150);
                            columns.Bound(p => p.CurrentAddressCity).HeaderHtmlAttributes(new { title = "Current Address City" }).Width(150);
                            columns.Bound(p => p.CurrentAddressState).HeaderHtmlAttributes(new { title = "Current Address State" }).Width(150);
                            columns.Bound(p => p.CurrentAddressCountryName).HeaderHtmlAttributes(new { title = "Current Address Country Name" }).Width(150);
                            columns.Bound(p => p.PermanentAddressHouse).HeaderHtmlAttributes(new { title = "Permanent Address House" }).Width(150);
                            columns.Bound(p => p.PermanentAddressStreet).HeaderHtmlAttributes(new { title = "Permanent Address Street" }).Width(150);
                            columns.Bound(p => p.PermanentAddressCity).HeaderHtmlAttributes(new { title = "Permanent Address City" }).Width(150);
                            columns.Bound(p => p.PermanentAddressState).HeaderHtmlAttributes(new { title = "Permanent Address State" }).Width(150);
                            columns.Bound(p => p.PermanentAddressCountryName).HeaderHtmlAttributes(new { title = "Permanent Address Country Name" }).Width(150);

                            columns.Bound(p => p.ContactPhoneLocal).HeaderHtmlAttributes(new { title = "Contact Phone Local" }).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(250);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(250);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(250).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(250);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            columns.Bound(p => p.SalaryCurrencyName).HeaderHtmlAttributes(new { title = "Salary Currency Name" }).Title("Salary Currency").Width(150);
                            // columns.Bound(p => p.IndianSalary).Width(150);
                            //columns.Bound(p => p.OverseasSalary).Width(150);
                            columns.Bound(p => p.NetSalary).HeaderHtmlAttributes(new { title = "Net Salary" }).Title("Net Salary After Income Tax").Width(150);
                            columns.Bound(p => p.OtherAllowances).HeaderHtmlAttributes(new { title = "Other Allowances" }).Width(150);

                        })
                        //.ToolBar(toolbar =>
                        //{
                        //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                        //})
                        .Events(e => e.DataBound("OnDataBound"))

                        .Scrollable().Height(700)
                        .Sortable().Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("ReadJobAdvertisementData", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState,tempcode = "SCHEDULE_INTERVIEW", nexttempcode = "SCHEDULE_INTERVIEW_CANDIDATE",permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }

            else if (Model.ApplicationState == "DirectHiring")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            //  columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/></ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).HtmlAttributes(new { style = "text-align:center" }).Locked(true).Lockable(false);
                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'>" +
          "#if(ApplicationId!=null){#<li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>#}#" +
          " </ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);
                            columns.Bound(p => p.TaskNo).HeaderHtmlAttributes(new { title = "Service No" }).Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).HeaderHtmlAttributes(new { title = "Batch Name" }).Title("Batch Name").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).ClientTemplate("#if(ApplicationId!=null){#<a style='cursor:pointer;color:blue' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'>#:ApplicationNo#</a>#}#").HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.Step1).ClientTemplate("#if(StepNo1!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\",\"\",\"Collect Applicant Information\")'>#:StepNo1#</a>#}#").Title("4.1 Collect Applicant Information").HeaderHtmlAttributes(new { title = "4.1 Collect Applicant Information" }).Width(150);
                            columns.Bound(p => p.Step2).ClientTemplate("#if(StepNo2!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\",\"\",\"Fill Evaluation Form\")'>#:StepNo2#</a>#}#").Title("4.2 Fill Evaluation Form").HeaderHtmlAttributes(new { title = "4.2 Fill Evaluation Form" }).Width(150);



                        })
                         .ToolBar(toolbar =>
                         {
                             toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateDirectHiring();'><i class='fa fas fa-plus'></i>&nbsp;Create Direct Hiring</button>");
                         })
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable()
                        .Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                        .Read(read => read.Action("GetDirectHiringData", "RecruitmentDashboard",new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }

            else if (Model.ApplicationState == "IntentToOffer")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onReturnCandidatePool(\"#:ApplicationId#\",\"Rereviewed\",\"EMPLOYEE_APPOINTMENT\")'>Return to Candidate Pool</button></li><br/><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onView(\"#:ApplicationId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View Intent To Offer</button></li></ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);

                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);

                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(180).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"FinalOfferSent\")'>Move To Final Offer</button>").Title("Action").Width(280).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).Title("Position Name").HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).Title("Organization Name").HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).Title("Batch").HeaderHtmlAttributes(new { title = "Batch" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).Title("Application State").HeaderHtmlAttributes(new { title = "Application State" }).Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).Title("First Name").HeaderHtmlAttributes(new { title = "First Name" }).Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).Title("Middle Name").HeaderHtmlAttributes(new { title = "Middle Name" }).Width(150);
                            columns.Bound(p => p.LastName).Title("Last Name").HeaderHtmlAttributes(new { title = "Last Name" }).Width(150);
                            columns.Bound(p => p.Email).Width(150);

                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Status" }).Title("Status").Width(150);
                            columns.Bound(p => p.Step1).ClientTemplate("#if(StepNo1!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\",\"\",\"Recruiter–Prepare intent to offer\")'>#:StepNo1#</a>#}#").Title("5.1.1 Prepare intent to offer - Recruiter").HeaderHtmlAttributes(new { title = "5.1.1 Prepare intent to offer - Recruiter" }).Width(150);
                            columns.Bound(p => p.Step7).ClientTemplate("#if(StepNo7!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step7#\",\"\",\"HOD–Revising\")'>#:StepNo7#</a>#}#").Title("5.1.1.1 Revising - HOD").HeaderHtmlAttributes(new { title = "5.1.1.1 Revising - HOD" }).Width(150);

                            columns.Bound(p => p.Step2).ClientTemplate("#if(StepNo2!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\",\"\",\"Candidate–Accept intent to offer\")'>#:StepNo2#</a>#}#").Title("5.1.2 Accept intent to offer - Candidate").HeaderHtmlAttributes(new { title = "5.1.2 Accept intent to offer - Candidate" }).Width(150);
                            columns.Bound(p => p.Step3).ClientTemplate("#if(StepNo3!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step3#\",\"\",\"HOD–Approval\")'>#:StepNo3#</a>#}#").Title("5.1.3 Approval - HOD").HeaderHtmlAttributes(new { title = "5.1.3 Approval - HOD" }).Width(150);
                            //columns.Bound(p => p.Step5).ClientTemplate("#if(StepNo3!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step3#\",\"\",\"Planning Head–Approval\")'>#:StepNo3#</a>#}#").Title("4.1.3 Approval - Planning Head").HeaderHtmlAttributes(new { title = "4.1.3 Approval - Planning Head" }).Width(150);
                            columns.Bound(p => p.Step4).ClientTemplate("#if(StepNo4!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step4#\",\"\",\"Review By HR\")'>#:StepNo4#</a>#}#").Title("5.1.3.1 Review By HR").HeaderHtmlAttributes(new { title = "5.1.3.1 Review By Hr" }).Width(150);
                            columns.Bound(p => p.Step5).ClientTemplate("#if(StepNo5!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step5#\",\"\",\"HR Head–Approval\")'>#:StepNo5#</a>#}#").Title("5.1.4 Approval - Hr Head").HeaderHtmlAttributes(new { title = "5.1.4 Approval - HR Head" }).Width(150);
                            columns.Bound(p => p.Step6).ClientTemplate("#if(StepNo6!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step6#\",\"\",\"ED–Approval\")'>#:StepNo6#</a>#}#").Title("5.1.5 Approval - ED").HeaderHtmlAttributes(new { title = "5.1.5 Approval - ED" }).Width(150);


                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable().Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("GetJobAdvertismentApplication", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState, tempcode = "EMPLOYEE_APPOINTMENT", permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }
            else if (Model.ApplicationState == "WorkerPool")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onReturnCandidatePool(\"#:ApplicationId#\",\"Rereviewed\",\"WORKER_POOL_REQUEST\")'>Return to Candidate Pool</button></li><br/><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
           "</ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onAdd(\"#:ApplicationId#\")'>Edit</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //if (Model.ManpowerTypeCode=="Staff")
                            //{
                            //    columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='OnFinalOffer(\"#:ApplicationId#\")'>Final Offer</button>").Title("Staff Offer").Width(120).Locked(true).Lockable(false);
                            //}else if (Model.ManpowerTypeCode=="Worker")
                            //{
                            //    columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='OnWorkerOffer(\"#:ApplicationId#\")'>Final Offer</button>").Title("Worker Offer").Width(120).Locked(true).Lockable(false);
                            //}
                            //else if (Model.ManpowerTypeCode == "DriverOperator")
                            //{
                            //    columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='OnDriverOffer(\"#:ApplicationId#\")'>Final Offer</button>").Title("Driver & Operater Offer").Width(120).Locked(true).Lockable(false);
                            //}

                            //columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"FinalOfferAccepted\")'>Final Offer Accepted(behalf of candidate)</button>").Title("Action").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).HeaderHtmlAttributes(new { title = "ApplicationNo" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.WorkerBatch).HeaderHtmlAttributes(new { title = "Worker Batch" }).Width(120).Title("Batch").Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "ApplicationStateName" }).Title("Application State").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "FirstName" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "MiddleName" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "LastName" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Status" }).Title("Status").Width(150);

                            columns.Bound(p => p.Step1).ClientTemplate("#if(StepNo1!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\")'>#:StepNo1#</a>#}#").Title("6.1.1 Approval - HOD").HeaderHtmlAttributes(new { title = "6.1.1 Approval - HOD" }).Width(150);
                            //columns.Bound(p => p.Step2).ClientTemplate("#if(StepNo2!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\")'>#:StepNo2#</a>#}#").Title("5.1.2 Approval - Planning Head").HeaderHtmlAttributes(new { title = "5.1.2 Approval - Planning Head" }).Width(150);
                            columns.Bound(p => p.Step2).ClientTemplate("#if(StepNo2!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\")'>#:StepNo2#</a>#}#").Title("6.1.2 Review - Recruiter").HeaderHtmlAttributes(new { title = "6.1.2 Review - Recruiter" }).Width(150);
                            columns.Bound(p => p.Step3).ClientTemplate("#if(StepNo3!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step3#\")'>#:StepNo3#</a>#}#").Title("6.1.3 Approval - Hr Head").HeaderHtmlAttributes(new { title = "6.1.3 Approval - Hr Head" }).Width(150);
                            columns.Bound(p => p.Step4).ClientTemplate("#if(StepNo4!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step4#\")'>#:StepNo4#</a>#}#").Title("6.1.4 Approval - ED").HeaderHtmlAttributes(new { title = "6.1.4 Approval - ED" }).Width(150);
                            columns.Bound(p => p.Step5).ClientTemplate("#if(StepNo5!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step5#\")'>#:StepNo5#</a>#}#").Title("6.1.5 Approval - Recruiter").HeaderHtmlAttributes(new { title = "6.1.5 Salary Confirm - Recruiter" }).Width(150);
                            columns.Bound(p => p.Step6).ClientTemplate("#if(StepNo6!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step6#\")'>#:StepNo6#</a>#}#").Title("6.1.6 Approval - Agency").HeaderHtmlAttributes(new { title = "6.1.6 Worker Salary Acceptance" }).Width(150);



                            //columns.Bound(p => p.TotalWorkExperience).Width(150);
                            //columns.Bound(p => p.ContactPhoneHome).Title("Mobile").Width(150);
                            //columns.Bound(p => p.Score).Width(150);
                            //columns.Bound(p => p.Gender).Width(150);
                            //columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.Age).Width(150);
                            //columns.Bound(p => p.BirthPlace).Width(150);
                            //columns.Bound(p => p.Nationality).Width(150);
                            //columns.Bound(p => p.BloodGroup).Width(150);
                            //columns.Bound(p => p.MaritalStatus).Width(150);
                            //columns.Bound(p => p.PassportNumber).Width(150);
                            //columns.Bound(p => p.PassportIssueCountry).Width(150);
                            //columns.Bound(p => p.PassportExpiryDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.QatarId).Width(150);
                            //columns.Bound(p => p.CurrentAddressHouse).Width(150);
                            //columns.Bound(p => p.CurrentAddressStreet).Width(150);
                            //columns.Bound(p => p.CurrentAddressCity).Width(150);
                            //columns.Bound(p => p.CurrentAddressState).Width(150);
                            //columns.Bound(p => p.CurrentAddressCountryName).Width(150);
                            //columns.Bound(p => p.PermanentAddressHouse).Width(150);
                            //columns.Bound(p => p.PermanentAddressStreet).Width(150);
                            //columns.Bound(p => p.PermanentAddressCity).Width(150);
                            //columns.Bound(p => p.PermanentAddressState).Width(150);
                            //columns.Bound(p => p.PermanentAddressCountryName).Width(150);

                            //columns.Bound(p => p.ContactPhoneLocal).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            //columns.Bound(p => p.SalaryCurrencyName).Title("Salary Currency").Width(150);
                            ////columns.Bound(p => p.IndianSalary).Width(150);
                            ////columns.Bound(p => p.OverseasSalary).Width(150);
                            //columns.Bound(p => p.NetSalary).Title("Net Salary After Income Tax").Width(150);
                            //columns.Bound(p => p.OtherAllowance).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable().Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("GetJobAdvertismentApplication", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState, tempcode = "WORKER_POOL_REQUEST", permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }

            else if (Model.ApplicationState == "FinalOffer")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onReturnCandidatePool(\"#:ApplicationId#\",\"Rereviewed\",\"PREPARE_FINAL_OFFER\")'>Return to Candidate Pool</button></li><br/><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='OnFinalOffer(\"#:ApplicationId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View Final Offer</button></li></ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).HtmlAttributes(new { style = "text-align:center" }).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onAdd(\"#:ApplicationId#\")'>Edit</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //if (Model.ManpowerTypeCode=="Staff")
                            //{
                            //    columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='OnFinalOffer(\"#:ApplicationId#\")'>Final Offer</button>").Title("Staff Offer").Width(120).Locked(true).Lockable(false);
                            //}else if (Model.ManpowerTypeCode=="Worker")
                            //{
                            //    columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='OnWorkerOffer(\"#:ApplicationId#\")'>Final Offer</button>").Title("Worker Offer").Width(120).Locked(true).Lockable(false);
                            //}
                            //else if (Model.ManpowerTypeCode == "DriverOperator")
                            //{
                            //    columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='OnDriverOffer(\"#:ApplicationId#\")'>Final Offer</button>").Title("Driver & Operater Offer").Width(120).Locked(true).Lockable(false);
                            //}

                            //columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"FinalOfferAccepted\")'>Final Offer Accepted(behalf of candidate)</button>").Title("Action").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).Title("Position Name").HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).Title("Organization Name").HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).Title("Batch").HeaderHtmlAttributes(new { title = "Batch" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).Title("Application State").HeaderHtmlAttributes(new { title = "Application State" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).Title("First Name").HeaderHtmlAttributes(new { title = "First Name" }).Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).Title("Middle Name").HeaderHtmlAttributes(new { title = "Middle Name" }).Width(150);
                            columns.Bound(p => p.LastName).Title("Last Name").HeaderHtmlAttributes(new { title = "Last Name" }).Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).Title("Status").HeaderHtmlAttributes(new { title = "Status" }).Width(150);

                            columns.Bound(p => p.Step1).ClientTemplate("#if(StepNo1!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\",\"\",\"Recruiter–Prepare Final Offer\")'>#:StepNo1#</a>#}#").Title("7.1.1 Prepare Final Offer - Recruiter").HeaderHtmlAttributes(new { title = "7.1.1 Prepare Final Offer - Recruiter" }).Width(150);
                            columns.Bound(p => p.Step2).ClientTemplate("#if(StepNo2!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\",\"\",\"HOD–Approval\")'>#:StepNo2#</a>#}#").Title("7.1.2 Approval - HR Head").HeaderHtmlAttributes(new { title = "7.1.2 Approval - HR Head" }).Width(150);
                            columns.Bound(p => p.Step3).ClientTemplate("#if(StepNo3!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step3#\",\"\",\"ED–Approval\")'>#:StepNo3#</a>#}#").Title("7.1.3 Approval -ED").HeaderHtmlAttributes(new { title = "7.1.3 Approval -ED" }).Width(150);
                            columns.Bound(p => p.Step4).ClientTemplate("#if(StepNo4!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step4#\",\"\",\"Candidate–Final Offer Acceptance\")'>#:StepNo4#</a>#}#").Title("7.1.4 Final Offer Acceptance - Candidate").HeaderHtmlAttributes(new { title = "Final Offer Acceptance - Candidate" }).Width(150);
                            columns.Bound(p => p.Step5).ClientTemplate("#if(StepNo5!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step5#\",\"\",\"HR Review–Final Offer Acceptance\")'>#:StepNo5#</a>#}#").Title("7.1.5 Final Offer Acceptance - Candidate").HeaderHtmlAttributes(new { title = "Final Offer Acceptance - Candidate" }).Width(150);


                            //columns.Bound(p => p.TotalWorkExperience).Width(150);
                            //columns.Bound(p => p.ContactPhoneHome).Title("Mobile").Width(150);
                            //columns.Bound(p => p.Score).Width(150);
                            //columns.Bound(p => p.Gender).Width(150);
                            //columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.Age).Width(150);
                            //columns.Bound(p => p.BirthPlace).Width(150);
                            //columns.Bound(p => p.Nationality).Width(150);
                            //columns.Bound(p => p.BloodGroup).Width(150);
                            //columns.Bound(p => p.MaritalStatus).Width(150);
                            //columns.Bound(p => p.PassportNumber).Width(150);
                            //columns.Bound(p => p.PassportIssueCountry).Width(150);
                            //columns.Bound(p => p.PassportExpiryDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.QatarId).Width(150);
                            //columns.Bound(p => p.CurrentAddressHouse).Width(150);
                            //columns.Bound(p => p.CurrentAddressStreet).Width(150);
                            //columns.Bound(p => p.CurrentAddressCity).Width(150);
                            //columns.Bound(p => p.CurrentAddressState).Width(150);
                            //columns.Bound(p => p.CurrentAddressCountryName).Width(150);
                            //columns.Bound(p => p.PermanentAddressHouse).Width(150);
                            //columns.Bound(p => p.PermanentAddressStreet).Width(150);
                            //columns.Bound(p => p.PermanentAddressCity).Width(150);
                            //columns.Bound(p => p.PermanentAddressState).Width(150);
                            //columns.Bound(p => p.PermanentAddressCountryName).Width(150);

                            //columns.Bound(p => p.ContactPhoneLocal).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            //columns.Bound(p => p.SalaryCurrencyName).Title("Salary Currency").Width(150);
                            ////columns.Bound(p => p.IndianSalary).Width(150);
                            ////columns.Bound(p => p.OverseasSalary).Width(150);
                            //columns.Bound(p => p.NetSalary).Title("Net Salary After Income Tax").Width(150);
                            //columns.Bound(p => p.OtherAllowance).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable().Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("GetJobAdvertismentApplication", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState, tempcode = "PREPARE_FINAL_OFFER", permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }

            else if (Model.ApplicationState == "BusinessVisa")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            //                columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
                            //"<li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnFinalOffer(\"#:ApplicationId#\")'>View Final Offer</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>#if(TaskStatusCode=='COMPLETED'){#<li><button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"MedicalCompleted\")'>Move To Medical Complete</button></li><br/>#}# #if(NextTaskStatusCode=='COMPLETED'){#<li><button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"VisaAppointmentTaken\")'>Move To Visa Apply</button></li><br/>#}#"+
                            //"<li>#if(IsLocalCandidate!=true){if(VisaCategoryCode=='BUSINESS_VISA'){if(TaskId==null){ #<button class='btn btn-info' onclick='onRaiseServiceAppUser(\"#:ApplicationId#\",\"BUSINESS_VISA_MEDICAL\",\"#:ApplicationUserId#\",\"Medical Business Visa\")'>Medical Request</button>#}else{#<button class='btn btn-info' onclick='onViewService(\"#:TaskId#\",\"BUSINESS_VISA_MEDICAL\",\"Medical Business Visa\")'>View Employee Appointment Request</button>#}} else{ if(NextTaskId==null){#<button class='btn btn-info' onclick='onRaiseServiceAppUser(\"#:ApplicationId#\",\"VISA_APPLY\",\"#:ApplicationUserId#\",\"Visa Apply/Appointments Taken\")'>Visa Apply Request</button>#} else {#<button class='btn btn-info' onclick='onViewService(\"#:NextTaskId#\",\"VISA_APPLY\",\"Visa Apply/Appointments Taken\")'>View Request</button>#}}}#</li><br/>" +
                            //"<li>#if(IsLocalCandidate==true){if(VisaTaskId==null){if(SourceFrom=='Agency' && AgencyId!=null){#<button class='btn btn-info' onclick='onRaiseServiceAppUser(\"#:ApplicationId#\",\"VISA_TRANSFER\",\"#:AgencyId#\",\"Visa Transfer Request\")'>Raise Visa Transfer Task</button>#}else{#<button class='btn btn-info' onclick='onRaiseServiceAppUser(\"#:ApplicationId#\",\"VISA_TRANSFER\",\"#:ApplicationUserId#\",\"Visa Transfer Request\")'>Raise Visa Transfer Task</button>#}}else{#<button class='btn btn-info' onclick='onViewService(\"#:VisaTaskId#\",\"#:VisaTaskTemplateCode#\",\"Visa Transfer Request\")'>View Visa Trasfer Task</button>#}}#</li>#if(VisaTaskStatusCode=='COMPLETED'){#<li><button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"VisaTransfer\")'>Move To Visa Transfer</button></li><br/>#}#</ul></div>").Width(150).Title("Actions").HtmlAttributes(new { style = "text-align:center" }).Locked(true).Lockable(false);


                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onReturnCandidatePool(\"#:ApplicationId#\",\"Rereviewed\",\"BUSINESS_VISA_MEDICAL\")'>Return to Candidate Pool</button></li><br/><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
           "</ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);








                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);

                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='OnOffer(\"#:ApplicationId#\")'>View Final Offer</button>").Title("Action").Width(120).Locked(true).Lockable(false);

                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"MedicalCompleted\")'>Move To Medical Complete</button>").Title("Action").Width(120).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("#if(TaskId==null){#<button class='btn btn-info' onclick='onRaiseTaskMedical(\"#:ApplicationId#\")'>Raise</button>#}else{#<button class='btn btn-info' onclick='onViewTask(\"#:TaskId#\",\"#:TaskTemplateCode#\")'>View</button>#}#").Title("Task").Width(100).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).Title("Position Name").HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).Title("Organization Name").HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).Title("Batch").HeaderHtmlAttributes(new { title = "Batch" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "ApplicationStateName" }).Title("Application State").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "FirstName" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "MiddleName" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "LastName" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "ApplicationStatus" }).Title("Status").Width(150);

                            columns.Bound(p => p.Step1).ClientTemplate("#if(StepNo1!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\")'>#:StepNo1#</a>#}#").Title("8.1.1 Submit medical report - Candidate").HeaderHtmlAttributes(new { title = "8.1.1 Submit medical report - Candidate" }).Width(150);
                            columns.Bound(p => p.Step2).ClientTemplate("#if(StepNo2!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\")'>#:StepNo2#</a>#}#").Title("8.1.2 Check Medical report & inform PRO - Recruiter").HeaderHtmlAttributes(new { title = "8.1.2 Check Medical report & inform PRO - Recruiter" }).Width(150);
                            columns.Bound(p => p.Step3).ClientTemplate("#if(StepNo3!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step3#\")'>#:StepNo3#</a>#}#").Title("8.1.3 Obtain Business Visa & Attach - PRO ").HeaderHtmlAttributes(new { title = "8.1.3 Obtain Business Visa & Attach - PRO" }).Width(150);
                            columns.Bound(p => p.Step4).ClientTemplate("#if(StepNo4!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step4#\")'>#:StepNo4#</a>#}#").Title("8.1.4 Receive Visa Copy & advise traveling date - Candidate").HeaderHtmlAttributes(new { title = "8.1.4 Receive Visa Copy & advise traveling date - Candidate" }).Width(150);
                            columns.Bound(p => p.Step5).ClientTemplate("#if(StepNo5!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step5#\")'>#:StepNo5#</a>#}#").Title("8.1.5.1 Confirm traveling date - Recruiter").HeaderHtmlAttributes(new { title = "8.1.5.1 Confirm traveling date - Recruiter" }).Width(150);
                            columns.Bound(p => p.Step6).ClientTemplate("#if(StepNo6!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step6#\")'>#:StepNo6#</a>#}#").Title("8.1.5.2 Send email for ticket booking - Ticketing team").HeaderHtmlAttributes(new { title = "8.1.5.2 Send email for ticket booking - Ticketing team" }).Width(150);
                            columns.Bound(p => p.Step7).ClientTemplate("#if(StepNo7!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step7#\")'>#:StepNo7#</a>#}#").Title("8.1.5.3 Receive & Attach Ticket, Attach Hotel quarantine booking - Ticketing team").HeaderHtmlAttributes(new { title = "8.1.5.3 Receive & Attach Ticket, Attach Hotel quarantine booking - Ticketing team" }).Width(150);
                            columns.Bound(p => p.Step8).ClientTemplate("#if(StepNo8!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step8#\")'>#:StepNo8#</a>#}#").Title("8.1.5.4 Confirm receipt of ticket & date of travel - Candidate").HeaderHtmlAttributes(new { title = "8.1.5.4 Confirm receipt of ticket & date of travel - Candidate" }).Width(150);
                            columns.Bound(p => p.Step9).ClientTemplate("#if(StepNo9!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step9#\")'>#:StepNo9#</a>#}#").Title("8.1.5.5 Arrange Accommodation - Admin").HeaderHtmlAttributes(new { title = "8.1.5.5 Arrange Accommodation - Admin" }).Width(150);
                            columns.Bound(p => p.Step10).ClientTemplate("#if(StepNo10!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step10#\")'>#:StepNo10#</a>#}#").Title("8.1.5.6 Arrange Vehicle for airport pickup - Plant").HeaderHtmlAttributes(new { title = "8.1.5.6 Arrange Vehicle for airport pickup - Plant" }).Width(150);


                            //columns.Bound(p => p.TotalWorkExperience).Width(150);
                            //columns.Bound(p => p.ContactPhoneHome).Title("Mobile").Width(150);
                            //columns.Bound(p => p.Score).Width(150);
                            //columns.Bound(p => p.Gender).Width(150);
                            //columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.Age).Width(150);
                            //columns.Bound(p => p.BirthPlace).Width(150);
                            //columns.Bound(p => p.Nationality).Width(150);
                            //columns.Bound(p => p.BloodGroup).Width(150);
                            //columns.Bound(p => p.MaritalStatus).Width(150);
                            //columns.Bound(p => p.PassportNumber).Width(150);
                            //columns.Bound(p => p.PassportIssueCountry).Width(150);
                            //columns.Bound(p => p.PassportExpiryDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.QatarId).Width(150);
                            //columns.Bound(p => p.CurrentAddressHouse).Width(150);
                            //columns.Bound(p => p.CurrentAddressStreet).Width(150);
                            //columns.Bound(p => p.CurrentAddressCity).Width(150);
                            //columns.Bound(p => p.CurrentAddressState).Width(150);
                            //columns.Bound(p => p.CurrentAddressCountryName).Width(150);
                            //columns.Bound(p => p.PermanentAddressHouse).Width(150);
                            //columns.Bound(p => p.PermanentAddressStreet).Width(150);
                            //columns.Bound(p => p.PermanentAddressCity).Width(150);
                            //columns.Bound(p => p.PermanentAddressState).Width(150);
                            //columns.Bound(p => p.PermanentAddressCountryName).Width(150);

                            //columns.Bound(p => p.ContactPhoneLocal).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            //columns.Bound(p => p.SalaryCurrencyName).Title("Salary Currency").Width(150);
                            //// columns.Bound(p => p.IndianSalary).Width(150);
                            ////columns.Bound(p => p.OverseasSalary).Width(150);
                            //columns.Bound(p => p.NetSalary).Title("Net Salary After Income Tax").Width(150);
                            //columns.Bound(p => p.OtherAllowance).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable().Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("GetJobAdvertismentApplication", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState,tempcode= "BUSINESS_VISA_MEDICAL",tempCodeOther="TRAVEL", permission = @ViewBag.Permissions /*, nexttempcode= "VISA_APPLY", visatempcode = "VISA_TRANSFER" */}))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }
            else if (Model.ApplicationState == "WorkVisa")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onReturnCandidatePool(\"#:ApplicationId#\",\"Rereviewed\",\"WORKER_VISA_MEDICAL\")'>Return to Candidate Pool</button></li><br/><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
           "</ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);

                            // columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);

                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(180).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"VisaAppointmentTaken\")'>Move To Visa Appointment Taken</button>").Title("Action").Width(280).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("#if(TaskId!=null){#<button class='btn btn-info' onclick='onViewTask(\"#:TaskId#\",\"#:TaskTemplateCode#\")'>View</button>#}#").Title("Task").Width(100).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("#if(NextTaskId!=null){#<button class='btn btn-info' onclick='onViewTask(\"#:NextTaskId#\",\"#:NextTaskTemplateCode#\")'>View</button>#}#").Title("Next Task").Width(100).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).Title("Position Name").HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).Title("Organization Name").HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).Title("Batch").HeaderHtmlAttributes(new { title = "Batch" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State" }).Title("Application State").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Status").Width(150);

                            // columns.Bound(p => p.Step1).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\",\"\",\"PRO–Obtain Work Visa & Attach\")'>#:StepNo1#</a>").Title("7.2.1 Obtain Work Visa & Attach - PRO").Width(150);

                            columns.Bound(p => p.Step1).ClientTemplate("#if(StepNo1!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\",\"\",\"APPLY_WORK_VISA_THROUGH_MOL\")'>#:StepNo1#</a>#}#").Title("8.2.1 Apply Work Visa Through MOL").HeaderHtmlAttributes(new { title = "8.2.1 Book QVC Appointment -PRO" }).Width(150);
                            columns.Bound(p => p.Step2).ClientTemplate("#if(StepNo2!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\",\"\",\"PRO–Book QVC Appointment\")'>#:StepNo2#</a>#}#").Title("8.2.2 Book QVC Appointment -PRO").HeaderHtmlAttributes(new { title = "8.2.2 Book QVC Appointment -PRO" }).Width(150);
                            columns.Bound(p => p.Step3).ClientTemplate("#if(StepNo3!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step3#\",\"\",\"Candidate–Conduct Medical & Fingerprint as per QVC appointment date/time\")'>#:StepNo3#</a>#}#").Title("7.2.3 Conduct Medical & Fingerprint - Candidate").HeaderHtmlAttributes(new { title = "8.2.3 Conduct Medical & Fingerprint - Candidate" }).Width(150);
                            columns.Bound(p => p.Step4).ClientTemplate("#if(StepNo4!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step4#\",\"\",\"PRO–Select Fit/Unfit & attach visa copy if fit\")'>#:StepNo4#</a>#}#").Title("8.2.4 Specify Fit/Unfit & attach visa copy if fit - PRO").HeaderHtmlAttributes(new { title = "8.2.4 Specify Fit/Unfit & attach visa copy if fit - PRO" }).Width(150);
                            columns.Bound(p => p.Step5).ClientTemplate("#if(StepNo5!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step5#\",\"\",\"Candidate–Receive Visa Copy & advise traveling date\")'>#:StepNo5#</a>#}#").Title("8.2.5 Receive Visa Copy & advise traveling date - Candidate").HeaderHtmlAttributes(new { title = "8.2.5 Receive Visa Copy & advise traveling date - Candidate" }).Width(150);
                            columns.Bound(p => p.Step6).ClientTemplate("#if(StepNo6!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step6#\",\"\",\"Recruiter–Confirm traveling date\")'>#:StepNo6#</a>#}#").Title("8.2.6.1 Confirm traveling date - Recruiter").HeaderHtmlAttributes(new { title = "8.2.6.1 Confirm traveling date - Recruiter" }).Width(150);
                            columns.Bound(p => p.Step7).ClientTemplate("#if(StepNo7!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step7#\")'>#:StepNo7#</a>#}#").Title("8.2.6.2 Send email for ticket booking - Ticketing team").HeaderHtmlAttributes(new { title = "8.2.6.2 Send email for ticket booking - Ticketing team" }).Width(150);
                            columns.Bound(p => p.Step8).ClientTemplate("#if(StepNo8!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step8#\")'>#:StepNo8#</a>#}#").Title("8.2.6.3 Receive & Attach Ticket, Attach Hotel quarantine booking - Ticketing team").HeaderHtmlAttributes(new { title = "8.2.6.3 Receive & Attach Ticket, Attach Hotel quarantine booking - Ticketing team" }).Width(150);
                            columns.Bound(p => p.Step9).ClientTemplate("#if(StepNo9!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step9#\")'>#:StepNo9#</a>#}#").Title("8.2.6.4 Confirm receipt of ticket & date of travel - Candidate").HeaderHtmlAttributes(new { title = "8.2.6.4 Confirm receipt of ticket & date of travel - Candidate" }).Width(150);
                            columns.Bound(p => p.Step10).ClientTemplate("#if(StepNo10!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step10#\")'>#:StepNo10#</a>#}#").Title("8.2.6.5 Arrange Accommodation - Admin").HeaderHtmlAttributes(new { title = "8.2.6.5 Arrange Accommodation - Admin" }).Width(150);
                            columns.Bound(p => p.Step11).ClientTemplate("#if(StepNo11!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step11#\")'>#:StepNo11#</a>#}#").Title("8.2.6.6 Arrange Vehicle for airport pickup - Plant").HeaderHtmlAttributes(new { title = "8.2.6.6 Arrange Vehicle for airport pickup - Plant" }).Width(150);



                            //columns.Bound(p => p.TotalWorkExperience).Width(150);
                            //columns.Bound(p => p.ContactPhoneHome).Title("Mobile").Width(150);
                            //columns.Bound(p => p.Score).Width(150);
                            //columns.Bound(p => p.Gender).Width(150);
                            //columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.Age).Width(150);
                            //columns.Bound(p => p.BirthPlace).Width(150);
                            //columns.Bound(p => p.Nationality).Width(150);
                            //columns.Bound(p => p.BloodGroup).Width(150);
                            //columns.Bound(p => p.MaritalStatus).Width(150);
                            //columns.Bound(p => p.PassportNumber).Width(150);
                            //columns.Bound(p => p.PassportIssueCountry).Width(150);
                            //columns.Bound(p => p.PassportExpiryDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.QatarId).Width(150);
                            //columns.Bound(p => p.CurrentAddressHouse).Width(150);
                            //columns.Bound(p => p.CurrentAddressStreet).Width(150);
                            //columns.Bound(p => p.CurrentAddressCity).Width(150);
                            //columns.Bound(p => p.CurrentAddressState).Width(150);
                            //columns.Bound(p => p.CurrentAddressCountryName).Width(150);
                            //columns.Bound(p => p.PermanentAddressHouse).Width(150);
                            //columns.Bound(p => p.PermanentAddressStreet).Width(150);
                            //columns.Bound(p => p.PermanentAddressCity).Width(150);
                            //columns.Bound(p => p.PermanentAddressState).Width(150);
                            //columns.Bound(p => p.PermanentAddressCountryName).Width(150);

                            //columns.Bound(p => p.ContactPhoneLocal).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            //columns.Bound(p => p.SalaryCurrencyName).Title("Salary Currency").Width(150);
                            ////columns.Bound(p => p.IndianSalary).Width(150);
                            ////columns.Bound(p => p.OverseasSalary).Width(150);
                            //columns.Bound(p => p.NetSalary).Title("Net Salary After Income Tax").Width(150);
                            //columns.Bound(p => p.OtherAllowance).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable().Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("GetJobAdvertismentApplication", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState, tempcode= "WORKER_VISA_MEDICAL", tempCodeOther = "TRAVEL", permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }

            else if (Model.ApplicationState == "VisaTransfer")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onReturnCandidatePool(\"#:ApplicationId#\",\"Rereviewed\",\"VISA_TRANSFER\")'>Return to Candidate Pool</button></li><br/><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
           "</ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);

                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='OnOffer(\"#:ApplicationId#\")'>View Final Offer</button>").Title("Action").Width(120).Locked(true).Lockable(false);

                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"MedicalCompleted\")'>Move To Medical Complete</button>").Title("Action").Width(120).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("#if(TaskId==null){#<button class='btn btn-info' onclick='onRaiseTaskMedical(\"#:ApplicationId#\")'>Raise</button>#}else{#<button class='btn btn-info' onclick='onViewTask(\"#:TaskId#\",\"#:TaskTemplateCode#\")'>View</button>#}#").Title("Task").Width(100).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).Title("Position Name").HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).Title("Organization Name").HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).Title("Batch").HeaderHtmlAttributes(new { title = "Batch" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State" }).Title("Application State").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Status" }).Title("Status").Width(150);

                            columns.Bound(p => p.Step1).ClientTemplate("#if(StepNo1!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\")'>#:StepNo1#</a>#}#").Title("8.3.1 Submit Visa transfer documents - Candidate").HeaderHtmlAttributes(new { title = "8.3.1 Submit Visa transfer documents - Candidate" }).Width(150);
                            columns.Bound(p => p.Step2).ClientTemplate("#if(StepNo2!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\")'>#:StepNo2#</a>#}#").Title("8.3.2 Verify documents - Recruiter").HeaderHtmlAttributes(new { title = "8.3.2 Verify documents - Recruiter" }).Width(150);
                            columns.Bound(p => p.Step3).ClientTemplate("#if(StepNo3!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step3#\")'>#:StepNo3#</a>#}#").Title("8.3.3 Submit visa transfer & confirm sponsorship change - PRO").HeaderHtmlAttributes(new { title = "8.3.3 Submit visa transfer & confirm sponsorship change - PRO" }).Width(150);
                            columns.Bound(p => p.Step4).ClientTemplate("#if(StepNo4!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step4#\")'>#:StepNo4#</a>#}#").Title("8.3.4 Verify visa transfer completed - Recruiter").HeaderHtmlAttributes(new { title = "8.3.4 Verify visa transfer completed - Recruiter" }).Width(150);
                            columns.Bound(p => p.Step5).ClientTemplate("#if(StepNo5!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step5#\")'>#:StepNo5#</a>#}#").Title("8.3.5 Receive visa transfer Confirmation, inform joining date - Candidate").HeaderHtmlAttributes(new { title = "8.3.5 Receive visa transfer Confirmation, inform joining date - Candidate" }).Width(150);

                            //columns.Bound(p => p.TotalWorkExperience).Width(150);
                            //columns.Bound(p => p.ContactPhoneHome).Title("Mobile").Width(150);
                            //columns.Bound(p => p.Score).Width(150);
                            //columns.Bound(p => p.Gender).Width(150);
                            //columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.Age).Width(150);
                            //columns.Bound(p => p.BirthPlace).Width(150);
                            //columns.Bound(p => p.Nationality).Width(150);
                            //columns.Bound(p => p.BloodGroup).Width(150);
                            //columns.Bound(p => p.MaritalStatus).Width(150);
                            //columns.Bound(p => p.PassportNumber).Width(150);
                            //columns.Bound(p => p.PassportIssueCountry).Width(150);
                            //columns.Bound(p => p.PassportExpiryDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.QatarId).Width(150);
                            //columns.Bound(p => p.CurrentAddressHouse).Width(150);
                            //columns.Bound(p => p.CurrentAddressStreet).Width(150);
                            //columns.Bound(p => p.CurrentAddressCity).Width(150);
                            //columns.Bound(p => p.CurrentAddressState).Width(150);
                            //columns.Bound(p => p.CurrentAddressCountryName).Width(150);
                            //columns.Bound(p => p.PermanentAddressHouse).Width(150);
                            //columns.Bound(p => p.PermanentAddressStreet).Width(150);
                            //columns.Bound(p => p.PermanentAddressCity).Width(150);
                            //columns.Bound(p => p.PermanentAddressState).Width(150);
                            //columns.Bound(p => p.PermanentAddressCountryName).Width(150);

                            //columns.Bound(p => p.ContactPhoneLocal).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            //columns.Bound(p => p.SalaryCurrencyName).Title("Salary Currency").Width(150);
                            //// columns.Bound(p => p.IndianSalary).Width(150);
                            ////columns.Bound(p => p.OverseasSalary).Width(150);
                            //columns.Bound(p => p.NetSalary).Title("Net Salary After Income Tax").Width(150);
                            //columns.Bound(p => p.OtherAllowance).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable().Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("GetJobAdvertismentApplication", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState, tempcode = "VISA_TRANSFER", permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }
            else if (Model.ApplicationState == "WorkPermit")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onReturnCandidatePool(\"#:ApplicationId#\",\"Rereviewed\",\"LOCAL_WORK_PERMIT\")'>Return to Candidate Pool</button></li><br/><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
           "</ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);

                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='OnOffer(\"#:ApplicationId#\")'>View Final Offer</button>").Title("Action").Width(120).Locked(true).Lockable(false);

                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"MedicalCompleted\")'>Move To Medical Complete</button>").Title("Action").Width(120).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("#if(TaskId==null){#<button class='btn btn-info' onclick='onRaiseTaskMedical(\"#:ApplicationId#\")'>Raise</button>#}else{#<button class='btn btn-info' onclick='onViewTask(\"#:TaskId#\",\"#:TaskTemplateCode#\")'>View</button>#}#").Title("Task").Width(100).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).Title("Position Name").HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).Title("Organization Name").HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).Title("Batch").HeaderHtmlAttributes(new { title = "Batch" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State" }).Title("Application State").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Status" }).Title("Status").Width(150);

                            columns.Bound(p => p.Step1).ClientTemplate("#if(StepNo1!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\")'>#:StepNo1#</a>#}#").Title("8.4.1 Submit Work Permit Documents – Candidate").HeaderHtmlAttributes(new { title = "8.4.1 Submit Work Permit Documents – Candidate" }).Width(150);
                            columns.Bound(p => p.Step2).ClientTemplate("#if(StepNo2!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\")'>#:StepNo2#</a>#}#").Title("8.4.2 Verify Documents – Recruiter").HeaderHtmlAttributes(new { title = "8.4.2 Verify Documents – Recruiter" }).Width(150);
                            columns.Bound(p => p.Step3).ClientTemplate("#if(StepNo3!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step3#\")'>#:StepNo3#</a>#}#").Title("8.4.3 Obtain Work Permit & Attach – PRO").HeaderHtmlAttributes(new { title = "8.4.3 Obtain Work Permit & Attach – PRO" }).Width(150);
                            columns.Bound(p => p.Step4).ClientTemplate("#if(StepNo4!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step4#\")'>#:StepNo4#</a>#}#").Title("8.4.4 Verify visa transfer completed - Recruiter").HeaderHtmlAttributes(new { title = "8.4.4 Verify visa transfer completed - Recruiter" }).Width(150);
                            columns.Bound(p => p.Step5).ClientTemplate("#if(StepNo5!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step5#\")'>#:StepNo5#</a>#}#").Title("8.4.5 Receive work permit, inform joining date - Candidate").HeaderHtmlAttributes(new { title = "8.4.5 Receive work permit, inform joining date - Candidate" }).Width(150);

                            //columns.Bound(p => p.TotalWorkExperience).Width(150);
                            //columns.Bound(p => p.ContactPhoneHome).Title("Mobile").Width(150);
                            //columns.Bound(p => p.Score).Width(150);
                            //columns.Bound(p => p.Gender).Width(150);
                            //columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.Age).Width(150);
                            //columns.Bound(p => p.BirthPlace).Width(150);
                            //columns.Bound(p => p.Nationality).Width(150);
                            //columns.Bound(p => p.BloodGroup).Width(150);
                            //columns.Bound(p => p.MaritalStatus).Width(150);
                            //columns.Bound(p => p.PassportNumber).Width(150);
                            //columns.Bound(p => p.PassportIssueCountry).Width(150);
                            //columns.Bound(p => p.PassportExpiryDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.QatarId).Width(150);
                            //columns.Bound(p => p.CurrentAddressHouse).Width(150);
                            //columns.Bound(p => p.CurrentAddressStreet).Width(150);
                            //columns.Bound(p => p.CurrentAddressCity).Width(150);
                            //columns.Bound(p => p.CurrentAddressState).Width(150);
                            //columns.Bound(p => p.CurrentAddressCountryName).Width(150);
                            //columns.Bound(p => p.PermanentAddressHouse).Width(150);
                            //columns.Bound(p => p.PermanentAddressStreet).Width(150);
                            //columns.Bound(p => p.PermanentAddressCity).Width(150);
                            //columns.Bound(p => p.PermanentAddressState).Width(150);
                            //columns.Bound(p => p.PermanentAddressCountryName).Width(150);

                            //columns.Bound(p => p.ContactPhoneLocal).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            //columns.Bound(p => p.SalaryCurrencyName).Title("Salary Currency").Width(150);
                            //// columns.Bound(p => p.IndianSalary).Width(150);
                            ////columns.Bound(p => p.OverseasSalary).Width(150);
                            //columns.Bound(p => p.NetSalary).Title("Net Salary After Income Tax").Width(150);
                            //columns.Bound(p => p.OtherAllowance).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable().Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("GetJobAdvertismentApplication", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState, tempcode = "LOCAL_WORK_PERMIT", permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }



            else if (Model.ApplicationState == "StaffJoined")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onReturnCandidatePool(\"#:ApplicationId#\",\"Rereviewed\",\"STAFF_JOINING_FORMALITIES\")'>Return to Candidate Pool</button></li><br/><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
            "<li><button class='btn btn-info' onclick='onViewWorker(\"#:ApplicationId#\")'>Joining Report</button></li>" +
                 "<li><button class='btn btn-info' onclick='onViewPersonal(\"#:ApplicationId#\")'>PersonalData</button></li>" +
                 "<li><button class='btn btn-info' onclick='onViewDeclaration(\"#:ApplicationId#\")'>Nomination for Benefits</button></li>" +
                 "<li><button class='btn btn-info' onclick='onConfAgreement(\"#:ApplicationId#\")'>Confidentiality Agreement</button></li>" +
                 "<li><button class='btn btn-info' onclick='onViewCompetenceMatrix(\"#:ApplicationId#\")'>Competence Matrix Report</button></li>"+
           "</ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);

                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);

                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(180).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onAddSourcing(\"#:ApplicationId#\")'>Edit</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onViewWorker(\"#:ApplicationId#\")'>Workers</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onViewPersonal(\"#:ApplicationId#\")'>PersonalData</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onViewDeclaration(\"#:ApplicationId#\")'>Declaration</button>").Title("").Width(150).Locked(true).Lockable(false);

                            // columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"Joined\")'>Joined</button>").Title("Action").Width(280).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).Title("Position Name").HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).Title("Organization Name").HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).Title("Batch").HeaderHtmlAttributes(new { title = "Batch" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State Name" }).Title("Application State").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).HeaderHtmlAttributes(new { title = "Name" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Status").Width(150);

                            columns.Bound(p => p.Step1).ClientTemplate("#if(StepNo1!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\")'>#:StepNo1#</a>#}#").Title("9.1.1 Fill forms, Sign documents - HR").HeaderHtmlAttributes(new { title = "9.1.1 Fill forms, Sign documents - HR" }).Width(150);
                            //columns.Bound(p => p.Step2).ClientTemplate("#if(StepNo2!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\")'>#:StepNo2#</a>#}#").Title("8.1.2 Provide cash voucher - HR").HeaderHtmlAttributes(new { title = "8.1.2 Provide cash voucher - HR" }).Width(150);
                            //columns.Bound(p => p.Step3).ClientTemplate("#if(StepNo3!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step3#\")'>#:StepNo3#</a>#}#").Title("8.1.3 Send intimation email to Org Unit HO copying IT– HR").HeaderHtmlAttributes(new { title = "8.1.3 Send intimation email to Org Unit HO copying IT– HR" }).Width(150);
                            //columns.Bound(p => p.Step4).ClientTemplate("#if(StepNo4!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step4#\")'>#:StepNo4#</a>#}#").Title("8.1.4 Send FRA/HRA Request to Finance via email – HR").HeaderHtmlAttributes(new { title = "8.1.4 Send FRA/HRA Request to Finance via email – HR" }).Width(150);
                            //columns.Bound(p => p.Step5).ClientTemplate("#if(StepNo5!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step5#\")'>#:StepNo5#</a>#}#").Title("8.1.5 Upload Passport, Visa/Qatar ID in System - HR").HeaderHtmlAttributes(new { title = "8.1.5 Upload Passport, Visa/Qatar ID in System - HR" }).Width(150);
                            //columns.Bound(p => p.Step6).ClientTemplate("#if(StepNo6!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step6#\")'>#:StepNo6#</a>#}#").Title("8.1.6 Update employee file in SAP – HR").HeaderHtmlAttributes(new { title = "8.1.6 Update employee file in SAP – HR" }).Width(150);
                            //columns.Bound(p => p.Step7).ClientTemplate("#if(StepNo7!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step7#\")'>#:StepNo7#</a>#}#").Title("8.1.7 Confirm induction date to candidate – HR").HeaderHtmlAttributes(new { title = "8.1.7 Confirm induction date to candidate – HR" }).Width(150);

                            //columns.Bound(p => p.TotalWorkExperience).Width(150);
                            //columns.Bound(p => p.ContactPhoneHome).Title("Mobile").Width(150);
                            //columns.Bound(p => p.Score).Width(150);
                            //columns.Bound(p => p.Gender).Width(150);
                            //columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.Age).Width(150);
                            //columns.Bound(p => p.BirthPlace).Width(150);
                            //columns.Bound(p => p.Nationality).Width(150);
                            //columns.Bound(p => p.BloodGroup).Width(150);
                            //columns.Bound(p => p.MaritalStatus).Width(150);
                            //columns.Bound(p => p.PassportNumber).Width(150);
                            //columns.Bound(p => p.PassportIssueCountry).Width(150);
                            //columns.Bound(p => p.PassportExpiryDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.QatarId).Width(150);
                            //columns.Bound(p => p.CurrentAddressHouse).Width(150);
                            //columns.Bound(p => p.CurrentAddressStreet).Width(150);
                            //columns.Bound(p => p.CurrentAddressCity).Width(150);
                            //columns.Bound(p => p.CurrentAddressState).Width(150);
                            //columns.Bound(p => p.CurrentAddressCountryName).Width(150);
                            //columns.Bound(p => p.PermanentAddressHouse).Width(150);
                            //columns.Bound(p => p.PermanentAddressStreet).Width(150);
                            //columns.Bound(p => p.PermanentAddressCity).Width(150);
                            //columns.Bound(p => p.PermanentAddressState).Width(150);
                            //columns.Bound(p => p.PermanentAddressCountryName).Width(150);

                            //columns.Bound(p => p.ContactPhoneLocal).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            //columns.Bound(p => p.SalaryCurrencyName).Title("Salary Currency").Width(150);
                            ////columns.Bound(p => p.IndianSalary).Width(150);
                            ////columns.Bound(p => p.OverseasSalary).Width(150);
                            //columns.Bound(p => p.NetSalary).Title("Net Salary After Income Tax").Width(150);
                            //columns.Bound(p => p.OtherAllowance).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable()
                        .Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("GetJobAdvertismentApplication", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState, tempcode = "STAFF_JOINING_FORMALITIES", permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }

            else if (Model.ApplicationState == "PostStaffJoined")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onReturnCandidatePool(\"#:ApplicationId#\",\"Rereviewed\",\"STAFF_JOINING_FORMALITIES\")'>Return to Candidate Pool</button></li><br/><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
            "<li><button class='btn btn-info' onclick='onViewWorker(\"#:ApplicationId#\")'>Joining Report</button></li>" +
                 "<li><button class='btn btn-info' onclick='onViewPersonal(\"#:ApplicationId#\")'>PersonalData</button></li>" +
                 "<li><button class='btn btn-info' onclick='onViewDeclaration(\"#:ApplicationId#\")'>Nomination for Benefits</button></li>" +
                 "<li><button class='btn btn-info' onclick='onConfAgreement(\"#:ApplicationId#\")'>Confidentiality Agreement</button></li>" +
                 "<li><button class='btn btn-info' onclick='onViewCompetenceMatrix(\"#:ApplicationId#\")'>Competence Matrix Report</button></li>"+
           "</ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);

                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);

                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(180).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onAddSourcing(\"#:ApplicationId#\")'>Edit</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onViewWorker(\"#:ApplicationId#\")'>Workers</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onViewPersonal(\"#:ApplicationId#\")'>PersonalData</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onViewDeclaration(\"#:ApplicationId#\")'>Declaration</button>").Title("").Width(150).Locked(true).Lockable(false);

                            // columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"Joined\")'>Joined</button>").Title("Action").Width(280).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).Title("Position Name").HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).Title("Organization Name").HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).Title("Batch").HeaderHtmlAttributes(new { title = "Batch" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State Name" }).Title("Application State").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).HeaderHtmlAttributes(new { title = "Name" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Status").Width(150);

                            //columns.Bound(p => p.Step1).ClientTemplate("#if(StepNo1!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\")'>#:StepNo1#</a>#}#").Title("8.1.1 Fill forms, Sign documents - HR").HeaderHtmlAttributes(new { title = "8.1.1 Fill forms, Sign documents - HR" }).Width(150);
                            columns.Bound(p => p.Step2).ClientTemplate("#if(StepNo2!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\")'>#:StepNo2#</a>#}#").Title("12.1.1 Provide cash voucher - HR").HeaderHtmlAttributes(new { title = "12.1.1 Provide cash voucher - HR" }).Width(150);
                            columns.Bound(p => p.Step3).ClientTemplate("#if(StepNo3!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step3#\")'>#:StepNo3#</a>#}#").Title("12.1.2 Send intimation email to Org Unit HO copying IT– HR").HeaderHtmlAttributes(new { title = "12.1.2 Send intimation email to Org Unit HO copying IT– HR" }).Width(150);
                            columns.Bound(p => p.Step4).ClientTemplate("#if(StepNo4!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step4#\")'>#:StepNo4#</a>#}#").Title("12.1.3 Send FRA/HRA Request to Finance via email – HR").HeaderHtmlAttributes(new { title = "12.1.3 Send FRA/HRA Request to Finance via email – HR" }).Width(150);
                            columns.Bound(p => p.Step5).ClientTemplate("#if(StepNo5!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step5#\")'>#:StepNo5#</a>#}#").Title("12.1.4 Upload Passport, Visa/Qatar ID in System - HR").HeaderHtmlAttributes(new { title = "12.1.4 Upload Passport, Visa/Qatar ID in System - HR" }).Width(150);
                            columns.Bound(p => p.Step6).ClientTemplate("#if(StepNo6!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step6#\")'>#:StepNo6#</a>#}#").Title("12.1.5 Update employee file in SAP – HR").HeaderHtmlAttributes(new { title = "12.1.5 Update employee file in SAP – HR" }).Width(150);
                            columns.Bound(p => p.Step7).ClientTemplate("#if(StepNo7!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step7#\")'>#:StepNo7#</a>#}#").Title("12.1.6 Confirm induction date to candidate – HR").HeaderHtmlAttributes(new { title = "12.1.6 Confirm induction date to candidate – HR" }).Width(150);
                            columns.Bound(p => p.Step8).ClientTemplate("#if(StepNo8!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step8#\")'>#:StepNo8#</a>#}#").Title("12.1.7 Confirm/Reject/Extend Probation Date – HM").HeaderHtmlAttributes(new { title = "12.1.7 Confirm/Reject/Extend Probation Date – HM" }).Width(150);
                            columns.Bound(p => p.Step9).ClientTemplate("#if(StepNo9!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step9#\")'>#:StepNo9#</a>#}#").Title("12.1.8 Confirm/Reject/Extend Probation Date – HR").HeaderHtmlAttributes(new { title = "12.1.8 Confirm/Reject/Extend Probation Date – HR" }).Width(150);

                            //columns.Bound(p => p.TotalWorkExperience).Width(150);
                            //columns.Bound(p => p.ContactPhoneHome).Title("Mobile").Width(150);
                            //columns.Bound(p => p.Score).Width(150);
                            //columns.Bound(p => p.Gender).Width(150);
                            //columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.Age).Width(150);
                            //columns.Bound(p => p.BirthPlace).Width(150);
                            //columns.Bound(p => p.Nationality).Width(150);
                            //columns.Bound(p => p.BloodGroup).Width(150);
                            //columns.Bound(p => p.MaritalStatus).Width(150);
                            //columns.Bound(p => p.PassportNumber).Width(150);
                            //columns.Bound(p => p.PassportIssueCountry).Width(150);
                            //columns.Bound(p => p.PassportExpiryDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.QatarId).Width(150);
                            //columns.Bound(p => p.CurrentAddressHouse).Width(150);
                            //columns.Bound(p => p.CurrentAddressStreet).Width(150);
                            //columns.Bound(p => p.CurrentAddressCity).Width(150);
                            //columns.Bound(p => p.CurrentAddressState).Width(150);
                            //columns.Bound(p => p.CurrentAddressCountryName).Width(150);
                            //columns.Bound(p => p.PermanentAddressHouse).Width(150);
                            //columns.Bound(p => p.PermanentAddressStreet).Width(150);
                            //columns.Bound(p => p.PermanentAddressCity).Width(150);
                            //columns.Bound(p => p.PermanentAddressState).Width(150);
                            //columns.Bound(p => p.PermanentAddressCountryName).Width(150);

                            //columns.Bound(p => p.ContactPhoneLocal).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            //columns.Bound(p => p.SalaryCurrencyName).Title("Salary Currency").Width(150);
                            ////columns.Bound(p => p.IndianSalary).Width(150);
                            ////columns.Bound(p => p.OverseasSalary).Width(150);
                            //columns.Bound(p => p.NetSalary).Title("Net Salary After Income Tax").Width(150);
                            //columns.Bound(p => p.OtherAllowance).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable()
                        .Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("GetJobAdvertismentApplication", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState, tempcode = "STAFF_JOINING_FORMALITIES", tempCodeOther= "STAFF_CONFIRM_PROBATION_DATE", permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }

            else if (Model.ApplicationState == "WorkerJoined")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onReturnCandidatePool(\"#:ApplicationId#\",\"Rereviewed\",\"WORKER_JOINING_FORMALITIES\")'>Return to Candidate Pool</button></li><br/><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onViewWorker(\"#:ApplicationId#\")'>Joining Report</button></li>" +
                 "<li><button class='btn btn-info' onclick='onViewPersonal(\"#:ApplicationId#\")'>PersonalData</button></li>"+
                 "<li><button class='btn btn-info' onclick='onViewDeclaration(\"#:ApplicationId#\")'>Nomination for Benefits</button></li>"+
                 "<li><button class='btn btn-info' onclick='onConfAgreement(\"#:ApplicationId#\")'>Confidentiality Agreement</button></li>"+
                 "<li><button class='btn btn-info' onclick='onViewCompetenceMatrix(\"#:ApplicationId#\")'>Competence Matrix Report</button></li></ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);

                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);

                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(180).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onAddSourcing(\"#:ApplicationId#\")'>Edit</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onViewWorker(\"#:ApplicationId#\")'>Workers</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onViewPersonal(\"#:ApplicationId#\")'>PersonalData</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onViewDeclaration(\"#:ApplicationId#\")'>Declaration</button>").Title("").Width(150).Locked(true).Lockable(false);

                            // columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"Joined\")'>Joined</button>").Title("Action").Width(280).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).Title("Position Name").HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).Title("Organization Name").HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).Title("Batch").HeaderHtmlAttributes(new { title = "Batch" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State Name" }).Title("Application State").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Status").Width(150);

                            columns.Bound(p => p.Step1).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\")'>#:StepNo1#</a>").Title("10.1.1 Fill forms, Sign documents – HR").HeaderHtmlAttributes(new { title = "10.1.1 Fill forms, Sign documents – HR" }).Width(150);
                            //columns.Bound(p => p.Step2).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\")'>#:StepNo2#</a>").Title("8.2.2 Provide Cash Voucher – HR").HeaderHtmlAttributes(new { title = "8.2.2 Provide Cash Voucher – HR" }).Width(150);
                            //columns.Bound(p => p.Step3).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step3#\")'>#:StepNo3#</a>").Title("8.2.3 Upload Passport, Visa/Qatar ID in System – HR").HeaderHtmlAttributes(new { title = "8.2.3 Upload Passport, Visa/Qatar ID in System – HR" }).Width(150);
                            //columns.Bound(p => p.Step4).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step4#\")'>#:StepNo4#</a>").Title("8.2.4 Update employee file in SAP – HR").HeaderHtmlAttributes(new { title = "8.2.4 Update employee file in SAP – HR" }).Width(150);
                            //columns.Bound(p => p.Step5).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step5#\")'>#:StepNo5#</a>").Title("8.2.5 Conduct Induction – HR").HeaderHtmlAttributes(new { title = "8.2.5 Conduct Induction – HR" }).Width(150);
                            // columns.Bound(p => p.Step6).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step6#\")'>#:StepNo6#</a>").Title("8.2.6 Confirm Induction Date to candidate - HR").Width(150);


                            //columns.Bound(p => p.TotalWorkExperience).Width(150);
                            //columns.Bound(p => p.ContactPhoneHome).Title("Mobile").Width(150);
                            //columns.Bound(p => p.Score).Width(150);
                            //columns.Bound(p => p.Gender).Width(150);
                            //columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.Age).Width(150);
                            //columns.Bound(p => p.BirthPlace).Width(150);
                            //columns.Bound(p => p.Nationality).Width(150);
                            //columns.Bound(p => p.BloodGroup).Width(150);
                            //columns.Bound(p => p.MaritalStatus).Width(150);
                            //columns.Bound(p => p.PassportNumber).Width(150);
                            //columns.Bound(p => p.PassportIssueCountry).Width(150);
                            //columns.Bound(p => p.PassportExpiryDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.QatarId).Width(150);
                            //columns.Bound(p => p.CurrentAddressHouse).Width(150);
                            //columns.Bound(p => p.CurrentAddressStreet).Width(150);
                            //columns.Bound(p => p.CurrentAddressCity).Width(150);
                            //columns.Bound(p => p.CurrentAddressState).Width(150);
                            //columns.Bound(p => p.CurrentAddressCountryName).Width(150);
                            //columns.Bound(p => p.PermanentAddressHouse).Width(150);
                            //columns.Bound(p => p.PermanentAddressStreet).Width(150);
                            //columns.Bound(p => p.PermanentAddressCity).Width(150);
                            //columns.Bound(p => p.PermanentAddressState).Width(150);
                            //columns.Bound(p => p.PermanentAddressCountryName).Width(150);

                            //columns.Bound(p => p.ContactPhoneLocal).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            //columns.Bound(p => p.SalaryCurrencyName).Title("Salary Currency").Width(150);
                            ////columns.Bound(p => p.IndianSalary).Width(150);
                            ////columns.Bound(p => p.OverseasSalary).Width(150);
                            //columns.Bound(p => p.NetSalary).Title("Net Salary After Income Tax").Width(150);
                            //columns.Bound(p => p.OtherAllowance).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable()
                        .Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("GetJobAdvertismentApplication", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState, tempcode = "WORKER_JOINING_FORMALITIES", permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }



            else if (Model.ApplicationState == "PostWorkerJoined")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onReturnCandidatePool(\"#:ApplicationId#\",\"Rereviewed\",\"WORKER_JOINING_FORMALITIES\")'>Return to Candidate Pool</button></li><br/><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br/><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/>" +
           "<li><button class='btn btn-info' onclick='onViewWorker(\"#:ApplicationId#\")'>Joining Report</button></li>" +
                 "<li><button class='btn btn-info' onclick='onViewPersonal(\"#:ApplicationId#\")'>PersonalData</button></li>"+
                 "<li><button class='btn btn-info' onclick='onViewDeclaration(\"#:ApplicationId#\")'>Nomination for Benefits</button></li>"+
                 "<li><button class='btn btn-info' onclick='onConfAgreement(\"#:ApplicationId#\")'>Confidentiality Agreement</button></li>"+
                 "<li><button class='btn btn-info' onclick='onViewCompetenceMatrix(\"#:ApplicationId#\")'>Competence Matrix Report</button></li></ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).Locked(true).Lockable(false);
                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button>").Title("Comment").Width(150).Locked(true).Lockable(false);

                            //columns.Bound(c => c.CandidateProfileId).ClientTemplate("<a href='javascript:OnApplication(\"#=CandidateProfileId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("View").Width(100).Locked(true).Lockable(false);

                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application State Report</button>").Title("Application State Report").Width(180).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onAddSourcing(\"#:ApplicationId#\")'>Edit</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onViewWorker(\"#:ApplicationId#\")'>Workers</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onViewPersonal(\"#:ApplicationId#\")'>PersonalData</button>").Title("").Width(150).Locked(true).Lockable(false);
                            //columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-info' onclick='onViewDeclaration(\"#:ApplicationId#\")'>Declaration</button>").Title("").Width(150).Locked(true).Lockable(false);

                            // columns.Bound(c => c.ApplicationState).ClientTemplate("<button class='btn btn-info' onclick='UpdateStatus(\"#:CandidateType#\",\"#:ApplicationStatusCode#\",\"#:ApplicationId#\",\"#:CandidateProfileId#\",\"Joined\")'>Joined</button>").Title("Action").Width(280).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).Title("Position Name").HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).Title("Organization Name").HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).Title("Batch").HeaderHtmlAttributes(new { title = "Batch" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State Name" }).Title("Application State").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                            columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Status").Width(150);

                            //columns.Bound(p => p.Step1).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step1#\")'>#:StepNo1#</a>").Title("8.2.1 Fill forms, Sign documents – HR").HeaderHtmlAttributes(new { title = "8.2.1 Fill forms, Sign documents – HR" }).Width(150);
                            columns.Bound(p => p.Step2).ClientTemplate("#if(StepNo2!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step2#\")'>#:StepNo2#</a>#}#").Title("13.1 Provide Cash Voucher – HR").HeaderHtmlAttributes(new { title = "13.1 Provide Cash Voucher – HR" }).Width(150);
                            columns.Bound(p => p.Step3).ClientTemplate("#if(StepNo3!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step3#\")'>#:StepNo3#</a>#}#").Title("13.2 Upload Passport, Visa/Qatar ID in System – HR").HeaderHtmlAttributes(new { title = "13.2 Upload Passport, Visa/Qatar ID in System – HR" }).Width(150);
                            columns.Bound(p => p.Step4).ClientTemplate("#if(StepNo4!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step4#\")'>#:StepNo4#</a>#}#").Title("13.3 Update employee file in SAP – HR").HeaderHtmlAttributes(new { title = "13.3 Update employee file in SAP – HR" }).Width(150);
                            columns.Bound(p => p.Step5).ClientTemplate("#if(StepNo5!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step5#\")'>#:StepNo5#</a>#}#").Title("13.4 Conduct Induction – HR").HeaderHtmlAttributes(new { title = "13.4 Conduct Induction – HR" }).Width(150);
                            columns.Bound(p => p.Step6).ClientTemplate("#if(StepNo6!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step6#\")'>#:StepNo6#</a>#}#").Title("13.5 Confirm/Reject/Extend Probation Date – HM").HeaderHtmlAttributes(new { title = "13.5 Confirm/Reject/Extend Probation Date – HM" }).Width(150);
                            columns.Bound(p => p.Step7).ClientTemplate("#if(StepNo7!=null){#<a style='cursor:pointer;color:blue' onclick='onViewTask(\"#:Step7#\")'>#:StepNo7#</a>#}#").Title("13.6 Confirm/Reject/Extend Probation Date – HR").HeaderHtmlAttributes(new { title = "13.6 Confirm/Reject/Extend Probation Date – HR" }).Width(150);


                            //columns.Bound(p => p.TotalWorkExperience).Width(150);
                            //columns.Bound(p => p.ContactPhoneHome).Title("Mobile").Width(150);
                            //columns.Bound(p => p.Score).Width(150);
                            //columns.Bound(p => p.Gender).Width(150);
                            //columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.Age).Width(150);
                            //columns.Bound(p => p.BirthPlace).Width(150);
                            //columns.Bound(p => p.Nationality).Width(150);
                            //columns.Bound(p => p.BloodGroup).Width(150);
                            //columns.Bound(p => p.MaritalStatus).Width(150);
                            //columns.Bound(p => p.PassportNumber).Width(150);
                            //columns.Bound(p => p.PassportIssueCountry).Width(150);
                            //columns.Bound(p => p.PassportExpiryDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.QatarId).Width(150);
                            //columns.Bound(p => p.CurrentAddressHouse).Width(150);
                            //columns.Bound(p => p.CurrentAddressStreet).Width(150);
                            //columns.Bound(p => p.CurrentAddressCity).Width(150);
                            //columns.Bound(p => p.CurrentAddressState).Width(150);
                            //columns.Bound(p => p.CurrentAddressCountryName).Width(150);
                            //columns.Bound(p => p.PermanentAddressHouse).Width(150);
                            //columns.Bound(p => p.PermanentAddressStreet).Width(150);
                            //columns.Bound(p => p.PermanentAddressCity).Width(150);
                            //columns.Bound(p => p.PermanentAddressState).Width(150);
                            //columns.Bound(p => p.PermanentAddressCountryName).Width(150);

                            //columns.Bound(p => p.ContactPhoneLocal).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            //columns.Bound(p => p.SalaryCurrencyName).Title("Salary Currency").Width(150);
                            ////columns.Bound(p => p.IndianSalary).Width(150);
                            ////columns.Bound(p => p.OverseasSalary).Width(150);
                            //columns.Bound(p => p.NetSalary).Title("Net Salary After Income Tax").Width(150);
                            //columns.Bound(p => p.OtherAllowance).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable()
                        .Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                         .Read(read => read.Action("GetJobAdvertismentApplication", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState, tempcode = "WORKER_JOINING_FORMALITIES", tempCodeOther= "WORKER_CONFIRM_PROBATION_DATE", permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }
            else if (Model.ApplicationState == "Joined")
            {
                @(Html.Kendo().Grid<ApplicationViewModel>
                        ().Name("kgrdCandInterview").Resizable(resize => resize.Columns(true))
                        .Columns(columns =>
                        {

                            columns.Bound(c => c.CandidateProfileId).ClientTemplate("<div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown' >Actions</button><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='onAddComment(\"#:ApplicationId#\",\"#:ApplicationState#\")'>Add Comment</button></li><br><li><button class='btn btn-info' onclick='OnApplication(\"#=CandidateProfileId#\",\"#:ApplicationId#\");'><i class='far fa-address-card'></i>&nbsp;View</button></li><br><li><button class='btn btn-info' onclick='OnViewAppStateTrack(\"#:ApplicationId#\")'>Application Status Report</button></li><br/></ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" }).HtmlAttributes(new { style = "text-align:center" }).Locked(true).Lockable(false);
                            columns.Bound(p => p.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.PositionName).Title("Position Name").HeaderHtmlAttributes(new { title = "Position Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.OrganizationName).Title("Organization Name").HeaderHtmlAttributes(new { title = "Organization Name" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.BatchName).Title("Batch").HeaderHtmlAttributes(new { title = "Batch" }).Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.GaecNo).HeaderHtmlAttributes(new { title = "GAEC No" }).Title("GAEC No").Width(120).Locked(true).Lockable(false);
                            columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150).Locked(true).Lockable(false);
                            columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                            columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                            columns.Bound(p => p.JoiningDate).HeaderHtmlAttributes(new { title = "Joining Date" }).Title("Joining Date").Width(150).Format("{0:dd MMM yyyy}");
                            columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);


                            //columns.Bound(p => p.TotalWorkExperience).Width(150);
                            columns.Bound(p => p.ContactPhoneHome).HeaderHtmlAttributes(new { title = "Mobile" }).Title("Mobile").Width(150);
                            //columns.Bound(p => p.Score).Width(150);
                            columns.Bound(p => p.Gender).HeaderHtmlAttributes(new { title = "Gender" }).Width(150);
                            //columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                            columns.Bound(p => p.Age).HeaderHtmlAttributes(new { title = "Age" }).Width(150);
                            //columns.Bound(p => p.BirthPlace).Width(150);
                            columns.Bound(p => p.Nationality).HeaderHtmlAttributes(new { title = "Nationality" }).Width(150);
                            columns.Bound(p => p.BloodGroup).HeaderHtmlAttributes(new { title = "BloodGroup" }).Width(150);
                            //columns.Bound(p => p.MaritalStatus).Width(150);
                            columns.Bound(p => p.PassportNumber).HeaderHtmlAttributes(new { title = "Passport Number" }).Width(150);
                            columns.Bound(p => p.PassportIssueCountry).HeaderHtmlAttributes(new { title = "Passport Issue Country" }).Width(150);
                            columns.Bound(p => p.PassportExpiryDate).HeaderHtmlAttributes(new { title = "Passport Expiry Date" }).Width(150).Format("{0:MM/dd/yyyy}");
                            columns.Bound(p => p.QatarId).HeaderHtmlAttributes(new { title = "Qatar Id" }).Width(150);
                            columns.Bound(p => p.CurrentAddressHouse).HeaderHtmlAttributes(new { title = "Current Address House" }).Width(150);
                            columns.Bound(p => p.CurrentAddressStreet).HeaderHtmlAttributes(new { title = "Current Address Street" }).Width(150);
                            columns.Bound(p => p.CurrentAddressCity).HeaderHtmlAttributes(new { title = "Current Address City" }).Width(150);
                            columns.Bound(p => p.CurrentAddressState).HeaderHtmlAttributes(new { title = "Current Address State" }).Width(150);
                            columns.Bound(p => p.CurrentAddressCountryName).HeaderHtmlAttributes(new { title = "Current Address Country Name" }).Width(150);
                            columns.Bound(p => p.PermanentAddressHouse).HeaderHtmlAttributes(new { title = "Permanent Address House" }).Width(150);
                            columns.Bound(p => p.PermanentAddressStreet).HeaderHtmlAttributes(new { title = "Permanent Address Street" }).Width(150);
                            columns.Bound(p => p.PermanentAddressCity).HeaderHtmlAttributes(new { title = "Permanent Address City" }).Width(150);
                            columns.Bound(p => p.PermanentAddressState).HeaderHtmlAttributes(new { title = "Permanent Address State" }).Width(150);
                            columns.Bound(p => p.PermanentAddressCountryName).HeaderHtmlAttributes(new { title = "Permanent Address Country Name" }).Width(150);

                            //columns.Bound(p => p.ContactPhoneLocal).Width(150);
                            //columns.Bound(p => p.CurrentEmployer).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentLocation).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentPosition).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentStartDate).Width(150).Format("{0:MM/dd/yyyy}");
                            //columns.Bound(p => p.CurrentEmploymentEndDate).Width(150);
                            //columns.Bound(p => p.CurrentEmploymentResponsibilities).Width(300);

                            //columns.Bound(p => p.SalaryCurrencyName).Title("Salary Currency").Width(150);
                            ////columns.Bound(p => p.IndianSalary).Width(150);
                            ////columns.Bound(p => p.OverseasSalary).Width(150);
                            //columns.Bound(p => p.NetSalary).Title("Net Salary After Income Tax").Width(150);
                            //columns.Bound(p => p.OtherAllowance).Width(150);

                        })
                         //.ToolBar(toolbar =>
                         //{
                         //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                         //})
                         //.Events(e => e.DataBound("OnDataBoundNot"))
                         .Events(e => e.DataBound("OnDataBound"))
                        .Scrollable().Height(700)
                        .Sortable()
                        .Resizable(resize => resize.Columns(true))
                        .Selectable(select => select.Enabled(false))
                        .Filterable(f => f.Extra(false)
                                          .Operators(o => o.ForString(s => s.Clear()
                                          .Contains("Contains")
                                          .IsEqualTo("Is equal to")
                                          )))
                        .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(true)
                        .ButtonCount(5))
                        .AutoBind(true)
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(10)
                        .Read(read => read.Action("ReadJobAdvertisementData", "RecruitmentDashboard", new { jobAdvId = Model.JobId, orgId = Model.OrganizationId, state = Model.ApplicationState, permission = @ViewBag.Permissions }))
                        .Model(model => model.Id(p => p.Id))
                        )
          )
            }




        </div>
    </div>

    @Html.HiddenFor(x => x.OrganizationId)
    @Html.HiddenFor(x => x.JobId)
    @*@Html.HiddenFor(x => x.ManpowerTypeCode)*@


</div>





