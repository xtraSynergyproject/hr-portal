@using Synergy.App.ViewModel
@using Synergy.App.Common;

@model ApplicationSearchViewModel;

@{
    ViewBag.Title = "";
    // Layout = "~/Areas/CMS/Views/Shared/_LayoutCms1.cshtml";
    Layout = ViewBag.Layout;
}

<style>
    .k-grid {
        border-color: #2d9fca;
    }

    .k-grid-header .k-header {
        color: #2d9fca;
        font-weight: 700;
    }

    .k-pager-wrap .k-link.k-state-disabled {
        border-radius: 40px;
        margin-left: 5px;
    }

    .k-pager-numbers .k-state-selected {
        border-radius: 40px;
        margin-left: 5px;
    }

    .k-pager-wrap .k-pager-refresh {
        border-color: transparent;
        background-color: #f8f9fa;
        color: black;
    }

    .k-grid td {
        /*border-color: #2d9fca;*/
        border-color: transparent;
    }

    .k-grid-pager {
        border-color: #2d9fca;
    }

    .k-grid thead {
        background-color: transparent;
    }

    /*.k-grid td:first-child {
        text-align: center;
    }*/
    span {
        padding: 0px !important;
    }
</style>

<script type="text/javascript">

    var url = "";
    var colDef = [];

    $(document).ready(function () {

        if ("@ViewBag.Mode" == "NotShortlisted") {
            url = "/Rec/RecruitmentTransaction/ReadInterviewCandidates?BatchId=@Model.BatchId&Mode=@ViewBag.Mode";
            colDef = columnNotShortlistDefs;
        }
        else if ("@ViewBag.Mode" == "ShortlistForFuture") {
            url = "/Rec/RecruitmentTransaction/ReadFutureCandidates?BatchId=@Model.BatchId&Mode=@ViewBag.Mode";
            colDef = columnNotShortlistDefs;
        }
        else if ("@ViewBag.Mode" == "ShortlistedByHM") {
            url = "/Rec/RecruitmentTransaction/ReadJobOfferCandidatesData?BatchId=@Model.BatchId&Mode=@ViewBag.Mode";
            colDef = columnNotShortlistByHMDefs;
        }
        else if ("@ViewBag.Mode" == "InterviewRequested") {
            url = "/Rec/RecruitmentTransaction/ReadJobOfferCandidatesData?BatchId=@Model.BatchId&Mode=@ViewBag.Mode";
            colDef = columnInterviewRequestedDefs;
        }
        else if ("@ViewBag.Mode" == "ClosedBatches") {
            url = "/Rec/RecruitmentTransaction/ReadCloseBatchHmData?BatchId=@Model.BatchId&Mode=@ViewBag.Mode";
            colDef = columnClosedBatchesDefs;
        }
        else if ("@ViewBag.Mode" == "OpenBatches") {
            url = "/Rec/RecruitmentTransaction/GetJobAdvertismentApplication";
            colDef = columnDefsOpenBatches;
        }

        GetCandidateShortlistList(url, colDef);
    });

    var columnNotShortlistDefs = [
        {
            field: "Id",
            headerName: "Select",Width: 40,
            pinned: 'left',
            cellRenderer: params => {
                return "<input type='checkbox' class='selectcand' data-id='" + params.value + "' />"
            }
        },
        {
            field: "ApplicationId", headerName: "Action", Width: 100,
            pinned: 'left',
            cellRenderer: params => {
                return "<button class='btn btn-primary' onclick='OnAddComment(\"" + params.value + "\");'>Add Comment</button>"
            }
        },
        {
            field: "ApplicationId", headerName: "Resume", Width: 50,
            pinned: 'left',
            cellRenderer: params => {
                return "<a onclick='OnApplication(\"" + params.value + "\",\"" + params.data.CandidateProfileId + "\")'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>"
            }
        },
        { field: "FirstName", headerName: "First Name", minWidth: 150, pinned: 'left'},
        { field: "MiddleName", headerName: "Middle Name", minWidth: 150, },
        { field: "LastName", headerName: "Last Name", minWidth: 150, },
        { field: "ApplicationStateName", headerName: "Application State", minWidth: 150, },
        { field: "ApplicationStatusName", headerName: "Application Status", minWidth: 150, },
        { field: "BatchStatusName", headerName: "Batch Status", minWidth: 150, },
        { field: "ShortlistByHMComment", headerName: "HM Comment", minWidth: 150, },
        { field: "Email", headerName: "Email", minWidth: 150, },
        { field: "ContactPhoneHome", headerName: "Contact Phone Home", minWidth: 150, },
        { field: "ContactPhoneLocal", headerName: "Contact Phone Local", minWidth: 150, },
        { field: "Score", headerName: "Score", minWidth: 150, },
        { field: "GenderName", headerName: "Gender", minWidth: 150, },
        {
            field: "BirthDate", headerName: "Birth Date", minWidth: 150,
            cellRenderer: (data) => {
                debugger;
                if (data.value != null && data.value != "") {
                    var d = new Date(data.value);
                    return d.getDate() + "." + d.getMonth() + "." + d.getFullYear();
                }
            }
        },
        { field: "Age", headerName: "Age", minWidth: 150, },
        { field: "BirthPlace", headerName: "Birth Place", minWidth: 150, },
        { field: "Nationality", headerName: "Nationality", minWidth: 150, },
        { field: "MaritalStatusName", headerName: "Marital Status Name", minWidth: 150, },
        { field: "NoOfChildren", headerName: "No Of Children", minWidth: 150, },
        { field: "TotalWorkExperience", headerName: "Total Work Experience", minWidth: 150, },
        { field: "PassportNumber", headerName: "Passport Number", minWidth: 150, },
        { field: "PassportIssueCountry", headerName: "Passport Issue Country", minWidth: 150, },
        {
            field: "PassportExpiryDate", headerName: "Passport Expiry Date", minWidth: 150,
            cellRenderer: (data) => {
                debugger;
                if (data.value != null && data.value != "") {
                    var d = new Date(data.value);
                    return d.getDate() + "." + d.getMonth() + "." + d.getFullYear();
                }
            }
        },
        { field: "CurrentAddressHouse", headerName: "Current Address House", minWidth: 150, },
        { field: "CurrentAddressStreet", headerName: "Current Address Street", minWidth: 150 },
        { field: "CurrentAddressCity", headerName: "Current Address City", minWidth: 150 },
        { field: "CurrentAddressState", headerName: "Current Address State", minWidth: 150 },
        { field: "CurrentAddressCountryName", headerName: "Current Address Country", minWidth: 150 },
        { field: "PermanentAddressHouse", headerName: "Permanent Address House", minWidth: 150 },
        { field: "PermanentAddressStreet", headerName: "Permanent Address Street", minWidth: 150 },
        { field: "PermanentAddressCity", headerName: "Permanent Address City", minWidth: 150 },
        { field: "PermanentAddressState", headerName: "Permanent Address State", minWidth: 150 },
        { field: "PermanentAddressCountryName", headerName: "Permanent Address Country", minWidth: 150 },
        { field: "TimeRequiredToJoin", headerName: "Time Required To Join", minWidth: 150 },
        { field: "SalaryCurrencyName", headerName: "Salary Currency Name", minWidth: 150 },
        { field: "NetSalary", headerName: "Net Salary", minWidth: 150 },
        { field: "OtherAllowances", headerName: "Other Allowances", minWidth: 150 },
    ];

    //ShortlistedByHM
    var columnNotShortlistByHMDefs = [
        {
            field: "Id",
            headerName: "Select",
            pinned: 'left',
            cellRenderer: params => {
                return "<input type='checkbox' class='selectcand' data-id='" + params.data.ApplicationId + "' />"
            }
        },
        {
            field: "ApplicationId", headerName: "Resume", minWidth: 150,
            pinned: 'left',
            cellRenderer: params => {
                return "<a onclick='OnApplication(\"" + params.value + "\",\"" + params.data.CandidateProfileId + "\")'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>"
            }
        },
        {
            field: "ApplicationId", headerName: "Service", minWidth: 150,
            pinned: 'left',
            cellRenderer: params => {
                debugger;
                if (params.data.TaskId == null) {
                    return "<button class='btn btn-info' onclick='onRaiseService(\"" + params.data.ApplicationId + "\", \""+ params.data.CandidateProfileId + "\", \"SCHEDULE_INTERVIEW\")'>Raise Schedule Interview</button>"
                }
                else {
                    return "<button class='btn btn-info' onclick='onViewService(\"" + params.data.TaskId + "\",\"SCHEDULE_INTERVIEW\")'>View Schedule Interview</button>"
                }
            }
        },
        { field: "FirstName", headerName: "First Name", minWidth: 150, pinned: 'left' },
        { field: "MiddleName", headerName: "Middle Name", minWidth: 150, },
        { field: "LastName", headerName: "Last Name", minWidth: 150, },
        { field: "ApplicationStateName", headerName: "Application State", minWidth: 150, },
        { field: "ApplicationStatusName", headerName: "Application Status", minWidth: 150, },
        { field: "BatchStatusName", headerName: "Batch Status", minWidth: 150, },
        { field: "ShortlistByHMComment", headerName: "HM Comment", minWidth: 150, },
        { field: "Email", headerName: "Email", minWidth: 150, },
        { field: "ContactPhoneHome", headerName: "Contact Phone Home", minWidth: 150, },
        { field: "ContactPhoneLocal", headerName: "Contact Phone Local", minWidth: 150, },
        { field: "Score", headerName: "Score", minWidth: 150, },
        { field: "GenderName", headerName: "Gender", minWidth: 150, },
        {
            field: "BirthDate", headerName: "Birth Date", minWidth: 150,
            cellRenderer: (data) => {
                debugger;
                if (data.value != null && data.value != "") {
                    var d = new Date(data.value);
                    return d.getDate() + "." + d.getMonth() + "." + d.getFullYear();
                }
            }
        },
        { field: "Age", headerName: "Age", minWidth: 150, },
        { field: "BirthPlace", headerName: "Birth Place", minWidth: 150, },
        { field: "Nationality", headerName: "Nationality", minWidth: 150, },
        { field: "MaritalStatusName", headerName: "Marital Status Name", minWidth: 150, },
        { field: "NoOfChildren", headerName: "No Of Children", minWidth: 150, },
        { field: "TotalWorkExperience", headerName: "Total Work Experience", minWidth: 150, },
        { field: "PassportNumber", headerName: "Passport Number", minWidth: 150, },
        { field: "PassportIssueCountry", headerName: "Passport Issue Country", minWidth: 150, },
        {
            field: "PassportExpiryDate", headerName: "Passport Expiry Date", minWidth: 150,
            cellRenderer: (data) => {
                debugger;
                if (data.value != null && data.value != "") {
                    var d = new Date(data.value);
                    return d.getDate() + "." + d.getMonth() + "." + d.getFullYear();
                }
            }
        },
        { field: "CurrentAddressHouse", headerName: "Current Address House", minWidth: 150, },
        { field: "CurrentAddressStreet", headerName: "Current Address Street", minWidth: 150 },
        { field: "CurrentAddressCity", headerName: "Current Address City", minWidth: 150 },
        { field: "CurrentAddressState", headerName: "Current Address State", minWidth: 150 },
        { field: "CurrentAddressCountryName", headerName: "Current Address Country", minWidth: 150 },
        { field: "PermanentAddressHouse", headerName: "Permanent Address House", minWidth: 150 },
        { field: "PermanentAddressStreet", headerName: "Permanent Address Street", minWidth: 150 },
        { field: "PermanentAddressCity", headerName: "Permanent Address City", minWidth: 150 },
        { field: "PermanentAddressState", headerName: "Permanent Address State", minWidth: 150 },
        { field: "PermanentAddressCountryName", headerName: "Permanent Address Country", minWidth: 150 },
        { field: "TimeRequiredToJoin", headerName: "Time Required To Join", minWidth: 150 },
        { field: "SalaryCurrencyName", headerName: "Salary Currency Name", minWidth: 150 },
        { field: "NetSalary", headerName: "Net Salary", minWidth: 150 },
        { field: "OtherAllowances", headerName: "Other Allowances", minWidth: 150 },
    ];

    //InterviewRequested
    var columnInterviewRequestedDefs = [
        {
            field: "ApplicationId", headerName: "Resume", minWidth: 150,
            pinned: 'left',
            cellRenderer: params => {
                return "<a onclick='OnApplication(\"" + params.value + "\",\"" + params.data.CandidateProfileId + "\")'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>"
            }
        },
        {
            field: "ApplicationId", headerName: "Service", minWidth: 150,
            pinned: 'left',
            cellRenderer: params => {
                debugger;
                if (params.data.TaskId == null) {
                    return "<button class='btn btn-info' onclick='onRaiseService(\"" + params.data.ApplicationId + "\", \"" + params.data.CandidateProfileId + "\" \"SCHEDULE_INTERVIEW\")'>Raise Schedule Interview</button>"
                }
                else {
                    return "<button class='btn btn-info' onclick='onViewService(\"" + params.data.TaskId + "\",\"SCHEDULE_INTERVIEW\")'>View Schedule Interview</button>"
                }

            }
        },
        { field: "FirstName", headerName: "First Name", minWidth: 150, pinned: 'left' },
        { field: "MiddleName", headerName: "Middle Name", minWidth: 150, },
        { field: "LastName", headerName: "Last Name", minWidth: 150, },
        { field: "ApplicationStateName", headerName: "Application State", minWidth: 150, },
        { field: "ApplicationStatusName", headerName: "Application Status", minWidth: 150, },
        { field: "BatchStatusName", headerName: "Batch Status", minWidth: 150, },
        { field: "ShortlistByHMComment", headerName: "HM Comment", minWidth: 150, },
        { field: "Email", headerName: "Email", minWidth: 150, },
        { field: "ContactPhoneHome", headerName: "Contact Phone Home", minWidth: 150, },
        { field: "ContactPhoneLocal", headerName: "Contact Phone Local", minWidth: 150, },
        { field: "Score", headerName: "Score", minWidth: 150, },
        { field: "GenderName", headerName: "Gender", minWidth: 150, },
        {
            field: "BirthDate", headerName: "Birth Date", minWidth: 150,
            cellRenderer: (data) => {
                debugger;
                if (data.value != null && data.value != "") {
                    var d = new Date(data.value);
                    return d.getDate() + "." + d.getMonth() + "." + d.getFullYear();
                }
            }
        },
        { field: "Age", headerName: "Age", minWidth: 150, },
        { field: "BirthPlace", headerName: "Birth Place", minWidth: 150, },
        { field: "Nationality", headerName: "Nationality", minWidth: 150, },
        { field: "MaritalStatusName", headerName: "Marital Status Name", minWidth: 150, },
        { field: "NoOfChildren", headerName: "No Of Children", minWidth: 150, },
        { field: "TotalWorkExperience", headerName: "Total Work Experience", minWidth: 150, },
        { field: "PassportNumber", headerName: "Passport Number", minWidth: 150, },
        { field: "PassportIssueCountry", headerName: "Passport Issue Country", minWidth: 150, },
        {
            field: "PassportExpiryDate", headerName: "Passport Expiry Date", minWidth: 150,
            cellRenderer: (data) => {
                debugger;
                if (data.value != null && data.value != "") {
                    var d = new Date(data.value);
                    return d.getDate() + "." + d.getMonth() + "." + d.getFullYear();
                }
            }
        },
        { field: "CurrentAddressHouse", headerName: "Current Address House", minWidth: 150, },
        { field: "CurrentAddressStreet", headerName: "Current Address Street", minWidth: 150 },
        { field: "CurrentAddressCity", headerName: "Current Address City", minWidth: 150 },
        { field: "CurrentAddressState", headerName: "Current Address State", minWidth: 150 },
        { field: "CurrentAddressCountryName", headerName: "Current Address Country", minWidth: 150 },
        { field: "PermanentAddressHouse", headerName: "Permanent Address House", minWidth: 150 },
        { field: "PermanentAddressStreet", headerName: "Permanent Address Street", minWidth: 150 },
        { field: "PermanentAddressCity", headerName: "Permanent Address City", minWidth: 150 },
        { field: "PermanentAddressState", headerName: "Permanent Address State", minWidth: 150 },
        { field: "PermanentAddressCountryName", headerName: "Permanent Address Country", minWidth: 150 },
        { field: "TimeRequiredToJoin", headerName: "Time Required To Join", minWidth: 150 },
        { field: "SalaryCurrencyName", headerName: "Salary Currency Name", minWidth: 150 },
        { field: "NetSalary", headerName: "Net Salary", minWidth: 150 },
        { field: "OtherAllowances", headerName: "Other Allowances", minWidth: 150 },
    ];

    //ClosedBatches
    var columnClosedBatchesDefs = [

        { field: "JobName", headerName: "Position", minWidth: 150,},
        { field: "Organization", headerName: "Organization", minWidth: 150, },
        { field: "Name", headerName: "Batch No", minWidth: 150, },
        { field: "HiringManagerName", headerName: "Hiring Manager", minWidth: 150, },
        { field: "HeadOfDepartmentName", headerName: "Head Of Department", minWidth: 150, },
        {
            field: "NoOfApplication", headerName: "No Of Applicants", minWidth: 150,
            cellRenderer: params => {
                return "<a style='cursor:pointer;color:blue' onclick='onView(\"" + params.data.Id + "\",\"" + params.data.NoOfApplication + "\")'>\"" + params.data.NoOfApplication + "\"</a>"
            }
        },
        { field: "NotShortlistByHM", headerName: "Not Selected", minWidth: 150, },
        { field: "ShortlistByHM", headerName: "Selected for Interview", minWidth: 150, },
        { field: "ConfirmInterview", headerName: "Interview Confirmed", minWidth: 150, },
        { field: "Evaluated", headerName: "Evaluated", minWidth: 150, },
        { field: "BatchStatusName", headerName: "Batch Status Name", minWidth: 150, },
        {
            field: "TargetHiringDate", headerName: "Target Hiring Date", minWidth: 150,
            cellRenderer: (data) => {
                debugger;
                if (data.value != null && data.value != "") {
                    var d = new Date(data.value);
                    return d.getDate() + "." + d.getMonth() + "." + d.getFullYear();
                }
            }
        },
    ];

    //OpenBatches
    var columnDefsOpenBatches = [
        {
            field: "NoOfApplication", headerName: "No Of Applicants", minWidth: 150,
            cellRenderer: params => {
                return "<i class='fa fas fa-pencil' onclick='OnEditBatch(\"" + params.data.BatchId + "\")'>Edit</i>"
            }
        },
        { field: "PositionName", headerName: "Position", minWidth: 150, },
        { field: "OrganizationName", headerName: "Organization", minWidth: 150, },
        { field: "BatchName", headerName: "Batch No", minWidth: 150, },
        { field: "HiringManagerName", headerName: "Hiring Manager", minWidth: 150, },
        { field: "HeadOfDepartmentName", headerName: "Head Of Department", minWidth: 150, },
        {
            field: "NoOfApplication", headerName: "No Of Applicants", minWidth: 150,
            cellRenderer: params => {
                return "<a style='cursor:pointer;color:blue' onclick='onView(\"" + params.data.Id + "\",\"" + params.data.NoOfApplication + "\")'>\"" + NoOfApplication + "\"</a>"
            }
        },
        { field: "NotShortlistByHM", headerName: "Not Selected", minWidth: 150, },
        { field: "ShortlistByHM", headerName: "Selected for Interview", minWidth: 150, },
        { field: "ConfirmInterview", headerName: "Interview Confirmed", minWidth: 150, },
        { field: "Evaluated", headerName: "Evaluated", minWidth: 150, },
        { field: "BatchStatusName", headerName: "Batch Status Name", minWidth: 150, },
        {
            field: "TargetHiringDate", headerName: "Target Hiring Date", minWidth: 150,
            cellRenderer: (data) => {
                debugger;
                if (data.value != null && data.value != "") {
                    var d = new Date(data.value);
                    return d.getDate() + "." + (d.getMonth()+1) + "." + d.getFullYear();
                }
            }
        },
        {           
            field: "ApplicationId", headerName: "Service", minWidth: 150,
            pinned: 'left',
            cellRenderer: params => {             
                 if (params.data.BatchStatusCode == "PendingwithHM") {           
                    return "<button class='btn btn-info' onclick='UpdateBatchClose(\"" + params.data.Id + "\")'>Close Batch</button>"
                }
            }
        },
        {
            field: "BatchStatusName", headerName: "Batch", minWidth: 150,           
            cellRenderer: params => {
                debugger;
                /* if (params.data.BatchStatusCode == "Pending with HM") {*/
                if (params.data.BatchStatusName == "Pending with HM") {
                    debugger;
                    return "<button class='btn btn-info' onclick='UpdateBatchClose(\"" + params.data.BatchId + "\")'>Close Batch</button>"
                }
                //return "<button class='btn btn-info' onclick='UpdateBatchClose(\"" + params.data.BatchId + "\")'>Close Batch</button>"
            }
        },
    ];

    function GetCandidateShortlistList(url, columnDefs) {
        document.getElementById("CandShortlistGrid").innerHTML = "";

        gridConfig(
            "CandShortlistGrid",
            url,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    function Update(type) {

        //var users = '';
        //var grid = $("#kgrdCandInterview").data("kendoGrid");

        //var users = [];
        //$("input[class='selectcand']:checked").each(function () {
        //    users.push($(this).attr("data-id"));
        //});

        var users = "";
        $("input[class='selectcand']:checked").each(function () {
            users = users + $(this).attr("data-id") + ",";
        });

        if (users.length > 0) {
            ShowLoader($('#divBatchGrid'));

            $.ajax({
                type: "POST",
                url: "/Rec/ShortlistByHr/UpdateApplicationStatus",
                data: { 'applicants': users, 'type': type },
                success: function (data) {

                    if (data.success) {

                        GetCandidateShortlistList(url, colDef);

                        window.parent.refreshInbox();
                    }
                },
                dataType: "json",
            });

            $.ajax({
                type: "GET",
                url: "/Rec/RecruitmentTransaction/CreateApplicationTrackforHm",
                data: { 'applicantIds': users },
                success: function (data) {
                    if (data.success) {

                        GetCandidateShortlistList(url, colDef);

                        HideLoader($('#divBatchGrid'));
                        window.parent.refreshInbox();
                    }
                },
                dataType: "json",
            });
        }
        else{
            kendo.alert("Please Select atleast one candidate from the list");
        }
    }

    function RaiseBulkService()
    {
        var users = '';
        //var tasks = '';
        //var grid = $("#kgrdCandJobOffer").data("kendoGrid");
        //grid.tbody.find("input:checked").closest("tr").each(function (index) {
        //    users = users + grid.dataItem(this).Id + ',';
        //});

        $("input[class='selectcand']:checked").each(function () {
            users = users + $(this).attr("data-id") + ",";
        });

        if (users == '' || users == ',') {
            alert("Please Select atleast one candidate from the list");
        }
        else {
            var win = GetMainWindow();
            win.iframeOpenUrl = '@Url.Action("ManageBulkScheduleInterview", "RecruitmentTransaction", new { @area = "Rec" })?applicationIds=' + users;
            win.OpenWindow({ Title: 'Bulk Schedule Interview', Width: 500, Height: 500 });
            return false;
        }
    }

    function OnChangeOrg(e) {
        var dataItem = e.sender.dataItem();
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);
    }
    function OnDataBoundOrg(e) {
        var dataItem = e.sender.dataItem();
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);
    }

    function FilterAdv() {
        var dropdownlist = $("#OrganizationId").data("kendoDropDownList");
        return {
            orgId: dropdownlist.value(),
        };
    }
    function Filterddl() {
        var dropdownlist = $("#JobTitleForHiring").data("kendoDropDownList");
        var orgdropdownlist = $("#OrganizationId").data("kendoDropDownList");
        return {
            jobAdvId: dropdownlist.value(),
            orgId: orgdropdownlist.value(),
            hmId: '@Model.BatchHiringManagerId'
        };
    }
    function FilterBatch()
    {
        return {
            batchtype: '@BatchTypeEnum.ShortlistByHr',
            hmId: '@Model.BatchHiringManagerId',
            batchId: '@Model.BatchId'
        }
    }

    function OnApplyfilter() {

        var search1 = FilterBatch();
        $("#Batchgrid").data("kendoGrid").dataSource.read(search1);

        var search = FilterGrid();
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
        $("#kgrdCandJobOffer").data("kendoGrid").dataSource.read(search);

    }
    function OnDataBound(e) {
        var dataItem = e.sender.dataItem();

        if (dataItem != undefined) {

        $("#ManpowerTypeCode").val(dataItem.ManpowerTypeCode);
        }
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);

    }
    function OnJobTitleChange(e) {
        var dataItem = e.sender.dataItem();

        if (dataItem != undefined) {
            $("#ManpowerTypeCode").val(dataItem.ManpowerTypeCode);
        }

        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);
    }

    var delBatchId = null;

    function UpdateBatchClose(Id) {
        delBatchId = Id;
        kendo.confirm("Are you sure, you want to close the batch? After closing the batch, you will not be able to shortlist or evaluate any candidate from this batch.").then(function () {
            CloseBatchItem(delBatchId);
        }, function () {

        });
    }

    //function ConfirmCloseBatch() {
    //    $('#confirmBatchClose').data("kendoDialog").close();
    //    CloseBatchItem(delBatchId);
    //}

    function CloseBatchItem(id) {
        ShowLoader($('#divBatchGrid'));
           $.ajax({
                type: "Post",
                url: '@Url.Action("UpdateBatchClose", "ShortListByHr", new { @area="Rec"})?batchId=' + id +'&code=Close',
               success: function (data) {
                   HideLoader($('#divBatchGrid'));
                   window.parent.refreshInbox();
                   var search1 = FilterBatch();
                   GetCandidateShortlistList(url, colDef);
                    //$("#BatchgridClosed").data("kendoGrid").dataSource.read(search1);
                },
            });
        return false;
    }

    @*function FilterGrid() {

        var orgddl = $('#OrganizationId').val();
        var jobddl = $('#JobTitleForHiring').val();
        var batchddl = $('#BatchId').val();
        var orgId = orgddl != null ? orgddl : "";
        var jobId = jobddl != null ? jobddl : "";
        var batchId = batchddl != null ? batchddl : "";

        return {
            OrganizationId: orgId,
            JobAdvertisementId: jobId,
            BatchId: '@Model.BatchId',
            Mode:'@ViewBag.Mode'
        }
    }*@


    function onRaiseService(appId, candId, code) {
        debugger;
        var win = GetMainWindow();
        var portalId = $('#GlobalPortalId').val();
        var udfs = encodeURIComponent('ApplicationId=' + appId+'&CandidateId=' + candId);
        var roudfs = encodeURIComponent('ApplicationId=true&CandidateId=true');

        win.iframeOpenUrl = '/Cms/Page?lo=Popup&pageType=Service&cbm=Refresh&source=Create&dataAction=Create&templateCodes=' + code + '&portalId=' + portalId + '&roudfs=' + roudfs + '&udfs=' + udfs;

        @*win.iframeOpenUrl = '@Url.Action("Service", "Task", new { @area = "Cms" })?templateCode1=' + code + '&referenceId=' + appId + '&referenceTypeCode=' + '@ReferenceTypeEnum.REC_Application'+'&isPopUp=true';*@

        win.OpenWindow({ Title: 'Schedule Interview', Width: 1200, Height: 750 });
        return false;
    }
    function onViewService(taskId,code){
        var win = GetMainWindow();
        var portalId = $('#GlobalPortalId').val();
        @*win.iframeOpenUrl = '@Url.Action("Service", "Task", new { @area = "Cms" })?taskId=' + taskId + '&templateCode1=' + code + '&isPopUp=true';*@
        win.iframeOpenUrl = '/Cms/Page?lo=Popup&pageType=Service&cbm=Refresh&source=View&dataAction=View&templateCodes=' + code + '&portalId=' + portalId + '&recordId=' + taskId;
        win.OpenWindow({ Title: 'Schedule Interview', Width: 1200, Height: 750 });
        return false;
    }

    function OnApplication(Id,candId) {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area = "Career" })?candidateProfileId='+candId+'&applicationId=' + Id;
        win.OpenWindow({ Title: 'Candidate Profile', Width: 1200, Height: 750 });
        return false;
    }

    function OnAddComment(Id) {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("AddComments", "CandidateShortlist", new { @area = "Recruitment" })?applicationId=' + Id;
        win.OpenWindow({ Title: 'Add Comments', Width: 450, Height: 450 });
        return false;
    }

    function Refresh() {
        GetCandidateShortlistList(url, colDef);
    }

    function onView(id, count) {
        if (count == 0) {
            alert("There is no Candidates for this Batch");
        }
        else
        {
            var win = GetMainWindow();
            win.iframeOpenUrl = '@Url.Action("ViewHmBatchCandidate", "CandidateShortlist", new { @area = "Recruitment" })?batchid=' + id+"&type=ShortlistByHr";
            win.OpenWindow({ Title: 'Candidate Details By Batch', Width: 1200, Height: 750 });
            return false;
        }
    }

    function OnEditBatch(id) {
        var win = GetMainWindow();
        @*win.iframeOpenUrl = '@Url.Action("Edit", "Batch", new { @area = "Recruitment" })?status=PendingwithHM&Id=' + id;*@
        win.iframeOpenUrl = '@Url.Action("Edit", "ShortListByHr", new { @area = "Rec" })?Id=' + id +'&status=PendingwithHM';
        win.OpenWindow({ Title: 'Manage Batch', Width: 450, Height: 800 });
        return false;
    }

</script>


<div class="container pt-2">          
    
    <div style="border:1px solid silver;" class="p-2 mb-2" id="divBatchGrid">
        @if (ViewBag.Mode == "NotShortlisted")
        {
            <div style="margin-left:-10px;margin-top:-10px"><img style="width:1110px; height:100px" src="~/images/Shortlist by HM NotShortlisted.png" /></div>
            <div class="row-md-12" style="margin-top: 20px;">

                <p class="pl-1 pb-2" style="border-bottom: 1px solid #d7d6d6;font-weight: bold;font-size: 16px; margin-top:15px;"><i class="fas fa-calendar-alt"></i>&nbsp;Shortlist By Hiring Manager - Not Shortlisted<br></p>
                <div class="row" style="padding:10px;">
                    <div class="col-12">
                        <button class="btn btn-primary d-flex float-right d-lg-flex align-items-lg-center" id="rejectbutton" type="button" style="height: 32px;" onclick="Update('RejectedHM');">Reject Candidate</button>
                        &nbsp;&nbsp;&nbsp;
                        <button class="btn btn-primary d-flex float-right d-lg-flex align-items-lg-center" id="interviewbutton" type="button" style="height: 32px;" onclick="Update('ShortlistedHM');">Select Candidate for Interview</button>
                        &nbsp;&nbsp;&nbsp;
                        <button class="btn btn-warning d-flex float-right d-lg-flex align-items-lg-center" id="fututebutton" type="button" style="height: 32px;" onclick="Update('ShortlistForFuture');">Shortlist For Future</button>

                    </div>
                </div>

                <div class="col-12">
                    <div id="CandShortlistGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

                    @*@(Html.Kendo().Grid<ApplicationDataViewModel>
                ().Name("kgrdCandInterview").Height("450")
                .Columns(columns =>
                {
                    //columns.Template("<input class='selectcheckbox' type='checkbox' id=selectcheckbox_#:Id#/>").Title("Select").Width(50).Locked(true);
                    columns.Select().HtmlAttributes(new { @class = "checkbox-align" }).HeaderHtmlAttributes(new { @class = "checkbox-align", id = "selectcand" }).Width(50).Locked(true).Lockable(false);
                    //columns.Bound(c => c.ApplicationId).ClientTemplate("<a ><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("Resume").Width(120).Locked(true).Lockable(false);
                    columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-primary' onclick='OnAddComment(\"#=ApplicationId#\");'>Add Comment</button>").Title("Action").Width(180).Locked(true).Lockable(false).HeaderHtmlAttributes(new { id = "addcomments" });
                    columns.Bound(c => c.ApplicationId).ClientTemplate("<a href='javascript:OnApplication(\"#=ApplicationId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("Resume").Width(120).Locked(true).Lockable(false).HeaderHtmlAttributes(new { id = "viewprofile" });
                    columns.Bound(p => p.FirstName).Title("First Name").HeaderHtmlAttributes(new { title = "First Name" }).Width(180).Locked(true).Lockable(false);
                    columns.Bound(p => p.MiddleName).Title("Middle Name").HeaderHtmlAttributes(new { title = "Middle Name" }).Width(180).Lockable(false);
                    columns.Bound(p => p.LastName).Title("Last Name").HeaderHtmlAttributes(new { title = "Last Name" }).Width(150);
                    columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State" }).Title("Application State").Width(200);
                    columns.Bound(p => p.ApplicationStatusName).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Application Status").Width(200);
                    columns.Bound(p => p.BatchStatusName).HeaderHtmlAttributes(new { title = "Batch Status" }).Title("Batch Status").Width(200);
                    //columns.Bound(p => p.ShortlistByHMComment).Title("HM Comments").Width(200);

                    columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                    columns.Bound(p => p.ContactPhoneHome).HeaderHtmlAttributes(new { title = "Contact Phone Home" }).Title("Contact Phone Home").Width(150);
                    columns.Bound(p => p.ContactPhoneLocal).HeaderHtmlAttributes(new { title = "Contact Phone Local" }).Title("Contact Phone Local").Width(150);
                    columns.Bound(p => p.Score).HeaderHtmlAttributes(new { title = "Score" }).Width(150);

                    columns.Bound(p => p.GenderName).HeaderHtmlAttributes(new { title = "Gender" }).Width(150);
                    columns.Bound(p => p.BloodGroup).HeaderHtmlAttributes(new { title = "Blood Group" }).Width(150);
                    columns.Bound(p => p.BirthDate).HeaderHtmlAttributes(new { title = "Birth Date" }).Width(150).Format("{0:MM/dd/yyyy}");
                    columns.Bound(p => p.Age).HeaderHtmlAttributes(new { title = "Age" }).Width(150);
                    columns.Bound(p => p.BirthPlace).HeaderHtmlAttributes(new { title = "Birth Place" }).Width(150);
                    columns.Bound(p => p.Nationality).HeaderHtmlAttributes(new { title = "Nationality" }).Width(200);

                    columns.Bound(p => p.MaritalStatusName).HeaderHtmlAttributes(new { title = "Marital Status" }).Width(200);
                    columns.Bound(p => p.NoOfChildren).HeaderHtmlAttributes(new { title = "No Of Children" }).Width(200);

                    columns.Bound(p => p.TotalWorkExperience).HeaderHtmlAttributes(new { title = "Total Work Experience" }).Width(200);
                    columns.Bound(p => p.PassportNumber).HeaderHtmlAttributes(new { title = "Passport Number" }).Width(200);
                    columns.Bound(p => p.PassportIssueCountry).HeaderHtmlAttributes(new { title = "Passport Issue Country" }).Width(200);
                    columns.Bound(p => p.PassportExpiryDate).HeaderHtmlAttributes(new { title = "Passport Expiry Date" }).Width(200).Format("{0:MM/dd/yyyy}");

                    columns.Bound(p => p.CurrentAddressHouse).HeaderHtmlAttributes(new { title = "Current Address House" }).Width(200);
                    columns.Bound(p => p.CurrentAddressStreet).HeaderHtmlAttributes(new { title = "Current Address Street" }).Width(200);
                    columns.Bound(p => p.CurrentAddressCity).HeaderHtmlAttributes(new { title = "Current Address City" }).Width(200);
                    columns.Bound(p => p.CurrentAddressState).HeaderHtmlAttributes(new { title = "Current Address State" }).Width(200);
                    columns.Bound(p => p.CurrentAddressCountryName).HeaderHtmlAttributes(new { title = "Current Address CountryName" }).Width(200);
                    columns.Bound(p => p.PermanentAddressHouse).HeaderHtmlAttributes(new { title = "Permanent Address House" }).Width(200);
                    columns.Bound(p => p.PermanentAddressStreet).HeaderHtmlAttributes(new { title = "Permanent Address Street" }).Width(200);
                    columns.Bound(p => p.PermanentAddressCity).HeaderHtmlAttributes(new { title = "Permanent Address City" }).Width(200);
                    columns.Bound(p => p.PermanentAddressState).HeaderHtmlAttributes(new { title = "Permanent Address State" }).Width(200);
                    columns.Bound(p => p.PermanentAddressCountryName).HeaderHtmlAttributes(new { title = "Permanent Address Country Name" }).Width(200);

                    columns.Bound(p => p.TimeRequiredToJoin).HeaderHtmlAttributes(new { title = "Time Required To Join" }).Width(200);

                    columns.Bound(p => p.NetSalaryCurrency).HeaderHtmlAttributes(new { title = "Net Salary Currency" }).Width(200);
                    columns.Bound(p => p.NetSalary).HeaderHtmlAttributes(new { title = "Net Salary" }).Width(200);
                    columns.Bound(p => p.OtherAllowances).HeaderHtmlAttributes(new { title = "Other Allowances" }).Width(200);

                })

                .Resizable(resize => resize.Columns(true))
                //.HtmlAttributes(new { style = "min-height:300px;max-height:350px;" })
                .Scrollable()
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                  .Operators(o => o.ForString(s => s.Clear()
                                  .Contains("Contains")
                                  .IsEqualTo("Is equal to")
                                  )))
                .DataSource(dataSource => dataSource
                .Ajax()
                //.PageSize(10)
                .Read(read => read.Action("ReadInterviewCandidates", "CandidateShortlist").Data("FilterGrid"))
                .Model(model => model.Id(p => p.Id))
                )
        )*@

                </div>

            </div>
        }
        @if (ViewBag.Mode == "ShortlistForFuture")
        {
            <div style="margin-left:-10px;margin-top:-10px"><img style="width:1110px; height:100px" src="~/images/Shortlist by HM NotShortlisted.png" /></div>
            <div class="row-md-12" style="margin-top: 20px;">

                <p class="pl-1 pb-2" style="border-bottom: 1px solid #d7d6d6;font-weight: bold;font-size: 16px; margin-top:15px;"><i class="fas fa-calendar-alt"></i>&nbsp;Shortlist By Hiring Manager - Not Shortlisted<br></p>
                <div class="row" style="padding:10px;">
                    <div class="col-12">
                        <button class="btn btn-primary d-flex float-right d-lg-flex align-items-lg-center" id="rejectbutton" type="button" style="height: 32px;" onclick="Update('RejectedHM');">Reject Candidate</button>
                        &nbsp;&nbsp;&nbsp;
                        <button class="btn btn-primary d-flex float-right d-lg-flex align-items-lg-center" id="interviewbutton" type="button" style="height: 32px;" onclick="Update('ShortlistedHM');">Select Candidate for Interview</button>

                    </div>
                </div>

                <div class="col-12">
                    <div id="CandShortlistGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

                    @*@(Html.Kendo().Grid<ApplicationDataViewModel>
                ().Name("kgrdCandInterview").Height("450")
                .Columns(columns =>
                {
                    //columns.Template("<input class='selectcheckbox' type='checkbox' id=selectcheckbox_#:Id#/>").Title("Select").Width(50).Locked(true);
                    columns.Select().HtmlAttributes(new { @class = "checkbox-align" }).HeaderHtmlAttributes(new { @class = "checkbox-align", id = "selectcand" }).Width(50).Locked(true).Lockable(false);
                    //columns.Bound(c => c.ApplicationId).ClientTemplate("<a ><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("Resume").Width(120).Locked(true).Lockable(false);
                    columns.Bound(c => c.ApplicationId).ClientTemplate("<button class='btn btn-primary' onclick='OnAddComment(\"#=ApplicationId#\");'>Add Comment</button>").Title("Action").Width(180).Locked(true).Lockable(false).HeaderHtmlAttributes(new { id = "addcomments" });
                    columns.Bound(c => c.ApplicationId).ClientTemplate("<a href='javascript:OnApplication(\"#=ApplicationId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("Resume").Width(120).Locked(true).Lockable(false).HeaderHtmlAttributes(new { id = "viewprofile" });

                    columns.Bound(p => p.FirstName).Title("First Name").HeaderHtmlAttributes(new { title = "First Name" }).Width(180).Locked(true).Lockable(false);
                    columns.Bound(p => p.MiddleName).Title("Middle Name").HeaderHtmlAttributes(new { title = "Middle Name" }).Width(180).Lockable(false);
                    columns.Bound(p => p.LastName).Title("Last Name").HeaderHtmlAttributes(new { title = "Last Name" }).Width(150);
                    columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State" }).Title("Application State").Width(200);
                    columns.Bound(p => p.ApplicationStatusName).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Application Status").Width(200);
                    columns.Bound(p => p.BatchStatusName).HeaderHtmlAttributes(new { title = "Batch Status" }).Title("Batch Status").Width(200);
                    //columns.Bound(p => p.ShortlistByHMComment).Title("HM Comments").Width(200);

                    columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                    columns.Bound(p => p.ContactPhoneHome).HeaderHtmlAttributes(new { title = "Contact Phone Home" }).Title("Contact Phone Home").Width(150);
                    columns.Bound(p => p.ContactPhoneLocal).HeaderHtmlAttributes(new { title = "Contact Phone Local" }).Title("Contact Phone Local").Width(150);
                    columns.Bound(p => p.Score).HeaderHtmlAttributes(new { title = "Score" }).Width(150);

                    columns.Bound(p => p.GenderName).HeaderHtmlAttributes(new { title = "Gender" }).Width(150);
                    columns.Bound(p => p.BloodGroup).HeaderHtmlAttributes(new { title = "Blood Group" }).Width(150);
                    columns.Bound(p => p.BirthDate).HeaderHtmlAttributes(new { title = "Birth Date" }).Width(150).Format("{0:MM/dd/yyyy}");
                    columns.Bound(p => p.Age).HeaderHtmlAttributes(new { title = "Age" }).Width(150);
                    columns.Bound(p => p.BirthPlace).HeaderHtmlAttributes(new { title = "Birth Place" }).Width(150);
                    columns.Bound(p => p.Nationality).HeaderHtmlAttributes(new { title = "Nationality" }).Width(200);

                    columns.Bound(p => p.MaritalStatusName).HeaderHtmlAttributes(new { title = "Marital Status" }).Width(200);
                    columns.Bound(p => p.NoOfChildren).HeaderHtmlAttributes(new { title = "No Of Children" }).Width(200);

                    columns.Bound(p => p.TotalWorkExperience).HeaderHtmlAttributes(new { title = "Total Work Experience" }).Width(200);
                    columns.Bound(p => p.PassportNumber).HeaderHtmlAttributes(new { title = "Passport Number" }).Width(200);
                    columns.Bound(p => p.PassportIssueCountry).HeaderHtmlAttributes(new { title = "Passport Issue Country" }).Width(200);
                    columns.Bound(p => p.PassportExpiryDate).HeaderHtmlAttributes(new { title = "Passport Expiry Date" }).Width(200).Format("{0:MM/dd/yyyy}");

                    columns.Bound(p => p.CurrentAddressHouse).HeaderHtmlAttributes(new { title = "Current Address House" }).Width(200);
                    columns.Bound(p => p.CurrentAddressStreet).HeaderHtmlAttributes(new { title = "Current Address Street" }).Width(200);
                    columns.Bound(p => p.CurrentAddressCity).HeaderHtmlAttributes(new { title = "Current Address City" }).Width(200);
                    columns.Bound(p => p.CurrentAddressState).HeaderHtmlAttributes(new { title = "Current Address State" }).Width(200);
                    columns.Bound(p => p.CurrentAddressCountryName).HeaderHtmlAttributes(new { title = "Current Address CountryName" }).Width(200);
                    columns.Bound(p => p.PermanentAddressHouse).HeaderHtmlAttributes(new { title = "Permanent Address House" }).Width(200);
                    columns.Bound(p => p.PermanentAddressStreet).HeaderHtmlAttributes(new { title = "Permanent Address Street" }).Width(200);
                    columns.Bound(p => p.PermanentAddressCity).HeaderHtmlAttributes(new { title = "Permanent Address City" }).Width(200);
                    columns.Bound(p => p.PermanentAddressState).HeaderHtmlAttributes(new { title = "Permanent Address State" }).Width(200);
                    columns.Bound(p => p.PermanentAddressCountryName).HeaderHtmlAttributes(new { title = "Permanent Address Country Name" }).Width(200);

                    columns.Bound(p => p.TimeRequiredToJoin).HeaderHtmlAttributes(new { title = "Time Required To Join" }).Width(200);

                    columns.Bound(p => p.NetSalaryCurrency).HeaderHtmlAttributes(new { title = "Net Salary Currency" }).Width(200);
                    columns.Bound(p => p.NetSalary).HeaderHtmlAttributes(new { title = "Net Salary" }).Width(200);
                    columns.Bound(p => p.OtherAllowances).HeaderHtmlAttributes(new { title = "Other Allowances" }).Width(200);

                })
                .Resizable(resize => resize.Columns(true))
                .Scrollable()
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                  .Operators(o => o.ForString(s => s.Clear()
                                  .Contains("Contains")
                                  .IsEqualTo("Is equal to")
                                  )))
                .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("ReadFutureCandidates", "CandidateShortlist").Data("FilterGrid"))
                .Model(model => model.Id(p => p.Id))
                )
        )*@

                </div>

            </div>
        }
        @if (ViewBag.Mode == "ShortlistedByHM")
        {
            <div style="margin-left:-10px;margin-top:-10px"><img style="width:1110px; height:100px" src="~/images/Shortlist by HM Shortlisted.png" /></div>
            <div class="mt-5">
                <p class="pl-1 pb-2" style="border-bottom: 1px solid #d7d6d6;font-weight: bold;font-size: 16px;"><i class="fas fa-calendar-alt"></i>&nbsp;Shortlist By Hiring Manager - Shortlisted<br></p>
                <div class="row" style="padding:10px;">
                    <div class="col-12">
                        @*<button class="btn btn-primary d-flex float-right d-lg-flex align-items-lg-center" type="button" style="height: 32px;" onclick="Update1('ShortListByHr');">Unselect Candidate from Interview</button>*@
                        <button class="btn btn-primary d-flex float-right d-lg-flex align-items-lg-center" id="raiseservicebtn" type="button" style="height: 32px;" onclick="RaiseBulkService();">Raise Bulk Schedule Interview</button>
                    </div>
                </div>

                <div id="section-shortlist" class="col-12">
                    <div id="CandShortlistGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

                    @*@(Html.Kendo().Grid<ApplicationDataViewModel>
                ().Name("kgrdCandJobOffer").Height("450")
                .Columns(columns =>
                {

                    //columns.Select().HtmlAttributes(new { @class = "checkbox-align" }).HeaderHtmlAttributes(new { @class = "checkbox-align" }).Width(50).Locked(true).Lockable(false);
                    //columns.Template(x => x.Id).Width(35).ClientTemplate(@"<input class='checkbox' type='checkbox' #=CheckFlag==false?disabled='disabled' : ''# />").HeaderTemplate(@"<input class='checkboxAll' type='checkbox' />");
                    columns.Bound(c => c.ApplicationId).ClientTemplate("<input class='checkbox' type='checkbox' #=TaskId==null?'':'disabled'# >").ClientHeaderTemplate("<input class='checkboxAll' type='checkbox' />").Width(50).Filterable(false).Sortable(false).HeaderHtmlAttributes(new { id = "selectcandservice" });
                    columns.Bound(c => c.ApplicationId).ClientTemplate("<a href='javascript:OnApplication(\"#=ApplicationId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("Resume").Width(120).HeaderHtmlAttributes(new { id = "viewcandprofile" });
                    columns.Bound(c => c.ApplicationId).ClientTemplate("#if(TaskId==null){#<button class='btn btn-info' onclick='onRaiseService(\"#:ApplicationId#\",\"SCHEDULE_INTERVIEW\")'>Raise Schedule Interview</button>#}else{#<button class='btn btn-info' onclick='onViewService(\"#:TaskId#\",\"SCHEDULE_INTERVIEW\")'>View Schedule Interview</button>#}#").Title("Service").Width(150).HeaderHtmlAttributes(new { id = "raisebulkservice" });
                    //columns.Bound(c => c.Id).ClientTemplate("#if(TaskStatusCode=='COMPLETED'){#<button class='btn btn-info' onclick='onEvaluation(\"#:Id#\")'>Evaluation</button>#}#").Title("Evaluation").Width(150).Locked(true).Lockable(false);
                    //columns.Bound(p => p.ShorlistedDate).Title("Shorlisted Date").Format(ApplicationConstant.DateAndTime.DefaultDateFormat).Width(180);
                    columns.Bound(p => p.FirstName).Title("First Name").Width(180);

                    columns.Bound(p => p.MiddleName).Title("Middle Name").Width(180);
                    columns.Bound(p => p.LastName).Title("Last Name").Width(150);

                    columns.Bound(p => p.ApplicationStateName).Title("Application State").Width(200);
                    columns.Bound(p => p.ApplicationStatusName).Title("Application Status").Width(200);
                    columns.Bound(p => p.BatchStatusName).Title("Batch Status").Width(200);
                    columns.Bound(p => p.Email).Width(150);
                    columns.Bound(p => p.ContactPhoneHome).Title("Contact Phone Home").Width(150);
                    columns.Bound(p => p.ContactPhoneLocal).Title("Contact Phone Local").Width(150);
                    columns.Bound(p => p.Score).Width(150);

                    columns.Bound(p => p.GenderName).Width(150);
                    columns.Bound(p => p.BloodGroup).Width(150);
                    columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                    columns.Bound(p => p.Age).Width(150);
                    columns.Bound(p => p.BirthPlace).Width(150);
                    columns.Bound(p => p.Nationality).Width(200);

                    columns.Bound(p => p.MaritalStatusName).Width(200);
                    columns.Bound(p => p.NoOfChildren).Width(200);

                    columns.Bound(p => p.TotalWorkExperience).Width(200);
                    columns.Bound(p => p.PassportNumber).Width(200);
                    columns.Bound(p => p.PassportIssueCountry).Width(200);
                    columns.Bound(p => p.PassportExpiryDate).Width(200).Format("{0:MM/dd/yyyy}");

                    columns.Bound(p => p.CurrentAddressHouse).Width(200);
                    columns.Bound(p => p.CurrentAddressStreet).Width(200);
                    columns.Bound(p => p.CurrentAddressCity).Width(200);
                    columns.Bound(p => p.CurrentAddressState).Width(200);
                    columns.Bound(p => p.CurrentAddressCountryName).Width(200);
                    columns.Bound(p => p.PermanentAddressHouse).Width(200);
                    columns.Bound(p => p.PermanentAddressStreet).Width(200);
                    columns.Bound(p => p.PermanentAddressCity).Width(200);
                    columns.Bound(p => p.PermanentAddressState).Width(200);
                    columns.Bound(p => p.PermanentAddressCountryName).Width(200);

                    columns.Bound(p => p.TimeRequiredToJoin).Width(200);

                    columns.Bound(p => p.NetSalaryCurrency).HeaderHtmlAttributes(new { title = "Net Salary Currency" }).Width(200);

                    columns.Bound(p => p.NetSalary).HeaderHtmlAttributes(new { title = "Net Salary" }).Width(200);
                    columns.Bound(p => p.OtherAllowances).HeaderHtmlAttributes(new { title = "Other Allowances" }).Width(200);

                })

                .Resizable(resize => resize.Columns(true))
                .Scrollable()
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                  .Operators(o => o.ForString(s => s.Clear()
                                  .Contains("Contains")
                                  .IsEqualTo("Is equal to")
                                  )))

                .DataSource(dataSource => dataSource
                .Ajax()
                //.PageSize(10)
                .Read(read => read.Action("ReadJobOfferCandidatesData", "CandidateShortlist").Data("FilterGrid"))
                .Model(model => model.Id(p => p.Id))
                )
        )*@

                </div>

            </div>
        }
        @if (ViewBag.Mode == "InterviewRequested")
        {
            <div style="margin-left:-10px;margin-top:-10px"><img style="width:1110px; height:100px" src="~/images/Shortlist by HM Interview.png" /></div>

            <div class="mt-5">
                <p class="pl-1 pb-2" style="border-bottom: 1px solid #d7d6d6;font-weight: bold;font-size: 16px;"><i class="fas fa-calendar-alt"></i>&nbsp;Shortlist By Hiring Manager - Interview Requested<br></p>

                <div id="section-shortlist" class="col-12">
                    <div id="CandShortlistGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

                    @*@(Html.Kendo().Grid<ApplicationDataViewModel>
                ().Name("kgrdCandJobOffer").Height("450")
                .Columns(columns =>
                {

                    columns.Bound(c => c.ApplicationId).ClientTemplate("<a href='javascript:OnApplication(\"#=ApplicationId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("Resume").Width(120).HeaderHtmlAttributes(new { id = "viewcandprofile" });
                    columns.Bound(c => c.ApplicationId).ClientTemplate("#if(TaskId==null){#<button class='btn btn-info' onclick='onRaiseService(\"#:ApplicationId#\",\"SCHEDULE_INTERVIEW\")'>Raise Schedule Interview</button>#}else{#<button class='btn btn-info' onclick='onViewService(\"#:TaskId#\",\"SCHEDULE_INTERVIEW\")'>View Schedule Interview</button>#}#").Title("Service").Width(150).HeaderHtmlAttributes(new { id = "raisebulkservice" });
                    //columns.Bound(c => c.Id).ClientTemplate("#if(TaskStatusCode=='COMPLETED'){#<button class='btn btn-info' onclick='onEvaluation(\"#:Id#\")'>Evaluation</button>#}#").Title("Evaluation").Width(150).Locked(true).Lockable(false);
                    columns.Bound(p => p.FirstName).Title("First Name").Width(180);

                    columns.Bound(p => p.MiddleName).Title("Middle Name").Width(180);
                    columns.Bound(p => p.LastName).Title("Last Name").Width(150);

                    columns.Bound(p => p.ApplicationStateName).Title("Application State").Width(200);
                    columns.Bound(p => p.ApplicationStatusName).Title("Application Status").Width(200);
                    columns.Bound(p => p.BatchStatusName).Title("Batch Status").Width(200);
                    columns.Bound(p => p.Email).Width(150);
                    columns.Bound(p => p.ContactPhoneHome).Title("Contact Phone Home").Width(150);
                    columns.Bound(p => p.ContactPhoneLocal).Title("Contact Phone Local").Width(150);
                    columns.Bound(p => p.Score).Width(150);

                    columns.Bound(p => p.GenderName).Width(150);
                    columns.Bound(p => p.BloodGroup).Width(150);
                    columns.Bound(p => p.BirthDate).Width(150).Format("{0:MM/dd/yyyy}");
                    columns.Bound(p => p.Age).Width(150);
                    columns.Bound(p => p.BirthPlace).Width(150);
                    columns.Bound(p => p.Nationality).Width(200);

                    columns.Bound(p => p.MaritalStatusName).Width(200);
                    columns.Bound(p => p.NoOfChildren).Width(200);

                    columns.Bound(p => p.TotalWorkExperience).Width(200);
                    columns.Bound(p => p.PassportNumber).Width(200);
                    columns.Bound(p => p.PassportIssueCountry).Width(200);
                    columns.Bound(p => p.PassportExpiryDate).Width(200).Format("{0:MM/dd/yyyy}");

                    columns.Bound(p => p.CurrentAddressHouse).Width(200);
                    columns.Bound(p => p.CurrentAddressStreet).Width(200);
                    columns.Bound(p => p.CurrentAddressCity).Width(200);
                    columns.Bound(p => p.CurrentAddressState).Width(200);
                    columns.Bound(p => p.CurrentAddressCountryName).Width(200);
                    columns.Bound(p => p.PermanentAddressHouse).Width(200);
                    columns.Bound(p => p.PermanentAddressStreet).Width(200);
                    columns.Bound(p => p.PermanentAddressCity).Width(200);
                    columns.Bound(p => p.PermanentAddressState).Width(200);
                    columns.Bound(p => p.PermanentAddressCountryName).Width(200);

                    columns.Bound(p => p.TimeRequiredToJoin).Width(200);

                    columns.Bound(p => p.NetSalaryCurrency).HeaderHtmlAttributes(new { title = "Net Salary Currency" }).Width(200);

                    columns.Bound(p => p.NetSalary).HeaderHtmlAttributes(new { title = "Net Salary" }).Width(200);
                    columns.Bound(p => p.OtherAllowances).HeaderHtmlAttributes(new { title = "Other Allowances" }).Width(200);

                })
                .Resizable(resize => resize.Columns(true))
                .Scrollable()
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                  .Operators(o => o.ForString(s => s.Clear()
                                  .Contains("Contains")
                                  .IsEqualTo("Is equal to")
                                  )))
                .DataSource(dataSource => dataSource
                .Ajax()
                //.PageSize(10)
                .Read(read => read.Action("ReadJobOfferCandidatesData", "CandidateShortlist").Data("FilterGrid"))
                .Model(model => model.Id(p => p.Id))
                )
        )*@

                </div>

            </div>
        }
        @if (ViewBag.Mode == "ClosedBatches")
        {
            <div style="margin-left:-10px;margin-top:-10px"><img style="width:1110px; height:100px" src="~/images/Shortlist by HM ClosedBatch.png" /></div>
            //<div class="mt-5">
            <p class="pl-1 pb-2" style="border-bottom: 1px solid #d7d6d6;font-weight: bold;font-size: 16px;"><i class="fas fa-calendar-alt"></i>&nbsp;Shortlist By HR - Closed Batches<br></p>

            <div id="section-shortlist" class="col-12">
                <div id="CandShortlistGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

                @*@(Html.Kendo().Grid<BatchViewModel>()
                            .Name("BatchgridClosed")
                            .Columns(columns =>
                            {

                                columns.Bound(c => c.JobName).Title("Position").HeaderHtmlAttributes(new { title = "Position" }).Width(180);
                                columns.Bound(c => c.Organization).HeaderHtmlAttributes(new { title = "Organization" }).Width(180);
                                columns.Bound(c => c.Name).Title("Batch No").HeaderHtmlAttributes(new { title = "Batch No" }).Width(180);
                                columns.Bound(c => c.HiringManagerName).HeaderHtmlAttributes(new { title = "Hiring Manager" }).Width(100);
                                columns.Bound(c => c.HeadOfDepartmentName).HeaderHtmlAttributes(new { title = "Head Of Department" }).Width(100);
                                columns.Bound(c => c.NoOfApplication).Title("No Of Applicants").HeaderHtmlAttributes(new { title = "No Of Applicants" }).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='onView(\"#:Id#\",\"#:NoOfApplication#\")'>#:NoOfApplication#</a>").Width(150);
                                columns.Bound(c => c.NotShortlistByHM).Title("Not Selected").HeaderHtmlAttributes(new { title = "Not Selected by HM" }).Width(150);
                                columns.Bound(c => c.ShortlistByHM).Title("Selected for Interview").HeaderHtmlAttributes(new { title = "Selected for Interview" }).Width(150);
                                columns.Bound(c => c.ConfirmInterview).Title("Interview Confirmed").HeaderHtmlAttributes(new { title = "Interview Confirmed" }).Width(150);
                                columns.Bound(c => c.Evaluated).Title("Evaluated").HeaderHtmlAttributes(new { title = "Evaluated" }).Width(150);
                                columns.Bound(c => c.BatchStatusName).HeaderHtmlAttributes(new { title = "Batch Status Name" }).Width(150);
                                columns.Bound(c => c.TargetHiringDate).HeaderHtmlAttributes(new { title = "Target Hiring Date" }).Format("{0:dd MMM yyyy}").Width(150);
                                })
                            .Scrollable(x => x.Enabled(true))
                            .Sortable(srt => srt.Enabled(true))
                            .Selectable(select => select.Enabled(true))
                            .Filterable(f => f.Extra(false)
                                                    .Operators(o => o.ForString(s => s.Clear()
                                                    .Contains("Contains")
                                                    .IsEqualTo("Is equal to")
                                                )))
                            .Pageable(pageable => pageable
                                            .Refresh(true)
                                            .PageSizes(true)
                                            .ButtonCount(5))
                            .AutoBind(true)
                            .Resizable(resize => resize.Columns(true))
                            .Events(e => e.DataBound("OnBatchDataBound"))
                            .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .PageSize(10)
                                        .Read(read => read.Action("ReadCloseBatchHmData", "Batch").Data("FilterBatch"))
                                        .Model(model => model.Id(p => p.Id))
                            )
                        )*@
            </div>            
        }
        @if (ViewBag.Mode == "OpenBatches")
        {
            <div style="margin-left:-10px;margin-top:-10px"><img style="width:1110px; height:100px" src="~/images/Shortlist by HM OpenBatch.png" /></div>
            
            <p class="pl-1 pb-2" style="border-bottom: 1px solid #d7d6d6;font-weight: bold;font-size: 16px;"><i class="fas fa-calendar-alt"></i>&nbsp;Shortlist By HR - Open Batches<br></p>


            <div id="section-shortlist" class="col-12">
                <div id="CandShortlistGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

                @*@(Html.Kendo().Grid<BatchViewModel>()
                            .Name("BatchgridClosed")
                            .Columns(columns =>
                            {
                                columns.Command(command =>
                                {
                                    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditBatch").HtmlAttributes(new { @class = "action-icon" });
                                    //command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteBatch").HtmlAttributes(new { @class = "action-icon" });
                                }).Title("Action").Width(100);
                                //columns.Bound(c => c.JobId);
                                columns.Bound(c => c.JobName).Title("Position").HeaderHtmlAttributes(new { title = "Position" }).Width(180);
                                columns.Bound(c => c.Organization).HeaderHtmlAttributes(new { title = "Organization" }).Width(180);
                                columns.Bound(c => c.Name).Title("Batch No").HeaderHtmlAttributes(new { title = "Batch No" }).Width(180);
                                columns.Bound(c => c.HiringManagerName).HeaderHtmlAttributes(new { title = "Hiring Manager" }).Width(100);
                                columns.Bound(c => c.HeadOfDepartmentName).HeaderHtmlAttributes(new { title = "Head Of Department" }).Width(100);
                                columns.Bound(c => c.NoOfApplication).Title("No Of Applicants").HeaderHtmlAttributes(new { title = "No Of Applicants" }).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='onView(\"#:Id#\",\"#:NoOfApplication#\")'>#:NoOfApplication#</a>").Width(150);
                                columns.Bound(c => c.NotShortlistByHM).Title("Not Selected").HeaderHtmlAttributes(new { title = "Not Selected by HM" }).Width(150);
                                columns.Bound(c => c.ShortlistByHM).Title("Selected for Interview").HeaderHtmlAttributes(new { title = "Selected for Interview" }).Width(150);
                                columns.Bound(c => c.ConfirmInterview).Title("Interview Confirmed").HeaderHtmlAttributes(new { title = "Interview Confirmed" }).Width(150);
                                columns.Bound(c => c.Evaluated).Title("Evaluated").HeaderHtmlAttributes(new { title = "Evaluated" }).Width(150);
                                columns.Bound(c => c.BatchStatusName).HeaderHtmlAttributes(new { title = "Batch Status Name" }).Width(150);
                                columns.Bound(c => c.TargetHiringDate).HeaderHtmlAttributes(new { title = "Target Hiring Date" }).Format("{0:dd MMM yyyy}").Width(150);
                                //columns.Bound(c => c.TargetBatchCount).Width(120);
                                columns.Bound(c => c.Id).Title("Close Batch").HeaderHtmlAttributes(new { title = "Close Batch" }).Width(130).ClientTemplate("#if(BatchStatusCode=='PendingwithHM'){#<button class='btn btn-info' onclick='UpdateBatchClose(\"#:Id#\")'>Close Batch</button>#}#").Width(280);
                            })
                            .Scrollable(x => x.Enabled(true))
                            .Sortable(srt => srt.Enabled(true))
                            .Selectable(select => select.Enabled(true))
                            .Filterable(f => f.Extra(false)
                                                    .Operators(o => o.ForString(s => s.Clear()
                                                    .Contains("Contains")
                                                    .IsEqualTo("Is equal to")
                                                )))
                            .Pageable(pageable => pageable
                                            .Refresh(true)
                                            .PageSizes(true)
                                            .ButtonCount(5))
                            .AutoBind(true)
                            .Resizable(resize => resize.Columns(true))
                            .Events(e => e.DataBound("OnBatchDataBound"))
                            .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .PageSize(10)
                                        .Read(read => read.Action("ReadCloseBatchHmData", "Batch").Data("FilterBatch"))
                                        .Model(model => model.Id(p => p.Id))
                            )
                        )*@
            </div>

            // </div>
        }
    </div>
    @Html.Hidden("ManpowerTypeCode")
 
    @*@(Html.Kendo().Dialog()
        .Name("confirmBatchClose")
        .Title("Close Batch")
        .Content("Are you sure, you want to close the batch? After closing the batch, you will not be able to shortlist or evaluate any candidate from this batch.")
        .Width(400)
        .Modal(true)
        .Visible(false)
        .Actions(actions =>
        {
            actions.Add().Text("Yes Close Batch").Primary(true).Action("ConfirmCloseBatch");
            actions.Add().Text("Cancel");
        })
    )*@

    @Html.HiddenFor(x => x.OrganizationId)
    @Html.HiddenFor(x => x.JobTitleForHiring)
    @Html.HiddenFor(x => x.BatchId)
</div>

