@using CMS.Data.Model
@using CMS.UI.ViewModel
@using Kendo.Mvc.UI
@using Kendo.Mvc.Extensions
@using CMS.Common
@using System.Web;

@model JobAdvertisementViewModel
@{
    ViewBag.Title = "Job Advertisement";
    Layout = ViewBag.Layout;
    // Layout = "/Views/Shared/_PopupLayout.cshtml";
    // Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
}

<script>
    var flag = false;

    var totalweightage = 0;

    $(document).ready(function () {



        var grid = $("#GridJobCriteria").data("kendoGrid");
        grid.bind("cancel", grid_cancelJ);
        grid.bind("remove", grid_removeJ);
        var grid2 = $("#GridSkills").data("kendoGrid");
        grid2.bind("cancel", grid_cancelS);
        grid2.bind("remove", grid_removeS);
        var grid3 = $("#GridOtherInformation").data("kendoGrid");
        grid3.bind("cancel", grid_cancelI);
        grid3.bind("remove", grid_removeI);

    });

    function grid_removeJ(e) {

        $('#GridJobCriteria').data('kendoGrid').dataSource.remove(e.model);
        tempSavedRecords = $('#GridJobCriteria').data('kendoGrid').dataSource.data();
        tempSavedRecords = tempSavedRecords.toJSON();
    }
    function grid_cancelJ(e) {
        e.preventDefault();

        //var grid = $("#GridJobCriteria").data("kendoGrid");
        //var dataitem = grid.dataSource.at(0);
        //grid.dataSource.cancelChanges(dataitem);
        //var grid = $("#GridJobCriteria").data("kendoGrid").dataSource;
        //    var item = grid.getByUid(e.model.uid);
        //grid.cancelChanges(e);
        if (tempSavedRecords != null) {
            //var grid = $("#GridJobCriteria").data("kendoGrid").dataSource.data();

            //for (var i = 1; i < grid.length; i++) {
            //
            //    tempSavedRecords[i].CriteriaTypeName = grid[i].CriteriaTypeName;

            //}
            $('#GridJobCriteria').data('kendoGrid').dataSource.data(tempSavedRecords);
        }
        else {
            $('#GridJobCriteria').data('kendoGrid').dataSource.cancelChanges();
        }
        return true;
    }

    function grid_removeS(e) {

        $('#GridSkills').data('kendoGrid').dataSource.remove(e.model);
        tempSavedRecords2 = $('#GridSkills').data('kendoGrid').dataSource.data();
        tempSavedRecords2 = tempSavedRecords2.toJSON();
    }
    function grid_cancelS(e) {
        e.preventDefault();


        if (tempSavedRecords2 != null) {

            $('#GridSkills').data('kendoGrid').dataSource.data(tempSavedRecords2);
        }
        else {
            $('#GridSkills').data('kendoGrid').dataSource.cancelChanges();
        }
        return true;
    }

    function grid_removeI(e) {

        $('#GridSkills').data('kendoGrid').dataSource.remove(e.model);
        tempSavedRecords3 = $('#GridSkills').data('kendoGrid').dataSource.data();
        tempSavedRecords3 = tempSavedRecords3.toJSON();
    }
    function grid_cancelI(e) {
        e.preventDefault();


        if (tempSavedRecords3 != null) {

            $('#GridOtherInformation').data('kendoGrid').dataSource.data(tempSavedRecords3);
        }
        else {
            $('#GridOtherInformation').data('kendoGrid').dataSource.cancelChanges();
        }
        return true;
    }

    function validateExpiryDate() {
      //
        var date1 = $("#ExpiryDate").val();
       // alert(date1);
        if (date1!="" && !Date.parse(date1)) {
            alert("Invalid Expiry Date");
            $("#ExpiryDate").val("");
        }

    }

    function validateNeededDate() {
      //
        var date2 = $("#NeededDate").val();

        if (date2 != "" && !Date.parse(date2)) {
            alert("Invalid Required Date");
            $("#NeededDate").val("");
        }

    }

    var onAjaxSuccess = function (res) {
       // alert("test");
        if (res.success) {
           //
            //alert('@ViewBag.Permission');
            ShowNotification("Saved Successfully", "success");
            LoadPartailView('@Url.Action("Index", "JobAdvertisement", new { @area = "Recruitment" })?id=' + res.id + '&jobId=' + res.jobId + '&permission=' + '@ViewBag.Permission', $('#cms-content'));
            //var url = "/recruitment/manpowerrequirementsummary/index";
            //LoadPartailView(url, $('#cms-content'));
          //  $("#GridJobCriteria").data("kendoGrid").read();
          //  $("#GridJobCriteria").data("kendoGrid").dataSource.read();
        }
        else {
           //
           // alert("Job is Active You Cannot Add Job Advertisment against this job");
            showError(res.error);
        }
        btnShow();
        //HideLoader($('#divjobAdv'));
    };



    function OnDeleteCriteria(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        var jobgrid = $("#GridJobCriteria").data("kendoGrid").dataSource.data();
        var flag = confirm('Do you really want to delete?');

        if (flag && dataItem.RowId == "") {
            var index = jobgrid.map(x => {
                return x.Id;
            }).indexOf(dataItem.Id);
            jobgrid.splice(index, 1);
            kendo.alert("Deleted Successfully");
            return false;
        }
        else {
            var index = jobgrid.map(x => {
                return x.RowId;
            }).indexOf(dataItem.RowId);
            jobgrid.splice(index, 1);
            kendo.alert("Deleted Successfully");
            //
            //var grid = $("#GridJobCriteria").data("kendoGrid").dataSource.data(jobcriteria);
            //grid = jobcriteria;
           // return false;
        }
    }
    function OnDeleteSkills(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var jobgrid = $("#GridSkills").data("kendoGrid").dataSource.data();
        var index = jobgrid.map(x => {
            return xModelRowId;
        }).indexOf(dataItem.RowId);

        var flag = confirm('Do you really want to delete?');

        if (flag && dataItem.RowId == "") {

            $.ajax({
                url:'@Url.Action("DeleteCriteria", "JobAdvertisement", new { @area = "Recruitment" })?Id=' + dataItem.id,
               // url:"/Recruitment/JobAdvertisement/DeleteCriteria?Id=" + dataItem.id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    console.log(result.success);
                    //
                    if (result.success) {
                        var index = jobgrid.map(x => {
                            return x.Id;
                        }).indexOf(dataItem.Id);
                      //  $("#GridSkills").data("kendoGrid").dataSource.read();
                        jobgrid.splice(index, 1);
                        kendo.alert("Deleted Successfully");
                    }
                },
                error: function (ert) {
                    //

                   // $("#GridSkills").data("kendoGrid").dataSource.read();
                   // jobgrid.splice(index, 1);
                    kendo.alert("Can't delete this record");
                }
            });
            return false;
        }
        else {
            jobgrid.splice(index, 1);
            kendo.alert("Deleted Successfully");

        }
    }
    function OnDeleteInfo(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var jobgrid = $("#GridOtherInformation").data("kendoGrid").dataSource.data();
        var index = jobgrid.map(x => {
            return x.RowId;
        }).indexOf(dataItem.RowId);
        var flag = confirm('Do you really want to delete?');

        if (flag && dataItem.RowId == "") {

            $.ajax({
                url:'@Url.Action("DeleteCriteria", "JobAdvertisement", new { @area = "Recruitment" })?Id=' + dataItem.id,
               // url:"/Recruitment/JobAdvertisement/DeleteCriteria?Id=" + dataItem.id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    console.log(result.success);
                    //
                    if (result.success) {
                        var index = jobgrid.map(x => {
                            return x.Id;
                        }).indexOf(dataItem.Id);
                        jobgrid.splice(index, 1);
                       // $("#GridOtherInformation").data("kendoGrid").dataSource.read();
                        kendo.alert("Deleted Successfully");
                    }
                },
                error: function (ert) {
                    //
                   // jobgrid.splice(index, 1);
                   // $("#GridOtherInformation").data("kendoGrid").dataSource.read();
                    kendo.alert("Can't delete this record");
                }
            });
            return false;
        }
        else {
            jobgrid.splice(index, 1);
            kendo.alert("Deleted Successfully");

        }
    }
    var jobcriteria=[];
    var jobcriteriaindex=1;
    var skillcriteriaindex=1;
    var infocriteriaindex = 1;
    var tempSavedRecords = null;
    var tempSavedRecords2 = null;
    var tempSavedRecords3 = null;


    function onGridSaveCriteria(arg) {
        
        //var grid = $("#GridJobCriteria").data("kendoGrid").dataSource.data();
        //for (var i = 0; i < grid.length; i++) {
        //
        //    if (grid[i].Id == "" && grid[i].RowId == "") {
        //        grid[i].RowId = jobcriteriaindex++;
        //    }

        //}

        //$("#GridJobCriteria").data("kendoGrid").dataSource.data(grid);
       //
      //  var criteriaId = $("#CriteriaType_CriteriaType").data().kendoDropDownList.value();
        //alert(criteriaId)
      //  arg.model.set("CriteriaType", criteriaId);
      //  alert(arg.model.CriteriaType)
        if (arg.model.Weightage != "" && arg.model.Weightage>100) {
            arg.preventDefault();
            kendo.alert("Weightage should not be greater than 100");

         //
            return false;
        }
        if (arg.model.Criteria == "") {
            arg.preventDefault();
            kendo.alert("Please Enter Criteria Name");            
            return false;
        }
        if (arg.model.CriteriaType == "") {
            arg.preventDefault();
            kendo.alert("Please Select Criteria Type");

            //
            return false;
        }
        if (arg.model.CriteriaType != "" && arg.model.Criteria != "") {

            $.ajax({
                type: "GET",
                dataType: "json",
                url: "/Recruitment/JobAdvertisement/GetCriteriaNameById?id=" + arg.model.CriteriaType + '&type=CRITERIATYPE',
                success: function (name) {
                    //alert(tablename);

                    arg.model.CriteriaTypeName = name;
                    tempSavedRecords = $('#GridJobCriteria').data('kendoGrid').dataSource.data();
                    tempSavedRecords = tempSavedRecords.toJSON();
                },
            });

        }

      //  var grid = $("#GridJobCriteria").data("kendoGrid").dataSource.data();
      //

        //for (var i = 0; i < grid.length; i++) {
        //
        //    tempSavedRecords[i].CriteriaTypeName = grid[i].CriteriaTypeName;

        //}
    }

    function onGridSaveSkills(arg) {
       //
      //  alert(totalweightage)
      //  var criteriaId = $("#CriteriaType_CriteriaType").data().kendoDropDownList.value();
       // alert(criteriaId)
      //  arg.model.set("CriteriaType", criteriaId);
        //var grid1 = $("#GridSkills").data("kendoGrid").dataSource.data();

        //for (var i = 0; i < grid1.length; i++) {
        //
        //    if (grid1[i].Id == "" && grid1[i].RowId == "") {
        //        grid1[i].RowId = skillcriteriaindex++;
        //    }


        //}

        //$("#GridSkills").data("kendoGrid").dataSource.data(grid1);

        if (arg.model.Weightage != "" && arg.model.Weightage > 100) {
            arg.preventDefault();
            kendo.alert("Weightage should not be greater than 100");

          //
            return false;
        }
        if (arg.model.Criteria == "") {
            arg.preventDefault();
            kendo.alert("Please Enter Skill Name");
            return false;
        }
        if (arg.model.CriteriaType == "") {
            arg.preventDefault();
            kendo.alert("Please Select Criteria Type");

              // arg.preventDefault()
            return false;
        }
        if (arg.model.CriteriaType != "" && arg.model.Criteria != "") {
            $.ajax({
                type: "GET",
                dataType: "json",
                url: "/Recruitment/JobAdvertisement/GetCriteriaNameById?id=" + arg.model.CriteriaType + '&type=CRITERIATYPE',
                success: function (name) {
                    //alert(tablename);
                    arg.model.CriteriaTypeName = name;
                    tempSavedRecords2 = $('#GridSkills').data('kendoGrid').dataSource.data();
                    tempSavedRecords2 = tempSavedRecords2.toJSON();
                },
            });

        }

        //console.log(arg);
    }
    function onGridSaveInfo(arg) {
       //
       // var criteriaId = $("#CriteriaType_CriteriaType").data().kendoDropDownList.value();
       // alert(criteriaId)
       // arg.model.set("CriteriaType", criteriaId);
        //var grid2 = $("#GridOtherInformation").data("kendoGrid").dataSource.data();

        //for (var i = 0; i < grid2.length; i++) {
        //
        //    if (grid2[i].Id == "" && grid2[i].RowId == "") {
        //        grid2[i].RowId = infocriteriaindex++;
        //    }


        //}

        //$("#GridOtherInformation").data("kendoGrid").dataSource.data(grid2);
        debugger;
        if (arg.model.Criteria == "") {
            arg.preventDefault();
            kendo.alert("Please Enter Criteria Name");
            return false;
        }
        if (arg.model.CriteriaType == "") {
            arg.preventDefault();
            kendo.alert("Please Select Criteria Type");

            return false;
        }
        
        var cty = $("#CriteriaType").data("kendoDropDownList").text();
        if (cty == "List of Value" && arg.model.ListOfValueTypeId == "") {
            arg.preventDefault();
            kendo.alert("Please Select List Of Value Type");
            return false;
        }

        if (arg.model.CriteriaType != "" && arg.model.Criteria != "") {
            $.ajax({
                type: "GET",
                dataType: "json",
                url: "/Recruitment/JobAdvertisement/GetCriteriaNameById?id=" + arg.model.CriteriaType + '&type=CRITERIATYPE',
                success: function (name) {
                    //alert(tablename);
                    arg.model.CriteriaTypeName = name;
                   
                    tempSavedRecords3 = $('#GridOtherInformation').data('kendoGrid').dataSource.data();
                    tempSavedRecords3 = tempSavedRecords3.toJSON();
                },
            });

        }

       

        if (arg.model.ListOfValueTypeId != "" && arg.model.ListOfValueTypeId != null) {
            $.ajax({
                type: "GET",
                dataType: "json",
                url: "/Recruitment/JobAdvertisement/GetOtherLOVNameById?id=" + arg.model.ListOfValueTypeId,
                success: function (name) {
                   // alert(name);
                    arg.model.LovTypeName = name;
                    tempSavedRecords3 = $('#GridOtherInformation').data('kendoGrid').dataSource.data();
                    tempSavedRecords3 = tempSavedRecords3.toJSON();
                },
            });

        }
    }

    function DraftData(e) {
        totalweightage = 0;
       // alert(totalweightage)
        var data = $("#GridJobCriteria").data("kendoGrid").dataSource._data
        for (i = 0; i < data.length; i++) {
            totalweightage += data[i].Weightage;
        }
       // alert(totalweightage)
        var data1 = $("#GridSkills").data("kendoGrid").dataSource._data
        for (i = 0; i < data1.length; i++) {
            totalweightage += data1[i].Weightage;
        }
        if (totalweightage > 100) {
            alert("Weightage should not be greater than 100")
            totalweightage = 0;
            e.preventDefault();
            return false;
        }
      //  flag = true;
        var cgrid1 = $("#GridJobCriteria").data("kendoGrid");

        var ccount = cgrid1.dataSource.data().length;
        //$("#kgrdColumnMetadatas").length
        if (ccount > 0) {
            //var detail = JSON.stringify($("#kgrdColumnMetadatas").data().kendoGrid.dataSource.data());
            var detail = JSON.stringify(cgrid1.dataSource.data());
            // console.log(detail);
            $("#JobCriteria").val(detail);
        }
        //else {
        //    alert("At least one column is required to save the table.");
        //    e.preventDefault();
        //    return false;
        //}

        var cgrid2 = $("#GridSkills").data("kendoGrid");

        var ccount = cgrid2.dataSource.data().length;
        //$("#kgrdColumnMetadatas").length
        if (ccount > 0) {
            //var detail = JSON.stringify($("#kgrdColumnMetadatas").data().kendoGrid.dataSource.data());
            var detail = JSON.stringify(cgrid2.dataSource.data());
            // console.log(detail);
            $("#Skills").val(detail);
        }
        //else {
        //    alert("At least one column is required to save the table.");
        //    e.preventDefault();
        //    return false;
        //}

        var cgrid3 = $("#GridOtherInformation").data("kendoGrid");

        var ccount = cgrid3.dataSource.data().length;
        //$("#kgrdColumnMetadatas").length
        if (ccount > 0) {
            //var detail = JSON.stringify($("#kgrdColumnMetadatas").data().kendoGrid.dataSource.data());
            var detail = JSON.stringify(cgrid3.dataSource.data());
            // console.log(detail);
            $("#OtherInformation").val(detail);
        }

        //else {
        //    alert("At least one column is required to save the table.");
        //    e.preventDefault();
        //    return false;
        //}
      //  e.model.SaveType
        $("#SaveType").val("DRAFT");

     //   $("#Action").val("Draft");
    }

    function SaveData(e) {
        totalweightage = 0;
        //
        var errmsg = "";
        var msgcount = 0;
        var loc = $("#LocationId").val();
        if (loc == '') {
            errmsg = errmsg + "<li>Location is required.</li>"
            msgcount = msgcount + 1;
        }
        var desc = $("#Description").val();
        if (desc == '') {
            errmsg = errmsg + "<li>Description is required.</li>"
            msgcount = msgcount + 1;
        }
        var pos = $("#NoOfPosition").val();
        if (pos == '') {
            errmsg = errmsg + "<li>No Of Position is required.</li>"
            msgcount = msgcount + 1;
        }
        var exp = $("#Experience").val();
        if (exp == '') {
            errmsg = errmsg + "<li>Experience is required.</li>"
            msgcount = msgcount + 1;
        }
        var jobcat = $("#JobCategoryId").val();
        if (jobcat == '') {
            errmsg = errmsg + "<li>Job Category is required.</li>"
            msgcount = msgcount + 1;
        }
        //var manpower = $("#ManpowerTypeId").val();
        //if (manpower == '') {
        //    errmsg = errmsg + "<li>Manpower Type is required.</li>"
        //    msgcount = msgcount + 1;
        //}
        if (msgcount > 0) {
            $(".text-danger").removeClass("validation-summary-valid");
            $(".text-danger").addClass("validation-summary-errors");
            $(".text-danger").html(errmsg);
            //$("#validation-summary").css("display", "block");
            e.preventDefault();
            return false;
        } else {

            var data = $("#GridJobCriteria").data("kendoGrid").dataSource._data
            for (i = 0; i < data.length; i++) {
                totalweightage += data[i].Weightage;
            }
            // alert(totalweightage)
            var data1 = $("#GridSkills").data("kendoGrid").dataSource._data
            for (i = 0; i < data1.length; i++) {
                totalweightage += data1[i].Weightage;
            }
            if (totalweightage > 100) {
                alert("Weightage should not be greater than 100")
                e.preventDefault();
                return false;
            }




            //if (flag) {
            //    $("#flag").val(true);
            //}
            // else {
            var cgrid1 = $("#GridJobCriteria").data("kendoGrid");

            var ccount = cgrid1.dataSource.data().length;
            //$("#kgrdColumnMetadatas").length
            if (ccount > 0) {
                //var detail = JSON.stringify($("#kgrdColumnMetadatas").data().kendoGrid.dataSource.data());
                var detail = JSON.stringify(cgrid1.dataSource.data());
                // console.log(detail);
                $("#JobCriteria").val(detail);
            }
            //else {
            //    alert("At least one column is required to save the table.");
            //    e.preventDefault();
            //    return false;
            //}

            var cgrid2 = $("#GridSkills").data("kendoGrid");

            var ccount = cgrid2.dataSource.data().length;
            //$("#kgrdColumnMetadatas").length
            if (ccount > 0) {
                //var detail = JSON.stringify($("#kgrdColumnMetadatas").data().kendoGrid.dataSource.data());
                var detail = JSON.stringify(cgrid2.dataSource.data());
                // console.log(detail);
                $("#Skills").val(detail);
            }
            //else {
            //    alert("At least one column is required to save the table.");
            //    e.preventDefault();
            //    return false;
            //}

            var cgrid3 = $("#GridOtherInformation").data("kendoGrid");

            var ccount = cgrid3.dataSource.data().length;
            //$("#kgrdColumnMetadatas").length
            if (ccount > 0) {
                //var detail = JSON.stringify($("#kgrdColumnMetadatas").data().kendoGrid.dataSource.data());
                var detail = JSON.stringify(cgrid3.dataSource.data());
                // console.log(detail);
                $("#OtherInformation").val(detail);
            }
            // }

            //else {
            //    alert("At least one column is required to save the table.");
            //    e.preventDefault();
            //    return false;
            //}
            $("#SaveType").val("SUBMIT");
            $("#flag").val(true);
            //  $("#Action").val("Submit");

        }
    }

    function ApprovData(e) {
        //ShowLoader($('#divjobAdv'));

        btnHide();
        totalweightage = 0;
        var errmsg = "";
        var msgcount = 0;
        var loc = $("#LocationId").val();
        if (loc == '') {
            errmsg = errmsg + "<li>Location is required.</li>"
            msgcount = msgcount + 1;
        }
        var desc = $("#Description").val();
        if (desc == '') {
            errmsg = errmsg + "<li>Description is required.</li>"
            msgcount = msgcount + 1;
        }
        var pos = $("#NoOfPosition").val();
        if (pos == '') {
            errmsg = errmsg + "<li>No Of Position is required.</li>"
            msgcount = msgcount + 1;
        }
        var exp = $("#Experience").val();
        if (exp == '') {
            errmsg = errmsg + "<li>Experience is required.</li>"
            msgcount = msgcount + 1;
        }
        var jobcat = $("#JobCategoryId").val();
        if (jobcat == '') {
            errmsg = errmsg + "<li>Job Category is required.</li>"
            msgcount = msgcount + 1;
        }
        //var manpower = $("#ManpowerTypeId").val();
        //if (manpower == '') {
        //    errmsg = errmsg + "<li>Manpower Type is required.</li>"
        //    msgcount = msgcount + 1;
        //}
        if (msgcount > 0) {
            $(".text-danger").removeClass("validation-summary-valid");
            $(".text-danger").addClass("validation-summary-errors");
            $(".text-danger").html(errmsg);
            //$("#validation-summary").css("display", "block");

            //HideLoader($('#divjobAdv'));
            btnShow();
            e.preventDefault();
            return false;
        } else {

        var data = $("#GridJobCriteria").data("kendoGrid").dataSource._data
        for (i = 0; i < data.length; i++) {
            totalweightage += data[i].Weightage;
        }
        // alert(totalweightage)
        var data1 = $("#GridSkills").data("kendoGrid").dataSource._data
        for (i = 0; i < data1.length; i++) {
            totalweightage += data1[i].Weightage;
            }
        if (totalweightage > 100) {
            alert("Weightage should not be greater than 100")
            //HideLoader($('#divjobAdv'));
            btnShow();
            e.preventDefault();
            return false;
        }

        if (flag) {
            $("#flag").val(true);
        }
        else {
            var value = $("#JobId").data("kendoDropDownList").text();
            //alert(value);
        $("#JobName").val(value);

            var cgrid1 = $("#GridJobCriteria").data("kendoGrid");

            var ccount = cgrid1.dataSource.data().length;
            //$("#kgrdColumnMetadatas").length
            if (ccount > 0) {
                //var detail = JSON.stringify($("#kgrdColumnMetadatas").data().kendoGrid.dataSource.data());
                var detail = JSON.stringify(cgrid1.dataSource.data());
                // console.log(detail);
                $("#JobCriteria").val(detail);
            }
            //else {
            //    alert("At least one column is required to save the table.");
            //    e.preventDefault();
            //    return false;
            //}

            var cgrid2 = $("#GridSkills").data("kendoGrid");

            var ccount = cgrid2.dataSource.data().length;
            //$("#kgrdColumnMetadatas").length
            if (ccount > 0) {
                //var detail = JSON.stringify($("#kgrdColumnMetadatas").data().kendoGrid.dataSource.data());
                var detail = JSON.stringify(cgrid2.dataSource.data());
                // console.log(detail);
                $("#Skills").val(detail);
            }
            //else {
            //    alert("At least one column is required to save the table.");
            //    e.preventDefault();
            //    return false;
            //}

            var cgrid3 = $("#GridOtherInformation").data("kendoGrid");

            var ccount = cgrid3.dataSource.data().length;
            //$("#kgrdColumnMetadatas").length
            if (ccount > 0) {
                //var detail = JSON.stringify($("#kgrdColumnMetadatas").data().kendoGrid.dataSource.data());
                var detail = JSON.stringify(cgrid3.dataSource.data());
                // console.log(detail);
                $("#OtherInformation").val(detail);
            }
        }

        //else {
        //    alert("At least one column is required to save the table.");
        //    e.preventDefault();
        //    return false;
        //}
        $("#SaveType").val("APPROVE");
            // $("#Action").val("Approve");
        }

    }


    function back() {

        //window.location.href = "/recruitment/manpowerrequirementsummary/index";
       // var url = "/recruitment/manpowerrequirementsummary/index?permissions=@ViewBag.Permission";
        var url = "/recruitment/JobAdvertisement/JobAdvertisement?permissions=@ViewBag.Permission";
        LoadPartailView(url, $('#cms-content'));

    }
    @*function OnCreateList() {

         iframeOpenUrl = '@Url.Action("CreateList", "JobAdvertisement", new { @area="Recruitment"})';
        OpenIframePopup(450,1200,'Manage ListOfValue');

    }*@
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function OnJobdescription(e) {
        var dataItem = this.dataItem(e.item);

        $.ajax({
            type: "GET",
            dataType: "json",
            url: "/Recruitment/JobAdvertisement/GetJobDescriptionbyId?Id=" + dataItem.Id,
            success: function (data) {

                //alert(tablename);
                if (data != null) {
                    //$('#Description').val(data.Description);
                    //$('#Responsibilities').val(data.Responsibilities);
                    var desceditor = $("#Description").data("kendoEditor");                  
                    desceditor.value(data.Description);
                    var reseditor = $("#Responsibilities").data("kendoEditor");
                    reseditor.value(data.Responsibilities);
                  //  $('#JobCategoryId').val(data.JobCategoryId);
                    var numerictextbox = $("#Experience").data("kendoNumericTextBox");
                    var jobcategory = $("#JobCategoryId").data("kendoDropDownList");
                    var qualification = $("#Qualification").data("kendoDropDownList");
                    //var value = numerictextbox.value();
                    numerictextbox.value(data.Experience);
                   // $('#Experience').val(data.Experience);
                    qualification.value(data.Qualification);
                    jobcategory.value(data.JobCategoryId);
                }

            },
        });
    }

    function ShowLoader(target) {
        // target.loadingOverlay();
        kendo.ui.progress(target, true);
    }
    function HideLoader(target) {
        //target.loadingOverlay('remove');
        kendo.ui.progress(target, false);
    }
    function btnShow() {
        var btndraft = document.getElementById("btnDraft");
        if (btndraft != null) {
            //document.getElementById("btnDraft").disabled = false;
            $("#btnDraft").show();
        }
        var btnsubmit = document.getElementById("btnSubmit");
        if (btnsubmit!=null) {
            //document.getElementById("btnSubmit").disabled = false;
            $("#btnSubmit").show();
        }
        var btnsave = document.getElementById("btnSave");
        if (btnsave!=null) {
            //document.getElementById("btnSave").disabled = false;
            $("#btnSave").show();
        }

    }
    function btnHide() {
        var btndraft = document.getElementById("btnDraft");
        if (btndraft != null) {
            //document.getElementById("btnDraft").disabled = true;
            $("#btnDraft").hide();
        }
        var btnsubmit = document.getElementById("btnSubmit");
        if (btnsubmit != null) {
            //document.getElementById("btnSubmit").disabled = true;
            $("#btnSubmit").hide();
        }
        var btnsave = document.getElementById("btnSave");
        if (btnsave != null) {
            //document.getElementById("btnSave").disabled = true;
            $("#btnSave").hide();
        }
    }

    function LOVdata(jobid) {

        return {
            type: 77,
            jobid: jobid,
           // ddlvalue: ddlvalue
        }
    }

    function onDataBound() {
            var type = this.text();
        if (type == "List of Value") {
           // var search = LOVdata('@Model.JobId')
           // $("#ListOfValueTypeId").data("kendoDropDownList").dataSource.read(search);
            $("#addlov").show();
        }
        else {

            $("#addlov").hide();
        }
    }

    function onOtherChange() {


        var type = this.text();
        if (type == "List of Value") {
          //  var search = LOVdata('@Model.JobId')
          //  $("#ListOfValueTypeId").data("kendoDropDownList").dataSource.read(search);
          //  $("#ListOfValueTypeId").show();
            $("#addlov").show();
        }
        else {
             var search = LOVdata('@Model.JobId')
            $("#ListOfValueTypeId").data("kendoDropDownList").dataSource.read(search);
            $("#addlov").hide();
        }

    }
  function addlistofvalue() {
      //  alert("test");
         @*iframeOpenUrl = '@Url.Action("CreateList", "JobAdvertisement", new { @area = "Recruitment" })?jobid='+ '@Model.JobId';
      OpenIframePopup(1000, 1200, 'Manage ListOfValue');*@
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("CreateList", "JobAdvertisement", new { @area = "Recruitment" })?jobid='+ '@Model.JobId';
      win.OpenWindow({ Title: 'Manage ListOfValue', Width: 900, Height: 900 });
        return false;
    }

    function viewlistofvalue() {
      //  alert("test");
         @*iframeOpenUrl = '@Url.Action("ViewListOfValue", "JobAdvertisement", new { @area = "Recruitment" })?jobid='+ '@Model.JobId';
        OpenIframePopup(700, 1200, 'Manage ListOfValue');*@
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("ViewListOfValue", "JobAdvertisement", new { @area = "Recruitment" })?jobid='+ '@Model.JobId';
      win.OpenWindow({ Title: 'Manage ListOfValue', Width: 1000, Height: 900 });
        return false;
    }

</script>

<style>
    .Description {
        width: 100%;
        height: 150px;
        border-radius: 6px;
        border-color: aliceblue;
    }

    .manpowertype {
        color: black;
        font-size: medium;
    }

    .required {
        color: red;
    }

    .form-control-plaintext {
        padding-top: 0px;        
    }

    .k-editable-area {
        background-color: #fff;
    }
</style>

<div>

    <div class="p-4">
        <div class="row">
            <div class="col-8 fa-2x">
                Job Advertisement
            </div>
            @if (Model.Layout != "popup")
            {
            <div class="col-4">
                <input type="button" class="btn btn-dark float-right" value="Back" onclick="back()" />
            </div>

            }
           
        </div>
        <form asp-area="Recruitment" asp-controller="JobAdvertisement" asp-action="ManageJobCriteria"
              method="post" data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
              data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
              data-ajax="true" data-ajax-method="POST">
            <div class="text-danger" asp-validation-summary="All" style="font-size:14px;"></div>


            <div class="col">
                <div class="row row-body-head">

                    <div class="col">
                        <br />
                        <div class="row row-cols-sm-2 row-cols-md-2 row-cols-lg-4 row-cols-xl-4 row_head">
                            <div class="col-3">
                                <p class="text_left_side_head">Position</p>
                            </div>
                            <div class="col-9">

                                @(Html.Kendo().DropDownListFor(model => model.JobId)
            .DataSource(source =>
            {
                source.Read(read =>
                {
                    read.Action("GetJobIdNameList", "ManpowerRequirementSummary");
                });
            })
            //.OptionLabel("Select")
            .DataTextField("Name")
            .DataValueField("Id")
            .Filter(FilterType.Contains)
            .HtmlAttributes(new { @class = "form-control-plaintext txt-desc k-state-disabled", @style = "width:80%;" })
                                        )
                            </div>

                        </div>
                        <br />
                        <div class="row row-cols-sm-2 row-cols-md-2 row-cols-lg-4 row-cols-xl-4 row_head">
                            <div class="col-3">
                                <p class="text_left_side_head">ManPower Type</p>
                            </div>
                            <div class="col-9 manpowertype">
                                @Model.ManpowerType
                            </div>
                        </div>
                        @*<div class="row row-cols-sm-2 row-cols-md-2 row-cols-lg-4 row-cols-xl-4 row_head">
            <div class="col-3">
                <p class="text_left_side_head">Organization Unit</p>
            </div>
            <div class="col-9">

                @(Html.Kendo().DropDownListFor(model => model.OrganizationId)
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetIdNameList", "Master",new { type="Organization"});
                            });
                        })
                        //.OptionLabel("Select")
                        .DataTextField("Name")
                        .DataValueField("Id")
                        .Filter(FilterType.Contains)
                        .HtmlAttributes(new { @class = "form-control-plaintext txt-desc k-state-disabled", @style = "width:80%;" })
                        )


            </div>
        </div>

        <br />*@
                    </div>

                    <div class="col">
                        <br />
                        <div class="row row-cols-sm-2 row-cols-md-2 row-cols-lg-4 row-cols-xl-4 row_head">
                            <div class="col-3">
                                <p class="text_left_side_head">@*<i class="material-icons icon-head">location_on</i>*@Job Location<span class="required"> *</span></p>
                            </div>
                            <div class="col-9">
                                @(Html.Kendo().DropDownListFor(x => x.LocationId)
            .DataTextField("Name")
            .DataValueField("Id")
            .DataSource(source =>
            {
                source.Read(read =>
                {
                    read.Action("GetLocationtList", "RecruitmentDashboard");
                });
            })
            .Filter(FilterType.Contains)
            .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
            .HtmlAttributes(new { @class = "form-control-plaintext ip_text", @style = "width:80%;" })
                                )
                            </div>
                        </div>
                        <br />
                        <div class="row row-cols-sm-2 row-cols-md-2 row-cols-lg-4 row-cols-xl-4">
                            <div class="col-3">
                                <p class="text_left_side_head">@*ManPower Type*@</p>
                            </div>
                            <div class="col-9 manpowertype">
                                @*@Model.ManpowerType*@
                            </div>
                        </div>
                        <br />
                    </div>
                </div>

                <div class="row" style="margin-right:0px;">

                    <div class="col-12 col-body-1-1">
                        <br />
                        <div class="row-12">
                            <label class="form-control-plaintext text_left_side" style="font-size:16px;">
                                Description <span class="required"> *</span><br>
                            </label>
                        </div>
                        <div class="row-12">
                            @(Html.Kendo().EditorFor(x => x.Description)
            .HtmlAttributes(new { style = "width: 100%; height:300px", @required = "required" })

            .Tools(tools => tools
            .Clear()
            .Bold().Italic().Underline()
            .JustifyLeft().JustifyCenter().JustifyRight()
            .InsertUnorderedList().InsertOrderedList()
            //.Outdent().Indent()
            .CreateLink().Unlink()
            .ViewHtml()
            //.TableEditing()
            .ForeColor().BackColor()
            .FontName()
            .FontSize()
        )
                            )
                            @*@Html.TextAreaFor(x => x.Description, new { @class = "Description" })*@
                        </div><br />
                        <div class="row-12">
                            <label class="form-control-plaintext text_left_side" style="font-size:16px;">
                                Responsibilities @*<span class="required"> *</span>*@<br>
                            </label>
                        </div>
                        <div class="row-12">
                            @(Html.Kendo().EditorFor(x => x.Responsibilities)
            .HtmlAttributes(new { style = "width: 100%; height:300px" })

            .Tools(tools => tools
            .Clear()
            .Bold().Italic().Underline()
            .JustifyLeft().JustifyCenter().JustifyRight()
            .InsertUnorderedList().InsertOrderedList()
            //.Outdent().Indent()
            .CreateLink().Unlink()
            .ViewHtml()

            .ForeColor().BackColor()
            .FontName()
            .FontSize()
            )
                        )
                            @*@Html.TextAreaFor(x => x.Responsibilities, new { @class = "Description" })*@
                        </div>
                        <br />
                    </div>
                </div>
                
                <div class="row">
                    <div class="col col-body-1-1">
                        <div class="row">
                            <div class="col-12 col-lg-12 col-xl-12 visible">

                                <div class="row">
                                    <div class="col-12 col-md-6 col-lg-6 col-xl-6 col-left-cell">
                                        <label class="form-control-plaintext text_left_side">
                                            Qualification<br>
                                        </label>
                                    </div>
                                    <div class="col col-right-cell">

                                        @(Html.Kendo().DropDownListFor(x => x.Qualification)
            .DataTextField("Name")
            .DataValueField("Id")
            .DataSource(source =>
            {
                source.Read(read =>
                {
                    read.Action("GetListOfValueList", "ListOfValue", new { type = "LOV_QUALIFICATION" });
                });
            })
            .Filter(FilterType.Contains)
            .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
            .HtmlAttributes(new { @class = "form-control-plaintext ip_text", style = "width:80%;" })
                                        )
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-12 col-sm-6 col-md-6 col-lg-6 col-xl-6 col-left-cell">
                                        <label class="form-control-plaintext text_left_side">
                                            Nationality<br>
                                        </label>

                                    </div>
                                    <div class="col col-right-cell">
                                        @(Html.Kendo().DropDownListFor(x => x.NationalityId)
            .DataTextField("Name")
            .DataValueField("Id")
            .DataSource(source =>
            {
                source.Read(read =>
                {
                    read.Action("GetNationalityIdNameList", "CandidateProfile");
                });
            })
            .Filter(FilterType.Contains)
            .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
            .HtmlAttributes(new { @class = "form-control-plaintext ip_text", style = "width:80%;" })
                                        )
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-12 col-sm-6 col-md-6 col-lg-6 col-xl-6 col-left-cell">
                                        <label class="form-control-plaintext text_left_side">
                                            Status<br>
                                        </label>
                                    </div>
                                    <div class="col col-right-cell">
                                        @if (Model.UserRoleCodes.Contains("HR"))
                                        {

                                            @(Html.Kendo().DropDownListFor(x => x.Status)
                .DataTextField("Name")
                .DataValueField("Id")
                //.Events(e => e.Change("OnPageTypechange"))
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "StatusEnum" });
                    });
                })
                .Filter(FilterType.Contains)
                .Value(Model.Status.ToString())
                .HtmlAttributes(new { @class = "form-control-plaintext ip_text", style = "width:80%;" })
                                            )
                                        }

                                        else
                                        {
                                            @(Html.Kendo().DropDownListFor(x => x.Status)
                    .DataTextField("Name")
                    .DataValueField("Id")
                    //.Events(e => e.Change("OnPageTypechange"))
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "StatusEnum" });
                        });
                    })
                    .Value(Model.Status.ToString())
                    .HtmlAttributes(new { @class = "form-control-plaintext ip_text k-state-disabled", style = "width:80%;" })
                                            )
                                        }
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-12 col-sm-6 col-md-6 col-left-cell">
                                        <label class="form-control-plaintext text_left_side">
                                            Job Category<span class="required"> *</span><br>
                                        </label>
                                    </div>
                                    <div class="col col-right-cell">
                                        @(Html.Kendo().DropDownListFor(x => x.JobCategoryId)
                .DataTextField("Name")
                .DataValueField("Id")
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetListOfValueList", "ListOfValue", new { type = "JOB_CATEGORY" });
                    });
                })
                .Filter(FilterType.Contains)
                .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                .HtmlAttributes(new { @class = "form-control-plaintext ip_text", style = "width:80%;" })
                                            )
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-12 col-sm-6 col-md-6 col-left-cell">
                                        <label class="form-control-plaintext text_left_side">
                                            Agency<br>
                                        </label>
                                    </div>
                                    <div class="col col-right-cell">

                                        @(Html.Kendo().MultiSelectFor(x => x.AgencyIds)
                                            .AutoClose(false)
                                            .Placeholder("Select Agency...")
                                            .DataSource(source =>
                                            {
                                                source.Read(read =>
                                                {
                                                    read.Action("GetIdNameList", "Agency",new { @area= "Recruitment" });
                                                });

                                            })
                                            .DataTextField("AgencyName")
                                            .DataValueField("Id")
                                            .AutoBind(true)
                                            .HtmlAttributes(new { @class = "form-control" })
                                            .ValuePrimitive(true)
                                            .Height(300)
                                     )
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6 col-body-1-1 ml-lg-1 mr-lg-3">
                        <div class="row">
                            <div class="col visible">

                                <div class="row">
                                    <div class="col-12 col-sm-6 col-md-6 col-left-cell">
                                        <label class="form-control-plaintext text_left_side">
                                            No. Of Job Position<span class="required"> *</span><br>
                                        </label>
                                    </div>
                                    <div class="col col-right-cell">
                                        @Html.Kendo().NumericTextBoxFor(x => x.NoOfPosition).HtmlAttributes(new { @class = "form-control-plaintext ip_text", style = "width:80%;" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-12 col-sm-6 col-md-6 col-left-cell">
                                        <label class="form-control-plaintext text_left_side">
                                            Experience<span class="required"> *</span><br>
                                        </label>
                                    </div>
                                    <div class="col col-right-cell">
                                        @Html.Kendo().NumericTextBoxFor(x => x.Experience).HtmlAttributes(new { @class = "form-control-plaintext ip_text", style = "width:80%;" })
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-12 col-sm-6 col-md-6 col-left-cell">
                                        <label class="form-control-plaintext text_left_side">
                                            Expiry Date<br>
                                        </label>

                                    </div>
                                    <div class="col col-right-cell">
                                        @Html.Kendo().DatePickerFor(x => x.ExpiryDate).HtmlAttributes(new { onfocusout = "validateExpiryDate();", style = "width:80%;" }).Format("dd MMM yyyy").Min(DateTime.Today)
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-12 col-sm-6 col-md-6 col-left-cell">
                                        <label class="form-control-plaintext text_left_side">
                                            Required Date<br>
                                        </label>
                                    </div>
                                    <div class="col col-right-cell">
                                        @Html.Kendo().DatePickerFor(x => x.NeededDate).Format("dd MMM yyyy").Min(DateTime.Today).HtmlAttributes(new { @style = "width:80%;" })
                                    </div>
                                </div>

                               
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row job_criteria">
                    <div class="col"><span class="job_criteria_span">Job Criteria</span></div>
                </div>
                <div class="row row-body-1">
                    <div class="col col-body-1-1">
                        <div class="row">
                            <div class="col visible">
                                @(Html.Kendo().Grid<JobCriteriaViewModel>
(Model.JobCriteria)
.Name("GridJobCriteria")
// .ToolBar(toolbar =>
// toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateJobCriteria();'><i class='fa fas fa-plus'></i>&nbsp;Add Job Criteria</button>"))
.ToolBar(toolbar =>
{
    toolbar.Create().Text("Add Job Criteria");

})
//toolbar.Custom().Text("Create Group").HtmlAttributes(new { href = "javascript:OnCreateGroup();" }))
.Columns(columns =>
{
    //columns.Command(command =>
    //{
    //    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditJobCriteria").HtmlAttributes(new { @class = "action-icon" });
    //    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon" });
    //}).Title("Action").Width(100);
    columns.Command(command => { command.Edit().Text(" ").UpdateText(" ").CancelText(" ");
        command.Destroy()/*.IconClass("fa fas fa-trash-alt")*/.Text(" ");
        // command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteCriteria").HtmlAttributes(new { @class = "action-icon" });
    }).Width(120);

    columns.Bound(c => c.Criteria);
    //columns.Bound(c => c.Type);
    columns.Bound(c => c.Weightage);
    //  columns.Bound(c => c.CriteriaType).ClientTemplateId("criteriatype_template");
    columns.Bound(c => c.CriteriaType).EditorTemplateName("JobAdvtCriteriaType")/*.ClientTemplate("#:CriteriaType.Name#")*/.ClientTemplateId("criteriatype_template");
    // columns.Bound(c => c.CriteriaType).ClientTemplate("#=CriteriaType#");


})
.Events(e => e.Save("onGridSaveCriteria"))
//  .Events(e=>e.Change("onGridSaveCriteria"))
.Editable(editable => editable.Mode(GridEditMode.InLine).DisplayDeleteConfirmation(true)
//.ConfirmDelete("Continue to delete this record?")
//.DisplayDeleteConfirmation("Continue to delete this record?")
)
.Scrollable(x => x.Enabled(false))
.Sortable(srt => srt.Enabled(true))
.Selectable(select => select.Enabled(false))
.Filterable(f => f.Extra(false)
                        .Operators(o => o.ForString(s => s.Clear()
                        .Contains("Contains")
                        .IsEqualTo("Is equal to")
                    )))
.Pageable(pageable => pageable
.Refresh(true)

.PageSizes(true)
.ButtonCount(5))
.AutoBind(true)
.DataSource(
dataSource => dataSource
.Ajax()
.PageSize(10)
.Batch(true)
.ServerOperation(false)
//.Events(events => events.Error("OnError"))
.Read(read => read.Action("ReadJobCriteriaData", "JobAdvertisement", new { jobadvtid = Model.Id, jobdesc = Model.ShowJobDesc }))
//  .Destroy(update => update.Action("EditingInline_Destroy", "JobAdvertisement"))
// .Model(model => model.Id(p => p.Id))
.Model(model =>
{
    model.Id(p => p.Id);
    // model.Field(p => p.CriteriaType);
    //model.Field(p => p.CriteriaTypeName);
}
))
          )
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row job_criteria">
                    <div class="col"><span class="job_criteria_span">Skills</span></div>
                </div>
                <div class="row row-body-1">
                    <div class="col col-body-1-1">
                        <div class="row">
                            <div class="col visible">
                                @(Html.Kendo().Grid<JobCriteriaViewModel>
(Model.Skills)
.Name("GridSkills")
//.ToolBar(toolbar =>
//  toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateSkills();'><i class='fa fas fa-plus'></i>&nbsp;Add Skills</button>"))
.ToolBar(toolbar =>
{
    toolbar.Create().Text("Add Skills");
    //toolbar.Save();
})
//toolbar.Custom().Text("Create Group").HtmlAttributes(new { href = "javascript:OnCreateGroup();" }))
.Columns(columns =>
{
    //columns.Bound(c => c.Id).Width(140).Hidden(true);
    //  columns.Bound(c => c.Id).Title(" ").Width(100).ClientTemplate("<a class='btn btn-success' onclick='return OnEditGroup(\"#=Id#\");'><i class='fad fa-edit'></i> Edit</a>");
    //columns.Command(command =>
    //{
    //    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditSkills").HtmlAttributes(new { @class = "action-icon" });
    //    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon" });
    //}).Title("Action").Width(100);
    columns.Command(command => { command.Edit().Text(" ").UpdateText(" ").CancelText(" ");
        command.Destroy()/*.IconClass("fa fas fa-trash-alt")*/.Text(" "); }).Width(120);
    //   command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteSkills").HtmlAttributes(new { @class = "action-icon" });
    //     }).Width(120);

    columns.Bound(c => c.Criteria).Title("Skills");
    //columns.Bound(c => c.Type);
    columns.Bound(c => c.Weightage);
    //  columns.Bound(c => c.CriteriaType).ClientTemplateId("criteriatype_template");
    columns.Bound(c => c.CriteriaType).EditorTemplateName("JobAdvtCriteriaType")/*.ClientTemplate("#:CriteriaType.Name#")*/.ClientTemplateId("criteriatype_template");

    //columns.Bound(c => c.GroupPortals).ClientTemplate("#= GroupPortals.join(', ')  #").Width(140);

})
.Events(e => e.Save("onGridSaveSkills"))
.Editable(editable => editable.Mode(GridEditMode.InLine).DisplayDeleteConfirmation(true)
//.ConfirmDelete("Continue to delete this record?")
//.DisplayDeleteConfirmation("Continue to delete this record?")
)
.Scrollable(x => x.Enabled(false))
.Sortable(srt => srt.Enabled(true))
.Selectable(select => select.Enabled(false))
.Filterable(f => f.Extra(false)
                        .Operators(o => o.ForString(s => s.Clear()
                        .Contains("Contains")
                        .IsEqualTo("Is equal to")
                    )))
.Pageable(pageable => pageable
.Refresh(true)

.PageSizes(true)
.ButtonCount(5))
.AutoBind(true)
.DataSource(
dataSource => dataSource
.Ajax()
.PageSize(10)
//.Events(events => events.Error("OnError"))
.Read(read => read.Action("ReadSkillsData", "JobAdvertisement", new { jobadvtid = Model.Id, jobdesc = Model.ShowJobDesc }))
.Model(model => { model.Id(p => p.Id);
    // model.Field(p => p.CriteriaType);
}
)
)
          )
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row job_criteria">
                    <div class="col"><span class="job_criteria_span">Other Information</span></div>
                </div>
                <div class="row row-body-1">
                    <div class="col col-body-3-1">
                        @(Html.Kendo().Grid<JobCriteriaViewModel>
(Model.OtherInformation)
.Name("GridOtherInformation")
//.ToolBar(toolbar =>
//toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateInfo();'><i class='fa fas fa-plus'></i>&nbsp;Add Other Information</button>"))
.ToolBar(toolbar =>
{
    toolbar.Create().Text("Add Other Information");
    toolbar.Custom().Text("View List Of Value").HtmlAttributes(new { href = "javascript:viewlistofvalue();" });
    //toolbar.Save();
})
//toolbar.Custom().Text("Create Group").HtmlAttributes(new { href = "javascript:OnCreateGroup();" }))
.Columns(columns =>
{

    columns.Command(command => { command.Edit().Text(" ").UpdateText(" ").CancelText(" ");
        command.Destroy()/*.IconClass("fa fas fa-trash-alt")*/.Text(" "); }).Width(120);


    columns.Bound(c => c.Criteria);


    columns.Bound(c => c.CriteriaType).EditorTemplateName("JobAdvtOtherCriteriaType")/*.ClientTemplate("#:CriteriaType.Name#")*/.ClientTemplateId("criteriatype_template");
    columns.Bound(c => c.ListOfValueTypeId).Title("List Of Value Type").EditorTemplateName("JobAdvtOtherLOVType").ClientTemplateId("lov_template");


})
.Events(e => e.Save("onGridSaveInfo"))
.Editable(editable => editable.Mode(GridEditMode.InLine).DisplayDeleteConfirmation(true)
    //.ConfirmDelete("Continue to delete this record?")
    //.DisplayDeleteConfirmation("Continue to delete this record?")
    )
.Scrollable(x => x.Enabled(false))
.Sortable(srt => srt.Enabled(true))
.Selectable(select => select.Enabled(false))
.Filterable(f => f.Extra(false)
                                .Operators(o => o.ForString(s => s.Clear()
                                .Contains("Contains")
                                .IsEqualTo("Is equal to")
                            )))
.Pageable(pageable => pageable
.Refresh(true)

.PageSizes(true)
.ButtonCount(5))
.AutoBind(true)
.DataSource(
dataSource => dataSource
.Ajax()
.PageSize(10)
//.Events(events => events.Error("OnError"))
.Read(read => read.Action("ReadInfoData", "JobAdvertisement", new { jobadvtid = Model.Id, jobdesc = Model.ShowJobDesc }))
.Model(model => model.Id(p => p.Id))
)
          )
                    </div>
                </div>










            </div>
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.JobCriteria)
            @Html.HiddenFor(x => x.Skills)
            @Html.HiddenFor(x => x.OtherInformation)
            @*@Html.HiddenFor(x => x.ManpowerRecruitmentSummaryId)*@
            @Html.HiddenFor(x => x.SaveType)
            @Html.HiddenFor(x => x.ActionId)
            @Html.HiddenFor(x => x.ActionName)
            @Html.HiddenFor(x => x.DataAction)
            @Html.HiddenFor(x => x.DraftId)
            @Html.HiddenFor(x => x.SubmitId)
            @Html.HiddenFor(x => x.ApprovalId)
            @Html.HiddenFor(x => x.JobName)

            @*@Html.HiddenFor(x => x.JobId)*@
            @*<script src="assets/js/jquery.min.js"></script>
                <script src="assets/bootstrap/js/bootstrap.min.js"></script>*@

        <div class="row-md-12" id="divjobAdv">

            <!--<input type="button" class="btn btn-light" value="Close"--> @*onclick="closeNav()"*@ <!--/>-->
            @if (!Model.IsView)
            {
                @if (Model.UserRoleCodes.Contains("HR"))
                {
                    @*@if (Model.ActionId != "ffc5ba94-5656-4e84-8604-1c4337b0970d")*@
                    @if (Model.ActionId != Model.ApprovalId)
                    {
                        <input type="submit" id="btnDraft" class="btn btn-info" style="float:right" value="Draft" onclick="DraftData(event)" />
                    }

                    @*@if (Model.ActionId != "ffc5ba94-5656-4e84-8604-1c4337b0970d")*@
                    @if (Model.ActionId != Model.ApprovalId)
                    {

                        <input type="submit" id="btnSubmit" class="btn btn-primary" style="float:right" value="Submit" onclick="ApprovData(event)" />

                    }
                    @if (Model.ActionId == Model.ApprovalId)
                    {

                        <input type="submit" id="btnSave" class="btn btn-primary" style="float:right" value="Save" onclick="ApprovData(event)" />
                    }

                }
            }
            @*@if (Model.UserRoleCodes.Contains("CORPCOMP"))
        {
            <input type="submit" class="btn btn-success" value="Approval" onclick="ApprovData(event)" />
        }*@
            <br />
            <br />
        </div>

        </form>
    </div>
</div>
<script id="lov_template" type="text/x-kendo-template">
    #=data.LovTypeName#
</script>

<script id="criteriatype_template" type="text/x-kendo-template">
    #=data.CriteriaTypeName#
</script>



<!--<script>
    function OnCreateJobCriteria() {
        var jobadvtid =@Model.Id;
        alert(jobadvtid);
         iframeOpenUrl = '@Url.Action("CreateJobCriteria", "JobAdvertisement", new { @area= "Recruitment" })?JobadvtId=' + jobadvtid;
        OpenIframePopup(450, 1200,'Manage JobCriteria');-->
@*document.getElementById("mySidenavPortal").style.width = "450px";
    LoadPartailView('@Url.Action("CreateMemberGroup", "MemberGroup", new { @area="Cms"})', $('#portal-content'));
    $("#overlay").addClass("overlay");*@
<!--}

function OnEditJobCriteria(e) {
    var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
    iframeOpenUrl = '@Url.Action("EditJobCriteria", "JobAdvertisement", new { @area= "Recruitment" })?Id=' + dataItem.Id;
      OpenIframePopup(450, 1200,'Manage JobCriteria');
}

function OnCreateSkills() {
    var jobadvtid =@Model.Id;
    alert(jobadvtid);
     iframeOpenUrl = '@Url.Action("CreateJobSkills", "JobAdvertisement", new { @area= "Recruitment" })?JobadvtId=' + jobadvtid;
    OpenIframePopup(450, 1200,'Manage Skills');-->
@*document.getElementById("mySidenavPortal").style.width = "450px";
    LoadPartailView('@Url.Action("CreateMemberGroup", "MemberGroup", new { @area="Cms"})', $('#portal-content'));
    $("#overlay").addClass("overlay");*@
<!--}

function OnEditSkills(e) {
    var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
    iframeOpenUrl = '@Url.Action("EditJobSkills", "JobAdvertisement", new { @area= "Recruitment" })?Id=' + dataItem.Id;
    OpenIframePopup(450, 1200,'Manage Skills');
}

 function OnCreateInfo() {
    var jobadvtid =@Model.Id;
    alert(jobadvtid);
     iframeOpenUrl = '@Url.Action("CreateInfo", "JobAdvertisement", new { @area= "Recruitment" })?JobadvtId=' + jobadvtid;
    OpenIframePopup(450, 1200,'Manage Other Information');-->
@*document.getElementById("mySidenavPortal").style.width = "450px";
    LoadPartailView('@Url.Action("CreateMemberGroup", "MemberGroup", new { @area="Cms"})', $('#portal-content'));
    $("#overlay").addClass("overlay");*@
<!--}

    function OnEditInfo(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        iframeOpenUrl = '@Url.Action("EditInfo", "JobAdvertisement", new { @area= "Recruitment" })?Id=' + dataItem.Id;
        OpenIframePopup(450, 1200,'Manage Other Information');
    }

     function OnDelete(e) {
        // 
        //  $('#dlg_DeleteConfirmation').data("kendoDialog").open();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        kendo.confirm("Are you sure that you want to proceed?").then(function () {
            //confirmDelete(dataItem.Id);
             $.ajax({
                 // url: "~/UserRole/DeleteUserRole?Id=" + id,
                 url: '@Url.Action("DeleteCriteria", "JobAdvertisement", new { @area= "Recruitment" })?Id=' + dataItem.Id,
            type: "GET",
            contentType: "application/json",
            dataType: "JSON",
            success: function (response) {
                // $('#dlg_DeleteConfirmation').data("kendoDialog").close();
                ShowNotification("Deleted Successfully", "success");
               // window.parent.$("#Usergrid").data("kendoGrid").dataSource.read();
            }
        });
        }, function () {

        });

    }

</script>-->
