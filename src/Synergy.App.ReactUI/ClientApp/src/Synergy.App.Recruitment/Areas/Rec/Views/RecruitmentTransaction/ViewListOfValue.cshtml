@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@{
    ViewData["Title"] = "View List Of Value";
    Layout = "/Areas/Core/Views/Shared/_PopupLayout.cshtml";
}

@model LOVViewModel

<style>
    .form-control {
        width: unset;
    }

    .required {
        color: red;
    }
</style>

<script>

    function OnAdd() {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ManageListOfValue", "RecruitmentTransaction", new { @area = "Rec" })?refTypeId='+'@Model.ReferenceId';
        win.OpenWindow({ Title: 'Manage List Of Value', Width: 1000, Height: 700 });
        return false;
    }
    function OnEditList(id) {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ManageListOfValue", "RecruitmentTransaction", new { @area = "Rec" })?Id=' + id;
        win.OpenWindow({ Title: 'Manage List Of Value', Width: 1000, Height: 700 });
        return false;
    }

    function OnSave() {
        var cgrid = $("#grid").data("kendoGrid");
        var ccount = cgrid.dataSource.data().length;
        if (ccount > 0) {
            var detail = JSON.stringify(cgrid.dataSource.data());
            $("#Json").val(detail);
        }
    }

    var onAjaxSuccess = function (res) {

        if (res.success) {

            ShowNotification("Saved Successfully", "success");
            var win = GetMainWindow();
            win.CloseWindow();
            return false;
            window.parent.$("#ListOfValueTypeId").data("kendoDropDownList").dataSource.read({ jobid: $("#ReferenceTypeId").val(), type: 77 });
        }
        else {
            showError(res.error);
        }
    };

    $(document).ready(function () {
        if ('@ViewBag.Success' == "True") {
            closeNavMemberGroup();
        }
    });

    function closeNavMemberGroup() {
        var win = GetMainWindow();
        win.CloseWindow();
        return false;
    }

    var columnDefs = [
        { field: "Name", headerName: "Name", maxWidth: 150, },
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-lov' data-id='" + params.value + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    function GetListOfValueList(refTypeId) {
        document.getElementById("ListOfValueGrid").innerHTML = "";

        gridConfig(
            "ListOfValueGrid",
            "/Rec/RecruitmentTransaction/GetLOVList?jobid=" + refTypeId,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    $(function () {
        GetListOfValueList('@Model.ReferenceId');

        $.contextMenu({
            selector: '#tree-lov',
            trigger: 'left',
            build: function ($trigger, e) {

                var Id = $trigger.data('id');

                switch (0) {
                    case 0:

                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'items':
                                        OnEditList(Id);
                                        break;
                                    default:
                                }
                            },
                            items: {
                                "items": { name: "Edit", icon: "fa-duotone fa-pen-to-square" },
                            },
                        };
                }
            }
        });

    });

</script>


<div class="row" style="margin-left:15px;">

    <div>
        <button class="btn btn-primary" onclick="OnAdd();">Add New</button>
    </div>

    <div id="ListOfValueGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

    @*@(Html.Kendo().Grid<ListOfValueViewModel>
    ()
    .Name("viewgrid")
   // .ToolBar(toolbar =>
    //toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateList();'>Create ListofValue</button>"))

    //toolbar.Custom().Text("Create Group").HtmlAttributes(new { href = "javascript:OnCreateGroup();" }))
    .Columns(columns =>
    {
        //columns.Bound(c => c.Id).Width(140).Hidden(true);
        //  columns.Bound(c => c.Id).Title(" ").Width(100).ClientTemplate("<a class='btn btn-success' onclick='return OnEditGroup(\"#=Id#\");'><i class='fad fa-edit'></i> Edit</a>");
        columns.Command(command =>
        {
            command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditList").HtmlAttributes(new { @class = "action-icon"});
           // command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>")/*.Click("OnDeleteUserRoleStageChild")*/.HtmlAttributes(new { @class = "action-icon"});
        }).Title("Action").Width(150);
        // columns.Bound(c => c.Name);
        columns.Bound(c => c.Name);
        //columns.Bound(c => c.StatusCode).ClientTemplate("#=generateTemplate(StatusCode)#");
    })
     .Scrollable(x => x.Enabled(false))
                .Sortable(srt => srt.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                .Operators(o => o.ForString(s => s.Clear()
                .Contains("Contains")
                .IsEqualTo("Is equal to")
                )))
                .Pageable(pageable => pageable
                .Refresh(true)

                .PageSizes(true)
                .ButtonCount(5))
                .AutoBind(true)
                .DataSource(
                dataSource => dataSource
                .Ajax()
                .PageSize(10)
                //.Events(events => events.Error("OnError"))
                .Read(read => read.Action("GetViewList", "JobAdvertisement", new { @area = "Recruitment" , jobid=Model.ReferenceTypeId}))
                .Model(model => model.Id(p => p.Id))
                )
          )*@

</div>

@Html.HiddenFor(x => x.Id)
@Html.HiddenFor(x => x.LOVType)
@Html.HiddenFor(x => x.Code)
@Html.HiddenFor(x => x.Json)
@Html.HiddenFor(x => x.ReferenceId)
@Html.HiddenFor(x => x.ReferenceType)

