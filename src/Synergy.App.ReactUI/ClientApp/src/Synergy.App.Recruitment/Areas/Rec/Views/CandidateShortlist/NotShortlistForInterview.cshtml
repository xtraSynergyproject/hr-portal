@using CMS.UI.ViewModel;
@using Kendo.Mvc.UI;
@using CMS.Common;

@*@model ApplicationDataViewModel;*@
@model ApplicationSearchViewModel;

@{
    ViewBag.Title = "";
    Layout = "/Views/Shared/_PopupLayout.cshtml";
    // Layout = null;
}

<style>
    .k-grid {
        border-color: #2d9fca;
    }

    .k-grid-header .k-header {
        color: #2d9fca;
        font-weight: 700;
    }

    .k-pager-wrap .k-link.k-state-disabled {
        border-radius: 40px;
        margin-left: 5px;
    }

    .k-pager-numbers .k-state-selected {
        border-radius: 40px;
        margin-left: 5px;
    }

    .k-pager-wrap .k-pager-refresh {
        border-color: transparent;
        background-color: #f8f9fa;
        color: black;
    }

    .k-grid td {
        /*border-color: #2d9fca;*/
        border-color: transparent;
    }

    .k-grid-pager {
        border-color: #2d9fca;
    }

    .k-grid thead {
        background-color: transparent;
    }

    /*.k-grid td:first-child {
        text-align: center;
    }*/
    span {
        padding: 0px !important;
    }
</style>

<script type="text/javascript">
    function Update(type) {
        //alert($("#ManpowerTypeCode").val());
       // if ($("#ManpowerTypeCode").val() == "Worker" || $("#ManpowerTypeCode").val() == "DriverOperator") {
           // type = "FinalOfferSent";
          //  alert(type);
       // }

        var users = '';
        var grid = $("#kgrdCandInterview").data("kendoGrid");

        var rows = grid.select();
        var length = rows.length / 2;
        var i = 1;
        rows.each(function (index, row) {
            if (i <= length) {
                var selectedItem = grid.dataItem(row);
                users = users + selectedItem.Id + ',';
            }
            i++;
            // selectedItem has EntityVersionId and the rest of your model
        });
        if (users == '' || users == ',') {
            alert("Please Select atleast one candidate from the list");
        }
        else {
            ShowLoader($('#section-shortlist'));
            var assignTo = "";
            $.ajax({
                type: "POST",
                url: "/Recruitment/CandidateShortlist/UpdateApplicationStatus",
                data: { 'applicants': users, 'type': type },
                success: function (data) {
                    //alert(data.success);
                    if (data.success) {
                        //
                        var search = FilterGrid();
                        //var jobgrid = $("#kgrdCandJobOffer").data("kendoGrid");
                        //jobgrid.dataSource.read(search);
                        //jobgrid.refresh();
                        var intergrid = $("#kgrdCandInterview").data("kendoGrid");
                        intergrid.dataSource.read(search);
                        //intergrid.refresh();
                        //$("#kgrdCandJobOffer").data("kendoGrid").dataSource.read(search);
                        //$("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
                       // var search1 = FilterBatch();
                      //  $("#Batchgrid").data("kendoGrid").dataSource.read(search1);

                    }
                },
                dataType: "json",
            });

            // Now Schedule Interview rasied by Hm manually
            //$.ajax({
            //    type: "GET",
            //    url: "/Cms/Task/AssignTaskForScheduleInterview",
            //    data: { 'applicantIds': users, 'assignTo': assignTo },
            //    success: function (data) {
            //        if (data.success) {
            //            var search = FilterGrid();
            //            var jobgrid = $("#kgrdCandJobOffer").data("kendoGrid");
            //            jobgrid.dataSource.read(search);
            //            //jobgrid.refresh();
            //            var intergrid = $("#kgrdCandInterview").data("kendoGrid");
            //            intergrid.dataSource.read(search);
            //            //intergrid.refresh();
            //        }
            //        HideLoader($('#section-shortlist'));
            //    },
            //    dataType: "json",
            //});

            $.ajax({
                type: "GET",
                url: "/Recruitment/CandidateShortlist/CreateApplicationTrackforHm",
                data: { 'applicantIds': users },
                success: function (data) {
                    if (data.success) {
                        var search = FilterGrid();
                        var jobgrid = $("#kgrdCandJobOffer").data("kendoGrid");
                        jobgrid.dataSource.read(search);
                        //jobgrid.refresh();
                        var intergrid = $("#kgrdCandInterview").data("kendoGrid");
                        intergrid.dataSource.read(search);
                        //intergrid.refresh();
                        HideLoader($('#section-shortlist'));
                    }
                },
                dataType: "json",
            });
        }

    }

    function Update1(type) {
        var users = '';
        var tasks = '';
        var grid = $("#kgrdCandJobOffer").data("kendoGrid");

        var rows = grid.select();
        var length = rows.length / 2;
        var i = 1;
        rows.each(function (index, row) {
            if (i <= length) {
                var selectedItem = grid.dataItem(row);
                users = users + selectedItem.Id + ',';
                tasks = tasks + selectedItem.TaskId + ',';
            }
            i++;
            // selectedItem has EntityVersionId and the rest of your model
        });
        if (users == '' || users == ',') {
            alert("Please Select atleast one candidate from the list");
        }
        else {
            var assignTo = "";
            $.ajax({
                type: "POST",
                url: "/Recruitment/CandidateShortlist/UpdateApplicationState",
                data: { 'applicants': users, 'type': type },
                success: function (data) {
                    if (data.success) {
                        //
                        var search = FilterGrid();
                        var jobgrid = $("#kgrdCandJobOffer").data("kendoGrid");
                        jobgrid.dataSource.read(search);
                        jobgrid.refresh();
                        var intergrid = $("#kgrdCandInterview").data("kendoGrid");
                        intergrid.dataSource.read(search);
                        intergrid.refresh();
                        //$("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
                        //$("#kgrdCandJobOffer").data("kendoGrid").dataSource.read(search);
                    }
                },
                dataType: "json",
            });
            $.ajax({
                type: "GET",
                url: "/Cms/Task/CancelTaskForScheduleInterview",
                data: { 'taskIds': tasks, 'assignTo': assignTo },
                success: function (data) {
                    if (data.success) {
                        var search = FilterGrid();
                        var jobgrid = $("#kgrdCandJobOffer").data("kendoGrid");
                        jobgrid.dataSource.read(search);
                        jobgrid.refresh();
                        var intergrid = $("#kgrdCandInterview").data("kendoGrid");
                        intergrid.dataSource.read(search);
                        intergrid.refresh();

                    }
                },
                dataType: "json",
            });
            //alert(users);
            //alert(tasks);
        }
    }

    function RaiseBulkService() {

        var users = '';
        var tasks = '';
        var grid = $("#kgrdCandJobOffer").data("kendoGrid");
        grid.tbody.find("input:checked").closest("tr").each(function (index) {
            users = users + grid.dataItem(this).Id + ',';
        });
        //var rows = grid.select();
        //var length = rows.length / 2;
        //var i = 1;
        //rows.each(function (index, row) {
        //    if (i <= length) {
        //        var selectedItem = grid.dataItem(row);
        //        users = users + selectedItem.Id + ',';
        //        tasks = tasks + selectedItem.TaskId + ',';
        //    }
        //    i++;
        //    // selectedItem has EntityVersionId and the rest of your model
        //});
        if (users == '' || users == ',') {
            alert("Please Select atleast one candidate from the list");
        }
        else {
            //alert(users);
            @*iframeOpenUrl = '@Url.Action("ManageBulkScheduleInterview", "Task", new { @area= "Cms" })?applicationIds=' + users;
            OpenIframePopup(500, 500, 'Bulk Schedule Interview');*@
             var win = GetMainWindow();
            win.iframeOpenUrl = '@Url.Action("ManageBulkScheduleInterview", "Task", new { @area = "Cms" })?applicationIds=' + users;
            win.OpenWindow({ Title: 'Bulk Schedule Interview', Width: 500, Height: 500 });
        return false;
        }
    }
    function OnChangeOrg(e) {
        var dataItem = e.sender.dataItem();
        //alert(dataItem.Id);
        //alert(dataItem.Name);
        //var search = FilterAdv();
        //$("#JobTitleForHiring").data("kendoDropDownList").dataSource.read(search);
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);
    }
    function OnDataBoundOrg(e) {
        var dataItem = e.sender.dataItem();
        //alert(dataItem.Id);
        //alert(dataItem.Name);
        //var search = FilterAdv();
        //$("#JobTitleForHiring").data("kendoDropDownList").dataSource.read(search);
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);
    }
    function FilterAdv() {
        var dropdownlist = $("#OrganizationId").data("kendoDropDownList");
        return {
            orgId: dropdownlist.value(),
        };
    }



    function OnApplyfilter() {
        //alert("filter");
        var search1 = FilterBatch();
        $("#Batchgrid").data("kendoGrid").dataSource.read(search1);

        var search = FilterGrid();
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
        $("#kgrdCandJobOffer").data("kendoGrid").dataSource.read(search);

    }
    function OnDataBound(e) {
        var dataItem = e.sender.dataItem();
        //console.log(dataItem);
        if (dataItem != undefined) {
        //alert(dataItem.ManpowerTypeCode);
        $("#ManpowerTypeCode").val(dataItem.ManpowerTypeCode);
        }
        //alert($("#ManpowerTypeCode").val());
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);
        //var search1 = FilterBatch();
        //$("#Batchgrid").data("kendoGrid").dataSource.read(search1);
    }
    function OnJobTitleChange(e) {
        var dataItem = e.sender.dataItem();
        //console.log(dataItem);
        if (dataItem != undefined) {
            $("#ManpowerTypeCode").val(dataItem.ManpowerTypeCode);
        }
        //alert($("#ManpowerTypeCode").val());
        var search2 = Filterddl();
        $("#BatchId").data("kendoDropDownList").dataSource.read(search2);
        //var search1 = FilterBatch();
        //$("#Batchgrid").data("kendoGrid").dataSource.read(search1);
    }
    var delBatchId = null;
    function UpdateBatchClose(Id) {

        delBatchId = Id;
        $('#confirmBatchClose').data("kendoDialog").open();
           @*$.ajax({
                type: "Post",
               url: '@Url.Action("UpdateBatchClose", "Batch", new { @area="Recruitment"})?batchId=' + Id +'&code=Close',
                success: function (data) {
                    var search1 = FilterBatch();
                    $("#Batchgrid").data("kendoGrid").dataSource.read(search1);
                },
                //dataType: "json",
            });*@
    }
    function ConfirmCloseBatch() {
        $('#confirmBatchClose').data("kendoDialog").close();
        CloseBatchItem(delBatchId);
    }
    function CloseBatchItem(id) {
        ShowLoader($('#divBatchGrid'));
           $.ajax({
                type: "Post",
               url: '@Url.Action("UpdateBatchClose", "Batch", new { @area="Recruitment"})?batchId=' + id +'&code=Close',
                success: function (data) {
                    var search1 = FilterBatch();
                    $("#Batchgrid").data("kendoGrid").dataSource.read(search1);
                    $("#BatchgridClosed").data("kendoGrid").dataSource.read(search1);
                    HideLoader($('#divBatchGrid'));
                },
                //dataType: "json",
            });
        return false;
    }

    function FilterGrid() {
        //var orgddl = $("#OrganizationId").data("kendoDropDownList");
        //var jobddl = $("#JobTitleForHiring").data("kendoDropDownList");
        //var batchddl = $("#BatchId").data("kendoDropDownList");
        //var orgId = orgddl != null ? orgddl.value() : "";
        //var jobId = jobddl != null ? jobddl.value() : "";
        //var batchId = batchddl != null ? batchddl.value() : "";

        var orgddl = $('#OrganizationId').val();
        var jobddl = $('#JobTitleForHiring').val();
        var batchddl = $('#BatchId').val();
        var orgId = orgddl != null ? orgddl : "";
        var jobId = jobddl != null ? jobddl : "";
        var batchId = batchddl != null ? batchddl : "";

        return {
            OrganizationId: orgId,
            JobAdvertisementId: jobId ,
            BatchId: batchId,
        }
    }




    function OnApplication(Id) {
        @*iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area="Recruitment"})?applicationId=' + Id;
        OpenIframePopup(1200, 1200, 'Candidate Profile');*@
         var win = GetMainWindow();
            win.iframeOpenUrl = '@Url.Action("PrintableView", "CandidateProfile", new { @area = "Recruitment" })?applicationId=' + Id;
        win.OpenWindow({ Title: 'Candidate Profile', Width: 1200, Height: 1200 });
        return false;
    }
    function IframePostbackScript() {
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read();
        $("#kgrdCandJobOffer").data("kendoGrid").dataSource.read();
    }
    function ShowLoader(target) {
        // target.loadingOverlay();
        kendo.ui.progress(target, true);
    }
    function HideLoader(target) {
        //target.loadingOverlay('remove');
        kendo.ui.progress(target, false);
    }
    function OnCloseIframePopupPage() {
        var search = FilterGrid();
        var kgrdCandInterview = $("#kgrdCandInterview").data("kendoGrid");
        if (kgrdCandInterview != null && kgrdCandInterview != undefined) {
            kgrdCandInterview.dataSource.read(search);
        }
        var kgrdCandJobOffer = $("#kgrdCandJobOffer").data("kendoGrid");
        if (kgrdCandJobOffer != null && kgrdCandJobOffer != undefined) {
            kgrdCandJobOffer.dataSource.read(search);
        }
        $('.checkboxAll').removeAttr('checked');
        $('.checkboxAll').prop('checked', false);

        var search1 = FilterBatch();
        $("#Batchgrid").data("kendoGrid").dataSource.read(search1);

    }
    $(".checkboxAll").bind("change", function (e) {

        if ($(this).attr('checked')) {
            $('.checkboxAll').removeAttr('checked');
            $('.checkbox').prop('checked', false);
            $(".checkbox").closest("td").removeClass("k-state-selected");
        } else {
            $('input.checkbox[type=checkbox]').each(function (e) {
                if (!this.disabled) {
                    $('.checkboxAll').attr('checked', 'checked');
                    $(this).prop('checked', true);
                    $(this).closest("td").addClass("k-state-selected");
                }
            });
            //$('.checkboxAll').attr('checked', 'checked');
            //$('.checkbox').prop('checked', true);
            //$(".checkbox").closest("td").addClass("k-state-selected");
        }
    });
    function onBatchGridChange(e) {
        //alert("gridchange");
        var selectedRow = this.select();
        var dataItem = this.dataItem(selectedRow);
        console.log(dataItem);
        $('#nameOrganization').html(dataItem.Organization);
        $('#namePosition').html(dataItem.JobName);
        $('#nameBatch').html(dataItem.Name);
        $('#OrganizationId').val(dataItem.OrganizationId);
        $('#JobTitleForHiring').val(dataItem.JobId);
        $('#BatchId').val(dataItem.Id);

        var search = FilterGrid();
        $("#kgrdCandInterview").data("kendoGrid").dataSource.read(search);
        $("#kgrdCandJobOffer").data("kendoGrid").dataSource.read(search);


    }
    function onView(id, count) {
        if (count == 0) {
            alert("There is no Candidates for this Batch");
        }
        else {
            @*iframeOpenUrl = '@Url.Action("ViewHmBatchCandidate", "CandidateShortlist", new { @area="Recruitment"})?batchid=' + id+"&type=ShortlistByHr" ;
   
            OpenIframePopup(1500, 1200, 'Candidate Details By Batch');*@
             var win = GetMainWindow();
            win.iframeOpenUrl = '@Url.Action("ViewHmBatchCandidate", "CandidateShortlist", new { @area = "Recruitment" })?batchid=' + id + "&type=ShortlistByHr";
            win.OpenWindow({ Title: 'Candidate Details By Batch', Width: 1500, Height: 1200 });
        return false;
        }
    }
    function showfiter(flag) {
        if (flag) {
            //alert("show");
            $("#divfilters").show();
        } else {
            //alert("hide");
            $("#divfilters").hide();
        }
    }

    //$(document).ready(function () {
    //    introJs().setOptions({
    //        steps: [{
    //            title: 'Shortlist by HM',
    //            intro: 'Welcome to Shortlist by Hiring Manager'
    //        },
    //        {
    //            title: 'Open Batch',
    //            element: "#openbatch",
    //            intro: 'This is a list of candidates from the batch that are in open status'
    //        },
    //        {
    //            title: 'Closed Batch',
    //            element: "#closebatch",
    //            intro: 'These are the batches that have been closed once the action on the candidates is completed'
    //        },
    //        {
    //            title: 'Batch grid!',
    //            element: "#Batchgrid",
    //            intro: 'You can find the details of the candidate on this grid'
    //        },
    //        {
    //            title: 'Number of Applicants',
    //            element: "#noofapp",
    //            intro: 'It will keep a count of the number of candidates for each position'
    //        },
    //        {
    //            title: 'Close Batch',
    //            element: "#closebatchbtn",
    //            intro: 'You can close the batch after the candidate has been reviewed'
    //        },
    //        {
    //            title: 'Select Candidate for Interview',
    //            element: "#interviewbutton",
    //            intro: 'The Hiring Manager can select the candidates from the ones selected by HR for the interview'
    //        },
    //        {
    //            title: 'Select all',
    //            element: "#selectcand",
    //            intro: 'Clicking on this will select all the candidates'
    //        },
    //        {
    //            title: 'Resume',
    //            element: "#viewprofile",
    //            intro: 'Clicking on this link will give you an overview of the profile'
    //        },
    //        {
    //            title: 'Bulk Schedule Interview',
    //            element: "#raiseservicebtn",
    //            intro: 'Once the candidates are selected from the grid, Using this tab, the Hiring Manager can schedule the interview for all at once'
    //        },
    //        {
    //            title: 'Select all',
    //            element: "#selectcandservice",
    //            intro: 'Clicking on this will select all the candidates'
    //        },
    //        {
    //            title: 'Resume',
    //            element: "#viewcandprofile",
    //            intro: 'Clicking on this link will give you an overview of the profile'
    //        },
    //        {
    //            title: 'Raise Service',
    //            element: "#raisebulkservice",
    //            intro: 'Using this, the Recruiter can schedule the interview for selected candidate'
    //        }

    //        ]
    //    }).start();
    //});
</script>

<div class="container pt-2">
   
    
   
    <div style="border:1px solid silver;" class="p-2 mb-2">
        <div class="row-md-12" style="margin-top: 20px;">

            <p class="pl-1 pb-2" style="border-bottom: 1px solid #d7d6d6;font-weight: bold;font-size: 16px; margin-top:15px;"><i class="fas fa-calendar-alt"></i>&nbsp;Candidates Not-Shortlisted By Hiring Manager<br></p>
            <div class="row" style="padding:10px;">
                <div class="col-12">
                    <button class="btn btn-primary d-flex float-right d-lg-flex align-items-lg-center" id="interviewbutton" type="button" style="height: 32px;" onclick="Update('ShortlistedHM');">Select Candidate for Interview By Hiring Manager</button>
                </div>
            </div>

            <div class="col-12">
                @(Html.Kendo().Grid<ApplicationDataViewModel>
                ().Name("kgrdCandInterview").Height("450")
                .Columns(columns =>
                {
                    //columns.Template("<input class='selectcheckbox' type='checkbox' id=selectcheckbox_#:Id#/>").Title("Select").Width(50).Locked(true);
                    columns.Select().HtmlAttributes(new { @class = "checkbox-align" }).HeaderHtmlAttributes(new { @class = "checkbox-align", id = "selectcand" }).Width(50).Locked(true).Lockable(false);
                    //columns.Bound(c => c.ApplicationId).ClientTemplate("<a ><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("Resume").Width(120).Locked(true).Lockable(false);
                    columns.Bound(c => c.ApplicationId).ClientTemplate("<a href='javascript:OnApplication(\"#=ApplicationId#\");'><i class='far fa-address-card btn-link'></i>&nbsp;View</a>").Title("Resume").Width(120).Locked(true).Lockable(false).HeaderHtmlAttributes(new { id="viewprofile"});
                    //columns.Command(command =>
                    //{
                    //    //command.Custom("View").Text("<i class='far fa-address-card'></i>&nbsp;View").Click("").HtmlAttributes(new { /*@class = "btn btn-link",*/ @style = "color:#2d9fca" });

                    //}).Title("Resume").Width(60);

                    //columns.Bound(p => p.ApplicationNo).ClientTemplate(@"<div class='product-photo'
                    //    style='background-image: url(" + @Url.Content("~/shared/web/foods/#:data.ProductID#.jpg"));
                    //columns.Bound(p => p.ApplicationNo).Title("").Width(180).Locked(true).Lockable(false);
                    //columns.Bound(p => p.PhotoId).Title("").Width(180).Locked(true).Lockable(false);
                    //columns.Bound(p => p.ApplicationNo).Title("Application No").Width(220).Locked(true).Lockable(false);
                    columns.Bound(p => p.FirstName).Title("First Name").HeaderHtmlAttributes(new { title = "First Name" }).Width(180).Locked(true).Lockable(false);
                    columns.Bound(p => p.MiddleName).Title("Middle Name").HeaderHtmlAttributes(new { title = "Middle Name" }).Width(180).Lockable(false);
                    columns.Bound(p => p.LastName).Title("Last Name").HeaderHtmlAttributes(new { title = "Last Name" }).Width(150);
                    columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State" }).Title("Application State").Width(200);
                    columns.Bound(p => p.ApplicationStatusName).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Application Status").Width(200);
                    columns.Bound(p => p.BatchStatusName).HeaderHtmlAttributes(new { title = "Batch Status" }).Title("Batch Status").Width(200);
                    //columns.Bound(p => p.AppliedDate).Format("{0:MM/dd/yyyy}");
                    //columns.Bound(p => p.JobId);
                    columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
                    columns.Bound(p => p.ContactPhoneHome).HeaderHtmlAttributes(new { title = "Contact Phone Home" }).Title("Contact Phone Home").Width(150);
                    columns.Bound(p => p.ContactPhoneLocal).HeaderHtmlAttributes(new { title = "Contact Phone Local" }).Title("Contact Phone Local").Width(150);
                    columns.Bound(p => p.Score).HeaderHtmlAttributes(new { title = "Score" }).Width(150);
                    //columns.Bound(p => p.Gender).Width(150);
                    columns.Bound(p => p.GenderName).HeaderHtmlAttributes(new { title = "Gender" }).Width(150);
                    columns.Bound(p => p.BloodGroup).HeaderHtmlAttributes(new { title = "Blood Group" }).Width(150);
                    columns.Bound(p => p.BirthDate).HeaderHtmlAttributes(new { title = "Birth Date" }).Width(150).Format("{0:MM/dd/yyyy}");
                    columns.Bound(p => p.Age).HeaderHtmlAttributes(new { title = "Age" }).Width(150);
                    columns.Bound(p => p.BirthPlace).HeaderHtmlAttributes(new { title = "Birth Place" }).Width(150);
                    columns.Bound(p => p.Nationality).HeaderHtmlAttributes(new { title = "Nationality" }).Width(200);
                    //columns.Bound(p => p.MaritalStatus).Width(200);
                    columns.Bound(p => p.MaritalStatusName).HeaderHtmlAttributes(new { title = "Marital Status" }).Width(200);
                    columns.Bound(p => p.NoOfChildren).HeaderHtmlAttributes(new { title = "No Of Children" }).Width(200);

                    columns.Bound(p => p.TotalWorkExperience).HeaderHtmlAttributes(new { title = "Total Work Experience" }).Width(200);
                    columns.Bound(p => p.PassportNumber).HeaderHtmlAttributes(new { title = "Passport Number" }).Width(200);
                    columns.Bound(p => p.PassportIssueCountry).HeaderHtmlAttributes(new { title = "Passport Issue Country" }).Width(200);
                    columns.Bound(p => p.PassportExpiryDate).HeaderHtmlAttributes(new { title = "Passport Expiry Date" }).Width(200).Format("{0:MM/dd/yyyy}");
                    //columns.Bound(p => p.QatarId).Width(200);
                    //columns.Bound(p => p.PassportAttachmentId).Width(200);
                    //columns.Bound(p => p.AcademicCertificateId).Width(200);
                    //columns.Bound(p => p.OtherCertificateId).Width(200);
                    //columns.Bound(p => p.CoverLetterId).Width(200);
                    columns.Bound(p => p.CurrentAddressHouse).HeaderHtmlAttributes(new { title = "Current Address House" }).Width(200);
                    columns.Bound(p => p.CurrentAddressStreet).HeaderHtmlAttributes(new { title = "Current Address Street" }).Width(200);
                    columns.Bound(p => p.CurrentAddressCity).HeaderHtmlAttributes(new { title = "Current Address City" }).Width(200);
                    columns.Bound(p => p.CurrentAddressState).HeaderHtmlAttributes(new { title = "Current Address State" }).Width(200);
                    columns.Bound(p => p.CurrentAddressCountryName).HeaderHtmlAttributes(new { title = "Current Address CountryName" }).Width(200);
                    columns.Bound(p => p.PermanentAddressHouse).HeaderHtmlAttributes(new { title = "Permanent Address House" }).Width(200);
                    columns.Bound(p => p.PermanentAddressStreet).HeaderHtmlAttributes(new { title = "Permanent Address Street" }).Width(200);
                    columns.Bound(p => p.PermanentAddressCity).HeaderHtmlAttributes(new { title = "Permanent Address City" }).Width(200);
                    columns.Bound(p => p.PermanentAddressState).HeaderHtmlAttributes(new { title = "Permanent Address State" }).Width(200);
                    columns.Bound(p => p.PermanentAddressCountryName).HeaderHtmlAttributes(new { title = "Permanent Address Country Name" }).Width(200);
                    //columns.Bound(p => p.OptionForAnotherPosition).Width(200);
                    //columns.Bound(p => p.AdditionalInformation).Width(200);
                    columns.Bound(p => p.TimeRequiredToJoin).HeaderHtmlAttributes(new { title = "Time Required To Join" }).Width(200);
                    //columns.Bound(p => p.ManagerJobTitleAndNoOfSubordinate).Width(200);


                    //columns.Bound(p => p.Program).Width(200);
                    //columns.Bound(p => p.ProficiencyLevel).Width(200);

                    //columns.Bound(p => p.DrivingLicenseCountryId).Width(200);
                    //columns.Bound(p => p.Type).Width(200);
                    // columns.Bound(p => p.DrivingLicenseIssueDate).Format("{0:MM/dd/yyyy}").Width(200);
                    // columns.Bound(p => p.DrivingLicenseValidUpTo).Format("{0:MM/dd/yyyy}").Width(200);

                    //columns.Bound(p => p.QualificationType).Width(200);
                    //columns.Bound(p => p.QualificationId).Width(200);
                    //columns.Bound(p => p.SpecializationId).Width(200);
                    //columns.Bound(p => p.EducationType).Width(200);
                    //columns.Bound(p => p.Institute).Width(200);
                    //columns.Bound(p => p.EducationCountryId).Width(200);
                    //columns.Bound(p => p.Duration).Width(150);
                    //columns.Bound(p => p.PassingYear).Width(200);
                    //columns.Bound(p => p.Marks).Width(200);

                    //columns.Bound(p => p.NatureOfWork).Width(200);
                    //columns.Bound(p => p.NoOfYear).Width(200);

                    //columns.Bound(p => p.Employer).Width(200);
                    //columns.Bound(p => p.LocationId).Width(200);
                    //columns.Bound(p => p.From).Format("{0:MM/dd/yyyy}").Width(200);
                    //columns.Bound(p => p.To).Format("{0:MM/dd/yyyy}").Width(200);
                    //columns.Bound(p => p.Responsibilities).Width(200);

                    //columns.Bound(p => p.ExperienceCountryId).Width(200);
                    //columns.Bound(p => p.ExperienceNoOfYear).Width(200);

                    //columns.Bound(p => p.JobId).Width(200);
                    //columns.Bound(p => p.ExperienceByJobNoOfYear).Width(200);

                    //columns.Bound(p => p.Sector).Width(200);
                    //columns.Bound(p => p.Industry).Width(200);
                    //columns.Bound(p => p.Category).Width(200);
                    //columns.Bound(p => p.ExperienceBySectorNoOfYear).Width(200);

                    //columns.Bound(p => p.Language).Width(200);
                    //columns.Bound(p => p.LanguageProficiencyLevel).Width(200);


                    //columns.Bound(p => p.Value).Width(200);
                    //columns.Bound(p => p.Client).Width(200);
                    //columns.Bound(p => p.Consultant).Width(200);
                    //columns.Bound(p => p.ConstructionPeriodFrom).Width(200);
                    //columns.Bound(p => p.ConstructionPeriodTo).Width(200);
                    //columns.Bound(p => p.Position).Width(200);
                    //columns.Bound(p => p.Description).Width(200);

                    //columns.Bound(p => p.ReferenceName).Width(200);
                    //columns.Bound(p => p.ReferencePosition).Width(200);
                    //columns.Bound(p => p.ReferenceCompany).Width(200);
                    //columns.Bound(p => p.ReferencePhone).Width(200);
                    //columns.Bound(p => p.ReferenceEmail).Width(200);

                    columns.Bound(p => p.NetSalaryCurrency).HeaderHtmlAttributes(new { title = "Net Salary Currency" }).Width(200);
                    columns.Bound(p => p.NetSalary).HeaderHtmlAttributes(new { title = "Net Salary" }).Width(200);
                    columns.Bound(p => p.OtherAllowances).HeaderHtmlAttributes(new { title = "Other Allowances" }).Width(200);

                })
                //.ToolBar(toolbar =>
                //{
                //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
                //})
                //.Events(e => e.DataBound("OnDataBoundNot"))
                .Resizable(resize => resize.Columns(true))
                //.HtmlAttributes(new { style = "min-height:300px;max-height:350px;" })
                .Scrollable()
                .Sortable()
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                  .Operators(o => o.ForString(s => s.Clear()
                                  .Contains("Contains")
                                  .IsEqualTo("Is equal to")
                                  )))
                //.Pageable(pageable => pageable
                //.Refresh(true)
                //.PageSizes(true)
                //.ButtonCount(5))
               // .AutoBind(false)
                .DataSource(dataSource => dataSource
                .Ajax()
                //.PageSize(10)
                .Read(read => read.Action("ReadInterviewCandidates", "CandidateShortlist").Data("FilterGrid"))
                .Model(model => model.Id(p => p.Id))
                )
        )

            </div>
            @Html.HiddenFor(x=>x.JobTitleForHiring)
            @Html.HiddenFor(x=>x.OrganizationId)
            @Html.HiddenFor(x=>x.BatchId)
        </div>
       
    </div>
   
</div>

<script type="text/javascript">
    $(".checkboxAll").bind("change", function (e) {
        
        if ($(this).attr('checked')) {
            $('.checkboxAll').removeAttr('checked');
            $('.checkbox').prop('checked', false);
            $(".checkbox").closest("td").removeClass("k-state-selected");
        } else {
            $('input.checkbox[type=checkbox]').each(function (e) {
                if (!this.disabled) {
                    $('.checkboxAll').attr('checked', 'checked');
                    $(this).prop('checked', true);
                    $(this).closest("td").addClass("k-state-selected");
                }
            });
            //$('.checkboxAll').attr('checked', 'checked');
            //$('.checkbox').prop('checked', true);
            //$(".checkbox").closest("td").addClass("k-state-selected");
        }
    });
</script>