@using CMS.UI.ViewModel;
@using CMS.Common;
@model RecTaskViewModel
@{
    ViewBag.Title = "Pending Task For HOD";
    Layout = null;
}

<style>
    .dropdown-toggle::after {
        content: none;
    }

    .iconwothtext {
        display: flex;
        cursor: pointer;
        align-items: center;
    }

    .leftmenustyle {
        font-size: 14px;
        color: #4b4f56;
        margin-bottom: 6px;
        font-weight: normal;
        margin-top: 6px;
        padding-left: 5px;
        border-bottom: 1px medium rgba(255, 255, 255, .5);
    }

    .col-1 {
        flex: none !important;
    }
    /* The hero image */
    .head-image {
        object-fit: fill;
    }

    /* Place text in the middle of the image */
    .head-text {
        text-align: left;
        position: absolute;
        top: 28%;
        color: white;
    }

    .head-img {
        max-width: 100%;
        max-height: 149px;
        width: 100%;
        object-fit: none;
    }

    .main {
        margin-top: 1%;
        text-align: right;
    }

    /* Bootstrap 4 text input with search icon */

    .has-search .form-control {
        padding-left: 2.375rem;
        /*width: 100%;*/
    }

    .form-group {
        width: 40%;
    }

    .has-search .form-control-feedback {
        position: absolute;
        z-index: 2;
        display: block;
        width: 2.375rem;
        height: 2.375rem;
        line-height: 2.375rem;
        text-align: center;
        pointer-events: none;
        color: #aaa;
    }

    .task-card {
        margin-left: 15px;
        margin-bottom: 30px;
        margin-top: 1%;
        border-radius: 6px;
        color: #333;
        background: #fff;
        width: 98%;
        box-shadow: 0 4px 20px 0 rgb(0 0 0 / 14%), 0 7px 10px -5px #fff;
        position: relative;
        display: flex;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border: 1px solid #eee;
        min-height: 160px;
    }

    .sub-div {
        overflow-y: scroll;
        height: 550px;
        overflow-x: hidden;
    }

    .card-heading {
        margin-left: 1%;
        font-weight: bold;
        margin-top: 12px;
    }

    .item-hover:hover {
        background-color: #d3d3d340;
        cursor: pointer !important;
    }

    .no-data {
        text-align: center;
        margin-top: 5%;
        font-size: 16px;
        font-weight: 500;
        display: none;
    }

    .no-data-icon {
        color: #c8aa4d;
        font-size: 40px;
    }

    .k-dropdown:hover {
        transform: none !important;
    }

    .k-select:hover {
        transform: none !important;
    }

    .k-input:hover {
        transform: none !important;
    }

    .k-state-hover :hover {
        transform: none !important;
    }

    span:hover {
        transform: none !important;
    }

    .k-link:hover {
        transform: none !important;
    }

    h6:hover {
        transform: none !important;
    }

    .form-control:hover {
        transform: none !important;
    }

    input:hover {
        transform: none !important;
    }

    .task-title {
        padding: 10px;
        background-color: #1c4893;
        font-weight: bold;
        text-align: left;
        color: #ffffff;
        margin-left: 0px;
        margin-right: 10px;
    }
</style>

<script type="text/javascript">
    $(document).ready(function () {

        $('#expandall').click(function (e) {
            //alert("expandall");
            //debugger;
            var grid = $("#kgrdPendingTaskHOD").data("kendoGrid");
            $(".k-grouping-row").each(function (e) {
                grid.expandGroup(this);
            });
        });

        $('#collapseall').click(function (e) {
            //alert("collapseall");
            //debugger;
            var grid = $("#kgrdPendingTaskHOD").data("kendoGrid");
            $(".k-grouping-row").each(function (e) {
                grid.collapseGroup(this);
            });
        });

    });


    function OpenTask(taskId) {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Index", "Task", new { @area= "Cms" })?taskId=' + taskId +'&isPopUp=true';
        win.OpenWindow({ Title: 'View Task', Width: 1200, Height: 1200 });
        return false;
    }

    function IframePostbackScript() {
        $("#kgrdPendingTaskHOD").data("kendoGrid").dataSource.read();
    }
    function onDataBound(e) {
        var grid = this;
        $(".k-grouping-row").each(function (e) {
            grid.collapseGroup(this);
        });
    }
</script>

<div class="row-12">
    <div class="col-12" style="padding-top:20px;">
        @(Html.Kendo().Grid<ApplicationViewModel>()
            .Name("kgrdPendingTaskHOD")
            .Columns(columns =>
            {
                columns.Bound(p => p.AssignedUser).Title("Assigned User").HeaderHtmlAttributes(new { title = "Assigned User" }).Locked(true).Lockable(false).ClientGroupHeaderTemplate("Assigned User: #=data.value#, Count: #=data.aggregates.AssignedUser.count#").Width(150);
                columns.Bound(p => p.JobName).Title("Position").HeaderHtmlAttributes(new { title = "Position" }).Locked(true).Lockable(false).ClientGroupHeaderTemplate("Position: #=data.value#, Count: #=data.aggregates.JobName.count#").Width(150);
                columns.Bound(p => p.OrganizationName).Title("Organization unit").HeaderHtmlAttributes(new { title = "Organization Unit" }).Locked(true).Lockable(false).ClientGroupHeaderTemplate("Organization: #=data.value#, Count: #=data.aggregates.OrganizationName.count#").Width(150);
                columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State" }).Title("Application State").Locked(true).Lockable(false).ClientGroupHeaderTemplate("Application State: #=data.value#, Count: #=data.aggregates.ApplicationStateName.count#").Width(150);
                columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Application Status").Locked(true).Lockable(false).ClientGroupHeaderTemplate("Application Status: #=data.value#, Count: #=data.aggregates.ApplicationStatus.count#").Width(150);
                columns.Bound(p => p.TaskNo).Title("Task").HeaderHtmlAttributes(new { title = "Task" }).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='OpenTask(\"#:Id#\")'>#:TaskNo#</a>").Width(120).Locked(true).Lockable(false).ClientGroupHeaderTemplate("Task : #=data.value#, Count: #=data.aggregates.TaskNo.count#");
                columns.Bound(p => p.TaskStatus).Title("Task Status").HeaderHtmlAttributes(new { title = "Task Status" }).Width(120).Locked(true).Lockable(false).ClientGroupHeaderTemplate("Task Status: #=data.value#, Count: #=data.aggregates.TaskStatus.count#");

                columns.Bound(p => p.TaskSubject).Title("Task Subject").HeaderHtmlAttributes(new { title = "Task Subject" }).Width(150);

                columns.Bound(p => p.ApplicationNo).HeaderHtmlAttributes(new { title = "Application No" }).Width(150);
                columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150);
                columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                //columns.Bound(p => p.GaecNo).Title("GAEC No").HeaderHtmlAttributes(new { title = "GAEC No" }).Width(150);
                columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
            })
            .ToolBar(tools =>
            {
                tools.Excel();
                tools.Custom().Text("Expand All").HtmlAttributes(new { id = "expandall" });
                tools.Custom().Text("Collapse All").HtmlAttributes(new { id = "collapseall" });
            })
            .Excel(excel => excel
            .FileName("ReportPendingTaskHOD.xlsx")
            .Filterable(true)
            .AllPages(true)
            )
            .Scrollable(x => x.Enabled(true))
            .Resizable(resize => resize.Columns(true))
            .Sortable(srt => srt.Enabled(true))
            .Selectable(select => select.Enabled(false))
            .ColumnMenu(col => col.Filterable(false))
            .Groupable(g => g.ShowFooter(false))
            .Filterable(f => f.Extra(false)
            .Operators(o => o.ForString(s => s.Clear()
            .Contains("Contains")
            .IsEqualTo("Is equal to")
            )))
            .Events(e => e.DataBound("onDataBound"))
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
            .AutoBind(true)
            .DataSource(dataSource => dataSource
            .Ajax()
            .Aggregates(aggregates =>
            {
                aggregates.Add(p => p.AssignedUser).Count();
                aggregates.Add(p => p.JobName).Count();
                aggregates.Add(p => p.OrganizationName).Count();
                aggregates.Add(p => p.ApplicationStateName).Count();
                aggregates.Add(p => p.ApplicationStatus).Count();
                aggregates.Add(p => p.TaskNo).Count();
                aggregates.Add(p => p.TaskStatus).Count();
            })
            .Group(groups => groups.Add(p => p.AssignedUser))
            .Group(groups => groups.Add(p => p.TaskStatus))
            //.Group(groups => groups.Add(p => p.OrganizationName))
            .PageSize(10)
            .Read(read => read.Action("ReadPendingTaskHOD", "RecruitmentDashboard", new { Area = "Recruitment" }))
            .Model(model => model.Id("Id"))
            )
        )       
    </div>

</div>










