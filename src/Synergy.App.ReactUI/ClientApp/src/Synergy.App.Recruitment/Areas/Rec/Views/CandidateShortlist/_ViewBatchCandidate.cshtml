
@using CMS.UI.ViewModel
@using CMS.Common

@{
    ViewData["Title"] = "View Candidates";
    Layout = "/Views/Shared/_PopupLayout.cshtml";
   // Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
}

@model ApplicationViewModel

    <script type="text/javascript">
        function back() {

            //window.location.href = "/recruitment/manpowerrequirementsummary/index";
            var url = "/recruitment/jobadvertisement/jobadvertisement";
            LoadPartailView(url, $('#cms-content'));

        }



    </script>

    <style>
        .k-grid td, .k-grid th {
            font-size: 14px !important;
        }

        .tb-bg {
            /*background-color:cadetblue;*/
            background-color: #17a2b8 !important;
            color: #fff;
            font-weight: 500 !important;
            text-align: center !important;
        }

        .tb-bg1 {
            /*background-color: cornflowerblue;*/
            background-color: #ffc107 !important;
            color: #000;
            font-weight: 500 !important;
            text-align: center !important;
        }

        .tb-bg2 {
            /* background-color: darkcyan;*/
            background-color: #17a2b8 !important;
            color: #fff;
            font-weight: 500 !important;
            text-align: center !important;
        }

        .k-footer-template {
            background-color: #DAEDFF
        }

        .k-grid-header .k-header, .k-grid-header thead, .k-grid-header .k-hierarchy-cell {
            background-color: #527ab8;
        }

            .k-grid-header thead a {
                color: #fff !important;
            }
    </style>
   
    <div class="row-12" style="margin-left:15px;">
    

        <div class="col-sm-12 col-md-12 col-lg-12" style="padding:10px;">
            @(Html.Kendo().Grid<ApplicationViewModel>
    ().Name("kgrdCandInterview")
    .Columns(columns =>
    {

        columns.Bound(p => p.JobName).Title("Position").HeaderHtmlAttributes(new { title = "Position" }).Width(150).Locked(true).Lockable(false);
        columns.Bound(p => p.OrganizationName).Title("Organization").HeaderHtmlAttributes(new { title = "Organization" }).Width(150).Locked(true).Lockable(false);
        columns.Bound(p => p.BatchName).Title("Batch").HeaderHtmlAttributes(new { title = "Batch" }).Width(150).Locked(true).Lockable(false);
        columns.Bound(p => p.ApplicationNo).Title("Application No").HeaderHtmlAttributes(new { title = "Application No" }).Width(150).Locked(true).Lockable(false);
        columns.Bound(c => c.ApplicationStatusCode).Title("Application Status").HeaderHtmlAttributes(new { title = "Application Status" }).Width(120).Locked(true).Lockable(false);
        columns.Bound(p => p.FirstName).Title("First Name").HeaderHtmlAttributes(new { title = "First Name" }).Width(150).Locked(true).Lockable(false);
        columns.Bound(p => p.MiddleName).Title("Middle Name").HeaderHtmlAttributes(new { title = "Middle Name" }).Width(150);
        columns.Bound(p => p.LastName).Title("Last Name").HeaderHtmlAttributes(new { title = "Last Name" }).Width(150);
        columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
        columns.Bound(p => p.TotalWorkExperience).HeaderHtmlAttributes(new { title = "Total Work Experience" }).Width(200);
        columns.Bound(p => p.SourceFrom).HeaderHtmlAttributes(new { title = "Source From" }).Width(200);
        //columns.Bound(p => p.TotalOtherExperience).Width(200);
        //columns.Bound(p => p.TotalIndianExperience).Width(200);
        columns.Bound(p => p.ContactPhoneHome).HeaderHtmlAttributes(new { title = "Contact Phone Home" }).Title("Mobile").Width(150);
        columns.Bound(p => p.ContactPhoneLocal).HeaderHtmlAttributes(new { title = "Contact Phone Local" }).Width(200);
        columns.Bound(p => p.Score).HeaderHtmlAttributes(new { title = "Score" }).Width(150);
        columns.Bound(p => p.Gender).HeaderHtmlAttributes(new { title = "Gender" }).Width(150);
        columns.Bound(p => p.BirthDate).HeaderHtmlAttributes(new { title = "Birth Date" }).Width(150).Format("{0:MM/dd/yyyy}");
        columns.Bound(p => p.Age).HeaderHtmlAttributes(new { title = "Age" }).Width(150);
        columns.Bound(p => p.BirthPlace).HeaderHtmlAttributes(new { title = "Birth Place" }).Width(150);
        columns.Bound(p => p.Nationality).HeaderHtmlAttributes(new { title = "Nationality" }).Width(200);
        columns.Bound(p => p.BloodGroup).HeaderHtmlAttributes(new { title = "Blood Group" }).Width(200);
        columns.Bound(p => p.MaritalStatus).HeaderHtmlAttributes(new { title = "Marital Status" }).Width(180);
        columns.Bound(p => p.PassportNumber).HeaderHtmlAttributes(new { title = "Passport Number" }).Width(180);
        columns.Bound(p => p.PassportIssueCountry).HeaderHtmlAttributes(new { title = "Passport Issue Country" }).Width(250);
        columns.Bound(p => p.PassportExpiryDate).HeaderHtmlAttributes(new { title = "Passport Expiry Date" }).Width(150).Format("{0:MM/dd/yyyy}");
        columns.Bound(p => p.QatarId).HeaderHtmlAttributes(new { title = "QatarId" }).Width(150);
        columns.Bound(p => p.CurrentAddressHouse).HeaderHtmlAttributes(new { title = "Current Address House" }).Width(250);
        columns.Bound(p => p.CurrentAddressStreet).HeaderHtmlAttributes(new { title = "Current Address Street" }).Width(250);
        columns.Bound(p => p.CurrentAddressCity).HeaderHtmlAttributes(new { title = "Current Address City" }).Width(250);
        columns.Bound(p => p.CurrentAddressState).HeaderHtmlAttributes(new { title = "Current Address State" }).Width(250);
        columns.Bound(p => p.CurrentAddressCountryName).HeaderHtmlAttributes(new { title = "Current Address Country Name" }).Width(200);
        columns.Bound(p => p.PermanentAddressHouse).HeaderHtmlAttributes(new { title = "Permanent Address House" }).Width(200);
        columns.Bound(p => p.PermanentAddressStreet).HeaderHtmlAttributes(new { title = "Permanent Address Street" }).Width(200);
        columns.Bound(p => p.PermanentAddressCity).HeaderHtmlAttributes(new { title = "Permanent Address City" }).Width(200);
        columns.Bound(p => p.PermanentAddressState).HeaderHtmlAttributes(new { title = "Permanent Address State" }).Width(200);
        columns.Bound(p => p.PermanentAddressCountryName).HeaderHtmlAttributes(new { title = "Permanent Address Country Name" }).Width(200);
        columns.Bound(p => p.CurrentEmployer).HeaderHtmlAttributes(new { title = "CurrentEmployer" }).Width(200);
        columns.Bound(p => p.CurrentEmploymentLocation).HeaderHtmlAttributes(new { title = "Current Employment Location" }).Width(200);
        columns.Bound(p => p.CurrentEmploymentPosition).HeaderHtmlAttributes(new { title = "Current Employment Position" }).Width(200);
        columns.Bound(p => p.CurrentEmploymentStartDate).HeaderHtmlAttributes(new { title = "Current Employment StartDate" }).Width(200);
        columns.Bound(p => p.CurrentEmploymentEndDate).HeaderHtmlAttributes(new { title = "Current Employment EndDate" }).Width(200);
        columns.Bound(p => p.CurrentEmploymentResponsibilities).HeaderHtmlAttributes(new { title = "Current Employment Responsibilities" }).Width(200);
        columns.Bound(p => p.NetSalary).HeaderHtmlAttributes(new { title = "Net Salary" }).Width(150);
        columns.Bound(p => p.NetSalaryCurrency).HeaderHtmlAttributes(new { title = "Net Salary Currency" }).Width(150);
        columns.Bound(p => p.CurrentSalary).HeaderHtmlAttributes(new { title = "Current Salary" }).Width(150);
        columns.Bound(p => p.SalaryAfterIncomeTax).HeaderHtmlAttributes(new { title = "Salary After Income Tax" }).Width(150);
        columns.Bound(p => p.OtherAllowance).HeaderHtmlAttributes(new { title = "Other Allowance" }).Width(150);

    })
    //.ToolBar(toolbar =>
    //{
    //    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
    //})
    // .Events(e => e.DataBound("OnGridDataBound"))

    .Scrollable().Height(700)
    .Sortable()
    .Selectable(select => select.Enabled(false))
    .Filterable(f => f.Extra(false)
    .Operators(o => o.ForString(s => s.Clear()
    .Contains("Contains")
    .IsEqualTo("Is equal to")
    )))
     .Resizable(resize => resize.Columns(true))
    .Pageable(pageable => pageable
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5))
    //.AutoBind(false)
    .DataSource(dataSource => dataSource
    .Ajax()
    .PageSize(10)
    .Read(read => read.Action("ReadWorkerPoolBatchData", "CandidateShortlist",new { @area="Recruitment", batchid=ViewBag.BatchId,type =ViewBag.Type}))
    .Model(model => model.Id(p => p.Id))
    )
    )




        </div>
       



    </div>

