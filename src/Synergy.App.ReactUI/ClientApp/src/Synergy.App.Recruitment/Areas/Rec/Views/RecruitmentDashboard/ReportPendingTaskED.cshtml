@using CMS.UI.ViewModel;
@using CMS.Common;
@model ApplicationViewModel
@{
    ViewBag.Title = "Pending Tasks for ED";
    Layout = null;
    //Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
}

<script type="text/javascript">
    $(document).ready(function () {

        $('#expandall').click(function (e) {
            //alert("expandall");
            //debugger;
            var grid = $("#kgrdReportPendingED").data("kendoGrid");
            $(".k-grouping-row").each(function (e) {
                grid.expandGroup(this);
            });
        });

        $('#collapseall').click(function (e) {
            //alert("collapseall");
            //debugger;
            var grid = $("#kgrdReportPendingED").data("kendoGrid");
            $(".k-grouping-row").each(function (e) {
                grid.collapseGroup(this);
            });
        });

    });

    @*function OpenTask(taskId) {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Index", "Task", new { @area= "Cms" })?taskId=' + taskId +'&isPopUp=true';
        win.OpenWindow({ Title: 'View Task', Width: 1200, Height: 1200 });
        return false;
    }
    function IframePostbackScript() {
        $("#kgrdReportPendingED").data("kendoGrid").dataSource.read();
    }*@

    function onTask(taskId) {
        //alert(taskId);
        @*iframeOpenUrl = '@Url.Action("Index", "Task", new { @area= "Cms" })?taskId=' + taskId +'&isPopUp=true' ;
        OpenIframePopup1(1200, 1200, 'View Task');*@
          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Index", "Task", new { @area = "Cms" })?taskId=' + taskId + '&isPopUp=true';
        win.OpenWindow({ Title: 'View Task', Width: 1200, Height: 1200 });
        return false;
    }
    function IframePostbackScript() {
        $("#kgrdReportPendingED").data("kendoGrid").dataSource.read();
    }
    function onDataBound(e) {
        var grid = this;
        $(".k-grouping-row").each(function (e) {
            grid.collapseGroup(this);
        });
    }
</script>

<div class="row-12">
    <div class="col-12" style="padding-top:20px;">
        @(Html.Kendo().Grid<ApplicationViewModel>()
            .Name("kgrdReportPendingED")
            .Columns(columns =>
            {
                //columns.Bound(c => c.TaskNo).Title("Task No").ClientTemplate("<input type='button' class='btn btn-link' onclick='OpenTask(\"#= Id #\")' value='#=TaskNo#'/>").Width(200);
                //columns.Bound(c=> c.OwnerUserName).Title("Task Owner").Width(200);
                //columns.Bound(c => c.AssigneeUserName).Title("Assigned To").Width(200);
                //columns.Bound(c=> c.Subject).Title("Subject").Width(200);
                //columns.Bound(c=> c.JobName).Title("Job Name").Width(200);
                //columns.Bound(c => c.TaskStatusName).Title("Status").Width(150);
                //columns.Bound(c => c.DisplayDueDate).Title("Due Date").Width(150);

                columns.Bound(p => p.AssignedUser).Title("Assigned User").HeaderHtmlAttributes(new { title = "Assigned User" }).Locked(true).Lockable(false).ClientGroupHeaderTemplate("Assigned User: #=data.value#, Count: #=data.aggregates.AssignedUser.count#").Width(150);
                columns.Bound(p => p.JobName).Title("Position").HeaderHtmlAttributes(new { title = "Position" }).Locked(true).Lockable(false).ClientGroupHeaderTemplate("Position: #=data.value#, Count: #=data.aggregates.JobName.count#").Width(150);
                columns.Bound(p => p.OrganizationName).Title("Organization unit").HeaderHtmlAttributes(new { title = "Organization Unit" }).Locked(true).Lockable(false).ClientGroupHeaderTemplate("Organization: #=data.value#, Count: #=data.aggregates.OrganizationName.count#").Width(150);
                columns.Bound(p => p.ApplicationStateName).HeaderHtmlAttributes(new { title = "Application State Name" }).Title("Application State").Width(150).Locked(true).Lockable(false).ClientGroupHeaderTemplate("Application State: #=data.value#, Count: #=data.aggregates.ApplicationStateName.count#").Width(150);
                columns.Bound(p => p.ApplicationStatus).HeaderHtmlAttributes(new { title = "Application Status" }).Title("Application Status").Width(150).Locked(true).Lockable(false).ClientGroupHeaderTemplate("Application Status: #=data.value#, Count: #=data.aggregates.ApplicationStatus.count#").Width(150);
                columns.Bound(p => p.TaskNo).Title("Task").HeaderHtmlAttributes(new { title = "Task" }).ClientTemplate("<a style='cursor:pointer;color:blue' onclick='onTask(\"#:TaskId#\")'>#:TaskNo#</a>").Width(150).Locked(true).Lockable(false).ClientGroupHeaderTemplate("Task: #=data.value#, Count: #=data.aggregates.TaskNo.count#").Width(150);
                columns.Bound(p => p.TaskStatus).Title("Task Status").HeaderHtmlAttributes(new { title = "Task Status" }).Width(150).Locked(true).Lockable(false).ClientGroupHeaderTemplate("Task Status: #=data.value#, Count: #=data.aggregates.TaskStatus.count#").Width(120);

                columns.Bound(p => p.TaskSubject).Title("Task Subject").HeaderHtmlAttributes(new { title = "Task Subject" }).Width(150);
                columns.Bound(p => p.ApplicationNo).HeaderHtmlAttributes(new { title = "Application No" }).Width(150);
                columns.Bound(p => p.FirstName).HeaderHtmlAttributes(new { title = "First Name" }).Title("First Name").Width(150);
                columns.Bound(p => p.MiddleName).HeaderHtmlAttributes(new { title = "Middle Name" }).Title("Middle Name").Width(150);
                columns.Bound(p => p.LastName).HeaderHtmlAttributes(new { title = "Last Name" }).Title("Last Name").Width(150);
                //columns.Bound(p => p.GaecNo).Title("GAEC No").HeaderHtmlAttributes(new { title = "GAEC No" }).Width(150);
                columns.Bound(p => p.Email).HeaderHtmlAttributes(new { title = "Email" }).Width(150);
            })
            .ToolBar(tools => {
                tools.Excel();
                tools.Custom().Text("Expand All").HtmlAttributes(new { id = "expandall" });
                tools.Custom().Text("Collapse All").HtmlAttributes(new { id = "collapseall" });
            })
            .Excel(excel => excel
            .FileName("ReportPendingED.xlsx")
            .Filterable(true)
            .AllPages(true)
            )
            .Scrollable(x => x.Enabled(true))
            .Resizable(resize => resize.Columns(true))
            .Sortable(srt => srt.Enabled(true))
            .Selectable(select => select.Enabled(false))
            .ColumnMenu(col => col.Filterable(false))
            .Groupable(g => g.ShowFooter(false))
            .Filterable(f => f.Extra(false)
            .Operators(o => o.ForString(s => s.Clear()
            .Contains("Contains")
            .IsEqualTo("Is equal to")
            )))
            .Events(e => e.DataBound("onDataBound"))
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
            .AutoBind(true)
            .DataSource(dataSource => dataSource
            .Ajax()
            .Aggregates(aggregates =>
            {
                aggregates.Add(p => p.AssignedUser).Count();
                aggregates.Add(p => p.JobName).Count();
                aggregates.Add(p => p.OrganizationName).Count();
                aggregates.Add(p => p.ApplicationStateName).Count();
                aggregates.Add(p => p.ApplicationStatus).Count();
                aggregates.Add(p => p.TaskNo).Count();
                aggregates.Add(p => p.TaskStatus).Count();
                //aggregates.Add(p => p.TaskSubject).Count();
                //aggregates.Add(p => p.ApplicationNo).Count();
            })
            .Group(groups => groups.Add(p => p.AssignedUser))
            .Group(groups => groups.Add(p => p.TaskStatus))
            .PageSize(10)
            .Read(read => read.Action("ReadReportPendingTaskEDData", "RecruitmentDashboard", new { Area = "Recruitment" }))
            .Model(model => model.Id("Id"))
            )
        )
    </div>




</div>