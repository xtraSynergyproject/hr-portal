@inject IStringLocalizer<CMS.UI.Web.Areas.DMS.Controllers.DMSReportController> Resource
@using Synergy.App.Common;
@*@using Kendo.Mvc.UI;*@
@using Synergy.App.DataModel
@using Synergy.App.ViewModel

@model DocumentListViewModel;

@{
    ViewBag.Title = Resource["DocumentPendingStatusReport"];
    Layout = null;
}




<style>
    .panel-heading {
        font-size: 1.3em;
        cursor: pointer;
        padding-top: 7px !important;
        padding-bottom: 7px !important;
    }

    .k-listview {
        border: none !important;
    }

    .project-property {
        width: 100px;
        padding: 3px;
    }

    .panel {
        margin-top: 10px;
        border-color: #ddd;
        margin-bottom: 20px;
        background-color: #fff;
        border: 1px solid transparent;
        border-radius: 4px;
        -webkit-box-shadow: 0 1px 1px rgb(0 0 0 / 5%);
        box-shadow: 0 1px 1px rgb(0 0 0 / 5%);
    }

    .panel-heading:hover {
        background-color: #f1f1f1;
    }

    .panel-success {
        border-color: #d6e9c6;
    }

        .panel-success > .panel-heading {
            color: #468847;
            background-color: #dff0d8;
            border-color: #d6e9c6;
        }

    .panel-body {
        background-color: lightgrey !important;
        border-radius: 5px;
        font-size: 12px;
        padding: 5px;
    }

    .panel-info {
        border-color: #bce8f1;
    }

        .panel-info > .panel-heading {
            color: #3a87ad;
            background-color: #d9edf7;
            border-color: #bce8f1;
        }

    .panel-warning {
        border-color: #fbeed5;
    }

        .panel-warning > .panel-heading {
            color: #c09853;
            background-color: #fcf8e3;
            border-color: #fbeed5;
        }

    .panel-primary {
        border-color: #428bca;
    }

        .panel-primary > .panel-heading {
            color: #fff;
            background-color: #428bca;
            border-color: #428bca;
        }

    .panel-filter {
        border-color: #428bca;
    }

        .panel-filter > .panel-heading {
            color: #1a3750;
            background-color: #428bca;
            border-color: #428bca;
        }

    .btn-filter-reset {
        color: #fff;
        background-color: #428bca;
        border-color: #428bca;
    }

    .banner-container {
        position: relative;
        color: white;
    }

    .banner-text {
        position: absolute;
        top: 14px;
        left: 60px;
        font-size: 35px;
    }
</style>
<script>
    //function onDatewiseSearch() {

    //    var dates = {

    //        StartDate: kendo.toString($("#FromDate").data("kendoDatePicker").value(), 'yyyy/MM/dd'),
    //        DueDate: kendo.toString($("#ToDate").data("kendoDatePicker").value(), 'yyyy/MM/dd'),
    //    };

    //    $("#chartDateWiseSearch").data("kendoChart").dataSource.read(dates);
    //}
    $(document).ready(function () {
        //onDatewiseSearch();
     //   getDataP(null, null, null);
        $("#PendingStageStatus").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Code",
            optionLabel: "All",
         
            dataSource: {
                transport: {
                    read: {
                        url: "/cms/LOV/GetLOVIdNameList?lovType=PENDINGSTATUS",
                    }
                }
            }
        });

        $("#PendingDiscipline").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Code",
            optionLabel: "All",

            dataSource: {
                transport: {
                    read: {
                        url: "/cms/LOV/GetLOVIdNameList?lovType=DISCIPLINE",
                    }
                }
            }
        });

    });


    function FilterCode1() {
        return {
            lovTypeCode: 'DISCIPLINE_DEP',
        };
    }



    function onApplyFilterP() {
        var stageStatus = $("#PendingStageStatus").val();
        var discipline = $("#PendingDiscipline").val();
        //var isOverdue = $("#IsOverDue").prop("checked");
        var isOverdue = $('#isODue').is(":checked");

        var search = {

            stageStatus: stageStatus,
            discipline: discipline,
            isOverdue: isOverdue
        };
       // $("#kgdPendingStatusReport").data("kendoGrid").dataSource.read(search);
        getDataP(stageStatus, discipline, isOverdue);
    }

    function onFilterResetP() {
        $("#PendingStageStatus").data("kendoDropDownList").value("");
        $("#PendingDiscipline").data("kendoDropDownList").value("");
        //$("#IsOverDue").prop("checked") = false;
        $('#isODue').prop('checked', false);

      //  $("#kgdSubmittedStatusReport").data("kendoGrid").dataSource.read();

      //  $("#kgdProjectGridView").data("kendoGrid").dataSource.read();
        getDataP(null, null, null);
    }


      var columnDefs = [


        {
              headerName: "@Resource["DocumentNo"]", field: "NoteNo",
        },
          { headerName: "@Resource["DocumentDescription"]", field: "DocumentName" },
         {
             headerName: "@Resource["Revision"]", field: "Revision",
         },
         {
             headerName: "@Resource["SubmittedDate"]", field: "SubmittedDate",
             cellRenderer: params => {

                 var date = new Date(params.value);
                 return date.getDate() + "." + (date.getMonth() + 1) + "." + date.getFullYear();
             }
          },
          { headerName: "@Resource["IssueCode"]", field: "IssueCode", },
          { headerName: "@Resource["TransmittalNo"]", field: "TransmittalNo", },
          { headerName: "@Resource["DISCIPLINE"]", field: "Discipline", },
          {
              headerName: "@Resource["ResponseDueDate"]", field: "DueDate",
              cellRenderer: params => {

                  var date = new Date(params.value);
                  return date.getDate() + "." + (date.getMonth() + 1) + "." + date.getFullYear();
              }
          },
          { headerName: "@Resource["DocumentOwner"]", field: "TemplateOwner", },
          { headerName: "@Resource["StageStatus"]", field: "StageStatus", },
          { headerName: "@Resource["PendingDays"]", field: "PendingDays", },
    ];

    function getDataP(stageStatus, discipline, isOverdue) {
       document.getElementById("pendingStatusGrid").innerHTML = "";
       gridConfig(
           "pendingStatusGrid",
           "/dms/DMSReport/ReadDocumentStageDataGrid?stageStatus=" + stageStatus + "&discipline=" + discipline + "&isOverdue=" + isOverdue,
           columnDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
    }
</script>


<div id="appWrapper">

    <div class="row">
        <div class="col-12">
            <div class="panel-body">
                <div class="row" style="padding:5px;">
                    <div class="col-3">
                        @Resource["PENDINGSTATUS"]

                        @*@(Html.Kendo().DropDownList().Name("PendingStageStatus")
            .HtmlAttributes(new { @class = "hr-xx-large" })
            .DataTextField("Name")
            .DataValueField("Code")
            .OptionLabel("All")
            .DataSource(source =>
                 {
                    source.Read(read =>
                    {
                        read.Action("GetLOVIdNameList", "LOV", new { area = "CMS", lovType = "PENDINGSTATUS" });
                     }).ServerFiltering(true);
                 })

             //.Enable(false)
             .AutoBind(true)
        )*@

                        <input id="PendingStageStatus" style="width: 100%" />

                    </div>
                    <div class="col-3">
                        @Resource["DISCIPLINE"]

                        @*@(Html.Kendo().DropDownList().Name("PendingDiscipline")
                                    .HtmlAttributes(new { @class = "hr-xx-large" })
                                    .DataTextField("Name")
                                    .DataValueField("Code")
                                    .OptionLabel("All")
                                    .DataSource(source =>
                                         {
                                            source.Read(read =>
                                            {
                                                read.Action("GetLOVIdNameList", "LOV", new { area = "CMS", lovType = "DISCIPLINE" });
                                             }).ServerFiltering(true);
                                         })

                                     //.Enable(false)
                                     .AutoBind(true)
                                )*@
                        <input id="PendingDiscipline" style="width: 100%" />
                    </div>
                    <div class="col-3" style="padding-top:22px;">
                        @*@Html.Kendo().CheckBoxFor(model => model.IsOverDue).Label(@Resource["OVERDUE"])*@
                        <input type="checkbox" id="isODue"  />
                        <label>@Resource["OVERDUE"]</label>
                    </div>
                    <div class="col-3" style="text-align:center;">
                        <br />
                        <div class="row" style="padding:0px 5px 0px 5px;">
                            <button class="btn btn-success" onclick="onApplyFilterP()" title="ApplyFilter" id="pendingApply">@SharedResource["ApplyFilter"]</button>
                            <button class="btn btn-light" onclick="onFilterResetP()" title="ResetFilter" id="pendingReset">@SharedResource["Reset"]</button>
                        </div>

                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="row" style="padding-top:10px;">
        <div class="col-12">

            <div id="pendingStatusGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        </div>
        @*<div class="col-12">

            @(Html.Kendo().Grid<DocumentListViewModel>()
                        .Name("kgdPendingStatusReport")
                        .Columns(col =>
                        {
                            col.Bound(p => p.NoteNo).Title(@Resource["DocumentNo"]).Width(150);
                            col.Bound(p => p.DocumentName).Title(@Resource["DocumentDescription"]).Width(200);
                            col.Bound(c => c.Revision).Title(@Resource["Revision"]).Width(110).Filterable(flt => flt.Multi(true).Search(true));
                            col.Bound(c => c.SubmittedDate).Title(@Resource["SubmittedDate"]).Format(ApplicationConstant.DateAndTime.DefaultDateFormat).Width(160).Filterable(flt => flt.Multi(true).Search(true));
                            col.Bound(c => c.IssueCode).Title(@Resource["IssueCode"]).Width(150).Filterable(flt => flt.Multi(true).Search(true));
                            col.Bound(c => c.TransmittalNo).Title(@Resource["TransmittalNo"]).Width(130).Filterable(flt => flt.Multi(true).Search(true));
                            col.Bound(c => c.Discipline).Title(@Resource["DISCIPLINE"]).Width(120).Filterable(flt => flt.Multi(true).Search(true));
                            col.Bound(c => c.DueDate).Title(@Resource["ResponseDueDate"]).Format(ApplicationConstant.DateAndTime.DefaultDateFormat).Width(200).Filterable(flt => flt.Multi(true).Search(true));
                            col.Bound(c => c.TemplateOwner).Title(@Resource["DocumentOwner"]).Width(180).Filterable(flt => flt.Multi(true).Search(true));
                            col.Bound(c => c.StageStatus).Title(@Resource["StageStatus"]).Width(150).Filterable(flt => flt.Multi(true).Search(true));
                            col.Bound(c => c.PendingDays).Title(@Resource["PendingDays"]).Width(150).Filterable(flt => flt.Multi(true).Search(true));
                        })
                    .ToolBar(toolbar =>
                    {
                        toolbar.Excel().Text(@SharedResource["ExportToExcel"]);
                        //toolbar.Pdf();
                    })
                    //.ColumnMenu(col=>col.Filterable(false))
                    .Height(700)
                    .Editable().AutoBind(false)
                    .Pageable(pageable => pageable
                    .Refresh(true)
                    .PageSizes(true)
                    .ButtonCount(5))
                    .Sortable()
                    .Navigatable()
                    .Resizable(r=>r.Columns(true))
                    //.Reorderable(r => r.Columns(true))
                    //.Groupable(g=>g.ShowFooter(false))
                    .Filterable()
                    .Scrollable(x => x.Enabled(true))
                    //.Events(events => events.DataBound("onDataBound"))
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .PageSize(20)
                    .AutoSync(true)
                    .ServerOperation(false)
                    //.Events(events => events.Error("error_handler"))
                    .Model(model =>
                    {
                        model.Id(p => p.DocumentId);

                    })
                    .Read("ReadDocumentStageData", "DMSReport", new { @area = "DMS" })
                )
            )

            @Html.HiddenFor(model => model.StageStatus)
            @Html.HiddenFor(model => model.Discipline)
            @Html.HiddenFor(model => model.IsOverDue)
        </div>*@
    </div>
</div>
