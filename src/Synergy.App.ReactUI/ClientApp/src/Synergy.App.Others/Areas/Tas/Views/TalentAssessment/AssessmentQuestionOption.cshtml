@*@using Kendo.Mvc.UI;*@
@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using Synergy.App.Business;
@model AssessmentQuestionsViewModel
@{
     Layout = "~/Areas/Core/Views/Shared/_PopupLayout.cshtml";
}
<style>
    .btn-default {
        background: #e4e7eb;
        margin-top: 5px;
    }
    .k-editable-area {
        height:100px;
    }
    .job_criteria {
        margin-top:10px;
    }
    .fixed-content {
        top: 0;
        bottom: 0;
        position: sticky;
        height:633px;
        overflow-y: scroll;
        overflow-x: hidden;
    }
    
</style>

<div class="row" id="QuestionDiv">
   
<div @*class="col-9 card"*@ id="maindiv">
   
            <div class="row">

                <div class="col-sm-12 col-md-12 col-lg-12 col-body-1-1 pad-10">
                    @*<input type="submit" class="btn btn-primary" value="Save" id="submitBtnOption" onclick="onSave(event)" />*@
                    <div class="row job_criteria" style="margin-left:0px;margin-right:20px;">
                        <div class="col"><span class="job_criteria_span">Options</span></div>
                    </div>
                    <div class="row row-body-1" style="margin-left:0px;margin-right:20px;">
                        <div class="col col-body-1-1">
                            <div class="row">
                                <div class="col visible">
                                    @*<div id="GridOptions"></div>*@
                                    @*@(Html.Kendo().Grid<AssessmentQuestionsOptionViewModel>()

        .Name("GridOptions")



        .Columns(columns =>
        {

                     
            columns.Bound(c => c.Option).Width(250);

            columns.Bound(c => c.OptionArabic).Width(250);
            columns.Bound(c => c.IsRightAnswer).Width(60);
            columns.Bound(c => c.AnswerKey).Width(60);


        })
        //.Events(e => e.Save("onGridSave"))

        .Resizable(x=>x.Columns(true))
         .Scrollable(x => x.Enabled(true))
                    .Sortable(srt => srt.Enabled(true))
                    .Selectable(select => select.Enabled(false))
                    .Filterable(f => f.Extra(false)
                                                        .Operators(o => o.ForString(s => s.Clear()
                                                        .Contains("Contains")
                                                        .IsEqualTo("Is equal to")
                                                    )))
                    .Pageable(pageable => pageable
                    .Refresh(true)

                    .PageSizes(true)
                    .ButtonCount(5))
                    .AutoBind(true)
                    .DataSource(
                    dataSource => dataSource
                    .Ajax()
                    .PageSize(10)
                    .Batch(true)
            .ServerOperation(false)

                     .Read(read => read.Action("ReadQuestionOptions", "TalentAssessment", new { questionNoteId = Model.NoteId,area="Tas" }))
                    //.Update(update => update.Action("Update", "TalentAssessment"))
                    .Model(model =>
                    {
                        model.Id(p => p.OptionId);
                    }
                    ))
              )*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            

</div>
</div>
<script>


    @*$("#GridOptions").jsGrid({
        width: "100%",
        height: "600px",

        inserting: false,
        editing: true,
        sorting: true,
        paging: true,
        autoload: true,
        pageSize: 14,
        pageButtonCount: 5,
        deleteConfirm: "Do you really want to delete client?",

        //data: clients,
        controller: {
            loadData: function (filter) {
                return $.ajax({
                    type: "GET",
                    url: "/tas/TalentAssessment/ReadQuestionOptions?questionNoteId=@Model.NoteId",
                    data: filter,
                    dataType: "json"
                });
            },

            updateItem: function (item) {
               
            },
            deleteItem: function (item)
            {
                //OnDeleteQuestion(item.NoteId);
            }
        },
        onItemEditing: function (e) {
            if (e.grid._container.find(".jsgrid-edit-row")[0] != undefined) {
                //  
                e.grid.updateItem();
            }
                                },

        fields: [
            { name: "Option", type: "text" },
            { name: "OptionArabic", type: "text", },
            { name: "IsRightAnswer", type: "checkbox", },
            { name: "Score", type: "number", },
            { name: "AnswerKey", type: "text", },
            {
                name: "OptionType", type: "text", editing: false, itemTemplate: function (value)
                {
                    if (value == 0) {
                        return "Option";
                    }
                    else if (value == 1) {
                        return "All Of Above";
                    }
                    else
                    {
                        return "None Of Above";
                    }
                }
            },            
            { type: "control" ,editButton:false    },

        ]
    });*@


</script>
<script>
   
   
               
</script>