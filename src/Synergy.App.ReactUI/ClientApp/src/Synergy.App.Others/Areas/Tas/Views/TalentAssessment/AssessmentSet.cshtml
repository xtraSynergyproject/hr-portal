
@using Synergy.App.ViewModel;
@*@using Kendo.Mvc.UI;*@
@using Synergy.App.Common;
@*@using Kendo.Mvc.Extensions;*@
@model AssessmentViewModel
@{
    ViewData["Title"] = "Assessments Set";
    //Layout = "/Areas/Cms/Views/Shared/_LayoutCms.cshtml";
    Layout = null;
}
<style>
    .kgrdSalaryInfoStyle {
        width: 100% !important;
    }

    .panel-heading {
        font-size: 1.3em;
        cursor: pointer;
        padding-top: 7px !important;
        padding-bottom: 7px !important;
    }

    .panel {
        margin-top: 10px;
        border-color: #ddd;
        margin-bottom: 20px;
        background-color: #fff;
        border: 1px solid transparent;
        border-radius: 4px;
        -webkit-box-shadow: 0 1px 1px rgb(0 0 0 / 5%);
        box-shadow: 0 1px 1px rgb(0 0 0 / 5%);
    }

    .panel-heading:hover {
        background-color: #f1f1f1;
    }

    .panel-filter {
        border-color: #428bca;
    }

        .panel-filter > .panel-heading {
            color: #1a3750;
            background-color: #428bca;
            border-color: #428bca;
        }

    .btn-filter-reset {
        color: #fff;
        background-color: #428bca;
        border-color: #428bca;
    }
</style>
<script type="text/javascript">

    function OnCreateAssessment() {
        
        portalId = $("#GlobalPortalId").val();
        var prms = encodeURIComponent('ownerUserId=' + '@Model.ActiveUserId');

        var url = '/Cms/Page?lo=Popup&pageType=Service&cbm=OnAfterServiceCreate&source=Create&dataAction=Create&templateCodes=TAS_ASSESSMENT_SET&portalId=' + portalId + '&prms=' + prms;
        @*var url = '@Url.Action("NtsServicePage", "NtsService", new { @area = "Cms" })?templateid=' + tempid + '&templateCodes=' + tempCode+'&lo=Popup&cbm=OnAfterServiceCreate';*@
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: "Create Assessment Set", Width: 1000, Height: 600 });
        return false;
    }

    function OpenService(id,code,tempCode) {
        // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        var id = id;
        var source ="Versioning";
        var action = "Edit";
            //var pagename = "NtsServicePage";
       // if (code ==='SERVICE_STATUS_DRAFT') {
       //         source = "Edit";
       //         action = "Edit";
       // }
        var portalId = window.parent.$('#GlobalPortalId').val();

        var win = GetMainWindow();
        var url = '/Cms/Page?lo=Popup&pageType=Service&cbm=OnAfterServiceCreate&source=' + source + '&dataAction=' + action + '&templateCodes=' + tempCode + '&portalId=' + portalId + '&recordId=' + id;
        win.iframeOpenUrl = url;@*'@Url.Action("NtsServicePage", "NtsService", new { @area = "Cms" })?lo=Popup&cbm=OnAfterServiceCreate&serviceId=' + id + '&dataAction=' + action + '&portalId=' + portalId+'&pageName=NtsServiceTest';*@
        win.OpenWindow({ Title: '@Html.Raw(SharedResource["Service"])', Width: 1200, Height: 600 });
        return false;
    }

    function OnAfterServiceCreate() {

        getAssessmentSetAData();
       
      //  $("#kgrdAssessment").data("kendoGrid").dataSource.read();
    }
    function Delete(noteId) {

        kendo.confirm("Are you sure that you want to delete the selected item?").then(function () {
            $.ajax({
                type: "POST",
                url: "/TAS/TalentAssessment/DeleteAssessmentSet?Id=" + noteId,

                success: function (data) {

                    kendo.alert("AssessmentSet Deleted Successfully");
                    getAssessmentSetAData();
                  //  $("#kgrdAssessment").data("kendoGrid").dataSource.read();
                },
                dataType: "json",
            });
        }, function () {

        });
    }

    function OnCopyAssessment(assId) {
        var win = GetMainWindow();
        win.iframeOpenUrl = "/TAS/TalentAssessment/CopyAssessment?assessmentId=" + assId;
        win.OpenWindow({ Title: 'Copy Assessment', Width: 450, Height: 450 });
        return false;
    }

    function OnManageQuestions(assId) {
        var win = GetMainWindow();
        win.iframeOpenUrl = "/TAS/TalentAssessment/AssessmentSetAssessment?assessmentSetId=" + assId;
        win.OpenWindow({ Title: 'Manage Assessment Set Assessment', Width: 1200, Height: 700 });
        return false;
    }

    function OnTryout(assId, assType) {
        
        var url = "/TAS/TalentAssessment/Tryout?Id=" + assId + "&LanguageCode=ENGLISH&type=" + assType;
        LoadPartailView(url, $('#cms-content'));
    }

    //context menu--------
    $(function () {
        $.contextMenu({
            selector: '#ass-set-tree-menu',
            trigger: 'left',
            build: function ($trigger, e) {

                console.log($trigger);
                var id = $trigger.data('idvalue');
                var serid = $trigger.data('sid');
                var noteid = $trigger.data('noteid');
                var scode = $trigger.data('code');
                var tempCode = $trigger.data('temcode');
                var type = $trigger.data('asstype');
                return {
                    callback: function (key, options) {
                        switch (key) {
                            case 'edit':
                                OpenService(serid, scode, tempCode);
                                break;
                            case 'copy':
                                OnCopyAssessment(id);
                                break;
                            case 'delete':
                                Delete(noteid);
                                break;
                            case 'manage':
                                OnManageQuestions(id);
                                break;
                            case 'tryout':
                                OnTryout(id, type);
                                break;
                            default:
                        }
                    },
                    items: {
                        "edit": { name: "Edit", icon: "fas fa-pencil" },
                        "delete": { name: "Delete", icon: "fas fa-trash" },
                        "manage": { name: "Assessment Set Assesesment", icon: "fas fa-cog" },
                        
                        @*"gradeRating": { name: "@Html.Raw(Resource["ManageGradeRating"])", icon: "fas fa-star-half-alt" },*@
                    }
                };
            }
        });

    });

    function onSearch() {

        var srchtype = $("#type").data("kendoDropDownList").text();
        var srchtxt = $("#srchText").val();
        var search = {
            type : srchtype, searchtext : srchtxt
        };
      //  $("#kgrdAssessment").data("kendoGrid").dataSource.read(search);
    }
    function onReset() {
        $("#type").data("kendoDropDownList").value("");
        $("#srchText").val("");
     //   $("#kgrdAssessment").data("kendoGrid").dataSource.read();
    }

</script>
@*<h3>@ViewBag.Title</h3>*@

<script>
    var columnDefs = [
        {
            headerName: "Action",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='ass-set-tree-menu' data-idvalue='" + params.data.Id + "' data-sid='" + params.data.ServiceId + "' data-noteid='" + params.data.NoteId + "' data-code='" + params.data.ServiceStatusCode + "' data-temcode='" + params.data.TemplateCode + "'><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        {
            headerName: "Assessment Set Name",
            field: "AssessmentSetName",
        },
        {
            field: "AssessmentSetDescription",
            headerName: "Description",
        },


    ];

    $(function () {

        getAssessmentSetAData();

    });

    function getAssessmentSetAData() {
        document.getElementById("kgrdAssessmentSet").innerHTML = "";
        gridConfig(
            "kgrdAssessmentSet",
            "/Tas/TalentAssessment/ReadAssessmentSetData",
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>

<div class="row">
    <div class="col-md-12">
        <button class="btn btn-primary" onclick="OnCreateAssessment()" title="Create New Assessment Set">Create New Assessment Set</button>
        <br />
        <div id="kgrdAssessmentSet" style="width:100%;height:550px" class="ag-theme-alpine"></div>
        @*@(Html.Kendo().Grid<AssessmentViewModel>
        ().Name("kgrdAssessment")
        .Columns(col =>
        {
            //col.Command(command =>
            //{
            //    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("onEditCalendar").HtmlAttributes(new { @class = "action-icon", @title = "Edit" });
            //    // command.Custom("Manage Salary Elements").Text("<i class='fa fas fa-cog'></i>").Click("OnManageSalaryElements").HtmlAttributes(new { @class = "action-icon", @title = "Manage Salary Elements" });
            //}).Title("Action").Width(150);
            col.Bound(c => c.Id).ClientTemplate("<div class='btn-group grid-menu' id='ass-set-tree-menu' data-idvalue=\"#:Id#\" data-sid=\"#:ServiceId#\" data-noteid=\"#:NoteId#\" data-code=\"#:ServiceStatusCode#\" data-temcode=\"#:TemplateCode#\"><i class='fas fa-ellipsis-v'></i></div>").Width(150).Title("Action"/*"" + SharedResource["Action"] + ""*/)/*.HeaderHtmlAttributes(new { title = "Actions" })*/;
            col.Bound(c=> c.AssessmentSetName).Title("Assessment Set Name");
            col.Bound(c => c.AssessmentSetDescription).Title("Description");
        })
        .ToolBar(toolbar =>
        {
            toolbar.Custom().Text("Create New Assessment Set").Name("btnAdd").IconClass("fa fas fa-plus").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreateAssessment();" });
        })
        .Scrollable(x => x.Enabled(true))
        .Sortable(srt => srt.Enabled(true))
        .Selectable(select => select.Enabled(false))
        .Filterable(f => f.Extra(false)
        .Operators(o => o.ForString(s => s.Clear()
        .Contains("Contains")
        .IsEqualTo("Is equal to")
        )))
        .Resizable(resize => resize.Columns(true))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .AutoBind(true)
        .DataSource(
        dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Read(read => read.Action("ReadAssessmentSetData", "TalentAssessment", new { Area="TAS"}))
        .Model(model => model.Id("Id")))
        )*@
    </div>
</div>

