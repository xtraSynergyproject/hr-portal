@inject IStringLocalizer<CMS.UI.Web.Areas.TAA.Controllers.RosterScheduleController> Resource
@*@using Kendo.Mvc.UI;*@
@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@model RosterScheduleViewModel
@{
    Layout = null;
    ViewBag.Title = "Roster Schedule";
}

<style>
    .draft {
        background-color: #ffd9b3;
        border-color: #e6f2ff;
    }

    .published {
        background-color: #c6ecd9;
        border-color: #e6f2ff;
    }

    .leave {
        background-color: lightpink;
        border-color: #c6ecd9;
        border-bottom: solid 1px rgb(222,222,224) !important;
    }

    .normal {
        background-color: #c6ecd9;
        border-color: #ffd9b3;
        border-bottom: solid 1px rgb(222,222,224) !important;
    }

    .dayoff {
        background-color: lightgrey;
        border-color: #e6f2ff;
        border-bottom: solid 1px rgb(222,222,224) !important;
    }

    .publicholiday {
        /*background-color:lightcyan;*/
        background-color: #e6b8b8;
        border-color: #e6f2ff;
        border-bottom: solid 1px rgb(222,222,224) !important;
    }

    .k-grid-header th.k-header > .k-link {
        white-space: normal;
    }

    .k-pdf-export .k-filterable .k-grid-filter {
        display: none;
    }

    .k-pdf-export .k-grid-toolbar,
    .k-pdf-export .k-pager-wrap {
        display: none;
    }
    /* Page Template for the exported PDF */
    .page-template {
        font-family: "DejaVu Sans", "Arial", sans-serif;
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
    }

        .page-template .header {
            position: absolute;
            top: 30px;
            left: 30px;
            right: 30px;
            border-bottom: 1px solid #888;
            color: #888;
        }

        .page-template .footer {
            position: absolute;
            bottom: 30px;
            left: 30px;
            right: 30px;
            border-top: 1px solid #888;
            text-align: center;
            color: #888;
        }

        .page-template .watermark {
            font-weight: bold;
            font-size: 400%;
            text-align: center;
            margin-top: 30%;
            color: #aaaaaa;
            opacity: 0.1;
            transform: rotate(-35deg) scale(1.7, 1.5);
        }
</style>

<script>
    function OnContinue(e) {
        var users = '';
        var grid = $("#kgrdRosterSchedule").data("kendoGrid");

        var rows = grid.select();
        var length = rows.length / 2;
        var i = 1;
        rows.each(function (index, row) {
            if (i <= length) {
                var selectedItem = grid.dataItem(row);
                users = users + selectedItem.UserId + ',';
            }
            i++;
            // selectedItem has EntityVersionId and the rest of your model
        });

        var dates = GetCheckedDate();
        alert(users);
        $.ajax({
            type: "POST",
            url: "/taa/RosterSchedule/DeleteRoster",
            data: { 'users': users, 'dates': dates },
            success: function (data) {
                kendo.alert("Roster Deleted Successfully");
                $("#kgrdRosterSchedule").data("kendoGrid").dataSource.read();
            },
            dataType: "json",
        });


    }

    function OnDataBound2(arg) {
        var grid = $("#kgrdRosterSchedule").data("kendoGrid");

        $(".checkbox").bind("change", function (e) {
            OnRowSelection(e.target);
        });

        $(".canEdit").bind("change", function (e) {
            OnEditSelection(e.target);
        });

        $(".subSection").bind("click", function (e) {
            OnSubSectionClick(e.target);
        });
        $(".subSection").bind("change", function (e) {
            OnSubSectionChange(e.target);
        });

        $(".editPattern").bind("change", function (e) {

            OnEditRoster(e.target);

        });

        var rows = arg.sender.tbody.children();
        for (var j = 0; j < rows.length; j++) {
            var row = $(rows[j]);
            var data = arg.sender.dataItem(row);

            SetCellStyle('sunday', 'Count1', false, data.DayOff1, data.Sunday, data.RostarStatus1, data.Draft1, grid, row);
            SetCellStyle('monday', 'Count2', false, data.DayOff2, data.Monday, data.RostarStatus2, data.Draft2, grid, row);
            SetCellStyle('tuesday', 'Count3', false, data.DayOff3, data.Tuesday, data.RostarStatus3, data.Draft3, grid, row);
            SetCellStyle('wednesday', 'Count4', false, data.DayOff4, data.Wednesday, data.RostarStatus4, data.Draft4, grid, row);
            SetCellStyle('thursday', 'Count5', false, data.DayOff5, data.Thursday, data.RostarStatus5, data.Draft5, grid, row);
            SetCellStyle('friday', 'Count6', false, data.DayOff6, data.Friday, data.RostarStatus6, data.Draft6, grid, row);
            SetCellStyle('saturday', 'Count7', false, data.DayOff7, data.Saturday, data.RostarStatus7, data.Draft7, grid, row);

            //var cls='';
            //if (data.DayOff1 == 'DayOff') {
            //    cls= 'dayoff';
            //} else if (data.Sunday == 'L')
            //{
            //    cls= 'leave';
            //}
            //else if (data.SundayHours!=null) {
            //    cls = 'normal';
            //}
            //var sundayIndex = this.wrapper.find(".k-grid-header [data-field=" + "Sunday" + "]").index();
            //var sunday = row.children().eq(sundayIndex);
            //sunday.addClass(cls);
        }

    }

    function OnChange(e) {
        OnWeekChange(null);

    }

    var curPage;

    function OnWeekChange(date) {
        var orgId = $("#OrganizationId").val();
        var portalId = $('#GlobalPortalId').val();
        localStorage["Org-options"] = orgId;

        if (orgId == '') {
            orgId = 0;
        }
        if (date == null) {
            date = $("#WeekDateString").val();
        }
        var customurl = encodeURIComponent('orgId=' + orgId + '&date=' + date);
        var url = '/Cms/Page?pageName=RosterSchedule&portalId=' + portalId + '&customUrl=' + customurl;
        if (curPage == "HRDIRECT") {
            LoadCmsPartialView(url, 'pageContent');
        }
        else {
            LoadCmsPartialView(url, 'Custom');
        }
        
        return false;
    }

    function FilterGrid() {
        return {
            orgId: $("#OrganizationId").val(),
            date: $("#WeekDateString").val()

        };
    }
</script>

<script type="x/kendo-template" id="page-template">
     <div class="page-template">
    <div class="header">
         <div style="float:right">Page #: pageNum # of #: totalPages #</div>
       Roster Schedule
       </div>
       <div class="watermark">KENDO UI</div>
       <div class="footer">
         Page #: pageNum # of #: totalPages #
       </div>
     </div>
</script>


@Html.AntiForgeryToken()
<div id="appWrapper">
    <div class="formHeader">

        <h4>
            @ViewBag.Title
        </h4>

    </div>
    <div class="row no-gutter hr-pad-top-15">
        <div class="form-group col-xs-12  col-md-6">
            <div class="col-lg-3 label-div">
                <span class="required">*</span>
                <Label class="control-label">@Resource["Department"]</Label>
            </div>
            <div class="col-lg-9">
                @*@(Html.Kendo().DropDownListFor(x => x.OrganizationId)
         .OptionLabel("-- All --")
         .DataSource(source =>
         {
             source.Read(read =>
             {
                 read.Action("GetDepartmentList", "RosterSchedule", new { area = "Taa" });
             });
         })

         .DataTextField("Name")
         .DataValueField("Id")
        // .Filter(FilterType.Contains)
         .AutoBind(true)
         .Events(e => e.Change("OnChange"))
         .HtmlAttributes(new { @class = "hr-xx-large" }))*@

                <input id="OrganizationId" class="hr-xx-large" />

            </div>
        </div>

        <div class="form-group col-xs-12 col-md-6">
            <div class="col-lg-3 label-div">
                <span class="required">*</span>
                @Resource["WeekDisplayName"]
            </div>
            <div class="col-lg-9">

                <span class="k-widget k-datepicker k-header" style="width:485px">
                    <span class="k-picker-wrap k-state-default">
                        <span onclick="return OnWeekChange('@ViewBag.Previous');" class="k-select k-icon k-i-arrow-60-left" role="button" aria-label="select" unselectable="on" title="Previous Week"
                              style="width:30px;height:36px; cursor:pointer;left:0;border-left:none;border-right:1px solid rgb(206, 206, 210);
                                border-top-right-radius:0px;border-bottom-right-radius:0px;">
                        </span>
                        <input name="EffectiveEndDate" readonly="readonly" disabled="disabled" class=" k-input" style="width: 100%;margin-right:50px;" type="text" value="@Html.Raw(Model.WeekDisplayName)" />
                        <span onclick="return OnWeekChange('@ViewBag.Next');" class="k-select k-icon k-i-arrow-60-right" role="button" aria-label="select" unselectable="on"
                              style="width:30px;height:36px;cursor:pointer;" title="Next Week">
                        </span>
                    </span>
                </span>
            </div>
        </div>
    </div>
    <hr />
    <div class="row" style="margin-bottom:10px;margin-top:15px;text-align:right">
        <div class="col-md-7" style="text-align:left;">

            @Resource["PublishDate"] :&nbsp;&nbsp;

            <span id="PublishDate"></span>
            <span style="background-color:lightgoldenrodyellow;">
                @Resource["*Unpublished(draft)rostercannotbeusedbysystemandwillnotbevisibletoemployees."]
            </span>
        </div>
        <div class="col-md-5">
            <input class='checkAllHead' type='checkbox'>&nbsp;Select all day&nbsp;&nbsp;&nbsp;&nbsp;
            <span style="font-size:14px;border-radius:5px;padding:3px;background-color:#ffd9b3">&nbsp;@Resource["DraftRoster"]&nbsp;</span>&nbsp;
            <span style="font-size:14px;border-radius:5px;padding:3px;background-color:#c6ecd9">&nbsp;@Resource["PublishedRoster"]&nbsp;</span>&nbsp;
            <span style="font-size:14px;border-radius:5px;padding:3px;background-color:lightgrey">&nbsp;@Resource["DayOff"]&nbsp;</span>&nbsp;
            <span style="font-size:14px;border-radius:5px;padding:3px;background-color:lightpink">&nbsp;@Resource["Leave"]&nbsp;</span>&nbsp;
            <span style="font-size:14px;border-radius:5px;padding:3px;background-color:#e6b8b8">&nbsp;@Resource["PublicHoliday"]&nbsp;</span>&nbsp;
        </div>
    </div>
    <div>
        @*@(Html.Kendo().Grid<RosterScheduleViewModel>
                                                        ()
                                                        .Name("kgrdRosterSchedule").Pdf(pdf => pdf
    .AllPages()
    .AvoidLinks()
    // .PaperSize("A4")
    .Scale(0.3)
    .TemplateId("page-template1")
    .Margin("1cm", "1cm", "1cm", "1cm")
    .Landscape()
    .RepeatHeaders())
                                                        .Columns(columns =>
                                                        {
                                                            //columns.Bound(x => x.Id).Width(35).ClientTemplate(@"<input class='checkbox' onChange='SelectCells();' type='checkbox' />").ClientHeaderTemplate(@"<input class='checkboxAll' type='checkbox' />");
                                                           // columns.Select().Exportable(false).HtmlAttributes(new { @class = "checkbox-align" }).ClientHeaderTemplate(@"<input class='checkboxAll' type='checkbox' />").HeaderHtmlAttributes(new { @class = "checkbox-align", id = "selectcand" }).Width(50).Locked(true).Lockable(false);
                                                            columns.Select().HtmlAttributes(new { @class = "checkbox-align" }).HeaderHtmlAttributes(new { @class = "checkbox-align", id = "selectcand" }).Width(50).Locked(true).Lockable(false);

                                                            columns.Bound(c => c.EmployeeName).Title(@Resource["EmployeeName"]).Locked(true).Width(250).Filterable(ftb => ftb.Multi(true).Search(true));
                                                            columns.Bound(c => c.PersonNo).Title(@Resource["EmployeeNo"]).Width(150);
                                                            //columns.Bound(c => c.SponsorshipNo).Title("Iqamah No").Width(150);
                                                            columns.Bound(c => c.JobName).Title(@Resource["JobTitle"]).Width(150).Filterable(ftb => ftb.Multi(true).Search(true));
                                                            columns.Bound(c => c.OrganizationName).Title(@Resource["OrganizationName"]).Width(150).Filterable(ftb => ftb.Multi(true).Search(true));

                                                            columns.Bound(c => c.Count1).Width(160).Filterable(false).HtmlAttributes(new { @class = "editPattern" }).EditorTemplateName("PatternEditor").ClientTemplate("#=sundayTemplate(data)#").ClientFooterTemplate("Total : #=sum#").ClientHeaderTemplate("<input name='sunday' onChange='SelectCells();' class='sunday' type='checkbox' />&nbsp;" + ViewBag.Sun + "<br />(Time In-Time Out)");
                                                            columns.Bound(c => c.Count2).Width(160).Filterable(false).HtmlAttributes(new { @class = "editPattern" }).ClientTemplate("#=mondayTemplate(data)#").ClientFooterTemplate("Total : #=sum#").ClientHeaderTemplate("<input name='monday' onChange='SelectCells();' class='monday' type='checkbox' />&nbsp;" + ViewBag.Mon + "<br />(Time In-Time Out)");
                                                            columns.Bound(c => c.Count3).Width(160).Filterable(false).HtmlAttributes(new { @class = "editPattern" }).ClientTemplate("#=tuesdayTemplate(data)#").ClientFooterTemplate("Total : #=sum#").ClientHeaderTemplate("<input name='tuesday' onChange='SelectCells();' class='tuesday' type='checkbox' />&nbsp;" + ViewBag.Tue + "<br />(Time In-Time Out)");
                                                            columns.Bound(c => c.Count4).Width(160).Filterable(false).HtmlAttributes(new { @class = "editPattern" }).ClientTemplate("#=wednesdayTemplate(data)#").ClientFooterTemplate("Total : #=sum#").ClientHeaderTemplate("<input name='wednesday' onChange='SelectCells();' class='wednesday' type='checkbox' />&nbsp;" + ViewBag.Wed + "<br />(Time In-Time Out)");
                                                            columns.Bound(c => c.Count5).Width(160).Filterable(false).HtmlAttributes(new { @class = "editPattern" }).ClientTemplate("#=thursdayTemplate(data)#").ClientFooterTemplate("Total : #=sum#").ClientHeaderTemplate("<input name='thursday' onChange='SelectCells();' class='thursday' type='checkbox' />&nbsp;" + ViewBag.Thu + "<br />(Time In-Time Out)");
                                                            columns.Bound(c => c.Count6).Width(160).Filterable(false).HtmlAttributes(new { @class = "editPattern" }).ClientTemplate("#=fridayTemplate(data)#").ClientFooterTemplate("Total : #=sum#").ClientHeaderTemplate("<input name='friday' onChange='SelectCells();' class='friday' type='checkbox' />&nbsp;" + ViewBag.Fri + "<br />(Time In-Time Out)");
                                                            columns.Bound(c => c.Count7).Width(160).Filterable(false).HtmlAttributes(new { @class = "editPattern" }).ClientTemplate("#=saturdayTemplate(data)#").ClientFooterTemplate("Total : #=sum#").ClientHeaderTemplate("<input name='saturday' onChange='SelectCells();' class='saturday' type='checkbox' />&nbsp;" + ViewBag.Sat + "<br />(Time In-Time Out)");
                                                            columns.Bound(c => c.SumOfWeekHours).Title(@Resource["TotalHours"]).Filterable(false).Width(200);
                                                        })
                                                        .ToolBar(toolbar =>
                                                        {
                                                            // if (2236.HasPermission())
                                                            // {

                                                            toolbar.Custom().Text(@Resource["Create/EditRosterSchedule"]).Name("btnAdd").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnUpdate();" });
                                                            toolbar.Custom().Text(@Resource["Publish"]).Name("btnAddSec").HtmlAttributes(new { @class = "k-primary", href = "javascript:Publish();" });
                                                            toolbar.Custom().Text(@Resource["CopyThisRoster"]).Name("btnCopy").HtmlAttributes(new { @class = "k-primary", @onclick = "return OpenCopyRoster();" });
                                                            toolbar.Custom().Text(@Resource["DeleteRoster"]).Name("btnDelete").HtmlAttributes(new { @class = "k-primary", href = "javascript:DeleteRoster();" });
                                                            toolbar.Custom().Text(@Resource["RosterTimeLineView"]).Name("btnrt").HtmlAttributes(new { @class = "k-primary", href = "javascript:OpenTimeLine();" });
                                                            toolbar.Custom().Text(@Resource["LeaveCalendarView"]).Name("btnCal").HtmlAttributes(new { @class = "k-primary", href = "javascript:OpenLeaveCalendar();" });
                                                            //  toolbar.Custom().Text("Export to PDF").Name("btnPdf").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnPrintPdf();" });
                                                            toolbar.Pdf();
                                                            // toolbar.Excel();

                                                            //  }
                                                        })
                                                                                    .Events(e => e.DataBound("OnDataBound2"))
                                                                                    .Resizable(resize => resize.Columns(true))
                                                                                    .Scrollable(scrollable => scrollable.Enabled(true).Height(400))
                                                                                    // .Reorderable(reorderable => reorderable.Columns(true))
                                                                                    .Selectable(select => select.Enabled(false).Mode(GridSelectionMode.Multiple))
                                                                                    .Sortable(srt => srt.Enabled(false))
                                                                                    // .Filterable(filter => filter.Mode(GridFilterMode.Row))
                                                                                    .Filterable()
                                                                                    .Excel(e => e.FileName("RosterSchedule.xlsx").AllPages(true))
                                                                                    .Pageable(pageable => pageable
                                                                                    .Refresh(true)
                                                                                    .PageSizes(new[] { 10, 50, 100, 200, 500, 1000, 2000 })
                                                                                    .ButtonCount(10))
                                                                                    .DataSource(
                                                                                    dataSource => dataSource
                                                                                    .Ajax()
                                                                                    .PageSize(1000)
                                                                                    .Aggregates(aggregates =>
                                                                                    {

                                                                                        aggregates.Add(p => p.Count1).Sum();
                                                                                        aggregates.Add(p => p.Count2).Sum();
                                                                                        aggregates.Add(p => p.Count3).Sum();
                                                                                        aggregates.Add(p => p.Count4).Sum();
                                                                                        aggregates.Add(p => p.Count5).Sum();
                                                                                        aggregates.Add(p => p.Count6).Sum();
                                                                                        aggregates.Add(p => p.Count7).Sum();
                                                                                        //aggregates.Add(p => p.SumOfWeekHours).Count();

                                                                                    })
                                                                                    // .Events(events => events.Error("OnError"))
                                                                                    .Read(read => read.Action("ReadSearchData", "RosterSchedule").Data("FilterGrid"))
                                                                                    .Model(model =>
                                                                                    {
                                                                                        model.Id(p => p.Id);
                                                                                        model.Field(p => p.SectionName).Editable(true);
                                                                                        model.Field(p => p.EmployeeName).Editable(false);
                                                                                        model.Field(p => p.Sponsor).Editable(false);
                                                                                        model.Field(p => p.ContractRenewable).Editable(false);
                                                                                        model.Field(p => p.ContractEndDate).Editable(false);
                                                                                        model.Field(p => p.JobName).Editable(false);
                                                                                        model.Field(p => p.PersonNo).Editable(false);
                                                                                        model.Field(p => p.OrganizationName).Editable(false);
                                                                                        //model.Field(p => p.Sunday).Editable(false);
                                                                                        //model.Field(p => p.Monday).Editable(false);
                                                                                        //model.Field(p => p.Tuesday).Editable(false);
                                                                                        //model.Field(p => p.Wednesday).Editable(false);
                                                                                        //model.Field(p => p.Thursday).Editable(false);
                                                                                        //model.Field(p => p.Friday).Editable(false);
                                                                                        //model.Field(p => p.Saturday).Editable(false);
                                                                                    })
                                                                                            )
                                                                                   .Editable(editable => editable.Mode(GridEditMode.InCell))

        )*@
    </div>
    @*@Html.HiddenFor(x => x.Operation)*@
    @Html.HiddenFor(x => x.Id)

    @Html.HiddenFor(x => x.UserIds)
    @Html.HiddenFor(x => x.WeekDateString)
    @Html.Hidden("ParentSectionId")


    @*@(Html.Kendo().Dialog()
        .Name("deleteConfirm")
        .Title(@Resource["ConfirmDelete"])
        .Content(SharedResource["Areyousurethatyouwanttoproceed?"])
        .Width(400)
        .Height(250)
        .Modal(true)
        .Visible(false)
        .Actions(actions =>
        {
            actions.Add().Text(@SharedResource["Cancel"]);
            actions.Add().Text(@Resource["Continue"]).Primary(true).Action("OnContinue");
        })
        //.Events(ev => ev.Close("onVersionDialogueClose").Open("onVersionDialogueOpen"))
    )*@
</div>
<script id="sunday_template" type="text/x-kendo-template">
    <div style="padding-left:10px">
        <div class="row" style='color:blue'>
    #if (data.Sunday != "-")
      {#   #=data.SundayText#  #}#


        </div>
        <div class="row" style="text-align:center">
            #if (data.DayOff1 == 2) {# OFF #}
            else if (data.DayOff1 == 3){# PUBLIC HOLIDAY #}
            else if (data.SundayHours != null) {#
            Total Hours : #=data.SundayHours#
            #}#
        </div>
        <div class="row" style="text-align:center">
            #if (data.Sunday == null) {# #=''# #} else {# #=data.Sunday# #}#
        </div>
    </div>
</script>
<script id="monday_template" type="text/x-kendo-template">
    <div style="padding-left:10px">
        <div class="row" style='color:blue'>
            #=data.MondayText#
        </div>
        <div class="row" style="text-align:center">
            #if (data.DayOff2 == 2) {# OFF #}
            else if (data.DayOff2 == 3){# PUBLIC HOLIDAY #}
            else if (data.MondayHours != null){#
            Total Hours : #=data.MondayHours#
            #}#
        </div>
        <div class="row" style="text-align:center">
            #if (data.Monday == null) {# #=''# #} else {# #=data.Monday# #}#
        </div>
    </div>
</script>
<script id="tuesday_template" type="text/x-kendo-template">
    <div style="padding-left:10px">
        <div class="row" style='color:blue'>
            #=data.TuesdayText#
        </div>
        <div class="row" style="text-align:center">
            #if (data.DayOff3 == 2) {# OFF #}
            else if (data.DayOff3 == 3){# PUBLIC HOLIDAY #}
            else if (data.TuesdayHours != null){#
            Total Hours : #=data.TuesdayHours#
            #}#
        </div>
        <div class="row" style="text-align:center">
            #if (data.Tuesday == null) {# #=''# #} else {# #=data.Tuesday# #}#
        </div>
    </div>
</script>
<script id="wednesday_template" type="text/x-kendo-template">
    <div style="padding-left:10px">
        <div class="row" style='color:blue'>
            #=data.WednesdayText#
        </div>
        <div class="row" style="text-align:center">
            #if (data.DayOff4 == 2) {# OFF #}
            else if (data.DayOff4 == 3){# PUBLIC HOLIDAY #}
            else if (data.WednesdayHours != null){#
            Total Hours : #=data.WednesdayHours#
            #}#
        </div>
        <div class="row" style="text-align:center">
            #if (data.Wednesday == null) {# #=''# #} else {# #=data.Wednesday# #}#
        </div>
    </div>
</script>
<script id="thursday_template" type="text/x-kendo-template">
    <div style="padding-left:10px">
        <div class="row" style='color:blue'>
            #=data.ThursdayText#
        </div>
        <div class="row" style="text-align:center">
            #if (data.DayOff5 == 2) {# OFF #}
            else if (data.DayOff5 == 3){# PUBLIC HOLIDAY #}
            else if (data.ThursdayHours != null){#
            Total Hours : #=data.ThursdayHours#
            #}#
        </div>
        <div class="row" style="text-align:center">
            #if (data.Thursday == null) {# #=''# #} else {# #=data.Thursday# #}#
        </div>
    </div>
</script>
<script id="friday_template" type="text/x-kendo-template">
    <div style="padding-left:10px">
        <div class="row" style='color:blue'>
            #=data.FridayText#
        </div>
        <div class="row" style="text-align:center">
            #if (data.DayOff6 == 2) {# OFF #}
            else if (data.DayOff6 == 3){# PUBLIC HOLIDAY #}
            else if (data.FridayHours != null){#
            Total Hours : #=data.FridayHours#
            #}#
        </div>
        <div class="row" style="text-align:center">
            #if (data.Friday == null) {# #=''# #} else {# #=data.Friday# #}#
        </div>
    </div>
</script>
<script id="saturday_template" type="text/x-kendo-template">
    <div style="padding-left:10px">
        <div class="row" style='color:blue'>
            #=data.SaturdayText#
        </div>
        <div class="row" style="text-align:center">
            #if (data.DayOff7 == 2) {# OFF #}
            else if (data.DayOff7 == 3){# PUBLIC HOLIDAY #}
            else if (data.SaturdayHours != null){#
            Total Hours : #=data.SaturdayHours#
            #}#
        </div>
        <div class="row" style="text-align:center">
            #if (data.Saturday == null) {# #=''# #} else {# #=data.Saturday# #}#
        </div>
    </div>
</script>




<script type="text/javascript">
    var sundayTemplate = kendo.template($("#sunday_template").html());
    var mondayTemplate = kendo.template($("#monday_template").html());
    var tuesdayTemplate = kendo.template($("#tuesday_template").html());
    var wednesdayTemplate = kendo.template($("#wednesday_template").html());
    var thursdayTemplate = kendo.template($("#thursday_template").html());
    var fridayTemplate = kendo.template($("#friday_template").html());
    var saturdayTemplate = kendo.template($("#saturday_template").html());

    $(document).ready(function () {

        $("#OrganizationId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
          //  filter: "contains",
	    optionLabel:"@ApplicationConstant.PlaceHolder_AllOption",
            change: OnChange,
            value:'@Model.OrganizationId',
            dataSource:
            {
                transport:
                {
                    read:
                    {
                        url: "/Taa/RosterSchedule/GetDepartmentList",
                    }
                }
            }
        });

        $('#kgrdRosterSchedule input[type=checkbox][name=sunday]').val('@ViewBag.Sunday');
        $('#kgrdRosterSchedule input[type=checkbox][name=monday]').val('@ViewBag.Monday');
        $('#kgrdRosterSchedule input[type=checkbox][name=tuesday]').val('@ViewBag.Tuesday');
        $('#kgrdRosterSchedule input[type=checkbox][name=wednesday]').val('@ViewBag.Wednesday');
        $('#kgrdRosterSchedule input[type=checkbox][name=thursday]').val('@ViewBag.Thursday');
        $('#kgrdRosterSchedule input[type=checkbox][name=friday]').val('@ViewBag.Friday');
        $('#kgrdRosterSchedule input[type=checkbox][name=saturday]').val('@ViewBag.Saturday');


        if (localStorage["Org-options"] != null) {
            $("#OrganizationId").data("kendoDropDownList").value(localStorage["Org-options"]);
            $("#OrganizationId").val(localStorage["Org-options"]);
        }
        var gridData = $("#kgrdRosterSchedule").data("kendoGrid");

       var search = FilterGrid();
        gridData.dataSource.read(search);

        GetPublishDate();

    });
    $(".checkboxAll").bind("change", function (e) {

        if ($(this).attr('checked')) {
            $('.checkboxAll').removeAttr('checked');
            $('.checkbox').prop('checked', false);
            $(".checkbox").closest("td").removeClass("k-state-selected");
        } else {
            $('.checkboxAll').attr('checked', 'checked');
            $('.checkbox').prop('checked', true);
            $(".checkbox").closest("td").addClass("k-state-selected");
        }
        SelectCells();
    });

    $(".checkAllHead").bind("change", function (e) {

        if ($(this).attr('checked')) {
            $('.checkAllHead').removeAttr('checked');
            $('.sunday').prop('checked', false);
            $('.monday').prop('checked', false);
            $('.tuesday').prop('checked', false);
            $('.wednesday').prop('checked', false);
            $('.thursday').prop('checked', false);
            $('.friday').prop('checked', false);
            $('.saturday').prop('checked', false);
        } else {
            $('.checkAllHead').attr('checked', 'checked');
            $('.sunday').prop('checked', true);
            $('.monday').prop('checked', true);
            $('.tuesday').prop('checked', true);
            $('.wednesday').prop('checked', true);
            $('.thursday').prop('checked', true);
            $('.friday').prop('checked', true);
            $('.saturday').prop('checked', true);
        }
        SelectCells();

    });



        //$(".sunday").bind("change", function (e) {
        //    if ($(this).attr('checked')) {
        //        var colIdx = grid.select().closest("td").index();
        //        alert(colIdx);
        //    } else {
        //        var grid = $("#kgrdRosterSchedule").data("kendoGrid");
        //        $(".canEdit").closest("td").addClass("k-state-selected");
        //    }
        //});
    function getOrgId(e) {
        return {
            orgId: $("#OrganizationId").val()
        };
    }
    function GetDataForSubSection(e) {
        var model= {
            orgId: $("#OrganizationId").val(),
            parentSectionId: $("#ParentSectionId").val()
        };
        return model;
    }


     function OnRowSelection(element) {

            $('input.checkbox[type=checkbox]').each(function (e) {
                if (this.checked) {
                    $(this).closest("td").addClass("k-state-selected");
                }
            });
            var isChecked = $(element).prop('checked');
            if (isChecked) {
                $(element).prop('checked', true);
                $(element).closest("td").addClass("k-state-selected");
            }
            else {
                $(element).prop('checked', false);
                $(element).closest("td").removeClass("k-state-selected");
            }
         var numChkBoxes = $('#kgrdRosterSchedule input[type=checkbox][class=checkbox]').length;
         var numChkBoxesChecked = $('#kgrdRosterSchedule tbody input:checkbox:checked').length;
            if (numChkBoxes == numChkBoxesChecked && numChkBoxes > 0) {
                $('.checkboxAll').prop('checked', true);
            }
            else {

                $('.checkboxAll').prop('checked', false);
            }



    }
    //function OnEditSelection(element) {
    //    alert($(element).val());
    //    var grid = $("#kgrdRosterSchedule").data("kendoGrid");
    //    var isChecked = $(element).val();

    //    dataItem = grid.dataItem($(element).closest("tr"));
    //    dataItem.set("UserId", isChecked);
    //}


    function SelectCells() {
      //
       // alert("123");
        var grid = $("#kgrdRosterSchedule").data("kendoGrid");
        var rows = grid.tbody.children();
        for (var j = 0; j < rows.length; j++) {
            var row = $(rows[j]);
            var data = grid.dataItem(row);
            var isRowChecked = false;

            grid.tbody.find("input:checked").closest("tr").each(function (index) {
                if (grid.dataItem(this).UserId == data.UserId) {
                    isRowChecked = true;

                }
            });

            SetCellStyle('sunday', 'Count1', isRowChecked, data.DayOff1, data.Sunday, data.RostarStatus1,data.Draft1, grid, row);
            SetCellStyle('monday', 'Count2', isRowChecked, data.DayOff2, data.Monday, data.RostarStatus2,data.Draft2, grid, row);
            SetCellStyle('tuesday', 'Count3', isRowChecked, data.DayOff3, data.Tuesday, data.RostarStatus3, data.Draft3, grid, row);
            SetCellStyle('wednesday', 'Count4', isRowChecked, data.DayOff4, data.Wednesday, data.RostarStatus4, data.Draft4, grid, row);
            SetCellStyle('thursday', 'Count5', isRowChecked, data.DayOff5, data.Thursday, data.RostarStatus5, data.Draft5, grid, row);
            SetCellStyle('friday', 'Count6', isRowChecked, data.DayOff6, data.Friday, data.RostarStatus6, data.Draft6, grid, row);
            SetCellStyle('saturday', 'Count7', isRowChecked, data.DayOff7, data.Saturday, data.RostarStatus7, data.Draft7, grid, row);

        }

    }
    function SetCellStyle(checkBoxName, dayName, isRowChecked, dayOff, leave, hours,isDraft,grid,row) {
        var cls = '';

        var dayChecked = $('#kgrdRosterSchedule input[type=checkbox][name=' + checkBoxName+']').is(':checked');
        if (isRowChecked && dayChecked) {
            cls = 'k-state-selected';
        } else if (dayOff == 2) {
            cls = 'dayoff';
        } else if (dayOff == 3) {
            cls = 'publicholiday';
        } else if (leave == 'L') {
            cls = 'leave';
        }
        else if (hours == 1) {
            cls = 'normal';
        }
        else if (isDraft) {
            cls = 'draft';
        }
        //else {
        //    cls = 'published';
        //}
        var index = grid.wrapper.find(".k-grid-header [data-field=" + dayName + "]").index();
        var day = row.children().eq(index);
        day.removeClass();
        day.addClass(cls);
    }

    function OnSubSectionClick(element) {
       var grid = $("#kgrdRosterSchedule").data("kendoGrid");
        dataItem = grid.dataItem($(element).closest("tr"));
        $("#ParentSectionId").val(dataItem.SectionId);
        return false;
    }
    function OnEditSelection(element) {

        var sec = $(element).val();
        var grid = $("#kgrdRosterSchedule").data("kendoGrid");
        dataItem = grid.dataItem($(element).closest("tr"));

        var startDate = '@ViewBag.Sunday';

        $.ajax({
            type: "POST",
            url: "/hrs/Person/CorrectSection",
            data: { 'personId': dataItem.PersonId, 'sectionId': sec, 'startDate': startDate },
            success: function (data) {
                dataItem.SectionName = data.sectionname;
                $("#kgrdRosterSchedule").data("kendoGrid").dataSource.read();
            },
            dataType: "json",
        });

    }
    function OnSubSectionChange(element) {

        var sec = $(element).val();
        var grid = $("#kgrdRosterSchedule").data("kendoGrid");
        dataItem = grid.dataItem($(element).closest("tr"));

        var startDate = '@ViewBag.Sunday';

        $.ajax({
            type: "POST",
            url: "/hrs/Person/CorrectSubSection",
            data: { 'personId': dataItem.PersonId, 'subSectionId': sec, 'startDate': startDate },
            success: function (data) {
                dataItem.SubSectionName = data.subSectionName;
                $("#kgrdRosterSchedule").data("kendoGrid").dataSource.read();
            },
            dataType: "json",
        });

    }

    function OnEditRoster(element) {
        var sec = $(element).val();
        // alert(sec);

        var grid = $("#kgrdRosterSchedule").data("kendoGrid");
        dataItem = grid.dataItem($(element).closest("tr"));



        var startDate = '@ViewBag.Sunday';

        var colIdx = $(element).closest("td").index();
        if (colIdx == 3) {
            startDate = '@ViewBag.Sunday';
            //if (dataItem.Sunday == 'L') {
            //    alert("Leave is Applied for this Date. Cannot Create Roster");
            //    return false;
            //}
        }

        if (colIdx == 4)
            startDate = '@ViewBag.Monday';
        if (colIdx == 5)
            startDate = '@ViewBag.Tuesday';
        if (colIdx == 6)
            startDate = '@ViewBag.Wednesday';
        if (colIdx == 7)
            startDate = '@ViewBag.Thursday';
        if (colIdx == 8)
            startDate = '@ViewBag.Friday';
        if (colIdx == 9)
            startDate = '@ViewBag.Saturday';

        var type = "Pattern";

        if (sec == "001") {
            type = "DayOff"
        }
       // alert(startDate);
        if (sec != "000") {
            $.ajax({
                type: "POST",
                url: "/taa/RosterSchedule/CorrectRoster",
                data: { 'userId': dataItem.UserId, 'patternId': sec, 'startDate': startDate,'type':type },
                success: function (data) {
                    $("#kgrdRosterSchedule").data("kendoGrid").dataSource.read();
                },
                dataType: "json",
            });
        }
        else {
            var orgId = $("#OrganizationId").val();

            var users = dataItem.UserId + ",";
            var dates = startDate + ",";

            url = "/taa/rosterschedule/createroster?users=" + users + "&dates=" + dates + "&orgId=" + orgId;
             var win = GetMainWindow();
            win.iframeOpenUrl =url
       win.OpenWindow({ Title: 'Create Roster@Html.Raw(SharedResource["CopyRoster"])', Width: 1200, Height: 600 });

           //var udfs = encodeURIComponent( 'UserId='+users + '&RosterDate=' + dates);

          //  var url = '/Cms/Page?lo=Popup&cbm=OnAfterServiceCreate&source=Create&dataAction=Create&templateCodes=RosterSchedule&portalId=' + portalId + '&udfs=' + udfs;
           //   LoadCmsPartialView(url, 'Service', true, 1000, 600, 'Create Roster');

        }

    }
    function OnSuccess(response) {
        if (response.success) {
            if (response.operation=="@DataOperation.Create") {
                kendo.alert("New User Hierarchy created Successfully");
            }
            else if (response.operation=="@DataOperation.Update") {
                kendo.alert("User Hierarchy updated Successfully");
            }
            else if (response.operation=="@DataOperation.Correct") {
                kendo.alert("User Hierarchy corrected Successfully");
            }
            else if (response.operation=="@DataOperation.Delete") {
                kendo.alert("User Hierarchy deleted Successfully");
            }

            var url = "/hrs/userhierarchy";
            if (response.ru != null) {
                url = decodeURI(response.ru) + "&posId=" + response.posId;
            }
            window.location.href = url;
        }
        else {
            ShowErrors(response.errors);
        }
    }
    function OnCancel(e) {
        window.location.href = "/hrs/userhierarchy";
        return true;
    }
    function OnChart(e) {
        //var posId = $("#PositionId").data("kendoDropDownList").value();
        var posId = $("#PositionId").val();
        if (posId == null || posId == 0) {
            posId = $("#ParentPositionId").val();
        }
        var param = this.element.attr("param");
        url = decodeURI(param) + "&posId=" + posId;
        window.location.href = url;
        return true;
    }
    function OnUpdate() {

        //var users = '';
        //var grid = $("#kgrdRosterSchedule").data("kendoGrid");
        //grid.tbody.find("input:checked").closest("tr").each(function (index) {
        //    users = users + grid.dataItem(this).UserId + ',';
        //});

        var dates = '';
        var sun = $('#kgrdRosterSchedule input[type=checkbox][name=sunday]');
        var mon = $('#kgrdRosterSchedule input[type=checkbox][name=monday]');
        var tue = $('#kgrdRosterSchedule input[type=checkbox][name=tuesday]');
        var wed = $('#kgrdRosterSchedule input[type=checkbox][name=wednesday]');
        var thu = $('#kgrdRosterSchedule input[type=checkbox][name=thursday]');
        var fri = $('#kgrdRosterSchedule input[type=checkbox][name=friday]');
        var sat = $('#kgrdRosterSchedule input[type=checkbox][name=saturday]');


        var users = '';
        var grid = $("#kgrdRosterSchedule").data("kendoGrid");

        var rows = grid.select();
        var length = rows.length / 2;
        var i = 1;
        rows.each(function (index, row) {
            if (i <= length) {
                var selectedItem = grid.dataItem(row);
                users = users + selectedItem.UserId + ',';

                //if (sun.is(':checked')) {
                //    if (selectedItem.Sunday!=)
                //    dates = dates + sun.val() + ',';
                //}
            }
            i++;
            // selectedItem has EntityVersionId and the rest of your model
        });


        if (sun.is(':checked'))
        {
            dates = dates + sun.val() + ',';
        }
        if (mon.is(':checked')) {
            dates = dates + mon.val() + ',';
        }
        if (tue.is(':checked')) {
            dates = dates + tue.val() + ',';
        }
        if (wed.is(':checked')) {
            dates = dates + wed.val() + ',';
        }
        if (thu.is(':checked')) {
            dates = dates + thu.val() + ',';
        }
        if (fri.is(':checked')) {
            dates = dates + fri.val() + ',';
        }
        if (sat.is(':checked')) {
            dates = dates + sat.val() + ',';
        }

        if (users == '' || users == ',' ) {
            alert("Please Select atleast one user from the grid");
        }
        else if (dates == '')
        {
            alert("Please Select atleast one date from the grid");
        }
        else {
            var orgId = $("#OrganizationId").val();

           var url = "/taa/rosterschedule/createroster?users=" + users + "&dates=" + dates + "&orgId=" + orgId;
            var win = GetMainWindow();
            win.iframeOpenUrl = url
            win.OpenWindow({ Title: '@Html.Raw(SharedResource["CreateRoster"])', Width: 1200, Height: 600 });
        }
    }


        function OnPrintPdf() {
           // alert("Print Report");
            var orgId = $("#OrganizationId").val();
            var date = $("#WeekDateString").val();
            var org = $("#OrganizationId").data("kendoDropDownList").text();
           // alert(org);
            if (orgId == '' & date == '') {
                alert("Please select Department and Week to Print Pdf");
            } else {
                window.location.href = "/taa/RosterSchedule/DownloadRoaster?orgId=" + orgId + "&date=" + date + "&OrgName="+org;

            }
    }

    function OnAfterCreate() {
        var search = FilterGrid();
        $("#kgrdRosterSchedule").data("kendoGrid").dataSource.read(search);
    }
    function ShowErrors(err) {
        $(".hr-v-summary").removeClass("validation-summary-valid");
        $(".hr-v-summary").addClass("validation-summary-errors");
        var msg = ExtractError(err);
        $(".hr-v-summary ul").html(msg);
        }
    function Close(dorefresh, mode) {
        var win = GetMainWindow();
        win.CloseWindow();
        return false;
        if (dorefresh) {
            $("#kgrdRosterSchedule").data("kendoGrid").dataSource.read();
            alluncheck();
            ShowNotification("Success");

        }
    }

     function Close(refresh) {
         var win = GetMainWindow();
         win.CloseWindow();
         return false;
         if (refresh) {
             $("#kgrdRosterSchedule").data("kendoGrid").dataSource.read();
             alluncheck();
         }

    }
    function CopyClose(refresh) {
        var win = GetMainWindow();
        win.CloseWindow();
        return false;
        if (refresh)
         OnWeekChange(null);
    }


    function OnEdit(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var wnd = $("#kiframepopupwindow").data("kendoWindow");
        iframeOpenUrl = "/taa/LeaveType/Correct?Id=" + dataItem.Id;
        wnd.setOptions({
            width: 500,
            height: 400,
            title: "@ViewBag.Title"
        });
        wnd.center().open();
    }

        function OpenCopyRoster() {
            var users = '';
            var grid = $("#kgrdRosterSchedule").data("kendoGrid");

            var rows = grid.select();
            var length = rows.length / 2;
            var i = 1;
            rows.each(function (index, row) {
                if (i <= length) {
                    var selectedItem = grid.dataItem(row);
                    users = users + selectedItem.UserId + ',';
                }
                i++;

            });
            var dates = '';
            var sun = $('#kgrdRosterSchedule input[type=checkbox][name=sunday]');
            var mon = $('#kgrdRosterSchedule input[type=checkbox][name=monday]');
            var tue = $('#kgrdRosterSchedule input[type=checkbox][name=tuesday]');
            var wed = $('#kgrdRosterSchedule input[type=checkbox][name=wednesday]');
            var thu = $('#kgrdRosterSchedule input[type=checkbox][name=thursday]');
            var fri = $('#kgrdRosterSchedule input[type=checkbox][name=friday]');
            var sat = $('#kgrdRosterSchedule input[type=checkbox][name=saturday]');

            if (sun.is(':checked')) {
                dates = dates + sun.val() + ',';
            }
            if (mon.is(':checked')) {
                dates = dates + mon.val() + ',';
            }
            if (tue.is(':checked')) {
                dates = dates + tue.val() + ',';
            }
            if (wed.is(':checked')) {
                dates = dates + wed.val() + ',';
            }
            if (thu.is(':checked')) {
                dates = dates + thu.val() + ',';
            }
            if (fri.is(':checked')) {
                dates = dates + fri.val() + ',';
            }
            if (sat.is(':checked')) {
                dates = dates + sat.val() + ',';
            }

            if (users == '' || users == ',') {
                alert("Please Select atleast one user from the grid");
                return false;
            }
            else if (dates == '') {
                alert("Please Select atleast one date from the grid");
                return false;
            }
            else {
                var orgId = $("#OrganizationId").val();
                var url = "/taa/rosterschedule/copyroster?users=" + users + "&dates=" + dates + "&orgId=" + orgId + "&date=@ViewBag.Sunday";
                var win = GetMainWindow();
                win.iframeOpenUrl = url
                win.OpenWindow({ Title: '@Html.Raw(Resource["CopyRoster"])', Width: 1200, Height: 600 });
                return false;
            }

        }


        function SheduleClose(refresh) {
            var win = GetMainWindow();
            win.CloseWindow();
            return false;

        }
    function OpenTimeLine() {

            var orgId = $("#OrganizationId").val();
            var date = $("#WeekDateString").val();
            if (orgId == null || orgId == '') {
                alert("Please select the department")
            }
            else {

                var url = "/taa/RosterSchedule/RosterTimeLineView?orgId=" + orgId + "&date=" + date;
                var win = GetMainWindow();
                win.iframeOpenUrl = url;
                win.OpenWindow({ Title: "@Html.Raw(Resource["RosterTimeLineView"])", Width: 1400, Height: 800 });
                return false;
            }
        }
        function OpenLeaveCalendar() {
            var orgId = $("#OrganizationId").val();
            if (orgId == null || orgId == '') {
                alert("Please select the department")
            }
            else {
               
                var url = "/taa/RosterSchedule/leavecalendarview?orgId=" + orgId + "&date=" +'@ViewBag.Sunday';
                var win = GetMainWindow();
                win.iframeOpenUrl = url;
                win.OpenWindow({ Title: "@Html.Raw(Resource["LeaveCalendarView"])", Width: 1400, Height: 800 });
                return false;
            }
    }

    function Publish(e) {
        var orgId = $("#OrganizationId").val();
        var date = $("#WeekDateString").val();
        $.ajax({
            type: "POST",
            url: "/taa/RosterSchedule/PublishRoster",
            data: { 'orgId': orgId, 'date': date},
            success: function (data) {
                kendo.alert("Roster Published Successfully");
                $("#kgrdRosterSchedule").data("kendoGrid").dataSource.read();
                GetPublishDate();
            },
            dataType: "json",
        });
    }
    function GetPublishDate() {
        var orgId = localStorage["Org-options"];
        var date = $("#WeekDateString").val();

        $.ajax({
            type: "GET",
            url: "/taa/RosterSchedule/GetPublishDate",
            data: { 'orgId': orgId, 'date': date},
            success: function (data) {
                var dd = kendo.toString(kendo.parseDate(data.PublishDate), 'yyyy.MM.dd');
                $("#PublishDate").html(dd);
            },
            dataType: "json",
        });

    }
    function alluncheck() {
        $('input:checkbox').prop('checked', false);
        $('.checkboxAll').removeAttr('checked');
        $('.checkAllHead').removeAttr('checked');
    }
    function DeleteRoster() {

        var users = '';
        var grid = $("#kgrdRosterSchedule").data("kendoGrid");

        var rows = grid.select();
        var length = rows.length / 2;
        var i = 1;
        rows.each(function (index, row) {
            if (i <= length) {
                var selectedItem = grid.dataItem(row);
                users = users + selectedItem.UserId + ',';
            }
            i++;

        });

        var dates = GetCheckedDate();

        if (users == '' || users == ',') {
            alert("Please Select atleast one user from the grid");
            return false;
        }
        else if (dates == '') {
            alert("Please Select atleast one date from the grid");
            return false;
        }
        else {
            var dialogue = $('#deleteConfirm').data("kendoDialog");
            dialogue.open();
            return false;
        }
    }

    function GetCheckedDate() {
        var dates = '';
        var sun = $('#kgrdRosterSchedule input[type=checkbox][name=sunday]');
        var mon = $('#kgrdRosterSchedule input[type=checkbox][name=monday]');
        var tue = $('#kgrdRosterSchedule input[type=checkbox][name=tuesday]');
        var wed = $('#kgrdRosterSchedule input[type=checkbox][name=wednesday]');
        var thu = $('#kgrdRosterSchedule input[type=checkbox][name=thursday]');
        var fri = $('#kgrdRosterSchedule input[type=checkbox][name=friday]');
        var sat = $('#kgrdRosterSchedule input[type=checkbox][name=saturday]');

        if (sun.is(':checked')) {
            dates = dates + sun.val() + ',';
        }
        if (mon.is(':checked')) {
            dates = dates + mon.val() + ',';
        }
        if (tue.is(':checked')) {
            dates = dates + tue.val() + ',';
        }
        if (wed.is(':checked')) {
            dates = dates + wed.val() + ',';
        }
        if (thu.is(':checked')) {
            dates = dates + thu.val() + ',';
        }
        if (fri.is(':checked')) {
            dates = dates + fri.val() + ',';
        }
        if (sat.is(':checked')) {
            dates = dates + sat.val() + ',';
        }

        return dates;
    }
</script>

