@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@model ServiceTemplateViewModel;
<style>
    .formio-component-button{
        display:inline-block;
    }

    .formio-form {
       min-height:0px !important;
    }
    .btn-block {
        display: block;
        width: 80%;
    }
    .post-btn {
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
    }
    .div-readonly {
        font-size: 13px;
        padding-bottom: 5px;
    }
    .header-readonly {
        text-align: center;
        font-size:16px;
        color:gray;
    }
    .icon_comment {
        font-size: 20px !important;
        color: #097ee2fa;
        padding-top: 6px;
    }

    .comment-text {
        font-size: 16px !important;
        color: #097ee2fa;
    }

    .drp-btn {
        width: 100%;
    }
    .drp-btn .k-dropdown-wrap{
        background-color: #007bff !important;
        border:1px solid #007bff !important;
        color:#fff !important;
    }
        .drp-btn .k-dropdown-wrap:hover {
            color: #fff !important;
        }
    .alert-default {
        color: #363e49;
        background-color: #e4e7eb;
        border-color: #d3d8de;
        font-size: 16px;
    }
    .action-section {

        border: 1px solid #d3d8de;
        border-radius: 5px;
        padding: 10px;
    }
    .k-maskedtextbox.form-control .k-textbox, .k-textbox.form-control, .k-widget.form-control {
    }
    .k-listview-content {
        height: 100% !important;
        overflow-y: auto !important;

    }
    .top-header {
        height: 40px;
    }

    .img {
        object-fit: cover;
        border-radius: 50%;
        width: 40px;
        height: 40px;
    }

    .border-color {
        border-color: #8f8f8f !important;
    }

    .k-editable-area {
      height: 107px;
        background-color:#fff;
    }

    .task-title {
        padding: 10px;
        background-color: #fafafa;
        text-align: left;
        color: #0b0b0b;
        margin-left: 11px;
        margin-right: 50px;
        border-style: solid;
        border-width: 2px;
        border-color: #dbdbdb;
        font-size: 15px;
        border-radius: 6px;
    }

    .sub-div {
        height: 100%;
    }

    table.k-editor {
        width: 100% !important;
        display: table !important;
        vertical-align: top !important;
        table-layout: fixed !important;
        border-collapse: separate !important;
        border-spacing: 0 !important;
        height: 100px !important;
    }

    .card {
        position: relative;
        display: -ms-flexbox;
        display: flex;
        -ms-flex-direction: column;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #eff4f8;
        background-clip: border-box;
        border: 1px solid rgba(0, 0, 0, 0.125);
        border-radius: 0.25rem;
        margin: 10px;
        font-size: 13px;
    }

        .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

    .k-listview {
        border: none;
    }

    .detail-box {
        width: 100%;
        margin: 5px;
        font-size: 13px
    }

    .msg-box {
        border-radius: 5px 5px 0px 0px;
        margin-left: 15px;
        margin-right: 15px;
        background-color: #219db9;
        width: 100%;
        height: 40px;
        color: white;
        padding: 10px;
    }

    .border-color {
        border-color: #dddddd !important;
    }

    .no-data {
        text-align: center;
        margin-top: 5%;
        font-size: 16px;
        font-weight: 500;
        display: none;
    }

    .no-data-icon {
        color: #c8aa4d;
        font-size: 40px;
    }

    .treeview {
        margin: 0;
        padding: 0px 0 0 0x;
        font-size: .8125rem;
        list-style: none inside;
        display: block;
        position: relative;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

    .b-title {
        font-weight: bold;
    }
    @@media screen and (max-width: 768px) {
        .ribbon-static {
            display: none !important;
        }
    }

    .page {
        border: 1px solid #a5acb5;
        margin: 20px;
        padding: 15px;
        -webkit-box-shadow: #000000 0px 0px 10px;
        -moz-box-shadow: #000000 0px 0px 10px;
        box-shadow: #000000 0px 0px 10px;
        background: #FFF;
    }

    .ribbon-static {
        display: block;
        float: right;
        margin-right: 10px;
        margin-top: -70px;
        text-align: center;
        font-size: 12px;
    }

    #ribbon {
        cursor: default;
        font-size: 8pt;
        padding-top:0px;

        background-color: aliceblue;
        -webkit-box-shadow: #8b9097 0px 1px 3px;
        -moz-box-shadow: #8b9097 0px 1px 3px;
        box-shadow: #8b9097 0px 1px 3px;
        overflow: inherit;
        top: 0;
        left: 0;
        right: 0;
        position: relative;
    }
    .ribbon-content {
        text-align: center;
        min-width: 74px;
    }
    .text-status{
        background-color:red;
        border-radius:8px;

    }
    .text-title {
        font-size: 16px;
        padding: 5px;
        color: #1c88e3;
    }
    .text-cancel {
        font-size: 16px;
        padding: 5px;
        color: #f4501d;
    }
    .text-label{
    }
    .back-icon {
        font-size: 24px !important;
        color: #1c88e3;
    }
    .reply-icon {
        font-size: 24px !important;
        color: #1c88e3;
    }
    .attachment-icon {
        font-size: 20px !important;
        color: #a11247;
        padding-top:6px;
    }
    .attachment-text {
        font-size: 16px !important;
        color: #a11247;
    }
    .notification-icon {
        font-size: 20px !important;
        color: #800080;
        padding-top: 6px;
    }

    .notification-text {
        font-size: 16px !important;
        color: #800080;
    }
    .share-icon {
        font-size: 20px !important;
        color: #f4501d;
        padding-top: 6px;
    }
    .share-text {
        font-size: 16px !important;
        color: #f4501d;
    }


    #ribbon.backstage {
        height: auto;
        bottom: 0;
    }

        #ribbon .ribbon-window-title {
        }

        #ribbon #ribbon-tab-header-strip {
            
        }

        #ribbon .ribbon-tab-header {
            display: inline;
            margin: 0 5px;
            padding: 5px 10px;
            font-size: 8pt;
            color: #444;  
            border-bottom: 1px solid #b6babf;
            -webkit-border-radius: 4px 4px 0px 0px;
            -moz-border-radius: 4px 4px 0px 0px;
            border-radius: 4px 4px 0px 0px;
            position: relative;
        }

        #ribbon.backstage .ribbon-tab-header {
            border-bottom: 1px solid #1f48a1;
        }

        #ribbon .ribbon-tab-header:hover {
            background: #f1f3f4;
            border: 1px solid #b6babf;
            margin: -1px 4px;
            cursor: pointer;
        }

        #ribbon.backstage .ribbon-tab-header {
            border-bottom: 1px solid #1f48a1;
        }

        #ribbon .ribbon-tab-header.sel, #ribbon .ribbon-tab-header.sel:hover {
            background: #fff;
            margin: -1px 4px;
            border: 1px solid #b6babf;
            border-bottom: 1px solid #fff;
            cursor: default;
        }

        #ribbon .ribbon-tab-header.file {
            padding: 5px 20px;
            background: #2860b3;
            background: -webkit-gradient(linear, 0 0, 0 bottom, from(#4488e5), to(#2860b3));
            background: -moz-linear-gradient(#4488e5, #2860b3);
            -pie-background: linear-gradient(#4488e5, #2860b3);
            border: 1px solid #1f48a1;
            margin: -1px 4px;
            border-bottom: 1px solid #4488e5;
            cursor: default;
            color: #fff;
        }


            #ribbon .ribbon-tab-header.file:hover {
                background: #3870c3;
                background: -webkit-gradient(linear, 0 0, 0 bottom, from(#5498f5), to(#3870c3));
                background: -moz-linear-gradient(#5498f5, #3870c3);
                -pie-background: linear-gradient(#5498f5, #3870c3);
                border: 1px solid #1f48a1;
                cursor: pointer;
                border-bottom: 1px solid #4488e5;
                position: relative;
            }

            #ribbon .ribbon-tab-header.file.sel {
                background: #4488e5;
                background: -webkit-gradient(linear, 0 0, 0 bottom, from(#2860b3), to(#4488e5));
                background: -moz-linear-gradient(#2860b3, #4488e5);
                -pie-background: linear-gradient(#2860b3, #4488e5);
                border: 1px solid #1f48a1;
                cursor: pointer;
                border-bottom: 1px solid #4488e5;
                position: relative;
            }

        #ribbon .ribbon-tab {
            overflow:inherit;
            padding: 5px;

            border-top: 1px solid #b6babf;
            background: #FFF url(rib-back.png) repeat-x bottom;
            background: -webkit-gradient(linear, 0 0, 0 bottom, from(#ffffff), to(#cde3ff));
            background: -moz-linear-gradient(#ffffff, #eaedf1);
            min-width: 500px;
            behavior: url(/PIE.htc);
            -pie-watch-ancestors: 2;
        }

            #ribbon .ribbon-tab.file {
                padding: 0;
                margin-top: 5px;
                border-top: 1px solid #1f48a1;
                background-color: #4488e5;
                filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1,startColorstr=#4488e5, endColorstr=#ffffff);
                background-image: -moz-linear-gradient(left, #4488e5 15%, #ffffff 100%);
                background-image: -webkit-linear-gradient(left, #4488e5 15%, #ffffff 100%);
                background-image: -ms-linear-gradient(left, #4488e5 15%, #ffffff 100%);
                background-image: linear-gradient(left, #4488e5 15%, #ffffff 100%);
                background-image: -o-linear-gradient(left, #4488e5 15%, #ffffff 100%);
                background-image: -webkit-gradient(linear, left bottom, right bottom, color-stop(15%,#4488e5), color-stop(100%,#ffffff));
                overflow: hidden;
                min-width: 500px;
            }

        #ribbon .ribbon-backstage {
            display: none;
        }


        #ribbon.backstage .ribbon-backstage {
            display: block;
            position: absolute;
            top: 60px;
            left: 0;
            right: 0;
            bottom: 0;
            padding: 10px;
            background-color: #FFF;
        }

        #ribbon .section-title {
            color: #5B626C;
            text-align: center;
            clear: left;
            display: block;
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
        }

    #ribbon .ribbon-section {
        float: left;
        position: relative;
        height: 50px;
        border-right: 1px solid #fff;
    }

        #ribbon .ribbon-section-sep {
            display:none;
            border-left: 1px solid #E0E0E0;
            border-right: 1px solid #fff;
            margin: 0 5px;
            height: 45px;
            position: relative;
            width: 0;
            float: left;
        }

    #ribbon .ribbon-button {
        -webkit-border-radius: 3px 3px 3px 3px;
        -moz-border-radius: 3px 3px 3px 3px;
        border-radius: 3px 3px 3px 3px;
    }

        #ribbon .ribbon-button-large {
            text-align: center;
            height: 58px;
            min-width: 50px;
            float: left;
        }

        #ribbon .ribbon-button-small {
            height: 14px;
            padding: 3px 4px;
            text-align: left;
        }

        #ribbon .ribbon-button .button-help {
            display: none;
        }

        #ribbon .ribbon-button .button-title {
            color: #444;
            font-size:12px;
        }

        #ribbon .ribbon-button-large .button-title {
            clear: left;
            display: block;
        }

        #ribbon .ribbon-button-large .ribbon-icon {
            margin: auto;
        }

        #ribbon .ribbon-button-small .ribbon-icon {
            width: 16px;
            height: 16px;
            float: left;
            clear: left;
            margin: -1px 5px 0px 1px;
        }

        #ribbon .ribbon-button .ribbon-icon.ribbon-hot, #ribbon .ribbon-button .ribbon-icon.ribbon-disabled {
            display: none;
        }

        #ribbon .ribbon-button-large .ribbon-icon.ribbon-normal {
            display: block;
        }

        #ribbon .ribbon-button:hover .ribbon-icon.ribbon-normal {
            display: none;
        }

        #ribbon .ribbon-button-large:hover .ribbon-icon.ribbon-hot {
            display: block;
        }

        #ribbon .ribbon-button-small .ribbon-icon.ribbon-normal {
            display: inline;
        }

        #ribbon .ribbon-button-small:hover .ribbon-icon.ribbon-hot {
            display: inline;
        }

        #ribbon .ribbon-button:hover, #ribbon .ribbon-button.sel {
            border: 1px solid #219db9;
            background: #219db9;
            cursor: pointer;
        }

        #ribbon .ribbon-button:active {
            border: 1px solid #219db9;
            background: #219db9;
            cursor: pointer;

        }

        #ribbon .ribbon-button.disabled .ribbon-icon, #ribbon .ribbon-button.disabled:hover .ribbon-icon {
            display: none;
        }

            #ribbon .ribbon-button.disabled .ribbon-icon.ribbon-disabled {
                display: block;
                opacity: 0.8;
            }

            #ribbon .ribbon-button.disabled .ribbon-icon.ribbon-implicit-disabled {
                opacity: 0.4;
            }

        #ribbon .ribbon-button.disabled:hover {
            border: 1px solid #219db9;
            background: transparent;
            cursor: default;
        }

        #ribbon .ribbon-button.disabled:active {
            border: 1px solid transparent;
            background: transparent;
            cursor: default;
        }

        #ribbon .ribbon-button.disabled .button-title {
            color: #888;
            font-size: 15px;
        }

    .ribbon-tooltip {
        font-family: "Segoe UI", Verdana, Tahoma, Helvetica, sans-serif;
        font-size: 10pt;
        position: fixed;
        z-index: 5000;
        border: 1px solid #8b9097;
        background-color: #e5e5f0;
        background: -webkit-gradient(linear, 0 0, 0 bottom, from(#ffffff), to(#e5e5f0));
        background: -moz-linear-gradient(#ffffff, #e5e5f0);
        -pie-background: linear-gradient(#ffffff, #e5e5f0);
        padding: 5px;
        -webkit-box-shadow: #c6c9cd 1px 1px 3px;
        -moz-box-shadow: #c6c9cd 1px 1px 3px;
        box-shadow: #c6c9cd 1px 1px 3px;
        -webkit-border-radius: 2px 2px 2px 2px;
        -moz-border-radius: 2px 2px 2px 2px;
        border-radius: 2px 2px 2px 2px;
        width: 200px;
        top: 150px !important;
    }

    .dropbtn {
        background-color: #3498DB;
        color: white;
        padding: 16px;
        font-size: 16px;
        border: none;
        cursor: pointer;
    }

        .dropbtn:hover, .dropbtn:focus {
            background-color: #2980B9;
        }

    .dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f1f1f1;
        min-width: 160px;
        overflow: auto;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    }

        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }

    .dropdown a:hover {
        background-color: #ddd;
    }

    .show {
        display: block;
    }
    .form-horizontal .form-group {
        border-bottom: 0px solid #eff2f7;
        padding-bottom: 0px;
        margin-bottom: 15px;
    }
    .error-summary ul {
        padding-left: 5px !important;
    }
    canvas {
        box-shadow: 0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%);
        border-radius: 4px;
    }

    h4 {
        font-size: larger;
        color: black;
        font-weight: bold;
        text-align: center;
    }

    .form-check-label {
        color: black;
    }

    .SERVICE_STATUS_INPROGRESS, .TASK_STATUS_INPROGRESS {
        color: white !important;
        background-color: #007bff !important;
    }

    .SERVICE_STATUS_OVERDUE, .TASK_STATUS_OVERDUE {
        color: white !important;
        background-color: #ffc107 !important;
    }

    .SERVICE_STATUS_COMPLETE, .TASK_STATUS_COMPLETE {
        color: white !important;
        background-color: #28a745 !important;
    }

    .SERVICE_STATUS_CANCEL, .TASK_STATUS_CANCEL, .TASK_STATUS_REJECT,.TASK_STATUS_CLOSE {
        background-color: #dc3545 !important;
        color: white !important;
    }
    .nts-d-none{
        display:none;
                    }
    .nts-border-light{
        border:1px solid #f5f5f5;
        border-radius:4px;
    }

</style>

<script>

    function UpdateHtmlContent(obj) {

        var myform = Object.values(Formio.forms)[0];
        var h = '';
        if (obj.html.length>2) {
            h = obj.html.substring(1, obj.html.length - 1);
            h = h.replace(/\\n/g, '').replace(/\\"/g, '"');
            myform.getComponent(obj.df).component.html = h;
            myform.getComponent(obj.df).originalComponent.html = h;
        }
        var c = '';
        if (obj.cf.length > 2) {
            var scrpt = document.getElementById("dynamicscript");
            if (scrpt != null && scrpt != undefined) {
                scrpt.parentNode.removeChild(scrpt);
            }
            c = obj.css.substring(1, obj.css.length - 1);
            var css = '<style type="text/css" id="dynamicscript">' + c + '</style>';
            $('head').append(css);
        }
        myform.getComponent(obj.jf).setValue(obj.json);
        myform.getComponent(obj.hf).setValue(obj.html);
        myform.getComponent(obj.sf).setValue(obj.style);
        myform.getComponent(obj.cf).setValue(obj.css);
    }

    function OnViewTask(id, pageid, tempCode) {
        var portalId = "";
        if (window.parent == "" || window.parent == undefined) {
            portalId = $("#GlobalPortalId").val();
        }
        else {
            portalId = window.parent.$("#GlobalPortalId").val();
        }
        var prms = encodeURIComponent('hideStpTaskDetails=true');
        var url = "";
        url = '/Cms/Page?lo=Popup&pageType=Task&source=View&dataAction=View&templateCodes=' + tempCode + '&portalId=' + portalId + '&recordId=' + id + '&prms=' + prms;
        LoadCmsPartialView(url, 'Task', true, 1000, 600, 'Task');
        return false;
    }
    function htmlDecode(value) {
        return value.replace(/&lt;/g, "<").replace(/&gt;/g, ">");
    }
    function PostComment(e)
    {
        if ($("#editorAddComment").val() == "") {
            alert("Please add any Comment ");
        }
        else {
            $.ajax({
               type: "POST",
                 url: "/cms/PostServiceComment",
                 data: {
                     NtsServiceId: "@Model.ServiceId",
                     Comment: $("#editorAddComment").val(),
                     CommentToUserId: $("#CommentToUserId").data("kendoDropDownList").value()
                },
                success: function (data) {
                    if (data.success) {
                        ShowNotification("Commented successfully", "success");
                        $("#drpAction").data("kendoDropDownList").value('');
                        $(".action-section").hide();
                        $("#action-add-comment").hide();
                        var editor = $("#editorAddComment").data("kendoEditor");

                        editor.value("");
                        $("#CommentToUserId").data("kendoDropDownList").value('');
                        $("#gridNTSReplies").data("kendoListView").dataSource.read();

                        FillCommentCount();

                    }
                    else {
                        ShowNotification("Please try again!", "error");
                        ShowErrors(data.errors);
                    }
                },
                error: function (err) {

                }

            });
        }
        e.preventDefault();
    }

    function FillSharingCount() {
        var openUrl = "/cms/GetServiceSharedCount?serviceId=@Model.ServiceId" ;
        $.ajax({
            url: openUrl,
            type: 'GET',
            cache: false,
            success: function (data) {
                $('#sharedCount').html(data);
            },
            error: function (errData) {
                OnError(errData);
            }
        });
    }
    function FillCommentCount() {
        var openUrl = "/cms/GetServiceCommentCount?serviceId=@Model.ServiceId" ;
        $.ajax({
            url: openUrl,
            type: 'GET',
            cache: false,
            success: function (data) {
                $('#commentCount').html(data);
            },
            error: function (errData) {
                OnError(errData);
            }
        });
    }

     function FillAttachmentCount()
     {
        $.ajax({
            type: "Get",
            url: '/cms/GetServiceAttachmentCount?serviceId=@Model.ServiceId',
            success: function (data) {
                $("#attchmentCount").html(data);
            },
            dataType: "json",
        });
    }
     function FillNotificationCount()
    {
        $.ajax({
            type: "Get",
            url: '/cms/GetServiceNotificationCount?serviceId=@Model.ServiceId',
            success: function (data) {
                $("#notificationCount").html(data);
            },
            dataType: "json",
        });
    }
    function SaveAsDraft() {
        
        $("#ServiceStatusCode").val('SERVICE_STATUS_DRAFT');
        var json = $('#formio-container').html();
        if (json === null || json === '' || json == undefined) {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        }
        $('form#frmManageService').submit();
        return true;
    }
    function OnWizardSubmit()
    {
        Submit();
    }
    function Submit() {
        var json = $('#formio-container').html();
        var isValid = json === null || json===''|| frm.checkValidity(frm.submission.data);
        if (isValid) {
            if ('@Model.EnableDynamicStepTaskSelection' == 'True') {
               var win = GetMainWindow();
                win.iframeOpenUrl = '@Url.Action("StepComponent", "Cms", new { @area = "" })?templateId=@Model.TemplateId&serviceId=@Model.ServiceId';
                 win.OpenWindow({ Title: 'Service Step', Width: 800, Height: 500 });
                return false;
            }
            else {
                $("#ServiceStatusCode").val('SERVICE_STATUS_INPROGRESS');
                if (json === null || json === '' || json == undefined) {
                    $("#Json").val(JSON.stringify({}));
                }
                else {
                    $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
                }
                $('form#frmManageService').submit();
                return false;
            }
        }
        else {
            frm.submit();
        }
        return false;
    }
    function FillNextStepId(id) {
        var win = GetMainWindow();
        win.CloseWindow();
        var json = $('#formio-container').html();
        $("#ServiceStatusCode").val('SERVICE_STATUS_INPROGRESS');
        $("#NextStepTaskComponentId").val(id);
        if (json === null || json === '' || json == undefined) {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        }
        $("#frmManageService").submit();
        return true;
    }
    function Cancel() {

        $("#ServiceStatusCode").val('SERVICE_STATUS_CANCEL');
        var json = $('#formio-container').html();
        if (json === null || json === '' || json == undefined) {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.dataServiceId, null, 4));
        }
            return true;
    }
    function Complete() {

        $("#ServiceStatusCode").val('SERVICE_STATUS_COMPLETE');
        var json = $('#formio-container').html();
        if (json === null || json === '' || json == undefined) {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        }
        return true;
    }
    function CloseService() {

        $("#ServiceStatusCode").val('SERVICE_STATUS_CLOSE');
        var json = $('#formio-container').html();
        if (json === null || json === '' || json == undefined) {
            $("#Json").val(JSON.stringify({}));
        }
        else {
            $("#Json").val(JSON.stringify(frm.submission.data, null, 4));
        }
        return true;

    }
    var ajaxResponse;
    var onAjaxSuccess = function (res) {
        ajaxResponse = res;
        if (res.success) {
            if (res.openMsgPopup) {
                var mymodal = $('#messageModal');
                mymodal.find('.modal-body').html(res.customMsg);
                mymodal.modal('show');
                return false;
            }
            else {
                ShowNotification(res.msg, 'success');
            }
            CompleteSubmit(res);

        }
        else {
            ShowServiceError(res.error);
        }
    };
    function CompleteSubmit(res) {
        if (res.mode === 'Popup') {
            var win = GetMainWindow();
            var cb = null;
            if (res.cbm !== null && res.cbm !== undefined && res.cbm !== '') {
                cb = { MethodName: res.cbm, Prms: res.vm };
            }
            win.CloseWindow(cb);
            return false;
        }
        if (res.mode === 'Iframe') {
            if (res.cbm !== null && res.cbm !== undefined && res.cbm !== '') {
                window.parent[res.cbm](res.vm);
                return false;
            }
        }
        if (res.mode === 'Div') {
            if (res.cbm !== null && res.cbm !== undefined && res.cbm !== '') {
                window[res.cbm](res.vm);
                return false;
            }

        }
        if (res.reload) {
            LoadPageById(res.pageId, res.pageType, res.source, res.dataAction, res.recordId);
        }
        else if (res.ru !== null && res.ru !== '' && res.ru !== undefined && res.ru !== 'undefined') {
            window.location.href = res.ru;
        }
    }
    function ShowServiceError(error) {
        $("#validation-summary-manageform").html(error);
        $("#validation-summary-manageform").css("display", "block")
    }


    function myFunction() {
        document.getElementById("myDropdown").classList.toggle("show");
    }

     

    function onchangetype() {
        var userId = $("#AssignedToTypeCode").data("kendoDropDownList").value();
        console.lNtsTypeEnumg(userId);
        if (userId == "TASK_ASSIGN_TO_USER") {
            $("#users").show();
            $("#teams").hide();
            $("#teamusers").hide();
            $("#hm").hide();
            $("#hmlevel").hide();
        }
        else if (userId == "TASK_ASSIGN_TO_TEAM") {
            $("#users").hide();
            $("#teams").show();
            $("#teamusers").show();
            $("#hm").hide();
            $("#hmlevel").hide();
        }
        else if (userId == "TASK_ASSIGN_TO_USER_HIERARCHY") {
            $("#users").hide();
            $("#teams").hide();
            $("#teamusers").hide();
            $("#hm").show();
            $("#hmlevel").show();
        }
        else {
            $("#users").hide();
            $("#teams").hide();
            $("#teamusers").hide();
            $("#hm").hide();
            $("#hmlevel").hide();
        }
    }

    function OnActionChange() {
        var code = $("#drpAction").data("kendoDropDownList").value();
        $("#action-add-comment").hide();
        $("#action-cancel-service").hide();
        $("#action-close-task").hide();
        $(".action-section").show();
        if (code == "ADD_COMMENT") {
            $(".richText-toolbar").hide();
            $("#action-add-comment").show();
        }
        else if (code == "CANCEL_SERVICE") {
            $("#action-cancel-service").show();
        }
        else if (code == "CLOSE_SERVICE") {
            $("#action-close-task").show();
        }
        else if (code == "COMPLETE_SERVICE") {
            $("#action-complete-service").show();
        }
        else if (code == "EDIT_SERVICE") {

            var portalId = "";
            if (window.parent == "" || window.parent == undefined) {
                portalId = $("#GlobalPortalId").val();
            }
            else {
                portalId = window.parent.$("#GlobalPortalId").val();
            }
            var url = '/Cms/Page?lo=Popup&pageType=Service&source=Versioning&dataAction=Edit&templateCodes=@Model.TemplateCode&recordId=@Model.ServiceId&portalId=' + portalId;
            location.href = url;
        }
        else
        {
            $(".action-section").hide();
        }

    }

    function Filter() {
        var value = $("#AssignedToHierarchyMasterId").val();
        return {
            Id: value
        }
    }

    function OnStartDateDueDateChange() {
        var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        var ed = kendo.toString($("#DueDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        if (new Date(ed) > new Date(sd)) {
            var sec = GetSLAInSeconds(sd, ed);
            $('#ServiceSLAMinutes').data('durationPicker').setValue(sec);
        }
    }
    function GetSLAInSeconds(startDate, endDate) {
        var query = "startDate=" + startDate + "&endDate=" + endDate;
        var diff = UtilityAjax("GetSLAInSeconds", query);
        return diff;
    }
    function GetAddSeconds(startDate, seconds) {
        var query = "date=" + startDate + "&seconds=" + seconds;
        var diff = UtilityAjax("AddSeconds", query);
        return diff;
    }

    function onTag()
    {
          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("TagCategoryByTemplateType", "TagCategory", new { @area = "Cms" })?templateId=@Model.TemplateId&Id=@Model.ServiceId&TemplateType=Service';
        win.OpenWindow({ Title: 'Tags', Width: 1200, Height: 600 });
        return false;
    }
       function onLog()
    {
           var win = GetMainWindow();
           win.iframeOpenUrl = '@Url.Action("GetServiceLogsDetails", "NtsService", new { @area = "Cms" })?ServiceId=@Model.ServiceId&templateCode=@Model.TemplateCode&UdfNoteId=@Model.UdfNoteId&TemplateType=Service';
        win.OpenWindow({ Title: 'Logs', Width: 1200, Height: 600 });
        return false;
    }
    function onAdhocTask() {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ServiceAdhocTask", "Cms", new { @area = "" })?templateId=@Model.TemplateId&serviceId=@Model.ServiceId';
        win.OpenWindow({ Title: 'Adhoc Task', Width: 1200, Height: 600 });
        return false;

    }
   function onclickShare() {

         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("NtsServiceShared", "Cms", new { @area = "" })?serviceId=@Model.ServiceId&IsSharingEnabled=@Model.IsSharingEnabled';
       win.OpenWindow({ Title: 'Share With', Width: 1200, Height: 600 });
        return false;
    }
    function onProcessDesign()
    {

        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("NtsServiceProcessDesignResult", "Cms", new { @area = "" })?serviceId=@Model.ServiceId';
        win.OpenWindow({ Title: 'Process Design Result', Width: 1200, Height: 600 });
        return false;
    }

    function ViewVersionDetails() {
        var portalId = window.parent.$('#GlobalPortalId').val();
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("NtsVersion", "Cms", new { @area = "" })?recordId=@Model.ServiceId&type='+'@NtsTypeEnum.Service'+'&portalId='+portalId;
        win.OpenWindow({ Title: 'Version Details', Width: 1200, Height: 600 });
        return false;
    }

      function AddAttachment(e)
{

           var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("AddServiceAttachment", "Cms", new { @area = "" })?serviceId=@Model.ServiceId&IsAddAttachmentEnabled=@Model.IsAddAttachmentEnabled';
          win.OpenWindow({ Title: 'Service Attachment', Width: 800, Height: 700 });
        return false;
    }
    function onCommentClick()
    {

         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("ServiceComments", "Cms", new { @area = "" })?serviceId=@Model.ServiceId&IsAddCommentEnabled=@Model.IsAddCommentEnabled';
        win.OpenWindow({ Title: 'Service Comments', Width: 1200, Height: 600 });
        return false;
    }

    function ViewNotification()
    {


        var win = GetMainWindow();
        win.iframeOpenUrl = "/PortalAdmin/NotificationTemplate/NotificationIndex?lo=Popup&refTypeId=" + '@Model.ServiceId';
        win.OpenWindow({ Title: 'Notifications', Width: 1200, Height: 700 });
        return false;

    }
     function closeNavMemberGroup()
     {
        if ('@Convert.ToString(Model.LayoutMode)' === 'Popup')
        {
            var win = GetMainWindow();
            win.CloseWindow();
            return false;
        }
        var id = '@Model.Page.Id';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.Main.ToString()';
        var action = '@DataActionEnum.None.ToString()';
        LoadPageById(id, type, source, action,'','','','','');
    }
     function OnReply(e) {
        var id = '@Model.Page.Id';
        var portalId = '@Model.Page.PortalId';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.Edit.ToString()';
        var action = '@RequestSourceEnum.Edit.ToString()';
        var templateCodes = '@Model.Page.TemplateCodes';
        if ('@Convert.ToString(Model.ViewMode)' === '@NtsViewTypeEnum.Book.ToString()') {
            var win = GetMainWindow();
            win.iframeOpenUrl = '/Cms/Page?lo=Popup&pageType=' + type + '&source=' + source + '&dataAction=' + action + '&templateCodes=' + templateCodes + '&portalId=' + portalId + '&recordId=@Model.ServiceId';
            win.OpenWindow({ Title: 'Manage Service', Width: 1200, Height: 700 });
            return false;
        }
        else {
            LoadPageById(id, type, source, action, '@Model.ServiceId', true, 1200, 700, 'Manage Service', '@Model.PopupCallbackMethod', true, templateCodes, portalId);
            return false;
        }

    }

    function OnReasonSave(e) {
        var comment = $("#CommentTemp").val();
        if (comment == null || comment == '') {
            $("#commentReq").show();
            return false;
        }
        else {
            $("#Comment").val(comment);
            $("#frmManageTask").submit();
            window[actionName]();
        }
    }
    var tempOwnerId;
    function OnChangeOwner() {
        $('#from-display').hide('slow');
        $('#from-edit').show('slow');
        tempOwnerId = $("#OwnerUserId").val();
        $("#OwnerUserId").val(null);
        return false;
    }
    function OnChangeOwnerCancel() {
        $('#from-display').show('slow');
        $('#from-edit').hide('slow');
        $("#OwnerUserId").val(tempOwnerId);
        return false;
    }
    function OnChangeOwnerSave() {
        var owner = $("#owner").data("kendoDropDownList");
        var dataItem = owner.dataItem();
        $("#OwnerUserId").val(dataItem.Id);
        $("#o-img").attr('src', '/Cms/document/getimagemongo/' + dataItem.PhotoId);
        $("#o-name").html(dataItem.Name);
        $("#o-email").html(dataItem.Email);
        $('#from-display').show('slow');
        $('#from-edit').hide('slow');
        $('#user-popup-card').data('user-id', dataItem.Id);
        SetOwnerAndRequesterVisibility();
        return false;
    }
    function SetOwnerAndRequesterVisibility() {
        var owner = $("#OwnerUserId").val();
        var requester = $("#RequestedByUserId").val();
        if (owner !== requester) {
            $('#div-requested-by').show('slow');
        }
        else {
            $('#div-requested-by').hide('slow');
        }
        return false;
    }

      function onEmail()
    {
          url = '@Url.Action("NtsEmail", "Cms", new { @area = "" })?refId=@Model.ServiceId' + '&refType=@ReferenceTypeEnum.NTS_Service';
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Email', Width: 1200, Height: 600 });
    }

    function onPermission(e)
    {
        $.ajax({
            type: "Get",
            url: '/cms/GetServiceDocumentId?serviceId=@Model.ServiceId',
            success: function (data) {
                if (data !=null && data!="") {
                    var win = GetMainWindow();
                    win.iframeOpenUrl = '@Url.Action("Index", "DocumentPermission", new { @area = "Dms" })?noteId='+data;
                    win.OpenWindow({ Title: 'Permission', Width: 1000, Height: 650 });
                    return false;
                }
            },
            dataType: "json",
        });
        return false;


    }
    function inlineComment(e)
    {
        $.ajax({
            type: "Get",
            url: '/cms/GetServiceDocumentId?serviceId=@Model.ServiceId',
            success: function (data) {
                if (data !=null && data!="") {
                    var win = GetMainWindow();
                    win.iframeOpenUrl =  '@Url.Action("InlineComment", "Cms", new { @area = "" })?noteId='+data;
                    win.OpenWindow({ Title: 'Inline Comment', Width: 1000, Height: 650 });
                    return false;
                }
            },
            dataType: "json",
        });
        return false;


    }



</script>

<div>
    @if (Model.ViewMode != NtsViewTypeEnum.Book)
    {
        @if (Model.BannerFileId != null || Model.IconFileId != null)
        {
            <div class="row">
                <div class="col-md-12" style="padding:0px;">
                    @if (Model.IconFileId != null)
                    {
                        <img style="height:100px;border-radius:1px;width:100%" src="/cms/Document/GetImageMongo?id=@Model.BannerFileId" />
                    }
                    <div class="@(Model.BannerFileId.IsNullOrEmpty()?"nts-banner-text-dark":"nts-banner-text-white")">@Model.TemplateDisplayName</div>
                </div>
            </div>
        }
        else
        {
            <div class="col-md-12" style="height:60px;border-radius:1px;width:100%">
                <div class="nts-banner-text-small">@Model.TemplateDisplayName</div>
            </div>
        }
    }
    <form asp-controller="Cms" asp-action="ManageService" asp-area="" method="post" class="form-parse-date form-horizontal"
          data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete" id="frmManageService"
          data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess" onsubmit="ConvertDate()"
          data-ajax="true" data-ajax-method="POST">
        <div id="ribbon" class="row">
            <div class="ribbon-window-title"></div>
            <div class="ribbon-tab" id="format-tab">
                @if (Model.EnableBackButton && Model.LayoutMode != LayoutModeEnum.Iframe)
                {
                    <div class="ribbon-button ribbon-section" onclick="closeNavMemberGroup();">
                        <div class="ribbon-content">
                            @if (Model.LayoutMode == LayoutModeEnum.Popup)
                            {
                                <div class="back-icon fal fa-times-circle"></div>
                                <div class="text-label">Close</div>
                            }
                            else
                            {
                                <div class="back-icon fal fa-arrow-circle-left"></div>
                                <div class="text-label">@Model.BackButtonText.ToDefaultBackButtonText()</div>
                            }

                        </div>
                    </div>
                }
                @if (Model.IsReplyButtonVisible)
                {
                    <div class="ribbon-button ribbon-section" onclick="OnReply();">
                        <div class="ribbon-content">
                            <div class="reply-icon fa fa-reply"></div>
                            <div class="text-label">Reply</div>
                        </div>
                    </div>
                }
                @if (!Model.IsInEditMode || Model.NumberGenerationType == NumberGenerationTypeEnum.SystemGenerated)
                {
                    if (!Model.HideServiceNumberInHeader)
                    {
                        <div class="ribbon-section">
                            <div class="ribbon-content">
                                <div class="text-title">@Model.ServiceNo</div>
                                <div class="text-label">@Model.ServiceNoText.ToDefaultServiceNoText()</div>

                            </div>
                        </div>
                    }
                }
                @Html.HiddenFor(x => x.ServiceNo)
                @if (!Model.HideStatusInHeader)
                {
                    <div class="ribbon-section">
                        <div class="ribbon-content">
                            <div class="text-title @Model.ServiceStatusFontCss">@Model.ServiceStatusName</div>
                            <div class="text-label">Status</div>

                        </div>
                    </div>
                }
                @Html.HiddenFor(x => x.ServiceStatusCode)
                @if (Model.CancelReason.IsNotNullAndNotEmpty())
                {
                    <div class="ribbon-section">
                        <div class="ribbon-content">
                            <div class="text-cancel">@Model.CancelReason</div>
                            <div class="text-label">Cancel Reason</div>
                            @Html.HiddenFor(x => x.CancelReason)
                        </div>
                    </div>
                }
                @if (!Model.HideVersionInHeader)
                {
                    @if (Model.IsLogRecord)
                    {
                        <div class="ribbon-section">
                            <div class="ribbon-content">
                                <div class="text-title">@Model.VersionNo</div>
                                <div class="text-label">Version No</div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="ribbon-section ribbon-button" onclick="ViewVersionDetails();">
                            <div class="ribbon-content">
                                <div class="text-title">@Model.VersionNo</div>
                                <div class="text-label">Version No</div>
                            </div>
                        </div>
                    }
                }
                @Html.HiddenFor(x => x.VersionNo)
                @if (!Model.IsInEditMode)
                {
                    @if (!Model.HidePriorityInHeader)
                    {
                        <div class="ribbon-section">
                            <div class="ribbon-content">
                                <div class="text-title">@Model.ServicePriorityName</div>
                                <div class="text-label">Priority</div>

                            </div>
                        </div>
                    }
                    @Html.HiddenFor(x => x.ServicePriorityId)
                    @Html.HiddenFor(x => x.ServicePriorityCode)
                    @if (!Model.HideDueDateInHeader)
                    {
                        <div class="ribbon-section duedate-popup-card  ribbon-button">
                            <div class="ribbon-content">
                                <div class="text-title">@Model.DueDate.ToDefaultDateTimeFormat()</div>
                                <div class="text-label">Due Date</div>

                            </div>
                        </div>
                        @if (Model.ReminderDate != null)
                        {
                            <div class="ribbon-section">
                                <div class="ribbon-content">
                                    <div class="text-title">@Model.ReminderDate.ToDefaultDateTimeFormat()</div>
                                    <div class="text-label">Reminder Date</div>

                                </div>
                            </div>
                        }
                    }
                    @Html.HiddenFor(x => x.DueDate)
                    @Html.HiddenFor(x => x.StartDate)
                    @Html.HiddenFor(x => x.ServiceSLA)
                    @Html.HiddenFor(x => x.ReminderDate)
                    @if (!Model.HideNotificationInHeader)
                    {
                        <div class="ribbon-section ribbon-button" onclick="ViewNotification()">
                            <div class="ribbon-content">
                                <span class="notification-icon far fa-bell"></span>
                                <span class="notification-text" id="notificationCount">0</span>
                                <div class="text-label">Notifications</div>
                            </div>
                        </div>
                    }
                    @if (!Model.HideCommentInHeader)
                    {
                        <div class="ribbon-section ribbon-button" onclick="onCommentClick();">
                            <div class="ribbon-content">
                                <span class="icon_comment far fa-comment-alt"></span>
                                <span class="comment-text" id="commentCount">0</span>
                                <div class="text-label">Comment</div>
                            </div>
                        </div>
                    }
                    @if (!Model.HideProcessDiagramInHeader)
                    {
                        <div class="ribbon-section ribbon-button" onclick="onProcessDesign();">
                            <div class="ribbon-content">
                                <span class="share-icon far fa-sitemap"></span>
                                <div class="text-label" style="margin-top:4px">Process Design Result</div>
                            </div>
                        </div>
                    }
                    @if (!Model.HideShareInHeader)
                    {
                        <div class="ribbon-section ribbon-button" onclick="onclickShare();">
                            <div class="ribbon-content">
                                <span class="share-icon far fa-share-alt"></span>
                                <span class="share-text" id="sharedCount">0</span>
                                <div class="text-label">Share</div>
                            </div>
                        </div>
                    }
                    @if (!Model.HideAdhocTaskInHeader)
                    {
                        <div class="ribbon-section ribbon-button" onclick="onAdhocTask();">
                            <div class="ribbon-content">
                                <span class="share-icon far fa-folder-tree"></span>
                                <span class="share-text" id="adhocCount"></span>
                                <div class="text-label" style="margin-top:4px">Adhoc Task</div>
                            </div>
                        </div>
                    }

                }
                @if (!Model.HideAttachmentInHeader)
                {
                    <div class="ribbon-section ribbon-button" onclick="AddAttachment();">
                        <div class="ribbon-content">
                            <span class="attachment-icon far fa-paperclip"></span>
                            <span class="attachment-text" id="attchmentCount">0</span>
                            <div class="text-label">Attachment</div>
                        </div>
                    </div>
                }
                @if (!Model.HideTahsInHeader)
                {
                    <div class="ribbon-section ribbon-button" onclick="onTag();">
                        <div class="ribbon-content">
                            <span class="share-icon far fa-tag"></span>
                            <div class="text-label" style="margin-top:4px">Tags</div>
                        </div>
                    </div>
                }
                @if (!Model.HideEmailInHeader)
                {
                    <div class="ribbon-section ribbon-button" onclick="onEmail();">
                        <div class="ribbon-content">
                            <span class="share-icon far fa-envelope-open-text"></span>
                            <span class="share-text" id="emailCount"></span>
                            <div class="text-label" style="margin-top:4px">Email</div>
                        </div>
                    </div>
                }
                @if (!Model.HideWorkflowInHeader)
                {
                    <div class="ribbon-section ribbon-button" onclick="onWorkflow();">
                        <div class="ribbon-content">
                            <span class="share-icon far fa-project-diagram"></span>
                            <span class="share-text" id=""></span>
                            <div class="text-label" style="margin-top:4px">Workflow</div>
                        </div>
                    </div>
                }
                @if (!Model.HideLogInHeader)
                {
                    <div class="ribbon-section ribbon-button" onclick="onLog();">
                        <div class="ribbon-content">
                            <span class="share-icon far fa-tag"></span>
                            <div class="text-label" style="margin-top:4px">Log</div>
                        </div>
                    </div>
                }
                @if (Model.EnableInlineComment)
                {
                    <div class="ribbon-section ribbon-button" onclick="inlineComment();">
                        <div class="ribbon-content">
                            <span class="share-icon fal fa-comment"></span>
                            <span class="share-text" id="InlineComment"></span>
                            <div class="text-label" style="margin-top:4px">InlineComment</div>
                        </div>
                    </div>
                }
                @if (Model.EnablePermission)
                {
                    <div class="ribbon-section ribbon-button" onclick="onPermission();">
                        <div class="ribbon-content">
                            <span class="share-icon far fa-cog"></span>
                            <span class="share-text" id="permissionCount"></span>
                            <div class="text-label" style="margin-top:4px">Permission</div>
                        </div>
                    </div>
                }


            </div>
        </div>
        <div class="row pad-15" style="background-color:#fff;">
            @Html.HiddenFor(x => x.ServiceStatusCode)
            @Html.HiddenFor(x => x.ServiceTableId)


            @Html.HiddenFor(x => x.VersionNo)
            @Html.HiddenFor(x => x.Json)
            @Html.HiddenFor(x => x.DataJson)
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.ServiceTemplateId)
            @Html.HiddenFor(x => x.UdfNoteTableId)
            @Html.HiddenFor(x => x.ServiceId)
            @Html.HiddenFor(x => x.TemplateId)
            @Html.HiddenFor(x => x.UdfTemplateId)
            @Html.HiddenFor(x => x.UdfTableMetadataId)
            @Html.HiddenFor(x => x.UdfNoteId)
            @Html.HiddenFor(x => x.TemplateCode)
            @Html.HiddenFor(x => x.PageId)
            @Html.HiddenFor(x => x.DataAction)
            @Html.HiddenFor(x => x.RecordId)
            @Html.HiddenFor(x => x.PortalName)
            @Html.HiddenFor(x => x.CloseComment)
            @Html.HiddenFor(x => x.CreateReturnType)
            @Html.HiddenFor(x => x.EditReturnType)
            @Html.HiddenFor(x => x.ParentServiceId)
            @Html.HiddenFor(x => x.ActiveUserType)
            @Html.HiddenFor(x => x.ActiveUserId)
            @Html.HiddenFor(x => x.TableMetadataId)
            @Html.HiddenFor(x => x.RequestedByUserId)
            @Html.HiddenFor(x => x.OwnerUserId)
            @Html.HiddenFor(x => x.LayoutMode)
            @Html.HiddenFor(x => x.ReturnUrl)
            @Html.HiddenFor(x => x.CustomUrl)
            @Html.HiddenFor(x => x.PopupCallbackMethod)
            @Html.HiddenFor(x => x.IsSubjectMandatory)
            @Html.HiddenFor(x => x.IsSubjectUnique)
            @Html.HiddenFor(x => x.AllowPastStartDate)
            @Html.HiddenFor(x => x.CreatedBy)
            @Html.HiddenFor(x => x.LastUpdatedBy)
            @Html.HiddenFor(x => x.LegalEntityId)
            @Html.HiddenFor(x => x.CompanyId)
            @Html.HiddenFor(x => x.ReferenceType)
            @Html.HiddenFor(x => x.ReferenceId)
            @Html.HiddenFor(x => x.ParentNoteId)
            @Html.HiddenFor(x => x.ParentTaskId)
            @Html.HiddenFor(x => x.ServicePlusId)
            @Html.HiddenFor(x => x.NotePlusId)
            @Html.HiddenFor(x => x.TaskPlusId)
            @Html.HiddenFor(x => x.SequenceOrder)
            @Html.HiddenFor(x => x.NextStepTaskComponentId)
            @Html.HiddenFor(x => x.EnableCustomMessageOnCreation)
            @Html.HiddenFor(x => x.CustomMessageOnCreation)
            @Html.HiddenFor(x => x.EnableCustomMessageOnEdit)
            @Html.HiddenFor(x => x.CustomMessageOnEdit)
            <div id="validation-summary-manageform" class="pt-2 pb-2 error-summary alert alert-danger" asp-validation-summary="All" style="display:none;"></div>
            @if (Model.FormType != FormTypeEnum.Wizard &&
              (Model.ActionButtonPosition == ActionButtonPositionEnum.TopAndBottom || Model.ActionButtonPosition == ActionButtonPositionEnum.TopOnly))
            {
                <div class="row col-12">
                    <div class="col">
                        @if (Model.IsDraftButtonVisible)
                        {
                            <button type="submit" class="btn btn-info" onclick="return SaveAsDraft();">@Model.SaveAsDraftText.ToDefaultSaveAsDraftButtonText()</button>
                        }
                        @if (Model.IsSubmitButtonVisible)
                        {
                            <button type="submit" class="btn btn-primary" onclick="return Submit();">@Model.SubmitButtonText.ToDefaultSubmitButtonText()</button>
                        }
                        @if (Model.IsReopenButtonVisible && !Model.DisableReopen)
                        {
                            <button type="submit" class="btn btn-primary" onclick="return Submit();">@Model.SubmitButtonText.ToDefaultSubmitButtonText()</button>
                        }
                    </div>
                </div>

            }



            <div class="row col-12">
                @if (Model.IsInEditMode)
                {
                    <div class="col-xs-12 col-md-11">
                        @if (Model.NumberGenerationType == NumberGenerationTypeEnum.UserEntry)
                        {
                            <div class="form-group">
                                <label class="col-form-label">
                                    @Model.ServiceNo.ToDefaultServiceNumberText()
                                </label>
                                <div>
                                    <input asp-for="ServiceNo" type="text" class="form-control" style="width:100%" />
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(x => x.ServiceNo)
                        }
                        @if (!Model.HideHeader)
                        {
                            @if (!Model.HideSubject)
                            {
                                <div class="form-group">
                                    <label class="col-form-label">
                                        @Model.SubjectText.ToDefaultSubjectText()
                                    </label>
                                    <div>
                                        <input asp-for="ServiceSubject" type="text" class="form-control" style="width:100%" />
                                    </div>
                                </div>
                            }
                            else
                            {
                                @Html.HiddenFor(x => x.Subject)
                            }
                            @if (!Model.HideDescription)
                            {
                                <div class="form-group">
                                    <div class="row">
                                        <div class="col-6">
                                            <label class="col-form-label">
                                                @Model.DescriptionText.ToDefaultDescriptionText()
                                            </label>
                                        </div>
                                        <div class="col-6">
                                            <label style="float:right;padding-top:2px;">
                                                <input type="checkbox" id="enableDescHtml" onchange="chkChange();" />
                                                <label>Enable HTML</label>
                                            </label>

                                        </div>
                                    </div>
                                    <div>

                                        <div class="page-wrapper box-content">
                                            <textarea class="content" id="ServiceDescription"></textarea>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                @Html.HiddenFor(x => x.ServiceDescription)
                            }


                        }
                        else
                        {
                            @Html.HiddenFor(x => x.ServiceSubject)
                            @Html.HiddenFor(x => x.ServiceDescription)
                        }
                        <div id="formio-container"></div>
                        @if (!Model.HideHeader)
                        {
                            <p class="pt-2 pb-3">
                                <a data-toggle="collapse" href="#otherDetails" role="button" aria-expanded="false" aria-controls="otherDetails">
                                    Other details
                                </a>(Requester, Due Date, SLA, Priority etc.)
                            </p>
                            <div class="collapse" id="otherDetails">
                                <div class="form-group" id="div-requested-by" style="display:none;">
                                    <label class="col-form-label">
                                        Requested By
                                    </label>
                                    <div class="alert-light">
                                        <img class="user-photo rounded-circle" src="/Cms/document/getimagemongo/@Model.RequestedByUserPhotoId" onerror="OnPhotoError(this);">
                                        <span class="user-popup-card" data-user-id="@Model.RequestedByUserId">
                                            <span class="pl-2">@Model.RequestedByUserName</span>
                                            <span>&lt;<a>@Model.RequestedByUserEmail</a>&gt;</span>
                                        </span>
                                    </div>
                                </div>
                                @if (!Model.HideOwner)
                                {
                                    <div class="form-group">
                                        <label class="col-form-label">
                                            From
                                        </label>
                                        <div class="alert-light" id="from-display">
                                            <img id="o-img" class="user-photo rounded-circle" src="/Cms/document/getimagemongo/@Model.OwnerUserPhotoId" onerror="OnPhotoError(this);">
                                            <span id="user-popup-card" class="user-popup-card" data-user-id="@Model.OwnerUserId">
                                                <span id="o-name" class="pl-2">@Model.OwnerUserName</span>
                                                <span>&lt;<a id="o-email">@Model.OwnerUserEmail</a>&gt;</span>
                                            </span>
                                            <i title="Change Owner" class="pl-2 fa fa-pencil pt-1" style="font-size:22px;cursor:pointer;" onclick="return OnChangeOwner()"></i>
                                        </div>
                                        <div id="from-edit" class="row no-gutters" style="display:none;">
                                            <div class="col-11">  @await Html.PartialAsync("~/Views/Shared/_UserDropdown.cshtml", new Tuple<string, string, string, string>(Model.OwnerUserId, "owner", null, "form-control"))</div>
                                            <div class="1">
                                                <i class="fa fa-check-circle" style="font-size:30px;cursor:pointer;padding-left:5px;padding-top:7px;color:green;" title="Save" onclick="return OnChangeOwnerSave()"></i>
                                                <i class="fa fa-times-circle" style="font-size:30px;cursor:pointer;padding-left:5px;padding-top:7px;color:red;" title="Cancel" onclick="return OnChangeOwnerCancel()"></i>
                                            </div>

                                        </div>
                                    </div>
                                }
                                else
                                {
                                    @Html.HiddenFor(x => x.OwnerUserId)
                                }
                                @if (!Model.HidePriority)
                                {
                                    <div class="row">

                                        <div class="form-group col-6">
                                            <label class="col-form-label">
                                                Priority
                                            </label>
                                            <div>
                                              

                                                <input asp-for="ServicePriorityId" id="ServicePriorityId" class="form-control" style="width: 100%;" />
                                                <script>
                                                    $(document).ready(function(){
                                                        $("#ServicePriorityId").kendoDropDownList({
                                                                    optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
                                                                    dataTextField: "Name",
                                                                    dataValueField: "Id",
			                                                        value: "@Model.ServicePriorityId",
                                                                    autoBind: true,
                                                                    dataSource: {
                                                                        transport: {
                                                                            read: {
                                                                                url: "/Cms/LOV/GetLOVIdNameList?lovType=SERVICE_PRIORITY",
                                                                            }
                                                                        }
                                                                    }
                                                                });
                                                    });
                                                </script>
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    @Html.HiddenFor(x => x.ServicePriorityId)
                                }
                                @if (!Model.HideStartDate)
                                {
                                    <div class="row">
                                        <div class="form-group col-6">
                                            <label class="col-form-label">
                                                Start Date
                                            </label>
                                            <div>
                                                <input asp-for="StartDate" id="StartDate" style="width:100%" />
                                            </div>
                                        </div>
                                        <div class="form-group col-6">
                                            <label class="col-form-label">
                                                Due Date
                                            </label>
                                            <div>
                                                <input asp-for="DueDate" id="DueDate" style="width:100%" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="form-group col-6">
                                            <label class="col-form-label">
                                                SLA
                                            </label>
                                            <div>
                                                <input asp-for="ServiceSLAMinutes" type="text" class="form-control" style="width:100%" />

                                            </div>
                                        </div>
                                        <div class="form-group col-6">
                                            <label class="col-form-label">
                                                Reminder Date
                                            </label>
                                            <div>
                                                <input asp-for="ReminderDate" id="ReminderDate" style="width:100%" />
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    @Html.HiddenFor(x => x.StartDate)
                                    @Html.HiddenFor(x => x.DueDate)
                                    @Html.HiddenFor(x => x.SLA)
                                    @Html.HiddenFor(x => x.ReminderDate)
                                }
                            </div>

                        }
                        else
                        {
                            @Html.HiddenFor(x => x.RequestedByUserId)
                            @Html.HiddenFor(x => x.OwnerUserId)
                            @Html.HiddenFor(x => x.ServicePriorityId)
                            @Html.HiddenFor(x => x.StartDate)
                            @Html.HiddenFor(x => x.DueDate)
                            @Html.HiddenFor(x => x.SLA)
                            @Html.HiddenFor(x => x.ReminderDate)
                        }
                    </div>
                }

                else
                {
                    @Html.HiddenFor(x => x.ServiceNo)
                    <div class="col-xs-12 col-sm-8">
                       
                        @if (Model.DataAction == DataActionEnum.Edit)
                        {
                            <div class="col-xs-12 pb-3">
                                

                                <input id="drpAction" class="drp-btn" />
                                <script>
                                $("#drpAction").kendoDropDownList({
                                    optionLabel: "Select a response",
                                    filter: "contains",
                                    dataTextField: "Text",
                                    dataValueField: "Value",
                                    change: OnActionChange,
                                    dataSource: [
                                        @if (Model.IsAddCommentEnabled)
                                            {
                                                @:{ Text: "Add Comment", Value: "ADD_COMMENT" },
                                            }
                                        @if (Model.IsCloseButtonVisible)
                                            {
                                                @:{ Text: "Close Service", Value: "CLOSE_SERVICE"},
                                            }
                                        @if (Model.IsCancelButtonVisible)
                                            {
                                                @:{ Text: "Cancel Service", Value: "CANCEL_SERVICE" },
                                            }
                                        @if (Model.IsEditButtonVisible && !Model.DisableReopen)
                                            {
                                                @:{ Text: "Reopen Service", Value: "EDIT_SERVICE" },
                                            }
                                          @if (Model.IsVersioningButtonVisible)
                                            {
                                                @:{ Text: "Edit Service", Value:"EDIT_SERVICE"},
                                            }
                                        ],

                                 });
                                </script>

                            </div>
                            <div class="col-xs-12 action-section mb-2" style="display:none;">
                                <div id="action-add-comment" class="col-xs-12" style="display:none;">
                                    <div class="form-group">
                                        <label class="col-form-label">
                                            Comment
                                          
                                        </label>
                                        <div>
                                           

                                            <div class="page-wrapper box-content">
                                                <textarea class="content" id="editorAddComment"></textarea>
                                            </div>
                                        </div>
                                        <div class="pt-2">
                                           
                                            <input id="CommentToUserId" class="form-control" />
                                            <script>
                                                    $(document).ready(function(){
                                                        $("#CommentToUserId").kendoDropDownList({
                                                            optionLabel: "All",
                                                            dataTextField: "Name",
                                                            dataValueField: "Id",
                                                            filter: "contains",
                                                            height: 400,
			                                                autoBind: true,
                                                            dataSource: {
                                                                 transport: {
                                                                     read: {
                                                                         url: "/Cms/NtsService/GetServiceSharedUsersIdNameList?serviceId=@Model.ServiceId",
                                                                     }
                                                                 }
                                                            }
                                                        });
                                                    });
                                            </script>
                                        </div>
                                    </div>
                                   

                                    <button class="btn btn-primary" onclick="PostComment(event)">Add Comment</button>
                                </div>

                                <div id="action-cancel-service" class="col-xs-12" style="display:none;">
                                    <div class="form-group">
                                        <label class="col-form-label">
                                            Cancel Reason
                                            
                                        </label>

                                        <div>
                                             

                                            <div class="page-wrapper box-content">
                                                <textarea class="content" asp-for="CancelReason" id="CancelReason"></textarea>
                                            </div>

                                        </div>
                                    </div>
                                    <button type="submit" class="btn btn-primary" onclick="return Cancel();">Cancel</button>
                                </div>
                                <div id="action-close-task" class="col-xs-12" style="display:none;">
                                    <div class="form-group">
                                        <label class="col-form-label">
                                            Rating
                                        </label>
                                        <div>
                                            @(Html.Kendo().RatingFor(x=>x.UserRating)
        .Min(1)
        .Max(5)
        .Precision("half")
    )

                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-form-label">
                                            Comments
                                           
                                        </label>

                                        <div>

                                          

                                            <div class="page-wrapper box-content">
                                                <textarea class="content" asp-for="CloseComment" id="CloseComment"></textarea>
                                            </div>

                                        </div>
                                    </div>
                                    <button type="submit" class="btn btn-primary" onclick="return CloseService();">Close</button>

                                </div>
                                <div id="action-complete-service" class="col-xs-12" style="display:none;">
                                    <div class="form-group">
                                        <label class="col-form-label">
                                            Complete Reason
                                            
                                        </label>

                                        <div>
                                             
                                            <div class="page-wrapper box-content">
                                                <textarea class="content" asp-for="CompleteReason" id="CompleteReason"></textarea>
                                            </div>

                                        </div>
                                    </div>
                                    <button type="submit" class="btn btn-primary" onclick="return Complete();">Complete</button>
                                </div>
                            </div>
                        }
                        <div class="div-readonly">
                            <strong>From:</strong>
                            <span class="pl-1 user-popup-card" data-user-id="@Model.OwnerUserId">
                                <span>
                                    @Model.OwnerUserName
                                </span>
                                <a>&lt;@Model.OwnerUserEmail&gt;</a>
                            </span>
                        </div>
                        <div class="div-readonly">
                            <strong>Sent:</strong>
                            <span class="pl-1">
                                @Model.SubmittedDate.Humanize()
                            </span>
                        </div>

                       
                        @if (Model.SharedList != null && Model.SharedList.Count() > 0)
                        {
                            <div class="div-readonly">
                                <strong>Cc:</strong>


                                @foreach (var item in Model.SharedList)
                                {
                                    <span class="pl-1  user-popup-card" data-user-id="@item.Id">
                                        <span>@item.UserName</span><a>&lt;@item.Email&gt;;</a>
                                    </span>
                                }



                            </div>
                        }
                        <div class="div-readonly">
                            <strong>@(Model.SubjectText.ToDefaultSubjectText()):</strong>
                            <span class="pl-1">
                                @Model.ServiceSubject
                            </span>
                        </div>
                        <div class="div-readonly">
                            <span class="pl-1">
                                @Html.Raw(Model.ServiceDescription.HtmlDecode())
                            </span>
                        </div>


                        <hr style="height:1px;background-color: silver;" />
                        <div>
                            <div id="gridNTSReplies"></div>
                        </div>
                        @if (Model.DataAction == DataActionEnum.View)
                        {
                            <div id="formio-container"></div>
                        }


                        @if (Model.HideStepTaskDetails == false && Model.ViewMode != NtsViewTypeEnum.Book)
                        {
                            <hr style="height:1px;background-color: silver;" />
                            <div class="accordion" id="accordionExample">
                                <div class="card" style=" border: 1px solid var(--pbc); margin-bottom: 5px;">
                                    <div class="card-header" id="heading_@Model.ServiceId" style="padding: 2px !important;">
                                        <h2 class="row mb-0">
                                            <button class="btn btn-link btn-block text-left" style="margin-left: 24px;" type="button" data-toggle="collapse" data-target="#collapse_@Model.ServiceId" aria-expanded="true" aria-controls="collapse_@Model.ServiceId">
                                                @Model.ServiceNo- @Model.ServiceSubject
                                            </button>
                                        </h2>
                                    </div>

                                    <div id="collapse_@Model.ServiceId" class="collapse show" style="background-color:white;" aria-labelledby="heading_@Model.ServiceId" data-parent="#accordionExample">
                                        <div class="card-body">
                                            <div class="div-readonly">
                                                <strong>@(Model.SubjectText.ToDefaultSubjectText()):</strong>
                                                <span class="pl-1">
                                                    @Model.ServiceSubject
                                                </span>
                                            </div>
                                            <div class="div-readonly">
                                                <strong>ServiceNo:</strong>
                                                <span class="pl-1">
                                                    @Model.ServiceNo
                                                </span>
                                            </div>
                                            <div class="div-readonly">
                                                <strong>DueDate:</strong>
                                                <span class="pl-1">
                                                    @Model.DueDate
                                                </span>
                                            </div>
                                            <div class="div-readonly">
                                                <strong>Status:</strong>
                                                <span class="pl-1">
                                                    @Model.ServiceStatusName
                                                </span>
                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>
                            @if (Model.StepTasksList != null && Model.StepTasksList.Count() > 0)
                            {

                                @foreach (var item in Model.StepTasksList.OrderBy(x => x.StepTaskSequenceOrder))
                                {<div class="accordion" id="accordionExample_@item.Id">
                                        <div class="card" style=" border: 1px solid var(--pbc); margin-bottom: 5px;">

                                            <div class="card-header @item.TaskStatusCode" id="heading_@item.Id" style="color:white!important;padding:2px !important;">
                                                <h2 class="row mb-0">

                                                    <button class="btn btn-link btn-block text-left" type="button" data-toggle="collapse" data-target="#collapse_@item.Id" aria-expanded="true" aria-controls="collapse_@item.Id" style="color:white!important;width:88%;margin-left: 24px;">
                                                        @item.TaskNo - @item.TaskSubject
                                                    </button>
                                                    <i class="fas fa-eye" style="font-size:20px;padding-top: 9px;" onclick="OnViewTask('@item.Id','@item.PageId','@item.TemplateMasterCode')"></i>
                                                </h2>
                                            </div>

                                          


                                            <div id="collapse_@item.Id" class="collapse " aria-labelledby="heading_@item.Id" data-parent="#accordionExample_@item.Id" style="background-color: white;">
                                                <div class="card-body">

                                                    <div class="div-readonly">
                                                        <strong>Subject:</strong>
                                                        <span class="pl-1">
                                                            @item.TaskSubject
                                                        </span>
                                                    </div>
                                                    <div class="div-readonly">
                                                        <strong>TaskNo:</strong>
                                                        <span class="pl-1">
                                                            @item.TaskNo
                                                        </span>
                                                    </div>
                                                    <div class="div-readonly">
                                                        <strong>DueDate:</strong>
                                                        <span class="pl-1">
                                                            @item.DueDate
                                                        </span>
                                                    </div>
                                                    <div class="div-readonly">
                                                        <strong>Status:</strong>
                                                        <span class="pl-1">
                                                            @item.TaskStatusName
                                                        </span>
                                                    </div><br />

                                                    

                                                    <div id="listViewMsg_@item.Id"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }


                            }


                        }
                    </div>
                }
            </div>
            @if (Model.FormType != FormTypeEnum.Wizard &&
                 (Model.ActionButtonPosition == ActionButtonPositionEnum.TopAndBottom || Model.ActionButtonPosition == ActionButtonPositionEnum.BottomOnly))
            {
                <div class="row col-12 pt-3">
                    <div class="col">
                        @if (Model.IsDraftButtonVisible)
                        {
                            <button type="submit" class="btn btn-info" onclick="return SaveAsDraft();">@Model.SaveAsDraftText.ToDefaultSaveAsDraftButtonText()</button>
                        }
                        @if (Model.IsSubmitButtonVisible || Model.IsReopenButtonVisible || Model.IsVersioningButtonVisible || !Model.DisableReopen)
                        {
                            <button type="submit" class="btn btn-primary" onclick="return Submit();">@Model.SubmitButtonText.ToDefaultSubmitButtonText()</button>
                        }

                    </div>
                </div>
            }
        </div>
        <script type="text/x-kendo-tmpl" id="templateListReplies">
            <div class="col header-readonly">#=Type#</div>
            <div class="div-readonly">
                <strong>From:</strong>
                <span class="pl-1 user-popup-card" data-user-id="#=FromId#">
                   <span>#=From#</span><span><a>&lt;#=FromEmail#&gt;</a></span>
                </span>
            </div>
            <div class="div-readonly">
                <strong>Sent:</strong>
                <span class="pl-1">
                    #=SentDateDisplay#

                </span>
            </div>
            #if(To!=null){#
                <div class="div-readonly">
                    <strong>To:</strong>
                    <span class="pl-1 user-popup-card" data-user-id="#=ToId#">
                        <span>#=To#</span><span><a>&lt;#=ToEmail#&gt;</a></span>
                    </span>
                </div>
             #}#
             #if(Subject!=null){#
                <div class="div-readonly">
                    <strong>Subject:</strong>
                    <span class="pl-1">
                           #=Subject#
                    </span>
                </div>
             #}#
             #if(Body!=null){#
                <div class="div-readonly">
                    <span class="pl-1">
            #= htmlDecode(Body) #
                    </span>
                </div>
             #}#
                 <hr/>
        </script>
        @(Html.Kendo().Dialog()
        .Name("reason")
        .Title("Reason")
        .Content( @"<textarea id='CommentTemp' rows='5' class='form-control'></textarea><div style='display:none;color:red;' id='commentReq'></div>")
        .Animation(a=>a.Open(o=>o.Zoom(ZoomDirection.In)).Close(c=>c.Zoom(ZoomDirection.Out)))
        .Width(450)
        .Height(300)
        .Modal(true)
        .Visible(false)
        .Actions(actions =>
        {
        actions.Add().Text("Cancel");
        actions.Add().Text("Save").Primary(true).Action("OnReasonSave");
        })

    )

    </form>

    <div class="modal fade" id="messageModal" tabindex="-1" role="dialog" aria-labelledby="messageModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title" id="messageModalLabel">Request Completed</h6>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">@Model.CustomMessageOnCreation</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

</div>
<script>
    $('#messageModal').on('hide.bs.modal', function (event) {
        CompleteSubmit(ajaxResponse);
    })
    function chkChange() {

        if ($('#enableDescHtml').is(":checked")) {
            $(".richText-toolbar").show();
        }
        else {
            $(".richText-toolbar").hide();
        }
    }

    function onWorkflow() {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ServiceDiagram", "NtsService", new { @area = "cms" })?id=@Model.ServiceId&isTemplate=false';
        win.OpenWindow({ Title: 'Service Workflow', Width: 1200, Height: 600 });
        return false;
    }
    (function ($) {
        $('#ServiceSLAMinutes').durationPicker({
            showSeconds: false,
            onChanged: function (newVal, init) {
                if (!init) {
                    var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
                    var ed = GetAddSeconds(sd, newVal);
                    var f = new Date(ed);
                    console.log(f);
                    $("#DueDate").data("kendoDateTimePicker").value(f)
                }

            }
        });
        $.fn.ribbon = function (id) {

            if (!id) {
                if (this.attr('id')) {
                    id = this.attr('id');
                }
            }

            var that = function () {
                return thatRet;
            };

            var thatRet = that;

            that.selectedTabIndex = -1;

            var tabNames = [];

            that.goToBackstage = function () {
                ribObj.addClass('backstage');
            }

            that.returnFromBackstage = function () {
                ribObj.removeClass('backstage');
            }
            var ribObj = null;

            that.init = function (id) {
                if (!id) {
                    id = 'ribbon';
                }

                ribObj = $('#' + id);
                ribObj.find('.ribbon-window-title').after('<div id="ribbon-tab-header-strip"></div>');
                var header = ribObj.find('#ribbon-tab-header-strip');

                ribObj.find('.ribbon-tab').each(function (index) {
                    var id = $(this).attr('id');
                    if (id == undefined || id == null) {
                        $(this).attr('id', 'tab-' + index);
                        id = 'tab-' + index;
                    }
                    tabNames[index] = id;

                    var title = $(this).find('.ribbon-title');
                    var isBackstage = $(this).hasClass('file');
                    //header.append('<div id="ribbon-tab-header-' + index + '" class="ribbon-tab-header"></div>');
                    var thisTabHeader = header.find('#ribbon-tab-header-' + index);
                    thisTabHeader.append(title);
                    if (isBackstage) {
                        thisTabHeader.addClass('file');

                        thisTabHeader.click(function () {
                            that.switchToTabByIndex(index);
                            that.goToBackstage();
                        });
                    } else {
                        if (that.selectedTabIndex == -1) {
                            that.selectedTabIndex = index;
                            thisTabHeader.addClass('sel');
                        }

                        thisTabHeader.click(function () {
                            that.returnFromBackstage();
                            that.switchToTabByIndex(index);
                        });
                    }
                    $(this).hide();
                });

                ribObj.find('.ribbon-button').each(function (index) {
                    var title = $(this).find('.button-title');
                    title.detach();
                    $(this).append(title);

                    var el = $(this);

                    this.enable = function () {
                        ServiceIdl.removeClass('disabled');
                    };

                    this.disable = function () {
                        el.addClass('disabled');
                    };

                    this.isEnabled = function () {
                        return !el.hasClass('disabled');
                    };

                    if ($(this).find('.ribbon-hot').length == 0) {
                        $(this).find('.ribbon-normal').addClass('ribbon-hot');
                    };

                    if ($(this).find('.ribbon-disabled').length == 0) {
                        $(this).find('.ribbon-normal').addClass('ribbon-disabled');
                        $(this).find('.ribbon-normal').addClass('ribbon-implicit-disabled');
                    };

                    $(this).tooltip({
                        bodyHandler: function () {
                            if (!$(this).isEnabled()) {
                                $('#tooltip').css('visibility', 'hidden');
                                return '';
                            }

                            var tor = '';

                            if (jQuery(this).children('.button-help').size() > 0)
                                tor = (jQuery(this).children('.button-help').html());
                            else
                                tor = '';

                            if (tor == '') {
                                $('#tooltip').css('visibility', 'hidden');
                                return '';
                            }

                            $('#tooltip').css('visibility', 'visible');

                            return tor;
                        },
                        left: 0,
                        extraClass: 'ribbon-tooltip'
                    });
                });

                ribObj.find('.ribbon-section').each(function (index) {
                    $(this).after('<div class="ribbon-section-sep"></div>');
                });

                ribObj.find('div').attr('unselectable', 'on');
                ribObj.find('span').attr('unselectable', 'on');
                ribObj.attr('unselectable', 'on');

                that.switchToTabByIndex(that.selectedTabIndex);
            }

            that.switchToTabByIndex = function (index) {
                var headerStrip = $('#ribbon #ribbon-tab-header-strip');
                headerStrip.find('.ribbon-tab-header').removeClass('sel');
                headerStrip.find('#ribbon-tab-header-' + index).addClass('sel');

                $('#ribbon .ribbon-tab').hide();
                $('#ribbon #' + tabNames[index]).show();
            }

            $.fn.enable = function () {
                if (this.hasClass('ribbon-button')) {
                    if (this[0] && this[0].enable) {
                        this[0].enable();
                    }
                }
                else {
                    this.find('.ribbon-button').each(function () {
                        $(this).enable();
                    });
                }
            }




            $.fn.disable = function () {
                if (this.hasClass('ribbon-button')) {
                    if (this[0] && this[0].disable) {
                        this[0].disable();
                    }
                }
                else {
                    this.find('.ribbon-button').each(function () {
                        $(this).disable();
                    });
                }
            }

            $.fn.isEnabled = function () {
                if (this[0] && this[0].isEnabled) {
                    return this[0].isEnabled();
                } else {
                    return true;
                }
            }


            that.init(id);

            $.fn.ribbon = that;
        };

    })(jQuery);
     $('.user-popup-card').webuiPopover('destroy').webuiPopover(userPopoverSettings);
    $('.duedate-popup-card').webuiPopover('destroy').webuiPopover({
        width: 270,
        height: 200,
        trigger: 'hover',
        placement: 'auto',
        delay: {
            show: null,
            hide: 300
        },
        content: '<div class="row pt-2 pb-2 pl-2"><div class="col-12 alert-light mb-3"><span class="text-label">Start Date</span><span class="text-title">@Model.StartDate.ToDefaultDateTimeFormat()</span></div><div class="col-12 alert-light mb-3"><span class="text-label">Due Date:</span><span class="text-title">@Model.DueDate.ToDefaultDateTimeFormat()</span></div><div class="col-12 alert-light"><span class="text-label">SLA:</span><span class="text-title">@Model.ServiceSLA</span></div></div>',
    });
    function OnMsgDatabound() {
        $('.user-popup-card').webuiPopover('destroy').webuiPopover(userPopoverSettings);
    }
    function FillFormIo(json, datajson) {
        var formio = $('#formio-container').html();
        if (formio != undefined) {
            var formio = document.getElementById('formio-container');
            LoadFormIo({ uiJson: json, dataJson: datajson }, formio);
        }
    }
    $(document).ready(function () {
        if ('@Model.IsInEditMode' == 'True' && '@Model.HideHeader' == 'False' && '@Model.HideStartDate' == 'False') {
$("#StartDate").kendoDateTimePicker({ value: '@Model.StartDate', format: '@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormat', change: OnStartDateDueDateChange});
        $("#DueDate").kendoDateTimePicker({ value: '@Model.DueDate', format: '@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormat', change: OnStartDateDueDateChange});
        $("#ReminderDate").kendoDateTimePicker({value:'@Model.ReminderDate',format:'@ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormat'});

        }


        $('.content').richText();

        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/cms/Service/ReadAttachedReplies?serviceId="+'@Model.ServiceId',
                    dataType: "json",
                }
            },
        });

        $("#gridNTSReplies").kendoListView({
            dataSource: dataSource,
            dataBound: OnMsgDatabound,
            scrollable: "endless",
            template: kendo.template($("#templateListReplies").html())
        });

        var dataSource = [];
        var i = 1;
        var list = '@Model.StepTasksList';
        for (let li of list) {
            dataSource[i] = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/cms/GetTaskMessageList?taskId="+li.Id,
                    dataType: "json"
                    }
                },
                pageSize: 1000
            });

            $("#listViewMsg_" + li.Id).kendoListView({
            dataSource: dataSource[i],
                dataBound: OnMsgDatabound,
                scrollable: "endless",
                template: kendo.template($("#templateListReplies").html())
            });
            i++;
        }

        var json = $('#Json').val();
        var datajson = $('#DataJson').val();
        FillFormIo(json, datajson);
        $('[data-toggle="popover"]').popover();
        SetOwnerAndRequesterVisibility();
        $('#ribbon').ribbon();

        $('#enable-btn').click(function () {
            $('#del-table-btn').enable();
            $('#del-page-btn').enable();
            $('#save-btn').enable();
            $('#other-btn-2').enable();

            $('#enable-btn').hide();
            $('#disable-btn').show();
        });
        $('#disable-btn').click(function () {
            $('#del-table-btn').disable();
            $('#del-page-btn').disable();
            $('#save-btn').disable();
            $('#other-btn-2').disable();

            $('#disable-btn').hide();
            $('#enable-btn').show();
        });

        FillAttachmentCount();

        FillSharingCount();
        FillNotificationCount();
        FillCommentCount();

        $(".richText-toolbar").hide();
        
    });


    @Html.Raw(Model.ChartItems);
</script>







