@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@model FileUploadViewModel
@{

    Layout = null;
}
<div id="div_@Model.Property" class="dm-uploader row no-gutters">
    <div class="col-3 no-gutters" style="padding-left:0px;">
        <div class="upload-image-div">
            @if (Model.Value.IsNotNullAndNotEmpty())
            {
                <img id="img_@Model.Property" class="upload-image-preview" src="/cms/Document/GetImageMongo?id=@Model.Value" onerror='OnPreviewError(this);' />
            }
            else
            {
                <img id="img_@Model.Property" class="upload-image-preview" style="background-color:gray;" src="~/images/nofile.png" />
            }

        </div>
    </div>
    <div class="col-1">
        <div id="action_@Model.Property" style="display:none">
            <button type="button" class="btn fas fa-trash" title="Delete file" onclick="delete_@(Model.Property)();"></button>
            <button type="button" class="btn fas fa-download" title="Download logo" onclick="downloadFile_@(Model.Property)();"></button>
        </div>
    </div>
    <div class="col-8">
        <div class=" text-muted">Drag &amp; Drop</div>
        <div>OR</div>
        <div class="btn btn-link">
            <span>Browse file</span>
            <input type="file" title='Browse file' />
        </div>
            @*<div class="card h-100">
                <div class="card-header">
                    File List
                </div>*@
                <ul class="list-unstyled p-2 d-flex flex-column col" id="files_@(Model.Property)">
                    <li id="nofiles_@(Model.Property)" class="text-muted text-center empty">No files uploaded.</li>
                </ul>
        @*</div>*@
    </div>
</div>
<script>
    $(document).ready(function () {
        @if (Model.Value.IsNotNullAndNotEmpty())
        {
            @:  $("#action_@Model.Property").show();
        }
        upload_@(Model.Property)();
    });
    function upload_@(Model.Property)() {
        
        @*var extFilter = ["jpg", "jpeg", "png", "gif","xlsx","pdf"];
        if ('@Model.AllowedExtensions' != '') {
            extFilter = '@Model.AllowedExtensions';
        }*@
        var postUrlString = "/Cms/Document/SaveFile";
        if ('@Model.PostUrl' != "" && '@Model.PostUrl' != null && '@Model.PostUrl' != "null") {
            postUrlString = '@Model.PostUrl';
        }

        $("#div_@Model.Property").dmUploader({ //
            url: postUrlString,
            multiple: false,
           /* extFilter: extFilter,*///["jpg", "jpeg", "png", "gif"],
            maxFileSize: 10000000, // 3 Megs
            onDragEnter: function () {
                // Happens when dragging something over the DnD area
                this.addClass('active');
            },
            onDragLeave: function () {
                this.removeClass('active');
            },
            onInit: function () {
            },
            onComplete: function () {
            },
            onNewFile: function (id, file) {
                ui_multi_add_file_@(Model.Property)(id, file);
            },
            onBeforeUpload: function (id) {
                ui_multi_update_file_status_@(Model.Property)(id, 'uploading', 'Uploading...');
                ui_multi_update_file_progress_@(Model.Property)(id, 0, '', true);
            },
            onUploadCanceled: function (id) {
                ui_multi_update_file_status_@(Model.Property)(id, 'warning', 'Canceled by User');
                ui_multi_update_file_progress_@(Model.Property)(id, 0, 'warning', false);
            },
            onUploadProgress: function (id, percent) {
                ui_multi_update_file_progress_@(Model.Property)(id, percent);
            },
            onUploadSuccess: function (id, data) {
                
                $("#img_@Model.Property").attr("src", "/cms/Document/GetImageMongo?id=" + data.fileId);
                $("#@Model.Property").val(data.fileId);
                $("#action_@Model.Property").show();
                 ui_multi_update_file_status_@(Model.Property)(id, 'success', 'Upload Complete');
                ui_multi_update_file_progress_@(Model.Property)(id, 100, 'success', false);
                
                @if (Model.CallbackMethod.IsNotNullAndNotEmpty())
                {
                    @:  window['@Model.CallbackMethod'](data);
                }


            },
            onUploadError: function (id, xhr, status, message) {
                alert("Invalid file uploaded");
                delete_@(Model.Property)();
                ui_multi_update_file_status_@(Model.Property)(id, 'danger', message);
                ui_multi_update_file_progress_@(Model.Property)(id, 0, 'danger', false);
            },
            onFallbackMode: function () {
                alert("fallback")
            },
            onFileSizeError: function (file) {
                alert("filesizerror")
            }
        });
    }
    function delete_@(Model.Property)() {
        
        $("#img_@Model.Property").attr("src", "/images/nofile.png");
         $("#action_@Model.Property").hide();
        $("#@Model.Property").val('');
        $("#div_@Model.Property").dmUploader("reset");
        document.getElementById("files_@Model.Property").innerHTML = "";
    }

    function downloadFile_@(Model.Property)() {
        var id = document.getElementById('@(Model.Property)').value;
        window.open('/cms/Document/GetFileMongo?fileId=' + id, '_blank');
        return false;
    }

    /*
 * Some helper functions to work with our UI and keep our code cleaner
 */

    // Adds an entry to our debug area
    function ui_add_log_@(Model.Property)(message, color) {
        var d = new Date();

        var dateString = (('0' + d.getHours())).slice(-2) + ':' +
            (('0' + d.getMinutes())).slice(-2) + ':' +
            (('0' + d.getSeconds())).slice(-2);

        color = (typeof color === 'undefined' ? 'muted' : color);

        var template = $('#debug-template').text();
        template = template.replace('%%date%%', dateString);
        template = template.replace('%%message%%', message);
        template = template.replace('%%color%%', color);

        $('#debug').find('li.empty').fadeOut(); // remove the 'no messages yet'
        $('#debug').prepend(template);
    }

    // Creates a new file and add it to our list
    function ui_multi_add_file_@(Model.Property)(id, file) {
        var template = $('#files-template').text();
        template = template.replace('%%filename%%', file.name);

        template = $(template);
        template.prop('id', 'uploaderFile' + id);
        template.data('file-id', id);

        $('#files_@(Model.Property)').find('li.empty').fadeOut(); // remove the 'no files yet'
        $('#files_@(Model.Property)').prepend(template);
    }

    // Changes the status messages on our list
    function ui_multi_update_file_status_@(Model.Property)(id, status, message) {
        $('#uploaderFile' + id).find('span').html(message).prop('class', 'status text-' + status);
    }

    // Updates a file progress, depending on the parameters it may animate it or change the color.
    function ui_multi_update_file_progress_@(Model.Property)(id, percent, color, active) {
        
        color = (typeof color === 'undefined' ? false : color);
        active = (typeof active === 'undefined' ? true : active);

        var bar = $('#uploaderFile' + id).find('div.progress-bar');

        bar.width(percent + '%').attr('aria-valuenow', percent);
        bar.toggleClass('progress-bar-striped progress-bar-animated', active);

        if (percent === 0) {
            bar.html('');
        } else {
            bar.html(percent + '%');
        }

        if (color !== false) {
            bar.removeClass('bg-success bg-info bg-warning bg-danger');
            bar.addClass('bg-' + color);
        }
    }
</script>
