@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@{
    ViewData["Title"] = "Portal";
    Layout = "/Views/Shared/_PopupLayout.cshtml";
}
@inject Synergy.App.Common.IUserContext _userContext
@model TaskTimeEntryViewModel
<style>
    .k-upload {
        width: 100%;
    }

    .SYN-Main-wrapper {
        width: 700px;
        height: auto;
        padding: 0;
        margin: 20px auto;
        box-shadow: 4px 4px 10px #CBD0CE;
        border-radius: 6px;
    }

    .SYN-upload-row {
        width: 96%;
        padding: 0;
        margin: 4px auto;
        background-color: #10B0ED;
        border-radius: 6px;
    }

    .SYN-ico-pdf {
        width: 96%;
        padding: 20px;
        margin: 0 auto;
    }

    .SYN-ico-action {
        padding: 26px 4px;
        margin: 4px;
        float: left;
    }

    .SYN-ico-action-eye {
        padding: 26px 4px;
        margin: 4px;
        float: left;
        color: blue;
        cursor: pointer;
    }

    .SYN-ico-action-down {
        padding: 26px 4px;
        margin: 4px;
        float: left;
        color: greenyellow;
        cursor: pointer;
    }

    .SYN-ico-action-del {
        padding: 26px 4px;
        margin: 4px;
        float: left;
        color: red;
        cursor: pointer;
    }

    .SYN-tag-field {
        padding: 0;
        margin: 0;
        font-size: 14px;
        color: #939598;
    }

    .SYN-txt-field {
        padding: 0;
        margin: 0;
    }

    .SYN-row-gap {
        padding: 0;
        margin: 12px 0;
    }

    .SYN-dummy-row {
        width: 96%;
        padding: 4px;
        margin: 4px auto;
    }

    .SYN-list-box {
        width: 96%;
        padding: 0;
        margin: 4px auto;
        background-color: #ffffff;
        border-radius: 6px;
        border: 1px solid #C4C4C4;
    }

    .SYN-sub-docName {
        padding: 2px 0 2px 0;
        font-size: 14px;
    }

    .SYN-sub-white-txt {
        padding: 2px 0 2px 12px;
        font-size: 14px;
    }

    .SYN-inn-title-row {
        width: 96%;
        padding: 0;
        margin: 4px auto;
        background-color: #353535;
        border-radius: 6px;
        color: #fff;
    }

    .SYN-ico-close {
        width: 96%;
        padding: 6px;
        margin: 6px auto;
        height: auto;
    }

    .SYN-ico-expand {
        width: 96%;
        padding: 6px;
        margin: 6px auto;
        height: auto;
    }

    .SYN-inn-row {
        width: 96%;
        padding: 5px;
        margin: 4px auto;
    }

    .SYN-sub-title {
        font-weight: 500;
        font-size: 14px;
    }

    .SYN-white-text {
        font-weight: 500;
        font-size: 16px;
        color: #fff;
    }

    .SYN-main-title {
        font-weight: 500;
        font-size: 16px;
        padding: 16px 0;
    }

   /* .k-button {
        border-color: #353535;
        color: #fff;
        background-color: #353535;
    }*/

   

    .div-time-entry {
        border: 1px solid silver;
        border-radius: 5px;
    }
</style>
<script>
    var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(StatusEnum)))';
    var statusObj = JSON.parse(status);

    var columnDefs = [
        {
            field: "UserName",
            headerName:"Assign To",
            cellRenderer: params => {
                return params.value /*+ "("++")"*/;
            }
        },
        {
            field: "StartDate",
            cellRenderer: params => {
                var date = new Date(params.value);
                return date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
            }
        },
        {
            field: "EndDate",
            cellRenderer: params => {
                var date = new Date(params.value);
                return date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
            }
        },         
        { field: "DurationText" },
        { field: "IsBillable" },      
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinUser' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        GetTimeEntriesData();

        //$.contextMenu('update');
        //$('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-menuBinUser',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    
                                    case 'del':
                                        onDeleteEntry(id);
                                        break;
                                   
                                  
                                    default:
                                }
                            },
                            items: {
                               
                                "del": { name: "Delete", icon: "fas fa-trash" },
                                
                            }
                        };


                }
            }
        });


    });


   function GetTimeEntriesData() {
       document.getElementById("kgdTimeEntries").innerHTML = "";
       gridConfig(
           "kgdTimeEntries",
           "/cms/ReadTaskTimeEntriesData?taskId=@Model.NtsTaskId",
           columnDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
    }

</script>

<form asp-controller="Cms" asp-action="ManageTaskTimeEntry" asp-area="" method="post" class="form-parse-date  form-horizontal" id="frmTaskTimeEntry"
      data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
      data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess" 
      data-ajax="true" data-ajax-method="POST">
    <div class="text-danger" asp-validation-summary="All" style="font-size:14px;"></div>
    <div class="p-3">
        <div id="div-add-time">
            <button type="button" id="addTimeEntry" class="btn btn-primary" onclick="onShowtimeEntry()">Add Time</button>
        </div>
        <div class="row  div-time-entry ml-0 mr-0" id="timeEntryDiv" style="display:none;">
            <div class="form-group col-10">
                <label class="col-form-label">
                    Time Entry For
                </label>
                <div>
                    @*@(Html.Kendo().DropDownListFor(x => x.UserId)
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("ReadUserData", "User", new { @area = "Cms" });
                            });
                        })
                        .Filter(FilterType.Contains)
                        .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                        .DataTextField("Name")
                        .DataValueField("Id")
                        .HtmlAttributes(new { @class = "form-control", @readonly = "readonly" })
                         )*@

                    <input asp-for="UserId" id="UserId" class="form-control" readonly />

                </div>
            </div>
            <div class="form-group col-2">
                <label class="col-form-label">
                    &nbsp;
                </label>
                <div>
                    @*@Html.Kendo().CheckBoxFor(x => x.IsBillable).Label("Is Billable")*@
                    <input type="checkbox" asp-for="IsBillable" id="IsBillable" />
                    <label>Is Billable</label>
                </div>
            </div>
            <div class="form-group col-xs-6 col-sm-4">
                <label class="col-form-label">
                    Start Date
                </label>
                <div>
                    @*@Html.Kendo().DateTimePickerFor(x => x.StartDate).Format(ApplicationConstant.DateAndTime.DefaultDateTimeFormat).HtmlAttributes(new { @style = "width:100%;" }).Events(e => e.Change("OnStartDateDueDateChange"))*@
                    <input asp-for="StartDate" id="StartDate" style="width:100%" />
                </div>
            </div>
            <div class="form-group col-xs-6 col-sm-4">
                <label class="col-form-label">
                    End Date
                </label>
                <div>
                    @*@Html.Kendo().DateTimePickerFor(x => x.EndDate).Format(ApplicationConstant.DateAndTime.DefaultDateTimeFormat).HtmlAttributes(new { @style = "width:100%;" }).Events(e => e.Change("OnStartDateDueDateChange"))*@
                    <input asp-for="EndDate" id="EndDate" style="width:100%" />
                </div>
            </div>

            <div class="form-group col-xs-6 col-sm-4">
                <label class="col-form-label">
                    Total Time
                </label>
                <div>
                    @*@Html.Kendo().TextBoxFor(x => x.Duration).HtmlAttributes(new { @style = "width:100%;" })*@
                    <input asp-for="Duration" type="text" class="form-control" style="width:100%" />
                </div>
            </div>


            <div class="form-group col-12">
                <label class="col-form-label">
                    Comment
                </label>
                <div>
                    @Html.TextAreaFor(x => x.Comment, new { @rows = "2", @cols = "24", @style = "width:100%;border-color:lightgray" })
                </div>
            </div>
            <div class="form-group col-12" style="text-align: right;">
                <button type="submit" class="btn btn-primary" onclick="onSave(event)">Save</button>
                <button type="button" class="btn btn-light" onclick="onHidetimeEntry()">Cancel</button>
            </div>
            @Html.HiddenFor(x => x.NtsTaskId)
            @Html.HiddenFor(x => x.DataAction)
        </div>

        <div class="pt-3">
            @*<button type='button' class='btn btn-primary' onclick='OnCreateUser();'><i class='fa fas fa-plus'></i>&nbsp;Create User </button>
                <br /><br />*@
            <div id="kgdTimeEntries" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
            @*@(Html.Kendo().Grid<TaskTimeEntryViewModel>()
                    .Name("kgdTimeEntries")
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.UserName).ClientTemplate("#=UserName# (#=UserEmail#)").Title("Assign To").Width(200);
                        columns.Bound(p => p.StartDate).Format("{0:dd MMM yyyy hh:mm:ss}").Width(160);
                        columns.Bound(p => p.EndDate).Format("{0:dd MMM yyyy hh:mm:ss}").Width(150);
                        columns.Bound(p => p.DurationText).Title("Total Time").Width(100);
                        columns.Bound(p => p.IsBillable).Width(60);

                        columns.Command(command =>
                        {
                            command.Custom("deleteEntry").Text("<i class='fa fa-trash' title='Delete'></i>").Click("onDeleteEntry").HtmlAttributes(new { @class = "action-icon" });
                        }).Width(50).Title("Action");

                    })
                    //.ColumnMenu(col=>col.Filterable(false))
                    .Height(400)
                    .Editable()
                    .Pageable()
                    .Sortable()
                    .Navigatable()
                    .Resizable(r=>r.Columns(true))
                    .Reorderable(r => r.Columns(true))
                    //.Groupable(g=>g.ShowFooter(false))
                    //.Filterable()
                    .Scrollable()
                    //.Events(events => events.DataBound("onDataBound"))
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .PageSize(20)
                        .AutoSync(true)
                        .ServerOperation(false)
                        .Model(model =>
                        {
                            model.Id(p => p.Id);

                        })
                        .Read("ReadTaskTimeEntriesData", "Cms", new { @area = "", taskId = Model.NtsTaskId })


                    )
                )*@
        </div>
    </div>
</form>
<script type="text/javascript">
    $(document).ready(function () {
        $("#EndDate").kendoDateTimePicker({
            format: "@ApplicationConstant.DateAndTime.DefaultDateTimeFormat",
            change: OnStartDateDueDateChange,
            value:'@Model.EndDate'
        });
        $("#StartDate").kendoDateTimePicker({
            format: "@ApplicationConstant.DateAndTime.DefaultDateTimeFormat",
            change: OnStartDateDueDateChange,
            value:'@Model.StartDate'
        });
        $("#UserId").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
			value: "@Model.UserId",
            filter: "contains",
            dataSource: {
                transport: {
                    read: {
                        url: "/cms/User/ReadUserData",
                    }
                }
            }
        });




    });
    function onSave(e)
    {
        var startDate = $("#StartDate").data("kendoDateTimePicker").value();
        var endDate = $("#EndDate").data("kendoDateTimePicker").value();
        if (startDate >= endDate) {
            kendo.alert("Start date should be less than end date");           
           
        }       
    }
     var onAjaxSuccess = function (res) {

        if (res.success) {

            ShowNotification("Saved Successfully", "success");
            //$("#kgdTimeEntries").data("kendoGrid").dataSource.read();
            GetTimeEntriesData();
            onHidetimeEntry();
        }
        else {
            ResetDate();
            showError(res.error);
        }
    };
    var showError = function (error) {

        //#validation-summary-manageform
        $("#validation-summary").html(error);
        $("#validation-summary").css("display", "block")
    }
    function onDeleteEntry(id) {
       // e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var flag = confirm('Are you sure you want to delete the selected entry?');
        if (flag) {
            $.ajax({
                type: "POST",
                url: '/cms/DeleteTaskTimeEntry',
                data: { id: id },
                success: function (data) {
                    //$("#kgdTimeEntries").data("kendoGrid").dataSource.read();
                    GetTimeEntriesData();
                    kendo.alert("Entry Deleted Successfully");
                },
                dataType: "json",
            });
        }

        return false;
    }
    function OnStartDateDueDateChange() {
        var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        var ed = kendo.toString($("#EndDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        if (new Date(ed) > new Date(sd)) {
            var sec = GetSLAInSeconds(sd, ed);
            $('#Duration').data('durationPicker').setValue(sec);
        }
    }
    function GetSLAInSeconds(startDate, endDate) {
        var query = "startDate=" + startDate + "&endDate=" + endDate;
        var diff = window.parent.UtilityAjax("GetSLAInSeconds", query);
        return diff;
    }
    function GetAddSeconds(startDate, seconds) {
        var query = "date=" + startDate + "&seconds=" + seconds;
        var diff = window.parent.UtilityAjax("AddSeconds", query);
        return diff;
    }
    (function ($) {
        $('#Duration').durationPicker({
            showSeconds: false,
            onChanged: function (newVal, init) {
                if (!init) {
                    var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
                    var ed = GetAddSeconds(sd, newVal);
                    var f = new Date(ed);
                    console.log(f);
                    $("#EndDate").data("kendoDateTimePicker").value(f)
                }

            }
        });
    })(jQuery);
    function onShowtimeEntry() {
        $("#addTimeEntry").hide('slow');
        $("#timeEntryDiv").show('slow');

        var sd = kendo.toString($("#StartDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        var ed = kendo.toString($("#EndDate").data("kendoDateTimePicker").value(), 'yyyy/MM/dd HH:mm');
        if (new Date(ed) > new Date(sd)) {
            var sec = GetSLAInSeconds(sd, ed);
            $('#Duration').data('durationPicker').setValue(sec);
        }

        //alert('hi');
        //OnStartDateDueDateChange()
    }
    function onHidetimeEntry() {

        $("#addTimeEntry").show('slow');
        $("#timeEntryDiv").hide('slow');
    }
</script>
