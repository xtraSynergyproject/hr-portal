@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using Kendo.Mvc.UI;
@{
    Layout = null;// string.Concat("~/Areas/CMS/Views/Shared/_LayoutCMS.cshtml");
}
@model TaskIndexPageTemplateViewModel;
<link href="~/css/cms/NoteIndexPage.css" rel="stylesheet" asp-append-version="true" />
<style>
    .tab-pane {
        background-color: #fff !important;
    }


    .number-text {
        font-size: 11px;
        /*overflow-wrap: break-word;*/
    }

    .nav-link {
        padding: .5rem .5rem !important;
    }

    .nav-item {
        background-color: rgb(239, 239, 239) !important;
    }

    .container {
        position: relative;
    }

    .wrapper {
        position: relative;
        margin: 0 auto;
        overflow: hidden;
        padding: 5px;
        height: 120px;
    }

    .list {
        position: absolute;
        left: 0px;
        top: 0px;
        /*min-width: 1560px;*/
        margin-left: 0px;
        margin-top: 0px;
    }

        .list li {
            display: table-cell;
            position: relative;
            text-align: center;
            cursor: grab;
            cursor: -webkit-grab;
            color: #efefef;
            vertical-align: middle;
        }

    .scroller {
        text-align: center;
        cursor: pointer;
        display: inline-flex;
        padding: 7px;
        padding-top: 11px;
        white-space: no-wrap;
        vertical-align: middle;
        /*    background-color: #fff;*/
        position: absolute;
        font-size: 25px;
    }

    .scroller-right {
        float: right;
        right: -25px;
        top: 36px;
    }

    .scroller-left {
        float: left;
        left: -25px;
        top: 36px;
    }

    h6 {
        font-size: 18px;
    }

    .div-count-active, .div-count:hover {
        background-color: #17a2b8;
        color: #fff !important;
        border-radius: 5px;
    }
</style>
<script>
    var hidWidth;
    var scrollBarWidths = 40;

    var widthOfList = function () {
        var itemsWidth = 0;
        $('.list li').each(function () {
            var itemWidth = $(this).outerWidth();
            itemsWidth += itemWidth;
        });
        return itemsWidth;
    };

    var widthOfHidden = function () {
        return (($('.wrapper').outerWidth()) - widthOfList() - getLeftPosi()) - scrollBarWidths;
    };

    var getLeftPosi = function () {
        return $('.list').position().left;
    };

    var reAdjust = function () {
        if (($('.wrapper').outerWidth()) < widthOfList()) {
            $('.scroller-right').show();
        }
        else {
            $('.scroller-right').hide();
        }

        if (getLeftPosi() < 0) {
            $('.scroller-left').show();
        }
        else {
            $('.item').animate({ left: "-=" + getLeftPosi() + "px" }, 'slow');
            $('.scroller-left').hide();
        }
    }

    reAdjust();

    $(window).on('resize', function (e) {
        reAdjust();
    });

    $('.scroller-right').click(function () {

        $('.scroller-left').fadeIn('slow');
        $('.scroller-right').fadeOut('slow');

        $('.list').animate({ left: "+=" + widthOfHidden() + "px" }, 'slow', function () {

        });
    });

    $('.scroller-left').click(function () {

        $('.scroller-right').fadeIn('slow');
        $('.scroller-left').fadeOut('slow');

        $('.list').animate({ left: "-=" + getLeftPosi() + "px" }, 'slow', function () {

        });
    });
    function ReloadIndexPage(res) {
        var id = '@Model.Page.Id';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.Main.ToString()';
        var action = '@DataActionEnum.Read.ToString()';
        LoadPageById(id, type, source, action);
    }
        function OnCreate() {
            var id = '@Model.Page.Id';
            var type = '@Model.Page.PageType.ToString()';
            var source = '@RequestSourceEnum.Create.ToString()';
            var action = '@DataActionEnum.Create.ToString()';
            LoadPageById(id, type, source, action, null, true, 1200, 600, 'Create Task','ReloadIndexPage');
            return false;
        }
    function OnView(TaskId, TaskStatusCode) {
           // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var id = '@Model.Page.Id';
            var type = '@Model.Page.PageType.ToString()';
            var source = '@RequestSourceEnum.View.ToString()';
            var action = '@DataActionEnum.View.ToString()';
            if (TaskStatusCode ==='TASK_STATUS_DRAFT') {
                source = "Edit";
                action = "Edit";
            }
            LoadPageById(id, type, source, action, TaskId, true, 1200, 600, 'Manage Task', 'ReloadIndexPage');
            return false;
    }
    function OnEdit(TaskId) {
           // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var id = '@Model.Page.Id';
            var type = '@Model.Page.PageType.ToString()';
            var source = '@RequestSourceEnum.Versioning.ToString()';
             var action = '@DataActionEnum.Edit.ToString()';
             LoadPageById(id, type, source, action, TaskId, true, 1200, 600, 'Manage Task', 'ReloadIndexPage');
            return false;
    }


    var deleteEvent = null;
    function OnDelete(TaskId) {
        if ('@Model.EnableDeleteConfirmation'==='True')
        {
            deleteEvent = TaskId;
            $('#confirmDelete').data("kendoDialog").open();

        }
        else
        {
            DeleteItem(TaskId);
        }

    }
    function DeleteItem(TaskId) {
        //var dataItem = $("#kgrid_OwnerOrRequester").data("kendoGrid").dataItem($(e.currentTarget).closest("tr"));
        var id = '@Model.Page.Id';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.Post.ToString()';
        var action = '@RequestSourceEnum.Delete.ToString()';
        LoadPageById(id, type, source, action, TaskId);
        return false;
    }
    function OnDatabound_OwnerOrRequester(e) {
        $("#kgrid_OwnerOrRequester tbody tr").each(function () {
            var currentDataItem = $("#kgrid_OwnerOrRequester").data("kendoGrid").dataItem($(this));
            if (currentDataItem.TaskStatusCode !=='TASK_STATUS_DRAFT') {
                var del = $(this).find(".action-delete");
                del.hide();
            }
        });
    }

    function ConfirmDelete() {
        $('#confirmDelete').data("kendoDialog").close();
        DeleteItem(deleteEvent);
        }

    function FilterAssignedToMeGrid() {
        return {
            indexPageTemplateId: "@Model.Id",
            ownerType: '@NtsActiveUserTypeEnum.Assignee',
            taskStatusCode: $("#status").val()
        };
    }
    function FilterCreatedByGrid() {
        return {
            indexPageTemplateId: "@Model.Id",
            ownerType: '@NtsActiveUserTypeEnum.OwnerOrRequester',
            taskStatusCode: $("#status").val()
        };
    }
    function FilterRequestedByGrid() {
        return {
            indexPageTemplateId: "@Model.Id",
            ownerType: '@NtsActiveUserTypeEnum.Requester',
            taskStatusCode: $("#status").val()
        };
    }
    function FilterSharedWithGrid() {
        return {
            indexPageTemplateId: "@Model.Id",
            ownerType: '@NtsActiveUserTypeEnum.SharedWith',
            taskStatusCode: $("#status").val()
        };
    }
    function FilterSharedByGrid() {
        return {
            indexPageTemplateId: "@Model.Id",
            ownerType: '@NtsActiveUserTypeEnum.SharedBy',
            taskStatusCode: $("#status").val()
        };
    }

    function FilterGrid() {
        var ownerType=$("#ownertype").val();
        return {
            indexPageTemplateId: "@Model.Id",
            @*ownerType: '@NtsActiveUserTypeEnum.Owner',*@
            ownerType: ownerType,
            noteStatusCode: $("#status").val()
        };
    }

    function OnNumberClick(div, ownerType, status) {
        $('.text-item').removeClass('text-item-active');
        $(div).addClass('text-item-active');
        $("#status").val(status);
        $("#ownertype").val(ownerType);
        LoadGrid();
    }



    //function OnNumberClick(div, ownerType, status) {
    //    console.log(ownerType);
    //    SetFilterByStatus(ownerType, status);
    //    $('.div-count').removeClass('div-count-active');
    //    $(div).addClass('div-count-active');
    //    if ($("#ownertype").val() === ownerType) {
    //        $("#numberclicked").val(false);
    //    }
    //    else {
    //        $("#numberclicked").val(true);
    //    }
    //    $("#status").val(status);
    //    $("#ownertype").val(ownerType);
    //    var grid = "#kgrid_" + ownerType;
    //    $(grid).data("kendoGrid").dataSource.read();

    //}
    function OnTabHeaderClick(div, ownerType) {
        SetFilterByStatus(ownerType, null);
        $('.div-count').removeClass('div-count-active');
        $("#status").val(null);
        $("#ownertype").val(ownerType);
        var grid = "#kgrid_" + ownerType;
        $(grid).data("kendoGrid").dataSource.read();
        $("#numberclicked").val(false);
    }
    $('.nav-tabs a').on('shown.bs.tab', function (event) {
        var id = event.target.id;
       // $("#ownertype").val(id);
        //var y = event.relatedTarget.id;
        SetFilterByStatus(id, null);
        var numberclicked = $("#numberclicked").val();
        if (numberclicked === 'false') {
            $("#status").val(null);
            var grid = "#kgrid_" + id;
            $(grid).data("kendoGrid").dataSource.read();
        }
        $("#numberclicked").val(false);
    });
    function SetFilterByStatus(ownerType, status) {
        var title = "";
        switch (ownerType) {
            case "@NtsActiveUserTypeEnum.OwnerOrRequester":
                title = "Created/Requested By Me";
                break;
            case "@NtsActiveUserTypeEnum.Assignee":
                title = "Assigned To Me";
                break;
            case "@NtsActiveUserTypeEnum.SharedBy":
                title = "Shared By Me";
                break;
              case "@NtsActiveUserTypeEnum.SharedWith":
                title = "Shared With Me";
                break;
            default:
        }
        $('.filter-by').find('b').html(title);
        if (status === null) {
            $('.filter-status').hide();
        }
        else {
            var s = "";
            var c = "";
            if (status ==="TASK_STATUS_DRAFT") {
                s = "Draft";
                c = "text-draft";
            }
            else if (status === "TASK_STATUS_INPROGRESS,TASK_STATUS_OVERDUE") {
                s = "In Progress/ Overdue";
                c = "text-inprogress";
            }
            else if (status === "TASK_STATUS_COMPLETE") {
                s = "Completed";
                c = "text-completed";
            }
            else if (status === "TASK_STATUS_REJECT,TASK_STATUS_CANCEL") {
                s = "Rejected/ Canceled";
                c = "text-rejected";
            }
            $('.filter-status').show();
            $('.filter-status').find('b').html(s);
            $('.filter-status').find('b').removeClass();
            $('.filter-status').find('b').addClass('pl-1 pr-1 ' + c);
        }
    }
    $(document).ready(function () {
           if ('@Model.HideSummaryTabs'==='True') {
           document.getElementById("Tab").style.display = "none";
           }
        });

</script>
<div class="row no-gutters pad-20">
    <div class="col-12 pb-3 pt-1">
        <h3>@Model.Page.Title</h3>
    </div>
    <div class="row col-12 pb-3 pt-1">
        <div class="col-3">
            <div class="card text-center">
                <div class="card-header card-head">
                    Assigned To Me
                </div>
                <div class="row card-body">
                    <div class="col-4 text-primary text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.Assignee', 'TASK_STATUS_INPROGRESS,TASK_STATUS_OVERDUE')">
                        <div class="card-number">
                            @Model.AssignedToMeInProgreessOverDueCount
                        </div>
                        <div class="card-number-text">
                            In Progress/ Overdue
                        </div>
                    </div>
                    <div class="col-4 text-success text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.Assignee','TASK_STATUS_COMPLETE')">
                        <div class="card-number">
                            @Model.AssignedToMeCompleteCount
                        </div>
                        <div class="card-number-text">
                            Completed
                        </div>
                    </div>
                    <div class="col-4 text-danger text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.Assignee','TASK_STATUS_REJECT,TASK_STATUS_CANCEL,TASK_STATUS_CLOSE')">
                        <div class="card-number">
                            @Model.AssignedToMeRejectCancelCloseCount
                        </div>
                        <div class="card-number-text">
                            Rejected/ Canceled/ Closed
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-3">
            <div class="card text-center">
                <div class="card-header card-head">
                    Created/Requested By Me
                </div>
                <div class="row card-body">
                    <div class="col-3 text-info text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.OwnerOrRequester', 'TASK_STATUS_DRAFT')">
                        <div class="card-number">
                            @Model.CreatedOrRequestedByMeDraftCount
                        </div>
                        <div class="card-number-text">
                            Draft
                        </div>
                    </div>
                    <div class="col-3 text-primary text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.OwnerOrRequester', 'TASK_STATUS_INPROGRESS,TASK_STATUS_OVERDUE')">
                        <div class="card-number">
                            @Model.CreatedOrRequestedByMeInProgreessOverDueCount
                        </div>
                        <div class="card-number-text">
                            In Progress/ Overdue
                        </div>
                    </div>
                    <div class="col-3 text-success text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.OwnerOrRequester','TASK_STATUS_COMPLETE')">
                        <div class="card-number">
                            @Model.CreatedOrRequestedByMeCompleteCount
                        </div>
                        <div class="card-number-text">
                            Completed
                        </div>
                    </div>
                    <div class="col-3 text-danger text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.OwnerOrRequester','TASK_STATUS_REJECT,TASK_STATUS_CANCEL,TASK_STATUS_CLOSE')">
                        <div class="card-number">
                            @Model.CreatedOrRequestedByMeRejectCancelCloseCount
                        </div>
                        <div class="card-number-text">
                            Rejected/ Canceled/ Closed
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-3">
            <div class="card text-center">
                <div class="card-header card-head">
                    Shared With Me
                </div>
                <div class="row card-body">
                    <div class="col-4 text-primary text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedWith', 'TASK_STATUS_INPROGRESS,TASK_STATUS_OVERDUE')">
                        <div class="card-number">
                            @Model.SharedWithMeInProgressOverDueCount
                        </div>
                        <div class="card-number-text">
                            In Progress/ Overdue
                        </div>
                    </div>
                    <div class="col-4 text-success text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedWith','TASK_STATUS_COMPLETE')">
                        <div class="card-number">
                            @Model.SharedWithMeCompleteCount
                        </div>
                        <div class="card-number-text">
                            Completed
                        </div>
                    </div>
                    <div class="col-4 text-danger text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedWith','TASK_STATUS_REJECT,TASK_STATUS_CANCEL,TASK_STATUS_CLOSE')">
                        <div class="card-number">
                            @Model.SharedWithMeRejectCancelCloseCount
                        </div>
                        <div class="card-number-text">
                            Rejected/ Canceled/ Closed
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-3">
            <div class="card text-center">
                <div class="card-header card-head">
                    Shared By Me
                </div>
                <div class="row card-body">
                    <div class="col-3 text-info text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedBy', 'TASK_STATUS_DRAFT')">
                        <div class="card-number">
                            @Model.SharedByMeDraftCount
                        </div>
                        <div class="card-number-text">
                            Draft
                        </div>
                    </div>
                    <div class="col-3 text-primary text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedBy', 'TASK_STATUS_INPROGRESS,TASK_STATUS_OVERDUE')">
                        <div class="card-number">
                            @Model.SharedByMeInProgreessOverDueCount
                        </div>
                        <div class="card-number-text">
                            In Progress/ Overdue
                        </div>
                    </div>
                    <div class="col-3 text-success text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedBy','TASK_STATUS_COMPLETE')">
                        <div class="card-number">
                            @Model.SharedByMeCompleteCount
                        </div>
                        <div class="card-number-text">
                            Completed
                        </div>
                    </div>
                    <div class="col-3 text-danger text-item" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedBy','TASK_STATUS_REJECT,TASK_STATUS_CANCEL,TASK_STATUS_CLOSE')">
                        <div class="card-number">
                            @Model.SharedByMeRejectCancelCloseCount
                        </div>
                        <div class="card-number-text">
                            Rejected/ Canceled/ Closed
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container col-12">
        <div class="pt-2">
            <button type="submit" class="btn btn-primary" onclick="return OnCreate();"><i class="fa fa-plus pr-1"></i>@Model.CreateButtonText.ToDefaultCreateButtonText()</button>
            @if (!Model.HideSummaryTabs)
            {
                <button type="submit" class="btn btn-light" onclick="return ResetFilter();"><i class="fa fa-refresh pr-1"></i>Reset Filter</button>
            }
        </div>
        <div class="pt-2">
            <script>
                function ResetFilter() {
                    $('.text-item').removeClass('text-item-active');
                    $("#status").val('');
                    $("#ownertype").val('');
                    LoadGrid();
                    return false;
                }
                        var columnDefs = [
                            {
                                headerName: "Actions",
                                field: "TaskId",
                                cellRenderer: params => {
                                    return "<div class='btn-group grid-menu' id='tree-menu' data-idvalue='" + params.value + "' data-status=\"0\" data-status='" + params.data.TaskStatusCode + "'><i class='fas fa-ellipsis-v'></i></div>"
                                }
                            },
                            @foreach (var column in Model.SelectedTableRows)
                            {
                                if (column != null && column.ColumnMetadata != null)
                                {
                                    if (column.ColumnMetadata.DataType == DataColumnTypeEnum.DateTime)
                                    {
                                        @:{field: '@column.ColumnName', headerName: '@column.HeaderName', cellRenderer: params => {return params.value.getDate() + "/" + params.value.getMonth() +"/"+ params.value.getyears();}},
                                    }
                                    else
                                    {
                                        @:{ field: '@column.ColumnName', headerName: '@column.HeaderName' },
                                     }
                                }
                                else
                                {
                                    @:{ field: '@column.ColumnName', headerName: '@column.HeaderName' },
                                }

                            }
                        ];
                $(function () {
                    LoadGrid();
                          $.contextMenu({
                                 selector: '#tree-menu',
                                trigger: 'left',
                                build: function ($trigger, e) {
                                    var id = $trigger.data('idvalue');
                                    var status = $trigger.data('status');
                                     return {
                                                callback: function (key, options) {
                                                    switch (key) {
                                                        case 'edit':
                                                            OnEdit(id);
                                                            break;
                                                        case 'view':
                                                            OnView(id, status);
                                                            break;

                                                        case 'delete':
                                                            OnDelete(id);
                                                            break;

                                                        default:
                                                    }
                                                },
                                                items: {
                                                    @if (Model.IsVersioningButtonVisible)
                                                    {
                                                        @:"edit": { name: "Edit", icon: "fas fa-edit" },
                                                    }
                                                     @if (Model.IsViewButtonVisible)
                                                    {
                                                        @:"view": { name: "View", icon: "fas fa-eye" },
                                                    }
                                                    @if (Model.IsDeleteButtonVisible)
                                                    {
                                                        @:"delete": { name: "Delete", icon: "fas fa-trash" },
                                                    }
                                                }
                                            };
                                }
                            });
                        });
                function LoadGrid() {
                            $("#kgridData").html('');
                    var prms = FilterGrid();
                    var p = 'indexPageTemplateId=' + prms.indexPageTemplateId + '&ownerType=' + prms.ownerType + '&taskStatusCode=' + prms.noteStatusCode;
                            gridConfig(
                                "kgridData",
                                "/cms/LoadTaskIndexPageGrid?"+p,
                                columnDefs,
                                false,
                                true,
                                true,
                                true,
                                1,
                                true,
                                10);
                        }
            </script>
            <div id="kgridData" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
            <input type="hidden" id="status" />
            <input type="hidden" id="ownertype" />
        </div>
        @(Html.Kendo().Dialog()
        .Name("confirmDelete")
        .Title("Confirm Delete")
        .Content(Model.DeleteConfirmationMessage)
        .Width(400)
        .Modal(true)
        .Visible(false)
        .Actions(actions =>
        {
            actions.Add().Text("Cancel");
            actions.Add().Text("Continue Delete").Primary(true).Action("ConfirmDelete");
        }))
    </div>


  
</div>

