@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
}
@using Synergy.App.ViewModel;
@using Kendo.Mvc.UI;
<style>
    .splitter-container, .splitter-container1, .splitter-container2, .splitter-container3 {
        height: 750px;
        width: 100%;
    }

    .left {
        min-width: 350px;
        max-width: 700px;
    }

    .splitter-container {
        height: 100vh !important;
    }

    .k-switch-container {
        font-size: x-small !important;
        font-weight: bold;
    }

    .k-widget.k-switch-on .k-switch-container,
    /* override the mouse over selector */
    .k-switch-on:hover .k-switch-container {
        background-color: red;
        color: #fff;
    }

    .k-widget.k-switch-off .k-switch-container,
    /* override the mouse over selector */
    .k-switch-off:hover .k-switch-container {
        background-color: green;
    }

    .k-switch-label-on, .k-switch-label-off {
        display: block;
    }

    .bre-badge {
        padding: 10px;
    }
</style>

@*@(Html.Kendo().TreeView()
        .Name("treeview").HtmlAttributes( new {@class="treeview"})
        .Events(e=>e.Select("OnSelect"))
        //.DataTextField("Name")
        .TemplateId("treeview-template")
        .LoadOnDemand(true)
        .DataSource(dataSource => dataSource
            .Read(read => read
                .Action("GetBusinessRuleModelList", "Bre",new { area="Bre"})
            )
        )
    )*@

<script id="treeview-template" type="text/kendo-ui-template">
    # if (item.BusinessRuleType=='Logical') { #
    <div class="row">
        <div class="col-12 bre-switch" >
            <input type="checkbox" checked="#:item.IsConditionChecked#" />
            # if (item.Condition=='And') { #
            <span  class="bre-badge badge badge-danger">#: item.Condition #</span>
            # } else {#
            <span class="bre-badge badge badge-info">#: item.Condition#</span>
            # } #
        </div>
    </div>
    # } else {#
    <div class="row" style="min-width:400px;">
        <div class="col-4">
            @*<span class="bre-badge badge badge-primary">#: item.Field#</span>*@
            @*@(Html.Kendo().DropDownList()
          .Name(Guid.NewGuid().ToString())
          .DataTextField("Text")
          .DataValueField("Value")
          //.Events(e => e.Change("change"))
          .BindTo(new List<SelectListItem>() {
              new SelectListItem() {
                  Text = "Black",
                  Value = "1"
              },
              new SelectListItem() {
                  Text = "Orange",
                  Value = "2"
              },
              new SelectListItem() {
                  Text = "Grey",
                  Value = "3"
              }
          })
          .Value("1")
          .HtmlAttributes(new { style = "width: 100%" }).ToClientTemplate()
    )*@
    <input id="@Guid.NewGuid().ToString()" style="width: 100%;" />

        </div>
        <div class="col-4">
            <span class="bre-badge badge badge-success">#: item.OperatorType#</span>
        </div>
        <div class="col-4">
            <span class="bre-badge badge badge-primary">#: item.Value#</span>
        </div>
    </div>
    # } #
    <span data-id="#:item.id#" data-type="#:item.ItemType#" class="tree-menu"><i class="fa fa-ellipsis-h"></i></span>

</script>


<script>
    $(document).ready(function () {
        $("#@Guid.NewGuid().ToString()").kendoDropDownList({
            dataTextField: "Text",
            dataValueField: "Value",
            value: "1",
            dataSource: [
                { Text : "Black", Value : "1"},
                { Text : "Orange", Value : "2"},
                { Text : "Grey", Value : "3"}
            ]
        });
    });
    function OnSelect(e) {
        e.preventDefault();
    }


    $(function () {
        $.contextMenu({
            selector: '.tree-menu',
            trigger: 'left',
            build: function ($trigger, e) {
                var parentId = $trigger.data('id');
                var parentType = $trigger.data('type');

                switch (parentType) {
                    case 'Root':
                        return {

                            callback: function (key, options) {
                                alert(parentId);
                                alert(parentType);
                                switch (key) {
                                    case 'add':

                                    default:
                                }

                            },
                            items: {
                                "add": { name: "Adsd", icon: "fas fa-home" },
                                "cut": { name: "Cut", icon: "cut" },

                            }
                        };
                    default:
                        return {
                            callback: function (key, options) {
                                alert(parentId);
                                alert(parentType);
                            },
                            items: {
                                "edit": { name: "Edit", icon: "edit" },
                                "cut": { name: "Cut", icon: "cut" },
                                "copy": { name: "Copy", icon: "copy" },
                                "paste": { name: "Paste", icon: "paste" },
                                "delete": { name: "Delete", icon: "delete" },
                                "sep1": "---------",
                                "quit": { name: "Quit", icon: function ($element, key, item) { return 'context-menu-icon context-menu-icon-quit'; } }
                            }
                        };
                }


            }
        });
    });

</script>