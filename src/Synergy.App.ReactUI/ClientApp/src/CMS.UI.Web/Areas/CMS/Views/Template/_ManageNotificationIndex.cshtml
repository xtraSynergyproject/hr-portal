@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@{
    ViewData["Title"] = "Portal";
    Layout = null;
    //Layout = "/Views/Shared/_PopupLayout.cshtml";
    //Layout = "/Areas/Cms/Views/Shared/_LayoutCms.cshtml";
}
@inject Synergy.App.Common.IUserContext _userContext
@model NotificationTemplateViewModel

@*<h3>Communication</h3>*@
<script type="text/javascript">
    var onAjaxSuccess = function (res) {
        if (res.success) {
            //alert("Note Success");
            @*if ('@Model.DataAction'=='@DataActionEnum.Create')
            {
                ShowNotification("Saved Successfully", "success");
            }
            if ('@Model.DataAction'=='@DataActionEnum.Edit')
            {
                ShowNotification("Updated Successfully", "success");
            }*@
            ShowNotification("Saved Successfully", "success");
           // window.parent.parent.$("#documentTypeTreeView").data("kendoTreeView").dataSource.read();
            var TemplateId = res.templateId;
            //alert(TemplateId);
            LoadPartailView('@Url.Action("ManageNoteNotification", "Template", new { @area = "Cms"})?templateId=' + TemplateId + '&lo=@(ViewBag.LayoutMode??"")&cbm=@(ViewBag.CallbackMethod??"")', $('#notificationPage'));
        }
        else {
            showError(res.error);
        }
    };
    var showError = function (error) {

        //#validation-summary-manageform
        $("#validation-summary-notenotif").html(error);
        $("#validation-summary-notenotif").css("display", "block");
    }

    function OnNotifiTempEdit(id) {
       
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateNotification", "Template", new { @area="Cms"})?id=' + id;
        win.OpenWindow({ Title: 'Manage Notification Template', Width: 550, Height: 950, Position:'Right' });
        return false;
    }
     
    function OnNotifiTempDelete(id) {
       // e.preventDefault();
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //alert(dataItem.id);
        var flag = confirm('Do you really want to delete the Notification Template?');

        if (flag) {
            $.ajax({
                url:'@Url.Action("DeleteNotification", "Template", new { @area="Cms"})?id=' +id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        GetNotificationTemplateData();
                       // $("#kgrdNotificationTemp").data("kendoGrid").dataSource.read();
                        kendo.alert("Notification Template Deleted Successfully.");
                    }
                },
                error: function (ert) {
                    GetNotificationTemplateData();
                    //$("#kgrdNotificationTemp").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }
    function SaveData(e) {
        
        var ngrid = $("#kgrdNotificationTemp").data("kendoGrid");
        var ccount = ngrid.dataSource.data().length;
        if (ccount > 0) {
            var detail = JSON.stringify(ngrid.dataSource.data());
            $("#NoteNotificationData").val(detail);
        } else {
            alert("No record.");
            e.preventDefault();
            return false;
        }


    }
    function OnNotifiTempCreate(e) {

        //e.preventDefault();
        console.log(e);
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var TemplateId = '@Model.TemplateId';
        var Ntstype = '@Model.NtsType';
        
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateNotification", "Template", new { @area="Cms"})?TemplateId=' + TemplateId + '&ntsType=' + Ntstype;
        win.OpenWindow({ Title: 'Manage Notification Template', Width: 550, Height: 950, Position:'Right' });
        return false;
    }

</script>
<script>
    var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(NtsTypeEnum)))';
    var statusObj = JSON.parse(status);
    var status1 = '@Html.Raw(EnumExtension.EnumToJson(typeof(NtsActiveUserTypeEnum)))';
    var statusObj1 = JSON.parse(status1);

    var columnDefs = [
        { field: "Name" },
        { field: "Subject" },
        { field: "Code" },
        {
            field: "NotificationTo",
            cellRenderer: params => {
                return statusObj1[params.value]; //only for enum
            }
        },
        {
            field: "NtsType",
            cellRenderer: params => {
                return statusObj[params.value]; //only for enum
            }
        },
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinUser' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        GetNotificationTemplateData();



        $.contextMenu({
            selector: '#tree-menuBinUser',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnNotifiTempEdit(id);
                                        break;
                                    case 'del':
                                        OnNotifiTempDelete(id);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },

                            }
                        };


                }
            }
        });


    });


   function GetNotificationTemplateData() {
       document.getElementById("kgrdNotificationTemp").innerHTML = "";
       gridConfig(
           "kgrdNotificationTemp",
           "/cms/Template/ReadNotificationTemplateData?templateId=@Model.TemplateId&ntsType = @Model.NtsType",
           columnDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
    }

</script>
<div style="margin-top: 5px;padding-left: 20px;padding-right: 20px;width: 100%;">
    <form asp-controller="Template" asp-action="ManageNoteNotification" class="form-horizontal"
          data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
          data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
          data-ajax="true" data-ajax-method="POST">
        <div id="validation-summary-notenotif" class="text-danger" asp-validation-summary="All"></div>
        <button type='button' class='btn btn-primary' onclick='OnNotifiTempCreate();'><i class='fa fas fa-plus'></i>&nbsp;Create</button>
        <br /><br />
        <div id="kgrdNotificationTemp" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        @*<div class="row pad-10">
            @(Html.Kendo().Grid<NotificationTemplateViewModel>()
            .Name("kgrdNotificationTemp")
            .Columns(col =>
            {
                col.Command(command =>
                {
                    command.Custom("Edit").Text(" ").Click("OnNotifiTempEdit").IconClass("fa fas fa-pencil").HtmlAttributes(new { @class = "action-icon" });
                    command.Custom("Delete").Text(" ").Click("OnNotifiTempDelete").IconClass("fa fas fa-trash").HtmlAttributes(new { @class = "action-icon" });
                }).Width(120);
                col.Bound(c => c.Name);
                col.Bound(c => c.Subject);
                col.Bound(c => c.Code);
                col.Bound(c => c.NotificationTo);
                col.Bound(c => c.NtsType);

            })
            .ToolBar(toolbar =>
            {
                toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnNotifiTempCreate();'><i class='fa fas fa-plus'></i>&nbsp;Create</button>");
            })
            //.Events(e => e.DataBound("OnDataBound"))
            //.Scrollable(x => x.Enabled(false))
            //.Sortable(srt => srt.Enabled(true))
            .Selectable(select => select.Enabled(false))
            .Pageable()
            .Sortable()
            .Scrollable()
            //.Filterable(filter => filter.Mode(GridFilterMode.Row))
            .HtmlAttributes(new { style = "height:550px;" })
            //.Pageable(pageable => pageable
            //.Refresh(true)
            //.PageSizes(true)
            //.ButtonCount(5))
            .AutoBind(true)
            .DataSource(
                dataSource => dataSource
                .Ajax()
                .PageSize(5)
                .Events(events => events.Error("OnError"))
                .Read(read => read.Action("ReadNotificationTemplateData", "Template", new { @templateId = Model.TemplateId, @ntsType = Model.NtsType }))
                .Model(model => model.Id(p => p.Id))
                )
                .Editable(editable => editable.Mode(GridEditMode.PopUp)
                          .DisplayDeleteConfirmation("Are you sure to Delete ?")
                          )
            )
        </div>*@
        <div class="cms-footer">
            <div class="col-sm-12" style="text-align:right;">
                <input type="submit" class="btn btn-success" onclick="SaveData(event)" value="Save" />
                @if (ViewBag.LayoutMode == LayoutModeEnum.Popup.ToString())
                {
                    <input type="button" class="btn btn-light" value="Close" onclick="return OnClose('@Model.TemplateId');" />
                }
            </div>
            @*<input type="button" class="btn btn-link" value="Save and Preview" onclick="OnSave('Preview')" />
            <input type="button" class="btn btn-success" value="Save and Publish" onclick="OnSave('Publish')" />
            <input type="button" class="btn btn-primary" value="Save" onclick="OnSave()" />*@
        </div>
        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.TemplateId)
        @Html.HiddenFor(x => x.DataAction)
        @Html.HiddenFor(x => x.NtsType)
    </form>
</div>