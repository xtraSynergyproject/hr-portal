@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@{
    ViewData["Title"] = "Template";
    // Layout = null;
    // Layout = "/Views/Shared/_PopupLayout.cshtml";
}
<script src="~/js/positionchartmenu.js"></script>
<link rel="stylesheet" href="~/css/orgchart.css" />

@model ProcessDesignViewModel
<style>
    .cms-footer {
        position:inherit;
    }
    .org-node {
        background-color: #ffff !important;
    }

    .target-border {
        border: 3px solid orange;
    }

    .container-fluid {
        padding-left: 0px !important;
    }

    #wrapper {
        overflow-x: hidden;
    }

    #sidebar-wrapper {
        min-height: 100vh;
        margin-left: -15rem;
        -webkit-transition: margin .25s ease-out;
        -moz-transition: margin .25s ease-out;
        -o-transition: margin .25s ease-out;
        transition: margin .25s ease-out;
    }

        #sidebar-wrapper .sidebar-heading {
            padding: 0.8rem 0.8rem;
            font-size: 1.2rem;
            text-align: center;
            background-color: silver;
        }

        #sidebar-wrapper .list-group {
            width: 17rem;
        }

    #page-content-wrapper {
        min-width: 100vw;
    }

    #wrapper.toggled #sidebar-wrapper {
        margin-left: 0;
    }

    @@media (min-width: 768px) {
        #sidebar-wrapper {
            margin-left: 0;
        }

        #page-content-wrapper {
            min-width: 0;
            width: 100%;
        }

        #wrapper.toggled #sidebar-wrapper {
            margin-left: -17rem;
        }
    }

    .component {
        cursor: move;
    }
</style>

<script type="text/javascript">

    var reset = true, chartMode = 'Normal', hierarchyId, asonDate,
        allowedParentId, hierarchyRootNodeId, isAsOnDate, permissionCSV, isAdmin, loggedInEmpId
        , loggedInPositionId, loggedInUserOrganizationMapping
        , loggedInOrgId, isAdmin, orgAllowedParentId, orgHierarchyRootNodeId;
    //var removedIds = [];

    $(document).ready(function () {
        @*asonDate = $("#AsOnDate").val();
        hierarchyId = $("#HierarchyId").val();
        //assignmentId = $("#AssignmentId").val();
        allowedParentId = $("#AllowedRootNodeId").val();
        hierarchyRootNodeId = $("#HierarchyRootNodeId").val();
        chartMode='@ViewBag.ChartMode';
        permissionCSV = '@ViewBag.PermissonCSV';
        isAsOnDate = '@ViewBag.IsAsOnDate' =='True';
        isAdmin = '@ViewBag.IsAdmin'=='True';
        loggedInEmpId = '@ViewBag.LoggedInEmpId';
        loggedInPositionId = '@ViewBag.LoggedInPositionId';
        loggedInUserOrganizationMapping = '@ViewBag.LoggedInUserOrganizationMapping';
        loggedInOrgId = '@ViewBag.LoggedInOrgId';

        orgAllowedParentId ='@ViewBag.OrgAllowedRootNodeId';
        orgHierarchyRootNodeId ='@ViewBag.OrgHierarchyRootNodeId';*@


        @*$("#menu-heirarchy-date").html('Hierarchy as-of: @ViewBag.AsOnDateDisplay');*@
        InitialLoad();
        $("#processSubmit").click(function (e) {
             var finalData = {};
            finalData.Id = $("#processDesignId").val();@*"@Model.Id";*@
            finalData.TemplateId = "@Model.TemplateId";
            finalData.Components = [];

            //finalData.RemovedItem = removedIds;

            var nodes = document.getElementsByClassName("org-node-3")
            if (nodes!=undefined)
            {
                for (var i = 0; i < nodes.length; i++)
                {
                    var component = {};
                    component.Properties = {}
                    var compdata = nodes[i].children[0].children[2];
                    component.Id = compdata.getAttribute("data-id");
                    var parentId = compdata.getAttribute("data-parent-id");
                    if (parentId == null || parentId == "null" || parentId == undefined || parentId == "undefined") {
                        parentId = "";
                    }
                    component.ParentId = parentId;
                    component.ComponentTypeNo = compdata.getAttribute("data-type");
                    component.ProcessDesignId = $("#processDesignId").val();@*"@Model.Id";*@
                    var prop = nodes[i].children[0].children[3].value;
                    if (prop == null || prop == "null" || prop == undefined || prop == "undefined") {
                        prop = "";
                    }
                    component.Properties = prop ;
                    finalData.Components.push(component);
                }
                var tst = JSON.stringify(finalData);
             ShowLoader($('#template-content'));
                    $.ajax({
                        type: "Post",
                        url: "/cms/ProcessDesign/SaveProcessData",
                        data:
                            { data: JSON.stringify(finalData) },
                        success: function ()
                        {
                            ShowNotification("Saved Successfully", "success");
                            HideLoader($('#template-content'));
                            LoadPartailView('@Url.Action("ManageProcessDesign", "Template", new { @area="Cms",@templateId=Model.TemplateId })', $('#processDesignPage'));
                        },
                        error: function ()
                        {
                            ShowNotification("Please Try Again!", "error");
                            HideLoader($('#template-content'));
                        }
                       // dataType: dataType
                    });
            }
            var t = 0;
                });
    });

    function showLegend() {

    }

    function ExportToPdf() {
        $("#Width").val($(".root-li").width());
        $("#Height").val($(".root-li").height());
        var html = $('.tree').prop('outerHTML');
        $("#Content").val($('<divModel>').text(html).html());
        document.getElementById('exportToPdf').submit();
        return true;
    }
    function OnAsOnDateChange(e) {
        var params = window.location.search;
        params = RemoveParams(params, 'date');
        var url = window.location.pathname + '?'+ params + '&date='+kendo.toString(this.value(), 'yyyy-MM-dd');
        window.location.href = url;
        return false;
    }
    function InitialLoad() {
        var url = "/cms/ProcessDesign/GetChart?processdesignId=@Model.Id&templateId=@Model.TemplateId";
        var li = $('.root-li');
        GetChildList(url, li,'@Model.Id', true, true, null);
    }
    $(document).on('click', function (e) {
        if ($(e.target).closest("#menu").length === 0 && $(e.target).closest(".hr-org-menu").length === 0) {
            $("#meModelu").hide();
        }
    });

     function closeNav() {
       document.getElementById("mymodernsidebar").style.width = "0";
              $("#modernnavopen").show();
            $("#modernnavclose").hide();
    }


    function Goto(type) {
        InitialLoad(null);
    }
    function PositionChartSearchCallBack(Positions) {
      
        var win = GetMainWindow();
        win.CloseWindow();
        return false;
        Search(Positions.replace(',', ''));
        return false;
    }
    function Search(posId) {
        var url = "/hrs/positionchart/GetParentHierarchyWithAllChild?posId=" + posId
            + "&hierarchyId=" + hierarchyId + "&hierarchyRootId=" + hierarchyRootNodeId
            + "&allowedRootId=" + allowedParentId + "&date=" + asonDate;
        var li = $('.root-li');
        GetChildList(url, li, allowedParentId, true, posId);
    }
    function OnSearch() {
        
          var win = GetMainWindow();
        win.iframeOpenUrl = "/hrs/positionchart/search?hierarchyId=" + hierarchyId;
        win.OpenWindow({ Title: 'Search Position', Width: 1200, Height: 650, Position:'Right' });
        return false;
    }
    function FillNode(data, liData, parentLvl) {
        liData.Level = parentLvl;
        var htmlModel= "";
        var template = kendo.template($("#template-org").html());
        html = template(liData);
        var items = $.grep(data, function (element, index) {
            return element.ParentId == liData.Id;
        });
        //var parentLvl = eval(liData.Level);
        if (items != null && items.length > 0) {
            html = html.replace('hr-org-expand', 'hr-org-collapse');
            html += "<ul class='" + parentLvl + "'>"
            for (var i = 0; i < items.length; i++) {
                html += "<li data-parent='" + liData.Id +"' name='" + items[i].ComponentType +"' id='" + items[i].Id +"' lvl='" + (eval(parentLvl) + 1) + "'>";
                html += FillNode(data, items[i], (eval(parentLvl) + 1));
                html += "</li>"
            }
            html += "</ul>";
        }
        return html;
    }

    function GetChildList(url, li, posId, includeParent, searchId) {
        //kendo.ui.progress($('#processDesignPage'), true);
        ShowLoader($("#template-content"));
        $.ajax({
            url: url,
            type: 'GET',
            cache: false,
            //async: false,
            success: function (data) {
              // 
                if (includeParent) {

                    var parentData = $.grep(data, function (element, index) {
                        if (posId != null && posId != undefined && posId!= "") {
                            return element.Id == posId;
                        }
                        else
                        {
                            $("#processDesignId").val(data[0].Id);
                            return element.Id == data[0].Id;
                        }
                    });
                    if (parentData != null && parentData.length > 0) {
                        var parentLvl = eval(li.attr('lvl'));
                        li.html(FillNode(data, parentData[0], parentLvl));
                        li.attr('id', parentData[0].Id);
                    }
                }
                else {

                    var childData = $.grep(data, function (element, index) {
                        return element.ParentId == posId;
                    });

                    if (childData != null && childData.length > 0) {
                        var parentLvl = eval(li.attr('lvl'));
                        var parentId = eval(li.attr('id'));
                        var html = "<ul  class='" + parentLvl + "'>"
                        for (var i = 0; i < childData.length; i++) {
                            html += "<li data-parent='" + parentId +"' name='" + childData[i].ComponentType+"' id='" + childData[i].Id+"' lvl='" + (eval(parentLvl) + 1) + "'>";
                            html += FillNode(data, childData[i], (eval(parentLvl) + 1));
                            html += "</li>"
                        }
                        html += "</ul>";
                        li.append(html);
                    }
                }
                HideLoader($("#template-content"));
                //kendo.ui.progress($('#processDesignPage'), false);
            },
            error: function (errData) {
                //OnError(errData);
                HideLoader($("#template-content"));
            }
        });
        return false;
    }
    function Expand(e, rootli) {
        var node = $(e).parent('div').parent('li');
        var lvl = eval(node.attr('lvl'));
        var id = eval(node.attr('id'));
        var ul = node.find('ul[class=' + lvl + ']');
        if (ul.length <= 0) {
              hierarchyId = $("#HierarchyId").val();
            var url = "/hrs/positionchart/GetChildList?parentId=" + id + "&parentLevel=" + lvl
                + "&includeParent=false&uptoLevel=1&hierarchyId=" + hierarchyId + "&hierarchyRootId=" + hierarchyRootNodeId
                + "&allowedRootId=" + allowedParentId + "&date=" + asonDate;
            var rootli = $('.root-li');
            GetChildList(url, node, id,false,null)
        }
        else {
            ul.show();
            OnComplete();
        }
    }

    function MultiLevelExpandCollapse(posId, level) {
        var node = $('#org-' + posId).parent('li');
        var lvl = eval(node.attr('lvl'));
        var id = eval(node.attr('id'));
        var ul = node.find('ul[class=' + lvl + ']');

        var ec = node.find('.hr-ec');
        ec.removeClass("hr-org-expand");
        ec.addClass("hr-org-collapse");
        if (ul.length > 0) {
            ul.remove();
        }
        hierarchyId = $("#HierarchyId").val();
        var url = "/hrs/positionchart/GetChildList?parentId=" + id + "&parentLevel=" + lvl
            + "&includeParent=false&uptoLevel=" + level+"&hierarchyId=" + hierarchyId + "&hierarchyRootId=" + hierarchyRootNodeId
            + "&allowedRootId=" + allowedParentId + "&date=" + asonDate;
        GetChildList(url, node, id, false, null)
    }
    function CollapseAll(posId) {
        var node = $('#org-' + posId).parent('li');
        var lvl = eval(node.attr('lvl'));
        var ec = node.find('.hr-ec');
        ec.removeClass("hr-org-collapse");
        ec.addClass( "hr-org-expand");
        var ul = node.find('ul[class=' + lvl + ']');
        ul.remove();
        OnComplete();
    }
    function Collapse(e, rootli) {
        var node = $(e).parent('div').parent('li');
        var lvl = eval(node.attr('lvl'));
        var ul = node.find('ul[class=' + lvl + ']');
        ul.remove();
        OnComplete();
    }
    function OnExpandCollapseClick(e) {
        var rootli = $('.root-li');
        OnBegin();
        var isExpand = $(e).hasClass('hr-org-expand');
        $(e).toggleClass('hr-org-expand hr-org-collapse');
        if (isExpand) {
            Expand(e, rootli);
        }
        else {
            Collapse(e, rootli);
        }
    }

    function OnManage(source, posId, relationshipId, hierarchyId) {
        var rsv = encodeURIComponent("/hrs/positionchart/index?a=1");
        if (type1 == "PositionExcel") {
            rsv = encodeURIComponent("/hrs/positionchart/index?type=PositionExcel");
        }
        var url = "/hrs/positionhierarchy/" + source + (posId == null ? "" : "?posId=" + posId) + "&relationshipId=" + relationshipId + "&hierarchyId=" + hierarchyId  + "&ru=" + rsv;
        window.location.href = url;
        return false;
    }
    function OnPositionManage(source, id) {
        var rsv = encodeURIComponent("/hrs/positionchart/index?a=1");
        if (type1 == "PositionExcel") {
            rsv = encodeURIComponent("/hrs/positionchart/index?type=PositionExcel");
        }
        var url = "/hrs/position/" + source + (id == null ? "" : "?id=" + id + "&ru=" + rsv + "&empId=" + empId + "&posId=" + posId + "&hierarchyId=" + hierarchyId + "&orgId=" + orgId + "&date=" + asonDate);
        window.location.href = url;
    }
    function OnAssignmnetManage(source, id) {
        var rsv = encodeURIComponent("/hrs/positionchart/index?a=1");
        if (type1 == "PositionExcel") {
            rsv = encodeURIComponent("/hrs/positionchart/index?type=PositionExcel");
        }
        var url = "/hrs/assignment/" + source + (id == null ? "" : "?id=" + id + "&ru=" + rsv + "&empId=" + empId + "&posId=" + posId + "&hierarchyId=" + hierarchyId + "&orgId=" + orgId + "&date=" + asonDate);
        window.location.href = url;
    }
    function OnPersonManage(source, id) {
        var rsv = encodeURIComponent("/hrs/positionchart/index?posId=" + posId);
        if (type1 == "PositionExcel") {
            rsv = encodeURIComponent("/hrs/positionchart/index?type=PositionExcel");
        }
        var url = "/hrs/person/" + source + (id == null ? "" : "?id=" + id + "&ru=" + rsv + "&empId=" + empId + "&posId=" + posId + "&hierarchyId=" + hierarchyId + "&orgId=" + orgId + "&date=" + asonDate);
        window.location.href = url;
    }
    function CloseNote(redirect, tempId) {
        var rsv = encodeURIComponent("/hrs/positionchart/index?posId=" + posId);
        if (type1 == "PositionExcel") {
            rsv = encodeURIComponent("/hrs/positionchart/index?type=PositionExcel");
        }
      
        var win = GetMainWindow();
        win.CloseWindow();
        return false;

        if (redirect)
            window.location.href = "/nts/Note/Manage?tagtotype=Person&tagtoid=" + empId + "&templateMasterId=" + tempId + "&ru=" + rsv;
    }
    function CloseTask(redirect, tempId) {
        var rsv = encodeURIComponent("/hrs/positionchart/index?posId=" + posId);
        if (type1 == "PositionExcel") {
            rsv = encodeURIComponent("/hrs/positionchart/index?type=PositionExcel");
        }
       
        var win = GetMainWindow();
        win.CloseWindow();
        return false;
        if (redirect)
            window.location.href = "/nts/Task/Manage?assignTo=" + userId + "&templateMasterId=" + tempId + "&ru=" + rsv;
    }
    function CloseService(redirect, tempId) {
        var rsv = encodeURIComponent("/hrs/positionchart/index?posId=" + posId);
        if (type1 == "PositionExcel") {
            rsv = encodeURIComponent("/hrs/positionchart/index?type=PositionExcel");
        }
       
        var win = GetMainWindow();
        win.CloseWindow();
        return false;
        if (redirect)
            window.location.href = "/nts/Service/Manage?userId=" + userId + "&templateMasterId=" + tempId + "&ru=" + rsv;
    }
    function SelectCallBack(posId, jobId, empId, orgId) {

        var rs = $("#RequestSource").val();
        if (rs == "Recruitment") {
           //
            var ru = "/rec/rechome/recsummary";
            ru = encodeURIComponent(ru);
            window.location.href = "/nts/service/serviceflow?layoutMode=Iframe&templateMasterCode=JOB_REQUEST&udfName1=positionId&udfValue1=" + posId + "&udfCode1=" + posId + "&udfName2=jobId&udfValue2=" + jobId + "&udfCode2=" + jobId + "&udfName3=orgId&udfValue3=" + orgId + "&udfCode3=" + orgId + "&udfName4=noOfPosition&udfValue4=1&udfCode4=1&ru=" + ru;
            //window.location.href = "/nts/service/serviceflow?layoutMode=Iframe&templateMasterCode=JOB_REQUEST&udfName1=positionId&udfValue1=" + posId + "&udfName2=jobId&udfValue2=" + jobId + "&udfCode2=" + jobId + "&udfName3=empId&udfValue3=" + empId + "&udfName4=orgId&udfCode4=" + orgId + "&udfValue4=" + orgId +"&ru="+ru;
            //window.location.href = "/nts/service/manage?layoutMode=Iframe&templateMasterCode=JOB_REQUEST&udfName1=positionId&udfValue1=" + posId + "&udfName2=jobId&udfValue2=" + jobId;
        }
    }
    function dragstart(ev) {
        ev.dataTransfer.setData("text", ev.target.id);

    }
    function drop(ev) {
        ev.preventDefault();
        var type =eval( ev.dataTransfer.getData("text"));
       // ev.target.appendChild(document.getElementById(data));
        var parentli = $(ev.target).closest("li");
        var orgnode = $(ev.target).closest(".org-node");
        orgnode.removeClass("target-border");
        addChild(type, parentli);
    }
    function dragover(ev) {
        var parent = $(ev.target).closest(".org-node");
        var parentLi = $(ev.target).closest("li");
        if (parent !== null && parentLi !== null) {
            var type = eval(parentLi.attr('name'));
            if (type!==6 && type!==2) {
                ev.preventDefault();
                parent.addClass("target-border");
            }
        }
    }
    function dragleave(ev) {
        var parent = $(ev.target).closest(".org-node");

        if (parent != null) {
            ev.preventDefault();
            parent.removeClass("target-border");
        }
    }
    function addChild(comptype, parentli) {
       //
        comptype = eval(comptype);
        var ul = parentli.find('ul:first');
        if (ul.html() !== undefined) {
            var parentLvl = eval(parentli.attr('lvl'));
            var parentId = parentli.attr('id');
            var childData = getNewNode(comptype, parentId, parentLvl);
            var html = "<li data-parent='" + parentId +"' name='" + comptype+"' id='" + childData.Id + "' lvl='" + (eval(parentLvl) + 1) + "'>";
            var template = kendo.template($("#template-org").html());
            html += template(childData);
            if (comptype === 6) {

                html += "<ul class='" + childData.Level + "'>";
                var trueData = getNewNode(8, childData.Id, childData.Level);
                html += "<li data-parent='" + childData.Id + "' name='8' id='" + trueData.Id + "' lvl='" + (eval(childData.Level) + 1) + "'>";
                var tt = kendo.template($("#template-org").html());
                html += tt(trueData);
                html += "</li>";

                var falseData = getNewNode(9, childData.Id, childData.Level);
                html += "<li data-parent='" + childData.Id + "' name='8' id='" + falseData.Id + "' lvl='" + (eval(childData.Level) + 1) + "'>";
                var ft = kendo.template($("#template-org").html());
                html += ft(falseData);
                html += "</li>";
                html += "</ul>";
            }
            // for parent line
            if (comptype == 10) {

            }
            html += "</li>";

           ul.append(html);
        }
        else {
            var parentLvl = eval(parentli.attr('lvl'));
            var parentId = parentli.attr('id');
            var html = "<ul class='" + parentLvl + "'>";
            var childData = getNewNode(comptype, parentId, parentLvl);
            html += "<li data-parent='" + parentId + "' name='" + comptype + "' id='" + childData.Id + "' lvl='" + (eval(parentLvl) + 1) + "'>";
            var template = kendo.template($("#template-org").html());
            html += template(childData);
            if (comptype === 6) {
                html += "<ul class='" + childData.Level + "'>";
                var trueData = getNewNode(8, childData.Id, childData.Level);
                html += "<li data-parent='" + childData.Id + "' name='8' id='" + trueData.Id + "' lvl='" + (eval(childData.Level) + 1) + "'>";
                var tt = kendo.template($("#template-org").html());
                html += tt(trueData);
                html += "</li>";

                var falseData = getNewNode(9, childData.Id, childData.Level);
                html += "<li data-parent='" + childData.Id + "' name='8' id='" + falseData.Id + "' lvl='" + (eval(childData.Level) + 1) + "'>";
                var ft = kendo.template($("#template-org").html());
                html += ft(falseData);
                html += "</li>";
                html += "</ul>";
            }
            html += "</li>";

            html += "</ul>";
            parentli.append(html);
        }
    }
    function getNewNode(type, parentId, parentLvl) {
        var typeInt = 1;
        var name = 'Start';
        var css = 'comp-none';
        if (type ===2) {
            name = 'Stop';
            css = 'comp-stop';
        }
        else if (type === 4) {
            name = 'Step Task';
            css = 'comp-step-task';
        }
        else if (type === 6) {
            name = 'Decision Script';
            css = 'comp-decision-script';
        }
        else if (type === 7) {
            name = 'Execution Script';
            css = 'comp-execution-script';
        }
        else if (type === 8) {
            name = 'True';
            css = 'comp-true';
        }
        else if (type === 9) {
            name = 'False';
            css = 'comp-false';
        }
        else if (type === 10) {
            name = 'Line';
            css = 'comp-false';
        }

        var data = {
            Id: GenerateGuid(),
            ComponentType: type,
            Name:name,
            ParentId: parentId,
            Level: (eval(parentLvl) + 1),
            CssClass:css

        };
        return data;
    }

    $(function () {

        $.contextMenu({
            selector: '.chart-menu',
            trigger: 'left',
            build: function ($trigger, e) {

                var Id = $trigger.data('id');
                var parentType = eval($trigger.data('type'));
                var selectParentId = $trigger.data('parentId');

                @*var menuitems = {
                };
                if ('@Model.DataAction' == '@DataActionEnum.Create') {
                    menuitems = {
                        "prop": { name: "Properties", icon: "fas fa-file-edit" }
                    };
                }
                else {
                    menuitems = {
                        "prop": { name: "Properties", icon: "fas fa-file-edit" },
                        "delete": { name: "Delete", icon: "fas fa-trash" },
                    };
                }*@
                switch (parentType) {
                    case 3:
                    case 4:
                           return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'prop':
                                        $("#sidebarHeader").html("Properties");
                                        document.getElementById("mySidenavPageCategory").style.width = "750px";
                                        var prop = $("#prop_" + Id).val();
                                        if (prop == null || prop == "null" || prop == undefined || prop == "undefined") {
                                            prop = "";
                                        }
                                      
                                         $.ajax({
                                                type: "Post",
                                                url: "/cms/ProcessDesign/ManageStepTask",
                                                data:
                                                {
                                                templateId: '@Model.TemplateId',
                                                compId:Id ,
                                                blockprop: prop,
                                                },
                                                success: function (data)
                                                {
                                                $('#create-category').html(data);
                                                HideLoader($('#template-content'));

                                                },
                                                error: function ()
                                                {
                                                ShowNotification("Please Try Again!", "error");
                                                HideLoader($('#template-content'));
                                                }
                                        });
                                       @*LoadPartailView('@Url.Action("ManageStepTask", "ProcessDesign", new { @area = "Cms" })?templateId=@Model.TemplateId&compId=' + Id + "&blockprop=" + prop, $('#create-category'));*@
                                        $("#overlay").addClass("overlay");
                                        break;
                                    case 'delete':

                                        //removedIds.push(Id);
                                        document.getElementById(Id).remove();

                                        @*$.ajax({
                                            type: "Get",
                                            url: "/cms/ProcessDesign/DeleteComponent?CompId=" + Id,
                                            success: function (data) {

                                                ShowNotification("Delete Successfully", "success");
                                                LoadPartailView('@Url.Action("ManageProcessDesign", "Template", new { @area="Cms",@templateId=Model.TemplateId})', $('#processDesignPage'));
                                            },
                                            error: function () {

                                                ShowNotification("Please Try Again!", "error");
                                                HideLoader($('#template-content'));

                                            }

                                        });*@
                                        break;
                                    default:
                                }
                               },
                            items: {
                                "prop": { name: "Properties", icon: "fas fa-file-edit" },
                                "delete": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };
                    case 5:
                    case 6:
                         return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'prop':
                                        $("#sidebarHeader").html("Decision Script");
                                        document.getElementById("mySidenavPageCategory").style.width = "700px";
                                        var prop = $("#prop_" + Id).val();
                                        if (prop == null || prop == "null" || prop == undefined || prop == "undefined") {
                                            prop = "";
                                        }
                                        LoadPartailView('@Url.Action("ManageDecisionScript", "ProcessDesign", new { @area = "Cms" })?compId=' + Id + "&blockprop=" + prop, $('#create-category'));
                                        $("#overlay").addClass("overlay");
                                        break;
                                    case 'delete':
                                        document.getElementById(Id).remove();
                                        @*$.ajax({
                                            type: "Get",
                                            url: "/cms/ProcessDesign/DeleteComponent?CompId=" + Id,

                                            success: function (data) {

                                                ShowNotification("Delete Successfully", "success");
                                                LoadPartailView('@Url.Action("ManageProcessDesign", "Template", new { @area="Cms",@templateId=Model.TemplateId})', $('#processDesignPage'));
                                            },
                                            error: function () {

                                                ShowNotification("Please Try Again!", "error");
                                                HideLoader($('#template-content'));
                                            }

                                        });*@
                                        break;
                                    default:
                                }
                             },
                            items: {
                                "prop": { name: "Properties", icon: "fas fa-file-edit" },
                                "delete": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };
                    case 7:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'prop':
                                        $("#sidebarHeader").html("Execution Script");
                                        document.getElementById("mySidenavPageCategory").style.width = "700px";
                                        var prop = $("#prop_" + Id).val();
                                        if (prop == null || prop == "null" || prop == undefined || prop == "undefined")
                                        {
                                            prop = "";
                                        }

                                        LoadPartailView('@Url.Action("ManageExecutionScript", "ProcessDesign", new { @area = "Cms" })?compId=' + Id + "&blockprop=" + prop, $('#create-category'));
                                        $("#overlay").addClass("overlay");
                                        break;
                                    case 'delete':
                                        document.getElementById(Id).remove();
                                        @*$.ajax({
                                            type: "Get",
                                            url: "/cms/ProcessDesign/DeleteComponent?CompId=" + Id,

                                            success: function (data) {

                                                ShowNotification("Delete Successfully", "success");
                                                LoadPartailView('@Url.Action("ManageProcessDesign", "Template", new { @area="Cms",@templateId=Model.TemplateId})', $('#processDesignPage'));
                                            },
                                            error: function () {

                                                ShowNotification("Please Try Again!", "error");
                                                HideLoader($('#template-content'));
                                            }

                                        });*@
                                        break;
                                    default:
                                }
                            },
                            items: {
                                "prop": { name: "Properties", icon: "fas fa-file-edit" },
                                "delete": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };
                    case 2:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'delete':
                                        document.getElementById(Id).remove();
                                        @*$("#sidebarHeader").html("Create Category");
                                        document.getElementById("mySidenavPageCategory").style.width = "450px";
                                        LoadPartailView('@Url.Action("Create", "TemplateCategory", new { @area = "Cms" })?type=' + parentId, $('#create-category'));
                                        $("#overlay").addClass("overlay");*@
                                        break;
                                    default:
                                }
                            },
                            items: {
                                "delete": { name: "Delete", icon: "fas fa-trash" },
                            }
                        };

                    default:
                        return {
                            callback: function (key, options) {
                              //  alert(parentId);
                               // alert(parentType);
                            },
                            items: {

                            }
                        };
                }


            }
        });
    });

    function closeNavCategory() {
        document.getElementById("mySidenavPageCategory").style.width = "0";
        $("#overlay").removeClass("overlay");
    }


</script>
<input type="hidden" name="Id" value="@Model.Id" id="processDesignId" />
@Html.HiddenFor(x => x.TemplateId)
<div style="margin-top: 5px;padding-left: 20px;padding-right: 20px;width: 100%;">
    <div class="d-flex" id="wrapper">
        <div class="bg-light border-right" id="sidebar-wrapper">
            <div class="sidebar-heading">Components</div>
            <div class="list-group list-group-flush">
                <div class="row no-gutters component" id="4" draggable="true" ondragstart="dragstart(event)">
                    <div class="col-2 chart-item comp-step-task" style="font-size:20px;padding-top:10px;padding-left:8px;color:#fff;">
                        <i class="fa fa-folder-tree"></i>
                    </div>
                    <div class="col-8 chart-item chart-text" style="white-space:normal;font-size:16px;">
                        Step Task
                    </div>
                    <div class="col-2 chart-item chart-text" style="white-space:normal;font-size:24px;padding-top:10px;">
                        <i class="fa fal fa-arrows"></i>
                    </div>
                </div>
                <div class="row no-gutters component" id="6" draggable="true" ondragstart="dragstart(event)">
                    <div class="col-2 chart-item comp-decision-script" style="font-size:20px;padding-top:10px;padding-left:8px;color:#fff;">
                        <i class="fa fa-sitemap"></i>
                    </div>
                    <div class="col-8 chart-item chart-text" style="white-space:normal;font-size:16px;">
                        Decision Script
                    </div>
                    <div class="col-2 chart-item chart-text" style="white-space:normal;font-size:24px;padding-top:10px;">
                        <i class="fa fal fa-arrows"></i>
                    </div>
                </div>
                <div class="row no-gutters component" id="7" draggable="true" ondragstart="dragstart(event)">
                    <div class="col-2 chart-item comp-execution-script" style="font-size:20px;padding-top:10px;padding-left:8px;color:#fff;">
                        <i class="fa fa-scroll"></i>
                    </div>
                    <div class="col-8 chart-item chart-text" style="white-space:normal;font-size:16px;">
                        Execution Script
                    </div>
                    <div class="col-2 chart-item chart-text" style="white-space:normal;font-size:24px;padding-top:10px;">
                        <i class="fa fal fa-arrows"></i>
                    </div>
                </div>
                @*<div class="row no-gutters component" id="10" draggable="true" ondragstart="dragstart(event)">
                        <div class="col-2 chart-item comp-execution-script" style="font-size:20px;padding-top:10px;padding-left:8px;color:#fff;">
                            <i class="fa fa-arrows-v"></i>
                        </div>
                        <div class="col-8 chart-item chart-text" style="white-space:normal;font-size:16px;">
                            Add line
                        </div>
                        <div class="col-2 chart-item chart-text" style="white-space:normal;font-size:24px;padding-top:10px;">
                            <i class="fa fal fa-arrows"></i>
                        </div>
                    </div>*@
                <div class="row no-gutters component" id="2" draggable="true" ondragstart="dragstart(event)">
                    <div class="col-2 chart-item comp-stop" style="font-size:20px;padding-top:10px;padding-left:8px;color:#fff;">
                        <i class="fa fa-stop"></i>
                    </div>
                    <div class="col-8 chart-item chart-text" style="white-space:normal;font-size:16px;">
                        Stop
                    </div>
                    <div class="col-2 chart-item chart-text" style="white-space:normal;font-size:24px;padding-top:10px;">
                        <i class="fa fal fa-arrows"></i>
                    </div>
                </div>
            </div>
        </div>
        <div id="page-content-wrapper" style="overflow:auto;">
            <button class="btn btn-primary btn-sm" id="menu-toggle"><i class="fa fa-bars"></i></button>
            <div class="container" id="appWrapper">
                <script type="text/x-kendo-template" id="template-org">
                    <div class="org-node org-node-3" name="#:data.ComponentType#" id="org-#:data.Id#" ondrop="drop(event)" ondragover="dragover(event)"  ondragleave="dragleave(event)">
                    <div class="row no-gutters">
                        <div class="col-2 chart-item #:data.CssClass#" style="font-size:16px;padding-top:10px">
                            # var type=eval(data.ComponentType); if (type===1) { #
                              <i  class="fa fa-play"></i>
                            # }  else if (type===2) {#
                                <i class="fa fa-stop"></i>
                             # }  else if (type===4) {#
                                <i class="fa fa-folder-tree"></i>
                           # }  else if (type===6) {#
                                <i class="fa fa-sitemap"></i>
                      # }  else if (type===7) {#
                                <i class="fa fa-scroll"></i>
                        # }  else if (type===8) {#
                          <i class="fa fa-check"></i>
                         # }  else if (type===9) {#
                          <i class="fa fa-times"></i>
                       # }  else {#
                             <i class="fa fa-question"></i>
                       # } #
                        </div>

                        <div class="col-8 chart-item chart-text" style="white-space:normal;">
                            #:Name #
                        </div>
                         # var t=eval(data.ComponentType); if (t===2||t===3||t===4||t===5||t===6||t===7) { #
                     <div class=" col-2 chart-menu" data-id="#:data.Id#" data-type="#:data.ComponentType#" data-parent-id="#:data.ParentId#">
                            <span  class="fa fa-ellipsis-v">
                            </span>
                        </div>
                         #} else { #
                        <div class=" col-2" data-id="#:data.Id#" data-type="#:data.ComponentType#" data-parent-id="#:data.ParentId#" >

                        </div>
                      # } #
                    <input type="hidden" id="prop_#:data.Id#" value="#:data.Properties#"/>
                    </div>
                    </div>
                </script>
                <div class="tree" style="display:inline-flex;min-width:100%;text-align:center;">
                    <ul class="0">
                        <li class="root-li" name="1" lvl='0' id="0">
                        </li>
                    </ul>
                </div>

            </div>
        </div>

    </div>
    <div class="cms-footer">
        <input type="button" class="btn btn-primary" value="Save" id="processSubmit" />
         @if (ViewBag.LayoutMode == LayoutModeEnum.Popup.ToString())
                {
                    <input type="button" class="btn btn-light" value="Close" onclick="return OnClose('@Model.TemplateId');" />
                }
    </div>
</div>

<div id="create-category-div">
    <div id="mySidenavPageCategory" class="sidenav">
        <h1 class="cms-panel-header-name" id="sidebarHeader">Create Category</h1>
        <a href="javascript:void(0)" class="closebtn" onclick="closeNavCategory()" title="Close">&times;</a>
        <hr />
        <div id="create-category" class="row no-gutters slidenav-flow">
        </div>
    </div>
</div>

<script>
    $("#menu-toggle").click(function (e) {
        e.preventDefault();
        $("#wrapper").toggleClass("toggled");
    });
</script>







