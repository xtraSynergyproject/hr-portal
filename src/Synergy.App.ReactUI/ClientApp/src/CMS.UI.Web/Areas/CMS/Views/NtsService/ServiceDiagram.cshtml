@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Diagrams;
@using Syncfusion.EJ2.Navigations;
@{

    Layout = "/Views/Shared/_PopupLayout.cshtml";
}

<div>
    <div style="width: 100%;padding:0px;height:100%;">
        @*<div class="sb-mobile-palette-bar">
                <div id="palette-icon" style="float: right;" role="button" class="e-ddb-icons1 e-toggle-palette"></div>
            </div>*@
        @*<div id="palette-space" class="sb-mobile-palette">

                @Html.EJS().SymbolPalette("symbolPalette").Palettes(ViewBag.Palette).GetSymbolInfo("getSymbolInfo").ExpandMode(ExpandMode.Multiple).Width("100%").Height("570px").SymbolHeight(48).SymbolWidth(48).SymbolMargin(ViewBag.margin).Render()


            </div>*@
        <div id="diagram-space" class="sb-mobile-diagram">
            @Html.EJS().Diagram("container").Width("100%").Constraints(Syncfusion.EJ2.Diagrams.DiagramConstraints.Default | (Syncfusion.EJ2.Diagrams.DiagramConstraints.LineRouting)).Height("100%").DragEnter("dragEnter").ContextMenuOpen("contextMenuOpen").ContextMenuClick("contextMenuClick").ContextMenuSettings(c => c.Show(true).ShowCustomMenuOnly(true).Items(ViewBag.items)).SnapSettings(new Syncfusion.EJ2.Diagrams.DiagramSnapSettings() { Constraints = Syncfusion.EJ2.Diagrams.SnapConstraints.None }).SelectedItems(new DiagramSelector() { Constraints = SelectorConstraints.All & ~SelectorConstraints.Rotate }).GetConnectorDefaults("getConnectorDefaults").GetNodeDefaults("getNodeDefaults").Nodes(ViewBag.nodes).Connectors(ViewBag.connectors).Render()


        </div>
    </div>
</div>
<style>

    .sb-mobile-palette {
        width: 220px;
        height: 570px;
        float: left;
    }

    .sb-mobile-palette-bar {
        display: none;
    }

    .sb-mobile-diagram {
        width: 100%;
        height: 650px;
        float: left;
        border-left: none;
        padding: 0px;
    }

    @@media (max-width: 550px) {
        .sb-mobile-palette {
            z-index: 19;
            position: absolute;
            display: none;
            transition: transform 300ms linear, visibility 0s linear 300ms;
            width: 39%;
            height: 100%;
        }

        .sb-mobile-diagram {
            width: 100%;
            height: 100%;
            float: left;
            left: 0px;
        }

        .sb-mobile-palette-bar {
            display: block;
            width: 100%;
            background: #fafafa;
            padding: 10px 10px;
            border: 0.5px solid #e0e0e0;
            min-height: 40px;
        }

        #palette-icon {
            font-size: 20px;
        }
    }

    .sb-mobile-palette-open {
        position: absolute;
        display: block;
        right: 15px;
    }

    .material #swimlaneDiagram #palette-space .e-accordion {
        border: none;
    }

    .material #swimlaneDiagram #palette-space {
        border: 1px solid rgba(0, 0, 0, 0.12);
    }

    .fabric #swimlaneDiagram .sb-mobile-diagram {
        border-left: 1px solid rgba(0, 0, 0, 0.12);
    }

    .bootstrap #swimlaneDiagram .sb-mobile-diagram {
        height: 554px;
        margin-top: 5px;
        border-radius: 4px;
        border-left: 1px solid rgba(0, 0, 0, 0.12);
    }
</style>

<script>

    function applyConnectorStyle(dashedLine, sourceDec, isRounded, type, strokeWidth) {
        var diagram = document.getElementById("container").ej2_instances[0];
        for (var i = 0; i < diagram.connectors.length; i++) {
            var connector = diagram.connectors[i];
            connector.style.strokeWidth = !strokeWidth ? 2 : strokeWidth;
            connector.type = type;
            connector.cornerRadius = isRounded ? 5 : 0;
            connector.style.strokeDashArray = dashedLine ? '5,5' : '';
            if (sourceDec) {
                connector.sourceDecorator = {
                    style: {
                        strokeColor: '#6f409f',
                        fill: '#6f409f', strokeWidth: 2
                    }, shape: 'Circle'
                };
            } else {
                connector.sourceDecorator = { shape: 'None' };
            }
            connector.targetDecorator = {
                style: {
                    strokeColor: '#6f409f',
                    fill: '#6f409f', strokeWidth: 2
                }, shape: 'Arrow'
            };
            diagram.dataBind();
        }
    }

    $(document).ready(function () {
        
        applyConnectorStyle(false, false, true, 'Orthogonal');
    });
    function getConnectorDefaults(connector) {
        //if (connector.id.indexOf("Link21") !== -1) {
        //    connector.type = 'Straight';
        //}
        //else if (connector.id.indexOf("Link22") !== -1) {
        //    connector.type = 'Straight';
        //}
        //else {
        //    connector.type = 'Orthogonal';
        //}
        //connector.style.strokeColor = "black";
        //connector.sourceDecorator.style.strokeColor = "black";
        //connector.targetDecorator.style.strokeColor = "black";
        //connector.sourceDecorator.style.fill = "black";
        //connector.targetDecorator.style.fill = "black";
        return connector;
    }
    function getSymbolInfo(symbol) {
        return { tooltip: symbol.addInfo ? symbol.addInfo.tooltip : symbol.id };
    }
    function getNodeDefaults(node) {
        node.style.strokeColor = "black";
        return node;
    }
    function dragEnter(arg) {
        if (arg.element) {
            let shape = arg.element.shape;
            if (shape.isLane) {
                if (shape.orientation === 'Horizontal') {
                    shape.lanes[0].height = 100;
                    shape.lanes[0].width = 500;
                } else if (shape.orientation === 'Vertical') {
                    shape.lanes[0].height = 500;
                    shape.lanes[0].width = 100;
                }
            }
        }
    }

    function contextMenuClick(args) {
        var diagram = document.getElementById("container").ej2_instances[0];
        if (args.item.id === 'InsertLaneBefore' || args.item.id === 'InsertLaneAfter') {
            if (diagram.selectedItems.nodes.length > 0 && diagram.selectedItems.nodes[0].isLane) {
                var index;
                var node = diagram.selectedItems.nodes[0];
                var swimlane = diagram.getObject(diagram.selectedItems.nodes[0].parentId);
                var shape = swimlane.shape;
                var existingLane = ej.diagrams.cloneObject(shape.lanes[0]);

                var newLane = {
                    id: ej.diagrams.randomId(),
                    header: {
                        width: existingLane.header.width, height: existingLane.header.height,
                        style: existingLane.header.style
                    },
                    style: existingLane.style,
                    height: existingLane.height, width: existingLane.width,
                };

                if (shape.orientation === 'Horizontal') {
                    var exclude = 0;
                    exclude += (shape.header) ? 1 : 0;
                    exclude += (shape.phases.length) ? 1 : 0;
                    index = node.rowIndex - exclude;
                    newLane.header.width = existingLane.header.width;
                    newLane.header.height = existingLane.height;
                } else {
                    index = node.columnIndex - (shape.phases.length) ? 1 : 0;
                    newLane.header.width = existingLane.width;
                    newLane.header.height = existingLane.header.height;
                }
                if (args.item.id === 'InsertLaneBefore') {
                    diagram.addLanes(swimlane, [newLane], index);
                } else {
                    diagram.addLanes(swimlane, [newLane], index + 1);
                }
                diagram.clearSelection();
            }
        } else if (args.item.id === 'Cut') {
            diagram.cut();
        } else if (args.item.id === 'Clone') {
            diagram.copy();
            diagram.paste();
        }
    }

    function contextMenuOpen(args) {
        var diagram = document.getElementById("container").ej2_instances[0];
        for (var item of args.items) {
            if ((diagram.selectedItems.connectors.length + diagram.selectedItems.nodes.length) > 0) {
                if (item.id === 'InsertLaneBefore' || item.id === 'InsertLaneAfter') {
                    if (diagram.selectedItems.connectors.length || (diagram.selectedItems.nodes.length && !diagram.selectedItems.nodes[0].isLane)) {
                        args.hiddenItems.push(item.text);
                    }
                }
            } else {
                args.hiddenItems.push(item.text);
            }
        }
    }

      var diagram = document.getElementById("container").ej2_instances[0];
        //Updates scroll settings
        diagram.scrollSettings.horizontalOffset=500;
        diagram.scrollSettings.verticalOffset = -100;
        diagram.dataBind();

    $("#diagram-space").scrollLeft(1000);

    
 function onViewService(idType) {
     var portalId = window.parent.$('#GlobalPortalId').val();

        var id = idType.split(",")[0];
        var type = idType.split(",")[1];
        var url = '/Cms/Page?lo=Popup&cbm=OnAfterServiceCreate&source=View&dataAction=Edit&templateCodes=' + type + '&portalId=' + portalId + '&recordId=' + id;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Service', Width: 1200, Height: 600 });
        return false;
    }


    function onViewTask(idType) {
        //var prms = encodeURIComponent('hideStpTaskDetails=true');

        var portalId = window.parent.$('#GlobalPortalId').val();
        var id = idType.split(",")[0];
        var type = idType.split(",")[1];
        url = '/Cms/Page?lo=Popup&pageType=Task&source=View&dataAction=View&templateCodes=' + type + '&portalId=' + portalId + '&recordId=' + id; //+ '&prms=' + prms;

        //var url = '/Cms/Page?lo=Popup&cbm=OnAfterServiceCreate&source=Edit&dataAction=Edit&templateCodes=' + type + '&portalId=' + portalId + '&recordId=' + id;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Task', Width: 1200, Height: 600 });
        return false;
    }

</script>
@Html.EJS().ScriptManager()