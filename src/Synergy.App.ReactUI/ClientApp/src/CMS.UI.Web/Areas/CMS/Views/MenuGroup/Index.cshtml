@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@model MenuGroupViewModel

@{
    ViewData["Title"] = "Menu Group";
    Layout = null;
}
<script>

     var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(StatusEnum)))';
    var statusObj = JSON.parse(status);
      @*var HierarchyType1 = '@Html.Raw(EnumExtension.EnumToJson(typeof(HierarchyTypeEnum)))';
    var HierarchyTypeObj1 = JSON.parse(HierarchyType1);*@
    var columnDefs = [
        
           {
            field: "Name",
           },
           {
               field: "ShortName",

           },
           {
               field: "SubModule",
           },
        {
            field: "PortalName",
        },       
        {
            field: "Status",
            cellRenderer: params => {
                return statusObj[params.value]; //only for enum
            }
        },
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBin13' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        getMenuGroupData();

       // $.contextMenu('update');
      //  $('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-menuBin13',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditMenuGroup(id);
                                        break;

                                    case 'delete':
                                        OnDeleteMenuGroup(id);
                                        break;
                                    case 'help':
                                        OnAddMenuGroupDetals(id);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-edit" },
                                "delete": { name: "Delete", icon: "fas fa-trash" },
                                "help": { name: "Add Details", icon: "fas fa-list" },

                            }
                        };


                }
            }
        });


    });

    function getMenuGroupData() {
        document.getElementById("kgrdMenuGroup").innerHTML = "";
        gridConfig(
            "kgrdMenuGroup",
            "/cms/MenuGroup/ReadData",
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>
<script>
    function OnDeleteMenuGroup(id) {
       // e.preventDefault();
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var flag = confirm('Do you really want to delete the Menu Group?');

        if (flag) {
            $.ajax({
                url: '@Url.Action("Delete", "MenuGroup", new { @area="Cms"})?Id=' + id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        getMenuGroupData();
                     //   $("#kgrdMenuGroup").data("kendoGrid").dataSource.read();
                        kendo.alert("Menu Group Details Deleted Successfully");
                    } else {
                        getMenuGroupData();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    //
                    getMenuGroupData();
                }
            });
            return false;
        }
    }

    function OnEditMenuGroup(id) {
       
          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("EditMenuGroup", "MenuGroup", new { @area="Cms"})?Id=' + id;
        win.OpenWindow({ Title: 'Manage Menu Group', Width: 450, Height: 550 });
        return false;
    }

    function OnAddMenuGroupDetals(id) {
        //e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
          var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Index", "MenuGroupDetails", new { @area="Cms"})?Id=' + id;
        win.OpenWindow({ Title: 'Manage Menu Group Details', Width: 450, Height: 550 });
        return false;
    }

</script>

<div>
    <h4>@ViewBag.Title</h4>
    <hr />
    <div class="row">
        <div class="col-12">
            <button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>
            <br /><br />
            <div id="kgrdMenuGroup" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
            @*@(Html.Kendo().Grid<MenuGroupViewModel>
              ().Name("kgrdMenuGroup")
              .Columns(columns =>
              {
                  columns.Command(command =>
                  {
                      command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditMenuGroup").HtmlAttributes(new { @class = "action-icon" });
                      command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteMenuGroup").HtmlAttributes(new { @class = "action-icon" });
                      command.Custom("help").Text("<i class='fa fas fa-list'></i>").Click("OnAddMenuGroupDetals").HtmlAttributes(new { @class = "action-icon" });
                  }).Title("Action").Width(150);

                  columns.Bound(p => p.Name);
                  columns.Bound(p => p.ShortName);
                  columns.Bound(p => p.SubModule);
                  columns.Bound(p => p.PortalName);
                  columns.Bound(p => p.Status);
              })
              .ToolBar(toolbar =>
              {
                  toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateMenuGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Menu Group</button>");
              })
              //.Events(e => e.DataBound("OnDataBoundNot"))
              .Scrollable(x => x.Enabled(false))
              .Sortable(srt => srt.Enabled(true))
              .Selectable(select => select.Enabled(false))
              .Filterable(f => f.Extra(false)
                                .Operators(o => o.ForString(s => s.Clear()
                                .Contains("Contains")
                                .IsEqualTo("Is equal to")
                                )))
              .Pageable(pageable => pageable
              .Refresh(true)
              .PageSizes(true)
              .ButtonCount(5))
              .AutoBind(true)
              .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(10)
              .Read(read => read.Action("ReadMenuGroupData", "MenuGroup"))
              .Model(model => model.Id(p => p.Id))
              )
        )*@
        </div>
    </div>
</div>