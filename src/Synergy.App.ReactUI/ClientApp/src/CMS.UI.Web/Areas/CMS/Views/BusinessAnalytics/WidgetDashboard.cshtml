@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using Syncfusion.EJ2;
@model Tuple<List<DashboardItemMasterViewModel>, List<WidgetItemViewModel>>
@{
    ViewData["Title"] = "Widget Dashboard";
    Layout = null;
    //Layout = "~/Areas/CMS/Views/Shared/_LayoutCms1.cshtml";
}
<script>

    //$(window).load(ShowLoader($('#main-content')));
   
    //kendo.ui.progress($('#main-content'), true);
    //document.onreadystatechange = function () {
    //    alert("1");
    //    if (document.readyState !== "complete") {
    //        ShowLoader($('#main-content'));
    //    } else {
    //        HideLoader($('#template-content'));
    //    }
    //};
    //ShowLoader($('#main-content'));
    //function ShowLoader(target) {
    //    // target.loadingOverlay();
    //    kendo.ui.progress(target, true);
    //}
    //function HideLoader(target) {
    //    //target.loadingOverlay('remove');
    //    kendo.ui.progress(target, false);
    //}
    //$(document).on("pagecreate", function () {
    //    alert("pagecreate event fired - the page has been initialized, the DOM has been loaded and jQuery Mobile has finished enhancing the page.")
    //});

    //if (document.readyState == 'loading') {

    //    alert("dhj");
    //    ShowLoader($('#main-content'));
    //}

    //document.addEventListener("DOMContentLoaded", function () {
    //    alert("23");
    //    HideLoader($('#main-content'));
    //});
    //$(document).ready(function () {
    //    alert("dsdsds");
    //    HideLoader($('#template-content'));
    //});
    //$(window).load(function () {
    //    HideLoader($('#template-content'));
    //});
    function AddWidget() {
        var url = '/Cms/BusinessAnalytics/DashboardItem?parentId=@ViewBag.ParentId&dataAction=Create&layout=/Views/Shared/_PopupLayout.cshtml';
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Add Widget', Width: 1000, Height: 650 });
        return false;
    }
    function EditWidget(id) {
        var url = '/Cms/BusinessAnalytics/DashboardItem?id=' + id + '&dataAction=Edit&layout=/Views/Shared/_PopupLayout.cshtml';
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Edit Widget', Width: 1000, Height: 650 });
        return false;
    }
    function OnDelete(id) {
        kendo.confirm("Are you sure that you want to proceed?").then(function () {
            confirmDelete(id);
        }, function () {

        });
    }
    function confirmDelete(id) {


        $.ajax({

            url:'@Url.Action("DeleteNote", "NtsNote", new { @area = "Cms" })?Id=' + id,
            type: "GET",
            contentType: "application/json",
            dataType: "JSON",
            success: function (response) {

                ShowNotification("Deleted Successfully", "success");
                window.location.reload();

            }
        });


    }
     function AddWidgetKeyword() {
         var url = '/Cms/BusinessAnalytics/WidgetItem?parentId=@ViewBag.ParentId&dataAction=Create';
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Add Widget', Width: 1000, Height: 650 });
        return false;
    }
    function EditWidgetKeyword(id) {
        var url = '/Cms/BusinessAnalytics/WidgetItem?id=' + id + '&dataAction=Edit';
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Edit Widget', Width: 1000, Height: 650 });
        return false;
    }
</script>
<style>
    .card {
        width: 390px;
        height: 470px;
    }

    #listView {
        padding: 10px 5px;
        margin-bottom: -1px;
        background: none;
        border: none;
    }

    .widget {
        float: left;
        position: relative;
        margin: 4px 5px;
        padding: 0;
    }
</style>
<div class="pad-10" id="divContent">
    <div class="row">
        <div class="col-12">
            @*<input type="button" class="btn btn-primary" value="Add Widget" onclick="AddWidget()" />*@
            <input type="button" class="btn btn-primary" value="Add Widget" onclick="AddWidgetKeyword()" />
        </div>
    </div>
    <div class="row pad-10">

        @*@(Html.Kendo().ListView<DashboardItemMasterViewModel>()
                .Name("listView")
                .TagName("div")
                .ClientTemplateId("templateWidget")
                .DataSource(dataSource => dataSource
                        .Ajax()
                .Read(read => read.Action("GetWidgetData", "BusinessAnalytics", new { Area = "cms" }))
                    )
                .AutoBind(true)
                //   .Events(events => events
                //.DataBound("OnDataBoundTwitter"))
                .HtmlAttributes(new { @style = "", })
            )*@
        @*@foreach (var item in Model.Item1)
            {
                <div class="widget">
                    <div class="card" style="text-align:center">
                        <span data-id="@item.NoteId" data-parent-id="@item.ParentNoteId" data-type="DashboardItem" class="tree-menu1" style="margin-right:-355px"><i class="fa fa-ellipsis-h"></i></span>
                        <h4>@item.NoteSubject</h4>
                        <canvas id="@item.ChartKey" width="60" height="60" style="background-color: white;">
                        </canvas>
                    </div>
                </div>
            }
            @foreach (var item in Model.Item2)
            {
                <div class="widget">
                    <div class="card" style="text-align:center">
                        <span data-id="@item.NoteId" data-parent-id="@item.ParentNoteId" data-type="widgetItem" class="tree-menu1" style="margin-right:-355px"><i class="fa fa-ellipsis-h"></i></span>
                        <h4>@item.NoteSubject</h4>
                        <canvas id="@item.ChartKey" width="60" height="60" style="background-color: white;">
                        </canvas>
                    </div>
                </div>
            }*@

        @foreach (var item in Model.Item2)
        {
            <div class="widget">
                <div class="card" style="text-align:center">
                    <span data-id="@item.NoteId" data-parent-id="@item.ParentNoteId" data-type="widgetItem" class="tree-menu1" style="margin-right:-355px"><i class="fa fa-ellipsis-h"></i></span>
                    <h4>@item.NoteSubject</h4>
                    @if (item.chartTypeName == "Bar Chart")
                    {
                        @Html.EJS().Chart(item.ChartKey).Series(
                         series =>
                         {

                             series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).Name(item.NoteSubject).XName("MediaType").YName("Count")
                             .Marker(mr => mr.DataLabel(dl => dl.Visible(true).Position(Syncfusion.EJ2.Charts.LabelPosition.Outer).Font(ff => ff.FontWeight("600"))))
                             .DataSource(ViewData[item.NoteSubject]).Add();


                         }).PrimaryXAxis(
                         px =>
                         {
                             px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg => mg.Width(0)).
                             Title("").LabelRotation(300);
                         }).PrimaryYAxis(
                         py =>
                         {
                             py.
                             LabelFormat("{value}").
                             EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift).MajorGridLines(mg => mg.Width(0));
                         }).Tooltip(
                         tooltip =>
                         {
                             tooltip.Enable(true);
                         }).LegendSettings(leg => leg.Visible(true).ToggleVisibility(false).Position(Syncfusion.EJ2.Charts.LegendPosition.Bottom)
                            .Width("30%")).ChartArea(area => area.Border(br => br.Color("transparent"))).Title("").Height("350").Render()
                    }
                    else
                    {
                        @Html.EJS().Chart(item.ChartKey).Series(
                            series =>
                            {

                                series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.MultiColoredLine).Name(item.NoteSubject).XName("MediaType").YName("Count")
                                .Marker(mr => mr.DataLabel(dl => dl.Visible(true).Position(Syncfusion.EJ2.Charts.LabelPosition.Outer).Font(ff => ff.FontWeight("600"))))
                                .DataSource(ViewData[item.NoteSubject]).Add();


                            }).PrimaryXAxis(
                            px =>
                            {
                                px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg => mg.Width(0)).
                                Title("").LabelRotation(300);
                            }).PrimaryYAxis(
                            py =>
                            {
                                py.
                                LabelFormat("{value}").
                                EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift).MajorGridLines(mg => mg.Width(0));
                            }).Tooltip(
                            tooltip =>
                            {
                                tooltip.Enable(true);
                            }).LegendSettings(leg => leg.Visible(true).ToggleVisibility(false).Position(Syncfusion.EJ2.Charts.LegendPosition.Bottom)
                               .Width("30%")).ChartArea(area => area.Border(br => br.Color("transparent"))).Title("").Height("350").Render()
                    }

                </div>
            </div>

        }

    </div>
</div>

@*<script type="text/x-kendo-tmpl" id="templateWidget">
        <div class="widget">
            <div class="card">
                <h4>#:NoteSubject#</h4>
            <canvas id="#=NoteSubject#" width="100%" height="80" style="background-color: white;">
            </canvas>
            </div>
        </div>
    </script>*@
<script>

    $(function () {      

        $.contextMenu({
            selector: '.tree-menu1',
            trigger: 'left',
            build: function ($trigger, e) {
                var id = $trigger.data('id');
                var parentType = $trigger.data('type');
                var parentId = $trigger.data('parentId');

                switch (parentType) {
                    case 'DashboardItem':
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        EditWidget(id);
                                        break;
                                    case 'delete':
                                        OnDelete(id);
                                        break;
                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit Widget", icon: "fas fa-chart-area" },
                                "delete": { name: "Delete Widget", icon: "fas fa-trash" }
                            }
                        };
                    case 'widgetItem':
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        EditWidgetKeyword(id);
                                        break;
                                    case 'delete':
                                        OnDelete(id);
                                        break;
                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit Widget", icon: "fas fa-chart-area" },
                                "delete": { name: "Delete Widget", icon: "fas fa-trash" }
                            }
                        };
                    default:
                        return {
                            callback: function (key, options) {
                                alert(parentId);
                                alert(parentType);
                            },
                            items: {

                            }
                        };
                }


            }
        });
     });

    @*@foreach (var item in Model.Item1)
    {
         @Html.Raw(item.chartMetadata);
    }
    @foreach (var item in Model.Item2)
    {
         @Html.Raw(item.chartMetadata);
    }*@
</script>
@Html.EJS().ScriptManager()