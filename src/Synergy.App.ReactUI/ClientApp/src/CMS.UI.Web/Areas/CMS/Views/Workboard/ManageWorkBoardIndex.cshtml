@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@{
    ViewData["Title"] = "Grid Stack";
    Layout = "/Views/Shared/_PopupLayout.cshtml";
    //
    //Layout = "~/Views/Shared/_BaseLayout.cshtml";
    // Layout = "/Views/Shared/Themes/HR/_Layout.cshtml";
}
@*@model KanbanBoardViewModel*@
@model WorkBoardViewModel
@*<button id="start-togetherjs" class="btn btn-primary">Collaborate</button>*@
<script>
    TogetherJSConfig_hubBase = "https://collaborate.aitalkx.com:8081";
</script>

<style>
    .default {
        background: #2A92BF;
        color: #fff;
    }

    .day_1 {
        background: #2A92BF;
        color: #fff;
    }

    .day_2 {
        background: #F4CE46;
        color: #fff;
    }

    .day_3 {
        background: #00B961;
        color: #fff;
    }

    .day_4 {
        background: #2A92BF;
        color: #fff;
    }

    .day_5 {
        background: #F4CE46;
        color: #fff;
    }

    .day_6 {
        background: #00B961;
        color: #fff;
    }

    .day_7 {
        background: #2A92BF;
        color: #fff;
    }

    .day_8 {
        background: #F4CE46;
        color: #fff;
    }

    .day_9 {
        background: #00B961;
        color: #fff;
    }

    .day_10 {
        background: #2A92BF;
        color: #fff;
    }

    .day_11 {
        background: #F4CE46;
        color: #fff;
    }

    .day_12 {
        background: #00B961;
        color: #fff;
    }

    .day_13 {
        background: #2A92BF;
        color: #fff;
    }

    .day_14 {
        background: #F4CE46;
        color: #fff;
    }

    .day_15 {
        background: #00B961;
        color: #fff;
    }

    .day_16 {
        background: #2A92BF;
        color: #fff;
    }

    .day_17 {
        background: #F4CE46;
        color: #fff;
    }

    .day_18 {
        background: #00B961;
        color: #fff;
    }

    .day_19 {
        background: #2A92BF;
        color: #fff;
    }

    .day_20 {
        background: #F4CE46;
        color: #fff;
    }

    .day_21 {
        background: #00B961;
        color: #fff;
    }

    .day_22 {
        background: #2A92BF;
        color: #fff;
    }

    .day_23 {
        background: #F4CE46;
        color: #fff;
    }

    .day_24 {
        background: #00B961;
        color: #fff;
    }

    .day_25 {
        background: #2A92BF;
        color: #fff;
    }

    .day_26 {
        background: #F4CE46;
        color: #fff;
    }

    .day_27 {
        background: #00B961;
        color: #fff;
    }

    .day_28 {
        background: #2A92BF;
        color: #fff;
    }

    .day_29 {
        background: #F4CE46;
        color: #fff;
    }

    .day_30 {
        background: #00B961;
        color: #fff;
    }

    .day_31 {
        background: #00B961;
        color: #fff;
    }

    .custom-button {
        right: 0;
        position: absolute;
        margin-top: -5px;
        color: white;
        font-size: 15px;
    }

    .custom-item-button {
        right: 10px;
        position: absolute;
        margin-top: -7px;
        color: black;
        font-size: 14px;
    }

    .kanban-item {
        background: unset;
        padding: 0;
    }

    .kanban-file {
        background: #fff6d4;
        color: black;
        padding: 10px;
        font-weight: 300;
        font-size: 15px;
        border-radius: 5px;
    }

    .kanban-note {
        background: #fff6d4;
        color: black;
        padding: 10px;
        font-weight: 300;
        font-size: 15px;
        border-radius: 5px;
    }

    .kanban-task {
        background: #ccc;
        color: black;
        padding: 10px;
        font-weight: 300;
        font-size: 15px;
        border-radius: 5px;
    }

    .kanban-index {
        background: #ccc;
        color: black;
        padding: 10px;
        font-weight: 300;
        font-size: 15px;
        border-radius: 5px;
        min-height: 100px;
    }

    .kanban-draw {
        background: #f8f9fa;
        color: black;
        padding: 10px;
        font-weight: 300;
        font-size: 15px;
        border-radius: 5px;
        border: 1px solid gray;
        min-height: 100px;
    }

    .board-add-custom-button {
        right: 35px;
        position: absolute;
        top: 22px;
        cursor: pointer;
    }

    .board-close-custom-button {
        right: 10px;
        position: absolute;
        top: 22px;
        cursor: pointer;
    }

    .item-custom-button {
        right: 25px;
        position: absolute;
        margin-top: -10px;
        cursor: pointer;
    }

    .droptarget {
        float: left;
        width: 150px;
        height: 100px;
        border: 1px solid #aaaaaa;
    }

    .kanban-index li {
        list-style: inside !important;
    }

    .index-item {
        right: 25px;
        position: absolute;
        cursor: pointer;
        margin-top: 5px;
        display: none !important;
    }

    li:hover .index-item {
        display: inline !important;
    }

    .kanban-board {
        background-color: #fff;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
        min-height: 350px;
    }

    .wb_section_blue {
        border: 3px solid #3bafda;
    }

        .wb_section_blue .section_blue {
            background-color: #3bafda;
            color: #fff;
        }

    .wb-item {
        border: none;
    }

    .wb-item-green {
    }

        .wb-item-green .card-header {
            background-color: #91d049;
            color: #6aa22a;
            border: none;
            padding: 3px 5px;
        }

        .wb-item-green .card-body {
            background-color: #a7d96d;
            border: none;
            padding: 5px;
            min-height: 60px;
        }

    .wb-item-icons {
        float: right;
    }

    .wb-item-icon {
        padding-right: 8px;
        cursor: pointer;
    }
</style>
<div style="padding:10px">
    <form asp-controller="Workboard" asp-action="ManageWorkBoard" class="form-horizontal"
          data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
          data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
          data-ajax="true" data-ajax-method="POST">
        <div id="validation-summary" class="text-danger" asp-validation-summary="All"></div>
        <div style="display:flex">
            @*   <input asp-for="NoteSubject" type="text" class="form-control" placeholder="Name" autocomplete="off" />&nbsp;*@
            @if (Model.kanbanTemplate == KanbanTemplateEnum.Custom)
            {
                <button type="button" class="btn btn-primary pull-right" onclick="createBoard()" title="Create Board" style="margin:0 5px"><span class="fa fa-plus"></span>  Create Board</button>
            }

            <button type="submit" class="btn btn-info pull-right" onclick="renderJSON()">Save</button>&nbsp;&nbsp;
            <button type="button" class="btn btn-primary pull-right" onclick="backToDashboard()">Back</button>
        </div>
        <hr />
        <div id="workboard" style="overflow:scroll;height:540px">

        </div>
        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.DataAction)
        @Html.HiddenFor(x => x.NoteId)
        @Html.HiddenFor(x => x.JsonContent)
        @Html.HiddenFor(x => x.TemplateTypeId)
        @Html.HiddenFor(x => x.WorkBoardName)
        @Html.HiddenFor(x => x.WorkBoardDescription)
        @Html.HiddenFor(x => x.ColorCode)
        @Html.HiddenFor(x => x.IconFileId)
        @Html.HiddenFor(x => x.WorkBoardStatus)
        @Html.HiddenFor(x => x.boards)
        @Html.HiddenFor(x => x.kanbanTemplate)
        @Html.HiddenFor(x => x.Json)
        @Html.HiddenFor(x => x.DataJson)
        @Html.HiddenFor(x => x.CompanyId)
        @Html.HiddenFor(x => x.CreatedBy)
        @Html.HiddenFor(x => x.CreatedDate)
        @Html.HiddenFor(x => x.LastUpdatedBy)
        @Html.HiddenFor(x => x.LastUpdatedDate)
    </form>
</div>
<script>
    var drag = false;
    var elem;
    var sibl;
    var _boards = [];
    var kanban3;
    @*if (('@Model.kanbanTemplate' == '@KanbanTemplateEnum.Weekly' ||'@Model.kanbanTemplate' == '@KanbanTemplateEnum.Yearly') && '@Model.DataAction' == '@DataActionEnum.Create') {
         var days = @Html.Raw(ViewBag.Days);
        for (var i = 0; i < days.length; i++) {
            _boards.push({
                title: days[i],
                id: days[i],
                class: 'day_' +(i+1)
            })
        }
    }
    else if('@Model.DataAction' == '@DataActionEnum.Create' && '@Model.kanbanTemplate' == '@KanbanTemplateEnum.Monthly') {
        var days = '@ViewBag.NoOfDays';
        for (var i = 1; i <= parseInt(days); i++) {
            _boards.push({
                title: 'Day '+i,
                id: 'day' + i,
                class: 'day_' + i
            })
        }
    }*@



    function renderJSON() {
        const obj = document.getElementById('workboard');
        let boards = []
        obj.querySelectorAll('.kanban-board').forEach(el => {
            let item = []
            el.querySelectorAll('.kanban-item').forEach(i => {
                item.push({
                    title: i.innerHTML,
                    id: i.getAttribute('data-eid')
                })
            })
            boards.push({
                id: el.getAttribute('data-id'),
                title: el.querySelector('.kanban-title-board').innerHTML,
                class: el.firstElementChild.classList[1],
                item,
            })
        })
        boardsdata = JSON.stringify(boards);
        boardsdata = boardsdata.replaceAll('\\"', "\\'");
        $("#boards").val(boardsdata);
        $("#JsonContent").val(boardsdata);
    }
    function createBoard() {
        var win = GetMainWindow();
        var workboardid = '@Model.Id';
        win.iframeOpenUrl = '@Url.Action("WorkBoardSection", "Workboard", new { @area="Cms"})?workBoardId=' + workboardid;
        win.OpenWindow({ Title: 'Create Section', Width: 600, Height: 550 });
        return false;

    }
    function EditBoard(e) {
        
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("AddKanbanBoard", "Workboard", new { @area="Cms"})';
        win.OpenWindow({ Title: 'Create Board', Width: 600, Height: 400 });
        return false;

    }
    function addBoard(Prms) {
        kanban3.addBoards(
            [{
                'id': Prms.note.WorkBoardSectionId,
                'title': Prms.note.SectionName,
            }]
        )
        var board_style = "background:" + Prms.note.HeaderColor + ";color:white";
        if ($("[data-id='" + Prms.note.WorkBoardSectionId + "']").length > 0 && $("[data-id='" + Prms.note.WorkBoardSectionId + "']")[0].children.length > 0) {
            $("[data-id='" + Prms.note.WorkBoardSectionId + "']")[0].children[0].style = board_style;
        }
        var btn = $('<span class="fal fa-plus board-add-custom-button" onclick="CreateItem(this)"></span>');
        btn.appendTo($(".kanban-board-header").last());
        var delbtn = $('<span id="tree-menuBoard" class="fal fa-edit board-close-custom-button"></span>');
        delbtn.appendTo($(".kanban-board-header").last());
    }
    function editBoard(Prms) {
        $("[data-id='" + Prms.note.WorkBoardSectionId + "']")[0].children[0].children[0].innerHTML = Prms.note.SectionName;
    }
    function deleteBoard(e) {
        var boardId = e.parentElement.parentElement.getAttribute('data-id');
        //var boardId = e.currentTarget.parentElement.parentElement.getAttribute('data-id');
        kanban3.removeBoard(boardId);
    }

     function CreateItem(e) {
        var boardId = "@Model.Id";
        var sectionId = e.parentElement.parentElement.getAttribute('data-id');;
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("AddWorkBoardContent", "Workboard", new { @area="Cms"})?workBoardId=' + boardId +'&workBoardSectionId='+sectionId;
        win.OpenWindow({ Title: 'WorkBoard Content', Width: 700, Height: 700 });
        return false;
    }
    function addItem(Prms) {
        
        //text
        if (Prms.note.ItemType == 1) {
            kanban3.addElement(
                Prms.note.WorkBoardSectionId,
                {
                    "title": '<div id="' + Prms.note.NtsNoteId + '" class="card wb-item wb-item-text wb-item-green ' + Prms.note.ColorCode+'">\
                        <div class="card-header">\
                     <span class="wb-item-icons"><i data-id="'+ Prms.note.NtsNoteId + '" class="wb-item-icon fa fa-message-middle"></i><i data-id="' + Prms.note.NtsNoteId + '" class="wb-item-icon fa fa-list-check"></i><i data-id="' + Prms.note.NtsNoteId +'" class="wb-item-icon wb-item-menu fa fa-ellipsis-v"></i></span>\
                        </div>\
                        <div class="card-body">\
                            <p class="card-text">'+Prms.note.ItemContent+'</p>\
                        </div>\
                    </div>'

                }
            );
        }
        //index
        else if (Prms.note.ItemType == 2) {
            kanban3.addElement(
                Prms.note.WorkBoardSectionId,
                {
                    "title": "<ul id='" + Prms.note.NtsNoteId + "' class='wb-item wb-item-index'><span id='tree-menuItem' class='fal fa-ellipsis-h item-custom-button'></span> </div>",
                }
            );
        }
        //whiteboard
        else if (Prms.note.ItemType == 3) {
            kanban3.addElement(
                Prms.note.WorkBoardSectionId,
                {
                    "title": '<div id="' + Prms.note.NtsNoteId + '" class="card wb-item wb-item-whiteboard wb-item-green ' + Prms.note.ColorCode + '">\
                        <div class="card-header">\
                    <span class="wb-item-icons"><i data-id="'+ Prms.note.NtsNoteId + '" class="wb-item-icon fa fa-message-middle"></i><i data-id="' + Prms.note.NtsNoteId + '" class="wb-item-icon fa fa-list-check"></i><i data-id="' + Prms.note.NtsNoteId +'" class="wb-item-icon wb-item-menu fa fa-ellipsis-v"></i></span>\
                        </div>\
                        <div class="card-body">\
                          <div style="background-color:#fff;"><img id="' + Prms.note.ItemFileId + '" src="/cms/Document/GetImageMongo?id=' + Prms.note.ItemFileId +'" style="max-width:100%;max-height:100 %;" /></div>\
                        </div>\
                    </div>'
                }
            );
        }
        //image
        else if (Prms.note.ItemType == 4) {
            kanban3.addElement(
                Prms.note.WorkBoardSectionId,
                {
                    "title": "<div id='" + Prms.note.NtsNoteId + "' class='wb-item wb-item-image'><span id='tree-menuItem' class='fal fa-ellipsis-h item-custom-button'></span><div><img id='" + Prms.note.ItemFileId + "' src='/cms/Document/GetImageMongo?id=" + Prms.note.ItemFileId + "' style='max-width:100%;max-height:100%;' /></div></div>",
                }
            );
        }
        //video
        else if (Prms.note.ItemType == 5) {

        }
        //file
        else if (Prms.note.ItemType == 6) {
            kanban3.addElement(
                Prms.note.WorkBoardSectionId,
                {
                    "title": "<div id='" + Prms.note.NtsNoteId + "' class='wb-item wb-item-file'>" + Prms.note.ItemContent + "<span id='tree-menuItem' class='fal fa-ellipsis-h item-custom-button'></span></div>",
                }
            );
        }
        //note
        else if (Prms.note.ItemType == 7) {
            kanban3.addElement(
                Prms.note.WorkBoardSectionId,
                {
                    "title": "<div id='" + Prms.note.NtsNoteId + "' class='wb-item wb-item-note'>" + Prms.note.ItemContent + "<span id='tree-menuItem' class='fal fa-ellipsis-h item-custom-button'></span></div>",
                }
            );
        }
        //task
        else if (Prms.note.ItemType == 8) {
            kanban3.addElement(
                Prms.note.WorkBoardSectionId,
                {
                    "title": "<div id='" + Prms.note.NtsNoteId + "' class='wb-item wb-item-task'>" + Prms.note.ItemContent + "<span id='tree-menuItem' class='fal fa-ellipsis-h item-custom-button'></span></div>",
                }
            );
        }
        //service
        else if (Prms.note.ItemType == 9) {
            kanban3.addElement(
                Prms.note.WorkBoardSectionId,
                {
                    "title": "<div id='" + Prms.note.NtsNoteId + "' class='wb-item wb-item-service'>" + Prms.note.ItemContent + "<span id='tree-menuItem' class='fal fa-ellipsis-h item-custom-button'></span></div>",
                }
            );
        }
    }

    function backToDashboard() {
        window.location.href = "/portal/hr/WorkboardDashboard";
        return false;
    }




    document.addEventListener(
        'mouseup', (e) => {
            if (drag) {
                drag = false;
                var x = event.clientX;
                var y = event.clientY;
                el = document.elementFromPoint(x, y);
                if (el.className == "kanban-index" && elem.firstChild.className !="kanban-index") {
                    var li = document.createElement("li");
                    li.id = elem.children[0].id;
                    li.innerHTML = elem.children[0].textContent;
                    li.setAttribute("data-type", elem.children[0].className);
                    var span = document.createElement("span");
                    span.className = "fa fa-minus-circle index-item";
                    span.title = "Move Out";
                    span.setAttribute("data-indexitemid", elem.children[0].id);
                    span.onclick = function () {
                        onMoveOut(this);
                    };
                    li.appendChild(span);
                    el.appendChild(li);
                    elem.remove();
                }
                else if (el.parentElement != undefined && el.parentElement.className == "kanban-index" && elem.firstChild.className != "kanban-index") {
                    var li = document.createElement("li");
                    li.id = elem.children[0].id;
                    li.innerHTML = elem.children[0].textContent;
                    li.setAttribute("data-type", elem.children[0].className);
                    var span = document.createElement("span");
                    span.className = "fa fa-minus-circle index-item";
                    span.title = "Move Out";
                    span.setAttribute("data-indexitemid", elem.children[0].id);
                    span.onclick = function () {
                        onMoveOut(this);
                    };
                    li.appendChild(span);
                    el.parentElement.appendChild(li);
                    elem.remove();
                }
            }
        });



    function deleteItem(e) {
        //var el = e.parentElement.parentElement;
        var el = e.currentTarget.parentElement.parentElement;
        el.remove();

    }
    function onMoveOut(e) {
        var itemId = e.parentElement.id;
        var itemText = e.parentElement.innerText;
        var type = e.parentElement.getAttribute('data-type');
        var boardId = e.parentElement.parentElement.parentElement.parentElement.parentElement.getAttribute('data-id');
        e.parentElement.remove();
        moveOut(boardId, itemId, itemText, type);
    }
    function moveOut(boardId, itemId, itemText, type) {
        //note
        if (type == "kanban-note") {
            kanban3.addElement(
                boardId,
                {
                    "title": "<div id='" + itemId + "' class='kanban-note'>" + itemText + "<span id='tree-menuItem' class='fal fa-ellipsis-h item-custom-button'></span></div>",
                }
            );
        }
        //task
        else if (type == "kanban-task") {
            kanban3.addElement(
                boardId,
                {
                    "title": "<div id='" + itemId + "' class='kanban-task'>" + itemText + " <span id='tree-menuItem' class='fal fa-ellipsis-h item-custom-button'></span></div>",
                }
            );
        }

    }
    function copyMoveItem(e) {
        // need to pass workboardId and itemId
        var url = "/Cms/Workboard/CopyMoveItems";
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Copy/Move To...', Width: 600, Height: 600 });
        return false;
    }
    function duplicateItem(e)
    {
         // need to pass workboardId and itemId
        var url = "/Cms/Workboard/DuplicateItems";
        $.ajax({
            type: "POST",
            url: url,
            data: { workboardId: "123", itemId:""},
            success: function (result)
            {
                if (result.success)
                {
                    ShowNotification("Duplicated Successfully");
                }

            },
            dataType: "json"
        });
    }



    $(document).ready(function () {
        LoadWorkBoard();
        //$('.kanban-board-header').parent('div').addClass(this.);
        $(".kanban-board-header").each(function (index) {
            var c = 'wb_' + $(this).attr('class').replace('kanban-board-header ', '');
            $(this).parent('div').addClass(c);
        });
        var btn = $('<span class="fal fa-plus board-add-custom-button" onclick="CreateItem(this)"></span>');
        btn.appendTo($(".kanban-board-header"));
        var delbtn = $('<span id="tree-menuBoard" class="fal fa-edit board-close-custom-button"></span>');
        delbtn.appendTo($(".kanban-board-header"));
        if ('@Model.kanbanTemplate' == '@KanbanTemplateEnum.Monthly') {
            document.getElementsByClassName('kanban-container')[0].style.width = "1500px";
        }
        @*$(".kanban-title-board").click(function () {
            var id = this.parentElement.parentElement.getAttribute('data-id');
            var name =this.innerText;
            var win = GetMainWindow();
            win.iframeOpenUrl = '@Url.Action("AddKanbanBoard", "Workboard", new { @area="Cms"})?name=' + name+'&id='+id;
            win.OpenWindow({ Title: 'Edit Board', Width: 600, Height: 400 });
            return false;
        })*@
    });
    function LoadWorkBoard() {
         var json = '@Html.Raw(Model.JsonContent)';

    kanban3 = new jKanban({
        element: '#workboard',                                       // selector of the kanban container
        gutter: '5px',                                       // gutter of the board
        widthBoard: '250px',                                      // width of the board
        responsivePercentage: false,                                    // if it is true I use percentage in the width of the boards and it is not necessary gutter and widthBoard
        dragItems: true,
        itemAddOptions: {
            enabled: true,                                              // add a button to board for easy item creation
            content: '+',                                                // text or html content of the board button
            class: 'custom-button',         // default class of the button
            footer: true                                                // position the button on footer
        },
        itemHandleOptions: {
            enabled: false,                                 // if board item handle is enabled or not
            handleClass: "item_handle",                         // css class for your custom item handle
            customCssHandler: "drag_handler",                        // when customHandler is undefined, jKanban will use this property to set main handler class
            customCssIconHandler: "drag_handler_icon",                   // when customHandler is undefined, jKanban will use this property to set main icon handler class. If you want, you can use font icon libraries here
            customHandler: "<span class='item_handle'>+</span> %title% "  // your entirely customized handler. Use %title% to position item title

        },
        boards: JSON.parse(json),
        dragBoards: true,                                         // the boards are draggable, if false only item can be dragged

        click: function (el) { },                             // callback when any board's item are clicked
        context: function (el, event) { },                      // callback when any board's item are right clicked
        dragEl: function (el, source) { },                     // callback when any board's item are dragged
        dragendEl: function (el) {  },                             // callback when any board's item stop drag
        dropEl: function (el, target, source, sibling) {
            //if (sibling.getElementsByClassName('kanban-index').length > 0) { drag = true; elem = el; sibl = sibling; el.remove(); }
            drag = true;
            elem = el;
        },    // callback when any board's item drop in a board
        dragBoard: function (el, source) { },                     // callback when any board stop drag
        dragendBoard: function (el) { },                             // callback when any board stop drag
        buttonClick: function (el, boardId) { },                     // callback when the board's button is clicked
        propagationHandlers: [],                                         // the specified callback does not cancel the browser event. possible values: "click", "context"
    })
    }
    var onAjaxSuccess = function (res) {

        if (res.success) {
            if ('@Model.DataAction'=='@DataActionEnum.Create')
            {
                ShowNotification("Saved Successfully", "success");
                var win = GetMainWindow();
                win.CloseWindow({ MethodName: "getDataGridKanbanBoard"});
                return false;
            }
            if ('@Model.DataAction'=='@DataActionEnum.Edit')
            {
                ShowNotification("Updated Successfully", "success");
                var win = GetMainWindow();
                win.CloseWindow({ MethodName: "getDataGridKanbanBoard" });
                return false;
            }


        }
        else {
            showError(res.error);
        }
        //HideLoader($('#template-content'));
    };
    var showError = function (error) {
        $("#validation-summary").html(error);
        $("#validation-summary").css("display", "block")
    }
    //$(function () {
    //  $("#start-togetherjs").click(TogetherJS);
    //});
    $(function () {
        $.contextMenu({
            selector: '#tree-menuBoard',
            trigger: 'left',
            build: function ($trigger, e) {
                //var id = $trigger.data('idvalue');
                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        EditBoard(e);
                                        break;
                                    case 'delete':
                                        deleteBoard(e);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit Section", icon: "fas fa-edit" },
                                "delete": { name: "Remove Section", icon: "fas fa-trash" },

                            }
                        };


                }
            }
        });
        $.contextMenu({
            selector: '.wb-item-menu',
            trigger: 'left',
            build: function ($trigger, e) {
                //var id = $trigger.data('idvalue');
                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {

                                    case 'delete':
                                        deleteItem(e);
                                        break;
                                    case 'copy':
                                        copyMoveItem(e);
                                        break;
                                    case 'duplicate':
                                        duplicateItem(e);
                                        break;
                                    default:
                                }
                            },
                            items: {
                                "delete": { name: "Remove", icon: "fas fa-close" },
                                "copy": { name: "Copy/Move", icon: "fas fa-close" },
                                "duplicate": { name: "Duplicate", icon: "fas fa-close" }
                            }
                        };


                }
            }
        });

    });

</script>










