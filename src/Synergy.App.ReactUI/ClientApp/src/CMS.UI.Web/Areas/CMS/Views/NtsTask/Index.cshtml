@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@using Kendo.Mvc.UI;
@{
    Layout = null;
    //Layout = "~/Views/Shared/_PopupLayout.cshtml";
    //Layout = string.Concat("~/Areas/CMS/Views/Shared/_LayoutCMS.cshtml");
    //Layout = string.Concat("~/Areas/CMS/Views/Shared/_LayoutCMS.cshtml");
}
@model NtsTaskIndexPageViewModel;
<style>
    .tab-pane {
        background-color: #fff !important;
    }


    .number-text {
        font-size: 11px;
        /*overflow-wrap: break-word;*/
    }

    .nav-link {
        padding: .5rem .5rem !important;
    }

    .nav-item {
        background-color: rgb(239, 239, 239) !important;
    }

    .container {
        position: relative;
    }

    .wrapper {
        position: relative;
        margin: 0 auto;
        overflow: hidden;
        padding: 5px;
        height: 120px;
    }

    .list {
        position: absolute;
        left: 0px;
        top: 0px;
        /*min-width: 1560px;*/
        margin-left: 0px;
        margin-top: 0px;
    }

        .list li {
            display: table-cell;
            position: relative;
            text-align: center;
            cursor: grab;
            cursor: -webkit-grab;
            color: #efefef;
            vertical-align: middle;
        }

    .scroller {
        text-align: center;
        cursor: pointer;
        display: inline-flex;
        padding: 7px;
        padding-top: 11px;
        white-space: no-wrap;
        vertical-align: middle;
        /*    background-color: #fff;*/
        position: absolute;
        font-size: 25px;
    }

    .scroller-right {
        float: right;
        right: -25px;
        top: 36px;
    }

    .scroller-left {
        float: left;
        left: -25px;
        top: 36px;
    }

    h6 {
        font-size: 18px;
    }

    .div-count-active, .div-count:hover {
        background-color: #17a2b8;
        color: #fff !important;
        border-radius: 5px;
    }
</style>
<script>
    var hidWidth;
    var scrollBarWidths = 40;

    var widthOfList = function () {
        var itemsWidth = 0;
        $('.list li').each(function () {
            var itemWidth = $(this).outerWidth();
            itemsWidth += itemWidth;
        });
        return itemsWidth;
    };

    var widthOfHidden = function () {
        return (($('.wrapper').outerWidth()) - widthOfList() - getLeftPosi()) - scrollBarWidths;
    };

    var getLeftPosi = function () {
        return $('.list').position().left;
    };

    var reAdjust = function () {
        if (($('.wrapper').outerWidth()) < widthOfList()) {
            $('.scroller-right').show();
        }
        else {
            $('.scroller-right').hide();
        }

        if (getLeftPosi() < 0) {
            $('.scroller-left').show();
        }
        else {
            $('.item').animate({ left: "-=" + getLeftPosi() + "px" }, 'slow');
            $('.scroller-left').hide();
        }
    }

    reAdjust();

    $(window).on('resize', function (e) {
        reAdjust();
    });

    $('.scroller-right').click(function () {

        $('.scroller-left').fadeIn('slow');
        $('.scroller-right').fadeOut('slow');

        $('.list').animate({ left: "+=" + widthOfHidden() + "px" }, 'slow', function () {

        });
    });

    $('.scroller-left').click(function () {

        $('.scroller-right').fadeIn('slow');
        $('.scroller-left').fadeOut('slow');

        $('.list').animate({ left: "-=" + getLeftPosi() + "px" }, 'slow', function () {

        });
    });
        function OnCreate() {
           
            var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("SelectTaskTemplate", "NtsTask")?templateCode=' + '@Model.TemplateCode' + '&categoryCode=' + '@Model.CategoryCode';
        win.OpenWindow({ Title: 'Task Template', Width: 1200, Height: 600 });
        return false;
    }
    function backtoNtsTaskIndex(tempid) {
         
        var win = GetMainWindow();
        win.CloseWindow();
      

        LoadPartailView('@Url.Action("NtsTaskPage", "NtsTask", new { @area = "Cms" })?templateid=' + tempid+'&pageId=@Model.Page.Id', $('#cms-content'));
    }
    function OnView(Id, TaskStatusCode) {

           // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var id = '@Model.Page.Id';
            var type = '@Model.Page.PageType.ToString()';
            var source = '@RequestSourceEnum.View.ToString()';
            var action = '@DataActionEnum.View.ToString()';
            var pagename = "NtsTaskPage";
            if (TaskStatusCode ==='TASK_STATUS_DRAFT') {
                source = "Edit";
                action = "Edit";
            }
        //LoadPageById(id, type, source, action, dataItem.Id);

        LoadPartailView('@Url.Action("NtsTaskPage", "NtsTask", new { @area = "Cms" })?&pageId=@Model.Page.Id&taskId=' + Id +'&dataAction='+action, $('#cms-content'));
            return false;
    }

    var deleteEvent = null;
    function OnDelete(Id) {
        if ('@Model.EnableDeleteConfirmation'==='True')
        {
            deleteEvent = e;
            $('#confirmDelete').data("kendoDialog").open();

        }
        else
        {
            DeleteItem(e);
        }

    }
      function DeleteItem(Id) {
       // var dataItem = $("#kgrid_OwnerOrRequester").data("kendoGrid").dataItem($(e.currentTarget).closest("tr"));
        @*var id = '@Model.Page.Id';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.Post.ToString()';
        var action = '@RequestSourceEnum.Delete.ToString()';
        LoadPageById(id, type, source, action, dataItem.TaskId);*@
        return false;
    }
    function OnDatabound_OwnerOrRequester(e) {
        $("#kgrid_OModelnPagePageerOrRequester tbody tr").each(function () {
            var currentDataItem = $("#kgrid_OwnerOrRequester").data("kendoGrid").dataItem($(this));
            if (currentDataItem.TaskStatusCode !=='TASK_STATUS_DRAFT') {
                var del = $(this).find(".action-delete");
                del.hide();
            }
        });
    }

    function ConfirmDelete() {
        $('#confirmDelete').data("kendoDialog").close();
        DeleteItem(deleteEvent);
        }

    function FilterAssignedToMeGrid() {
        return {
            categoryCode: "@Model.CategoryCode",
            templateCode: "@Model.TemplateCode",
            ownerType: '@NtsActiveUserTypeEnum.Assignee',
            taskStatusCode: $("#status").val(),
            moduleCode:"@Model.ModuleCode"
        };
    }
    function FilterCreatedByGrid() {
        return {
            categoryCode: "@Model.CategoryCode",
            templateCode: "@Model.TemplateCode",
            ownerType: '@NtsActiveUserTypeEnum.OwnerOrRequester',
            taskStatusCode: $("#status").val(),
            moduleCode:"@Model.ModuleCode"
        };
    }
    function FilterRequestedByGrid() {
        return {
            categoryCode: "@Model.CategoryCode",
            templateCode: "@Model.TemplateCode",
            ownerType: '@NtsActiveUserTypeEnum.Requester',
            taskStatusCode: $("#status").val(),
            moduleCode:"@Model.ModuleCode"
        };
    }
    function FilterSharedWithGrid() {
        return {
            categoryCode: "@Model.CategoryCode",
            templateCode: "@Model.TemplateCode",
            ownerType: '@NtsActiveUserTypeEnum.SharedWith',
            taskStatusCode: $("#status").val(),
            moduleCode:"@Model.ModuleCode"
        };
    }
    function FilterSharedByGrid() {
        return {
            categoryCode: "@Model.CategoryCode",
            templateCode: "@Model.TemplateCode",
            ownerType: '@NtsActiveUserTypeEnum.SharedBy',
            taskStatusCode: $("#status").val(),
            moduleCode:"@Model.ModuleCode"
        };
    }
    function OnNumberClick(div, ownerType, status) {
        console.log(ownerType);
        SetFilterByStatus(ownerType, status);
        $('.div-count').removeClass('div-count-active');
        $(div).addClass('div-count-active');
        if ($("#ownertype").val() === ownerType) {
            $("#numberclicked").val(false);
        }
        else {
            $("#numberclicked").val(true);
        }
        $("#status").val(status);
        $("#ownertype").val(ownerType);
        var grid = "#kgrid_" + ownerType;
        $(grid).data("kendoGrid").dataSource.read();

    }
    function OnTabHeaderClick(div, ownerType) {
        SetFilterByStatus(ownerType, null);
        $('.div-count').removeClass('div-count-active');
        $("#status").val(null);
        $("#ownertype").val(ownerType);
        var grid = "#kgrid_" + ownerType;
        $(grid).data("kendoGrid").dataSource.read();
        $("#numberclicked").val(false);
    }
    $('.nav-tabs a').on('shown.bs.tab', function (event) {
        var id = event.target.id;
       // $("#ownertype").val(id);
        //var y = event.relatedTarget.id;
        SetFilterByStatus(id, null);
        var numberclicked = $("#numberclicked").val();
        if (numberclicked === 'false') {
            $("#status").val(null);
            var grid = "#kgrid_" + id;
            $(grid).data("kendoGrid").dataSource.read();
        }
        $("#numberclicked").val(false);
    });
    function SetFilterByStatus(ownerType, status) {
        var title = "";
        switch (ownerType) {
            case "@NtsActiveUserTypeEnum.OwnerOrRequester":
                title = "Created/Requested By Me";
                break;
            case "@NtsActiveUserTypeEnum.Assignee":
                title = "Assigned To Me";
                break;
            case "@NtsActiveUserTypeEnum.SharedBy":
                title = "Shared By Me";
                break;
              case "@NtsActiveUserTypeEnum.SharedWith":
                title = "Shared With Me";
                break;
            default:
        }
        $('.filter-by').find('b').html(title);
        if (status === null) {
            $('.filter-status').hide();
        }
        else {
            var s = "";
            var c = "";
            if (status ==="TASK_STATUS_DRAFT") {
                s = "Draft";
                c = "text-draft";
            }
            else if (status === "TASK_STATUS_INPROGRESS,TASK_STATUS_OVERDUE") {
                s = "In Progress/ Overdue";
                c = "text-inprogress";
            }
            else if (status === "TASK_STATUS_COMPLETE") {
                s = "Completed";
                c = "text-completed";
            }
            else if (status === "TASK_STATUS_REJECT,TASK_STATUS_CANCEL") {
                s = "Rejected/ Canceled";
                c = "text-rejected";
            }
            $('.filter-status').show();
            $('.filter-status').find('b').html(s);
            $('.filter-status').find('b').removeClass();
            $('.filter-status').find('b').addClass('pl-1 pr-1 ' + c);
        }
    }
</script>
<div class="row no-gutters pad-20">
    <div class="col-12 pb-3 pt-1">
        <h3>@*@Model.Page.Title*@</h3>
    </div>
    <div class="container col-12">
        <span class="scroller scroller-left"><i class="fa fal fa-chevron-left"></i></span>
        <div class="scroller scroller-right"><i class="fa fal fa-chevron-right"></i></div>
        <div class="col-12 pt-3 wrapper">
            <input type="hidden" id="status" />
            <input type="hidden" id="numberclicked" value="false" />
            <input type="hidden" id="ownertype" />
            <ul class="nav nav-tabs list nav-justified" role="tablist" id="myTab">
                <li class="nav-item">
                    <a data-toggle="tab" id="@NtsActiveUserTypeEnum.Assignee" href="#assignedToMe" class="nav-link active" role="tab" aria-controls="user" aria-selected="true" style="text-align:center;">

                        <h6 onclick="OnTabHeaderClick(this, '@NtsActiveUserTypeEnum.Assignee')"><i class="fas fa-user"></i>&nbsp;Assigned To Me</h6>
                        <div class="row no-gutters" style="text-align:center;padding-top:5px;">
                            @*<div class="col-2 pl-1 pr-1 pt-2 pb-2 div-count" onclick="OnNumberClick(this, '@NtsTaskOwnerTypeEnum.Assigned','TASK_STATUS_DRAFT')">
                                    <div class="font-weight-bold">@Model.AssignedToMeDraftCount</div>
                                    <div class="number-text">Draft</div>
                                </div>*@
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-inprogress" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.Assignee', 'TASK_STATUS_INPROGRESS,TASK_STATUS_OVERDUE')">
                                <div class="font-weight-bold">@Model.AssignedToMeInProgreessOverDueCount</div>
                                <div class="number-text">In Progress/ Overdue</div>
                            </div>
                            @*<div class="col pl-1 pr-1 pt-2 pb-2 div-count" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.Assignee', 'TASK_STATUS_INPROGRESS')">
                                    <div class="text-warning font-weight-bold">@Model.AssignedToMeOverdueCount</div>
                                    <div class="text-warning number-text">Overdue</div>
                                </div>*@
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-completed" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.Assignee','TASK_STATUS_COMPLETE')">
                                <div class="font-weight-bold">@Model.AssignedToMeCompleteCount</div>
                                <div class="number-text">Completed</div>
                            </div>
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-rejected" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.Assignee','TASK_STATUS_REJECT,TASK_STATUS_CANCEL,TASK_STATUS_CLOSE')">
                                <div class="font-weight-bold">@Model.AssignedToMeRejectCancelCloseCount</div>
                                <div class="number-text">Rejected/ Canceled/ Closed</div>
                            </div>
                            @*<div class="col pl-1 pr-1 pt-2 pb-2 div-count" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.Assignee','TASK_STATUS_CANCEL')">
                                    <div class="text-dark font-weight-bold">@Model.AssignedToMeCancelCount</div>
                                    <div class="text-dark number-text">Canceled</div>
                                </div>*@
                        </div>
                    </a>
                </li>

                <li class="nav-item">
                    <a data-toggle="tab" id="@NtsActiveUserTypeEnum.OwnerOrRequester" href="#createdByMe" class="nav-link" role="tab" aria-controls="user2" aria-selected="true" style="text-align:center;">

                        <h6 onclick="OnTabHeaderClick(this, '@NtsActiveUserTypeEnum.OwnerOrRequester')"><i class="fas fa-user"></i>&nbsp;Created/Requested By Me</h6>
                        <div class="row no-gutters" style="text-align:center;padding-top:5px;">
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-draft" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.OwnerOrRequester','TASK_STATUS_DRAFT')">
                                <div class="font-weight-bold">@Model.CreatedOrRequestedByMeDraftCount</div>
                                <div class="number-text">Draft</div>
                            </div>
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-inprogress" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.OwnerOrRequester', 'TASK_STATUS_INPROGRESS,TASK_STATUS_OVERDUE')">
                                <div class="font-weight-bold">@Model.CreatedOrRequestedByMeInProgreessOverDueCount</div>
                                <div class="number-text">In Progress/ Overdue</div>
                            </div>
                            @*<div class="col pl-1 pr-1 pt-2 pb-2 div-count" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.Owner', 'TASK_STATUS_INPROGRESS')">
                                    <div class="text-warning font-weight-bold">@Model.CreatedByMeOverdueCount</div>
                                    <div class="text-warning number-text">Overdue</div>
                                </div>*@
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-completed" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.OwnerOrRequester','TASK_STATUS_COMPLETE')">
                                <div class="font-weight-bold">@Model.CreatedOrRequestedByMeCompleteCount</div>
                                <div class="number-text">Completed</div>
                            </div>
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-rejected" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.OwnerOrRequester','TASK_STATUS_REJECT,TASK_STATUS_CANCEL,TASK_STATUS_CLOSE')">
                                <div class="font-weight-bold">@Model.CreatedOrRequestedByMeRejectCancelCloseCount</div>
                                <div class="number-text">Rejected/ Canceled/ Closed</div>
                            </div>
                            @*<div class="col pl-1 pr-1 pt-2 pb-2 div-count" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.Owner','TASK_STATUS_CANCEL')">
                                    <div class="text-dark font-weight-bold">@Model.CreatedByMeCancelCount</div>
                                    <div class="text-dark number-text">Canceled</div>
                                </div>*@
                        </div>
                    </a>
                </li>

                <li class="nav-item">
                    <a data-toggle="tab" id="@NtsActiveUserTypeEnum.SharedWith" href="#sharedWithMe" class="nav-link" role="tab" aria-controls="user" aria-selected="true" style="text-align:center;">
                        <h6 onclick="OnTabHeaderClick(this, '@NtsActiveUserTypeEnum.SharedWith')"><i class="fas fa-user"></i>&nbsp;Shared With Me</h6>
                        <div class="row no-gutters" style="text-align:center;padding-top:5px;">
                            @*<div class="col-2 pl-1 pr-1 pt-2 pb-2 div-count" onclick="OnNumberClick(this, '@NtsTaskOwnerTypeEnum.SharedWith','TASK_STATUS_DRAFT')">
                                    <div class="font-weight-bold">@Model.SharedWithMeDraftCount</div>
                                    <div class="number-text">Draft</div>
                                </div>*@
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-inprogress" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedWith', 'TASK_STATUS_INPROGRESS,TASK_STATUS_OVERDUE')">
                                <div class="font-weight-bold">@Model.SharedWithMeInProgressOverDueCount</div>
                                <div class="number-text">In Progress/ Overdue</div>
                            </div>
                            @*<div class="col pl-1 pr-1 pt-2 pb-2 div-count" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedWith', 'TASK_STATUS_INPROGRESS')">
                                    <div class="text-warning font-weight-bold">@Model.SharedWithMeOverdueCount</div>
                                    <div class="text-warning number-text">Overdue</div>
                                </div>*@
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-completed" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedWith','TASK_STATUS_COMPLETE')">
                                <div class="font-weight-bold">@Model.SharedWithMeCompleteCount</div>
                                <div class="number-text">Completed</div>
                            </div>
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-rejected" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedWith','TASK_STATUS_REJECT,TASK_STATUS_CANCEL,TASK_STATUS_CLOSE')">
                                <div class="font-weight-bold">@Model.SharedWithMeRejectCancelCloseCount</div>
                                <div class="number-text">Rejected/ Canceled/ Closed</div>
                            </div>
                            @*<div class="col pl-1 pr-1 pt-2 pb-2 div-count" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedWith','TASK_STATUS_CANCEL')">
                                    <div class="text-dark font-weight-bold">@Model.SharedWithMeCancelCount</div>
                                    <div class="text-dark number-text">Canceled</div>
                                </div>*@
                        </div>
                    </a>
                </li>

                <li class="nav-item">
                    <a data-toggle="tab" id="@NtsActiveUserTypeEnum.SharedBy" href="#sharedByMe" class="nav-link" role="tab" aria-controls="user" aria-selected="true" style="text-align:center;">
                        <h6 onclick="OnTabHeaderClick(this, '@NtsActiveUserTypeEnum.SharedBy')"><i class="fas fa-user"></i>&nbsp;Shared By Me</h6>
                        <div class="row no-gutters" style="text-align:center;padding-top:5px;">
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-draft" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedBy','TASK_STATUS_DRAFT')">
                                <div class="font-weight-bold">@Model.SharedByMeDraftCount</div>
                                <div class="number-text">Draft</div>
                            </div>
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-inprogress" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedBy', 'TASK_STATUS_INPROGRESS,TASK_STATUS_OVERDUE')">
                                <div class="font-weight-bold">@Model.SharedByMeInProgreessOverDueCount</div>
                                <div class="number-text">In Progress/ Overdue</div>
                            </div>
                            @*<div class="col pl-1 pr-1 pt-2 pb-2 div-count" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedWith', 'TASK_STATUS_INPROGRESS')">
                                    <div class="text-warning font-weight-bold">@Model.SharedByMeOverdueCount</div>
                                    <div class="text-warning number-text">Overdue</div>
                                </div>*@
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-completed" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedBy','TASK_STATUS_COMPLETE')">
                                <div class="font-weight-bold">@Model.SharedByMeCompleteCount</div>
                                <div class="number-text">Completed</div>
                            </div>
                            <div class="col pl-1 pr-1 pt-2 pb-2 div-count text-rejected" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedBy','TASK_STATUS_REJECT,TASK_STATUS_CANCEL,TASK_STATUS_CLOSE')">
                                <div class="font-weight-bold">@Model.SharedByMeRejectCancelCloseCount</div>
                                <div class="number-text">Rejected/ Canceled/ Closed</div>
                            </div>
                            @*<div class="col pl-1 pr-1 pt-2 pb-2 div-count" onclick="OnNumberClick(this, '@NtsActiveUserTypeEnum.SharedWith','TASK_STATUS_CANCEL')">
                                    <div class="text-dark font-weight-bold">@Model.SharedByMeCancelCount</div>
                                    <div class="text-dark number-text">Canceled</div>
                                </div>*@
                        </div>
                    </a>
                </li>
            </ul>


        </div>
        <div class="tab-content" style="border-left: 1px solid rgb(222, 226, 230);border-right: 1px solid rgb(222, 226, 230);border-bottom: 1px solid rgb(222, 226, 230);">
            <div id="assignedToMe" class="tab-pane  in active" role="tabpanel" aria-labelledby="assignedToMe-tab">
                <div class="pt-2 pl-2">
                    <span class="filter-by">Filter By:<b class="pl-1 pr-1 text-primary">Assigned To Me</b> </span>
                    <span style="display:none;" class="filter-status">Status:<b></b></span>
                </div>
                <div class="p-2">
                    <script>
                        var columnDefs_@NtsActiveUserTypeEnum.Assignee.ToString() = [
                            {
                                headerName: "Actions",
                                field: "Id",
                                cellRenderer: params => {
                                    return "<div class='btn-group grid-menu' id='tree-Assignee' data-idvalue='" + params.value + "' data-status=\"0\" data-status='" + params.data.TaskStatusCode + "'><i class='fas fa-ellipsis-v'></i></div>"
                                }
                            },
                            {
                                field:"TaskNo"
                            },
                            {
                                field: "TaskSubject"
                            },
                            {
                                field: "TaskStatusName",
                                headerName:"Status"

                            },
                            {
                                field: "AssigneeUserName",
                                headerName: "Assignee Name"
                            },
                            {
                                field: "OwnerUserName",

                            },
                            {
                                field: "TemplateCategoryCode",

                            },
                            {
                                field: "TemplateCode",

                            },
                            {
                                field: "ModuleCode",

                            }

                        ];
                        $(function () {
                            GetData_kgrid_@(NtsActiveUserTypeEnum.Assignee.ToString())();
                             $.contextMenu({
                                 selector: '#tree-Assignee',
                                trigger: 'left',
                                build: function ($trigger, e) {


                                    var id = $trigger.data('idvalue');
                                    var status = $trigger.data('status');
                                    switch (0) {
                                        case 0:
                                            return {
                                                callback: function (key, options) {
                                                    switch (key) {
                                                        case 'edit':
                                                            OnEdit(id);
                                                            break;
                                                        case 'view':
                                                            OnView(id, status);
                                                            break;

                                                        case 'delete':
                                                            OnDelete(id);
                                                            break;

                                                        default:
                                                    }
                                                },
                                                items: {

                                                     @if (Model.EnableEditButton)
                                                    {
                                                        @:"view": { name: "Edit", icon: "fas fa-pencil" },
                                                    }
                                                     @if (Model.EnableDeleteButton)
                                                    {
                                                        @:"delete": { name: "Delete", icon: "fas fa-trash" },
                                                    }

                                                }
                                            };


                                    }
                                }
                            });
                        });

                        function GetData_kgrid_@(NtsActiveUserTypeEnum.Assignee.ToString())() {
                            document.getElementById("kgrid_@NtsActiveUserTypeEnum.Assignee.ToString()").innerHTML = "";
                            var prms = FilterAssignedToMeGrid();
                            var p = 'templateCode=' + prms.templateCode + '&ownerType=' + prms.ownerType + '&taskStatusCode' + prms.taskStatusCode + '&categoryCode' + prms.categoryCode + '&moduleCode' + prms.moduleCode;
                            gridConfig(
                                "kgrid_@NtsActiveUserTypeEnum.Assignee.ToString()",
                                "/cms/NtsTask/LoadNtsTaskIndexPageGrid?"+p,
                                columnDefs_@NtsActiveUserTypeEnum.Assignee.ToString(),
                                false,
                                true,
                                true,
                                true,
                                1,
                                true,
                                10);
                        }
                    </script>
                    <div id="kgrid_@NtsActiveUserTypeEnum.Assignee.ToString()" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
                    @*@(Html.Kendo().Grid<TaskViewModel>
        ()
        .Name($"kgrid_{NtsActiveUserTypeEnum.Assignee}")
        .Columns(columns =>
        {
            //columns.Bound("TaskId").Visible(false);
            var c = columns.Command(command =>
            {
                if (Model.EnableEditButton)
                {
                    command.Custom("Edit").Text("<i class='fa fas fa-eye'></i>").Click("OnView").HtmlAttributes(new { @class = "action-icon" });
                }
                //if (Model.EnableDeleteButton)
                //{
                //    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon" });
                //}
            }).Width(120);
            //foreach (var column in Model.SelectedTableRows)
            //{

            //    columns.Bound(column.ColumnName).Title(column.HeaderName);

            //}
            columns.Bound(x=>x.Id).Visible(false);
            columns.Bound(x=>x.TaskNo);
            columns.Bound(x=>x.TaskSubject);
            columns.Bound(x=>x.TaskStatusName).Title("Status");
            columns.Bound(x=>x.AssigneeUserName).Title("Assignee Name");
            //columns.Bound(x=>x.TaskDescription);
            columns.Bound(x=>x.TemplateCode).Title("Template Name");
            columns.Bound(x=>x.TemplateCategoryName).Title("Category Name");
            columns.Bound(x=>x.OwnerUserName).Title("Owner Name");
            columns.Bound(x => x.Module);
            //columns.Bound(x=>x.CreatedByUserName);
            //columns.Bound(x=>x.LastUpdatedByUserName);

        })

        //.ToolBar(toolbar =>
        //{
        //    if (Model.EnableCreateButton)
        //    {
        //        toolbar.ClientTemplate($"<button type='button' class='btn btn-primary' onclick='OnCreate();'><i class='fa fas fa-plus'></i>&nbsp;{Model.CreateButtonText.ToDefaultCreateButtonText()}</button>");
        //    }
        //})
        //.Events(e => e.DataBound(string.Concat("OnDataBound_", Model.FieldName)))
        .Scrollable(x => x.Enabled(true))
        .Sortable(srt => srt.Enabled(true))
        .Selectable(select => select.Enabled(false))
        .Filterable(f => f.Extra(false))
        .Pageable(pageable => pageable
        .Refresh(true)

        .PageSizes(true)
        .ButtonCount(5))
        //.AutoBind(true)
        .DataSource(
        dataSource => dataSource
        .Ajax()
        .PageSize(10)

        //.Events(events => events.Error("OnError"))
        .Read(read => read.Action("LoadNtsTaskIndexPageGrid", "NtsTask", new { @area = "Cms" }).Data("FilterAssignedToMeGrid"))
        //.Model(model => model.Id(p => p.Id))

        )

        )*@

                </div>
            </div>
            <div id="createdByMe" class="tab-pane" role="tabpanel" aria-labelledby="createdByMe-tab">
                <div class="pt-2">
                    <button type="submit" class="btn btn-primary" onclick="return OnCreate();"><i class="fa fa-plus pr-1"></i>@Model.CreateButtonText.ToDefaultCreateButtonText()</button>
                    <span class="filter-by">Filter By:<b class="pl-1 pr-1 text-primary"></b> </span>
                    <span style="display:none;" class="filter-status">Status:<b></b></span>
                </div>
                <div class="p-2">
                    <script>
                        var columnDefs_@NtsActiveUserTypeEnum.OwnerOrRequester.ToString() = [
                            {
                                headerName: "Actions",
                                field: "Id",
                                cellRenderer: params => {
                                    return "<div class='btn-group grid-menu' id='tree-OwnerOrRequester' data-idvalue='" + params.value + "' data-status=\"0\" data-status='" + params.data.TaskStatusCode + "'><i class='fas fa-ellipsis-v'></i></div>"
                                }
                            },
                            {
                                field:"TaskNo"
                            },
                            {
                                field: "TaskSubject"
                            },
                            {
                                field: "TaskStatusName",
                                headerName:"Status"
                                
                            },
                            {
                                field: "AssigneeUserName",
                                headerName: "Assignee Name"
                            },
                            {
                                field: "OwnerUserName",
                               
                            },
                            {
                                field: "TemplateCategoryCode",

                            },
                            {
                                field: "TemplateCode",

                            },
                            {
                                field: "ModuleCode",

                            }
                            
                        ];
                        $(function () {
                            GetData_kgrid_@(NtsActiveUserTypeEnum.OwnerOrRequester.ToString())();
                             $.contextMenu({
                                 selector: '#tree-OwnerOrRequester',
                                trigger: 'left',
                                build: function ($trigger, e) {


                                    var id = $trigger.data('idvalue');
                                    var status = $trigger.data('status');
                                    switch (0) {
                                        case 0:
                                            return {
                                                callback: function (key, options) {
                                                    switch (key) {
                                                        case 'edit':
                                                            OnEdit(id);
                                                            break;
                                                        case 'view':
                                                            OnView(id, status);
                                                            break;

                                                        case 'delete':
                                                            OnDelete(id);
                                                            break;

                                                        default:
                                                    }
                                                },
                                                items: {
                                                   
                                                     @if (Model.EnableEditButton)
                                                    {
                                                        @:"view": { name: "Edit", icon: "fas fa-pencil" },
                                                    }
                                                    @if (Model.EnableDeleteButton)
                                                    {
                                                        @*@:if(status!= "SERVICE_STATUS_DRAFT"){*@
                                                        @:"delete": { name: "Delete", icon: "fas fa-trash" },
                                                        @*@:}*@

                                                    }
                                                }
                                            };


                                    }
                                }
                            });
                        });

                        function GetData_kgrid_@(NtsActiveUserTypeEnum.OwnerOrRequester.ToString())() {
                            document.getElementById("kgrid_@NtsActiveUserTypeEnum.OwnerOrRequester.ToString()").innerHTML = "";
                            var prms = FilterCreatedByGrid();
                            var p = 'templateCode=' + prms.templateCode + '&ownerType=' + prms.ownerType + '&taskStatusCode' + prms.taskStatusCode + '&categoryCode' + prms.categoryCode + '&moduleCode' + prms.moduleCode;
                            gridConfig(
                                "kgrid_@NtsActiveUserTypeEnum.OwnerOrRequester.ToString()",
                                "/cms/NtsTask/LoadNtsTaskIndexPageGrid?"+p,
                                columnDefs_@NtsActiveUserTypeEnum.OwnerOrRequester.ToString(),
                                false,
                                true,
                                true,
                                true,
                                1,
                                true,
                                10);
                        }
                    </script>
                    <div id="kgrid_@NtsActiveUserTypeEnum.OwnerOrRequester.ToString()" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
                    @*@(Html.Kendo().Grid<TaskViewModel>
        ()
        .Name($"kgrid_{NtsActiveUserTypeEnum.OwnerOrRequester}")
        .Columns(columns =>
        {

            var c = columns.Command(command =>
            {
                if (Model.EnableEditButton)
                {
                    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnView").HtmlAttributes(new { @class = "action-icon" });
                }
                if (Model.EnableDeleteButton)
                {
                    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon action-delete" });
                }
            }).Width(120);

            columns.Bound(x => x.Id).Visible(false);
            columns.Bound(x => x.TaskNo);
            columns.Bound(x => x.TaskSubject);
            columns.Bound(x => x.TaskStatusName).Title("Status");
            columns.Bound(x => x.AssigneeUserName).Title("Assignee Name");
            //columns.Bound(x=>x.TaskDescription);
            columns.Bound(x => x.TemplateCode).Title("Template Name");
            columns.Bound(x => x.TemplateCategoryName).Title("Category Name");
            columns.Bound(x => x.OwnerUserName).Title("Owner Name");
            columns.Bound(x => x.Module);

        })


        .Events(e => e.DataBound("OnDatabound_OwnerOrRequester"))
        .Scrollable(x => x.Enabled(true))
        .Sortable(srt => srt.Enabled(true))
        .Selectable(select => select.Enabled(false))
        .Filterable(f => f.Extra(false))
        .Pageable(pageable => pageable
        .Refresh(true)

        .PageSizes(true)
        .ButtonCount(5))
        //.AutoBind(true)
        .DataSource(
        dataSource => dataSource
        .Ajax()
        .PageSize(10)

        //.Events(events => events.Error("OnError"))
        .Read(read => read.Action("LoadNtsTaskIndexPageGrid", "NtsTask", new { @area = "Cms" }).Data("FilterCreatedByGrid"))
        //.Model(model => model.Id(p => p.Id))

        )

        )*@
                </div>
            </div>
           
            <div id="sharedWithMe" class="tab-pane" role="tabpanel" aria-labelledby="sharedWithMe-tab">
                <div class="pt-2 pl-2">
                    <span class="filter-by">Filter By:<b class="pl-1 pr-1 text-primary"></b> </span>
                    <span style="display:none;" class="filter-status">Status:<b></b></span>
                </div>
                <div class="p-2">
                    <script>
                        var columnDefs_@NtsActiveUserTypeEnum.SharedWith.ToString() = [
                            {
                                headerName: "Actions",
                                field: "Id",
                                cellRenderer: params => {
                                    return "<div class='btn-group grid-menu' id='tree-SharedWith' data-idvalue='" + params.value + "' data-status=\"0\" data-status='" + params.data.TaskStatusCode + "'><i class='fas fa-ellipsis-v'></i></div>"
                                }
                            },
                            {
                                field:"TaskNo"
                            },
                            {
                                field: "TaskSubject"
                            },
                            {
                                field: "TaskStatusName",
                                headerName:"Status"

                            },
                            {
                                field: "AssigneeUserName",
                                headerName: "Assignee Name"
                            },
                            {
                                field: "OwnerUserName",

                            },
                            {
                                field: "TemplateCategoryCode",

                            },
                            {
                                field: "TemplateCode",

                            },
                            {
                                field: "ModuleCode",

                            }

                        ];
                        $(function () {
                            GetData_kgrid_@(NtsActiveUserTypeEnum.SharedWith.ToString())();
                             $.contextMenu({
                                 selector: '#tree-SharedWith',
                                trigger: 'left',
                                build: function ($trigger, e) {


                                    var id = $trigger.data('idvalue');
                                    var status = $trigger.data('status');
                                    switch (0) {
                                        case 0:
                                            return {
                                                callback: function (key, options) {
                                                    switch (key) {
                                                        case 'edit':
                                                            OnEdit(id);
                                                            break;
                                                        case 'view':
                                                            OnView(id, status);
                                                            break;

                                                        case 'delete':
                                                            OnDelete(id);
                                                            break;

                                                        default:
                                                    }
                                                },
                                                items: {

                                                     @if (Model.EnableEditButton)
                                                    {
                                                        @:"view": { name: "Edit", icon: "fas fa-pencil" },
                                                    }
                                                   
                                                }
                                            };


                                    }
                                }
                            });
                        });

                        function GetData_kgrid_@(NtsActiveUserTypeEnum.SharedWith.ToString())() {
                            document.getElementById("kgrid_@NtsActiveUserTypeEnum.SharedWith.ToString()").innerHTML = "";
                            var prms = FilterSharedWithGrid();
                            var p = 'templateCode=' + prms.templateCode + '&ownerType=' + prms.ownerType + '&taskStatusCode' + prms.taskStatusCode + '&categoryCode' + prms.categoryCode + '&moduleCode' + prms.moduleCode;
                            gridConfig(
                                "kgrid_@NtsActiveUserTypeEnum.SharedWith.ToString()",
                                "/cms/NtsTask/LoadNtsTaskIndexPageGrid?"+p,
                                columnDefs_@NtsActiveUserTypeEnum.SharedWith.ToString(),
                                false,
                                true,
                                true,
                                true,
                                1,
                                true,
                                10);
                        }
                    </script>
                    <div id="kgrid_@NtsActiveUserTypeEnum.SharedWith.ToString()" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
                    @*@(Html.Kendo().Grid<TaskViewModel> ()
        .Name($"kgrid_{NtsActiveUserTypeEnum.SharedWith}")
        .Columns(columns =>
        {
            //columns.Bound("TaskId").Visible(false);
            var c = columns.Command(command =>
            {
                if (Model.EnableEditButton)
                {
                    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnView").HtmlAttributes(new { @class = "action-icon" });
                }
                //if (Model.EnableDeleteButton)
                //{
                //    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon" });
                //}
            }).Width(120);
            //foreach (var column in Model.SelectedTableRows)
            //{

            //    columns.Bound(column.ColumnName).Title(column.HeaderName);

            //}
            columns.Bound(x => x.Id).Visible(false);
            columns.Bound(x => x.TaskNo);
            columns.Bound(x => x.TaskSubject);
            columns.Bound(x => x.TaskStatusName).Title("Status");
            columns.Bound(x => x.AssigneeUserName).Title("Assignee Name");
            //columns.Bound(x=>x.TaskDescription);
            columns.Bound(x => x.TemplateCode).Title("Template Name");
            columns.Bound(x => x.TemplateCategoryName).Title("Category Name");
            columns.Bound(x => x.OwnerUserName).Title("Owner Name");
            columns.Bound(x => x.Module);
            //columns.Bound(x => x.CreatedByUserName);
            //columns.Bound(x => x.LastUpdatedByUserName);
        })

        .ToolBar(toolbar =>
        {
            //if (Model.EnableCreateButton)
            //{
            //    toolbar.ClientTemplate($"<button type='button' class='btn btn-primary' onclick='OnCreate();'><i class='fa fas fa-plus'></i>&nbsp;{Model.CreateButtonText.ToDefaultCreateButtonText()}</button>");
            //}
        })
        //.Events(e => e.DataBound(string.Concat("OnDataBound_", Model.FieldName)))
        .Scrollable(x => x.Enabled(true))
        .Sortable(srt => srt.Enabled(true))
        .Selectable(select => select.Enabled(false))
        .Filterable(f => f.Extra(false))
        .Pageable(pageable => pageable
        .Refresh(true)

        .PageSizes(true)
        .ButtonCount(5))
        .AutoBind(false)
        .DataSource(
        dataSource => dataSource
        .Ajax()
        .PageSize(10)

        //.Events(events => events.Error("OnError"))
        .Read(read => read.Action("LoadNtsTaskIndexPageGrid", "NtsTask", new { @area="Cms"}).Data("FilterSharedWithGrid"))
        //.Model(model => model.Id(p => p.Id))

        )

        )*@

                </div>
            </div>
            <div id="sharedByMe" class="tab-pane" role="tabpanel" aria-labelledby="sharedByMe-tab">
                <div class="pt-2 pl-2">
                    <span class="filter-by">Filter By:<b class="pl-1 pr-1 text-primary"></b> </span>
                    <span style="display:none;" class="filter-status">Status:<b></b></span>
                </div>
                <div class="p-2">
                    <script>
                        var columnDefs_@NtsActiveUserTypeEnum.SharedBy.ToString() = [
                            {
                                headerName: "Actions",
                                field: "Id",
                                cellRenderer: params => {
                                    return "<div class='btn-group grid-menu' id='tree-SharedBy' data-idvalue='" + params.value + "' data-status=\"0\" data-status='" + params.data.TaskStatusCode + "'><i class='fas fa-ellipsis-v'></i></div>"
                                }
                            },
                            {
                                field:"TaskNo"
                            },
                            {
                                field: "TaskSubject"
                            },
                            {
                                field: "TaskStatusName",
                                headerName:"Status"

                            },
                            {
                                field: "AssigneeUserName",
                                headerName: "Assignee Name"
                            },
                            {
                                field: "OwnerUserName",

                            },
                            {
                                field: "TemplateCategoryCode",

                            },
                            {
                                field: "TemplateCode",

                            },
                            {
                                field: "ModuleCode",

                            }

                        ];
                        $(function () {
                            GetData_kgrid_@(NtsActiveUserTypeEnum.SharedBy.ToString())();
                             $.contextMenu({
                                 selector: '#tree-SharedBy',
                                trigger: 'left',
                                build: function ($trigger, e) {


                                    var id = $trigger.data('idvalue');
                                    var status = $trigger.data('status');
                                    switch (0) {
                                        case 0:
                                            return {
                                                callback: function (key, options) {
                                                    switch (key) {
                                                        case 'edit':
                                                            OnEdit(id);
                                                            break;
                                                        case 'view':
                                                            OnView(id, status);
                                                            break;

                                                        case 'delete':
                                                            OnDelete(id);
                                                            break;

                                                        default:
                                                    }
                                                },
                                                items: {

                                                     @if (Model.EnableEditButton)
                                                    {
                                                        @:"view": { name: "Edit", icon: "fas fa-pencil" },
                                                    }

                                                }
                                            };


                                    }
                                }
                            });
                        });

                        function GetData_kgrid_@(NtsActiveUserTypeEnum.SharedBy.ToString())() {
                            document.getElementById("kgrid_@NtsActiveUserTypeEnum.SharedBy.ToString()").innerHTML = "";
                            var prms = FilterSharedByGrid();
                            var p = 'templateCode=' + prms.templateCode + '&ownerType=' + prms.ownerType + '&taskStatusCode' + prms.taskStatusCode + '&categoryCode' + prms.categoryCode + '&moduleCode' + prms.moduleCode;
                            gridConfig(
                                "kgrid_@NtsActiveUserTypeEnum.SharedBy.ToString()",
                                "/cms/NtsTask/LoadNtsTaskIndexPageGrid?"+p,
                                columnDefs_@NtsActiveUserTypeEnum.SharedBy.ToString(),
                                false,
                                true,
                                true,
                                true,
                                1,
                                true,
                                10);
                        }
                    </script>
                    <div id="kgrid_@NtsActiveUserTypeEnum.SharedBy.ToString()" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
                    @*@(Html.Kendo().Grid<TaskViewModel> ()
        .Name($"kgrid_{NtsActiveUserTypeEnum.SharedBy}")
        .Columns(columns =>
        {
            //columns.Bound("TaskId").Visible(false);
            var c = columns.Command(command =>
            {
                if (Model.EnableEditButton)
                {
                    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnView").HtmlAttributes(new { @class = "action-icon" });
                }
                //if (Model.EnableDeleteButton)
                //{
                //    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon" });
                //}
            }).Width(120);
            //foreach (var column in Model.SelectedTableRows)
            //{

            //    columns.Bound(column.ColumnName).Title(column.HeaderName);

            //}
            columns.Bound(x => x.Id).Visible(false);
            columns.Bound(x => x.TaskNo);
            columns.Bound(x => x.TaskSubject);
            columns.Bound(x => x.TaskStatusName).Title("Status");
            columns.Bound(x => x.AssigneeUserName).Title("Assignee Name");
            //columns.Bound(x=>x.TaskDescription);
            columns.Bound(x => x.TemplateCode).Title("Template Name");
            columns.Bound(x => x.TemplateCategoryName).Title("Category Name");
            columns.Bound(x => x.OwnerUserName).Title("Owner Name");
            columns.Bound(x => x.Module);
            //columns.Bound(x => x.CreatedByUserName);
            //columns.Bound(x => x.LastUpdatedByUserName);
        })

        .ToolBar(toolbar =>
        {
            //if (Model.EnableCreateButton)
            //{
            //    toolbar.ClientTemplate($"<button type='button' class='btn btn-primary' onclick='OnCreate();'><i class='fa fas fa-plus'></i>&nbsp;{Model.CreateButtonText.ToDefaultCreateButtonText()}</button>");
            //}
        })
        //.Events(e => e.DataBound(string.Concat("OnDataBound_", Model.FieldName)))
        .Scrollable(x => x.Enabled(true))
        .Sortable(srt => srt.Enabled(true))
        .Selectable(select => select.Enabled(false))
        .Filterable(f => f.Extra(false))
        .Pageable(pageable => pageable
        .Refresh(true)

        .PageSizes(true)
        .ButtonCount(5))
        .AutoBind(false)
        .DataSource(
        dataSource => dataSource
        .Ajax()
        .PageSize(10)

        //.Events(events => events.Error("OnError"))
        .Read(read => read.Action("LoadNtsTaskIndexPageGrid", "NtsTask", new { @area = "Cms" }).Data("FilterSharedByGrid"))
        //.Model(model => model.Id(p => p.Id))

        )

        )*@

                </div>
            </div>
        </div>
        @(Html.Kendo().Dialog()
        .Name("confirmDelete")
        .Title("Confirm Delete")
        .Content(Model.DeleteConfirmationMessage)
        .Width(400)
        .Modal(true)
        .Visible(false)
        .Actions(actions =>
        {
            actions.Add().Text("Cancel");
            actions.Add().Text("Continue Delete").Primary(true).Action("ConfirmDelete");
        }))
    </div>
</div>

