@using Synergy.App.ViewModel;
@using Synergy.App.Common;

@model ApiConnectionViewModel

@{
    ViewData["Title"] = "API Connection";
    Layout = null;
}
<script>
    function OnDeleteConnection(/*e*/Id) {
        var flag = confirm('Do you really want to delete the Connection?');

     //   e.preventDefault();
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        if (flag) {
            $.ajax({
                url:'@Url.Action("DeleteApiConnection", "BusinessAnalytics", new { @area="Cms"})?id=' + /*dataItem.*/Id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        refreshGridview();
                       // $("#ApiConnectionGrid").data("kendoGrid").dataSource.read();
                        kendo.alert("Connection Deleted Successfully.");
                    }
                },
                error: function (ert) {
                    refreshGridview();
                    //$("#ApiConnectionGrid").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }

    function OnEditConnection(Id) {
      //  var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = '/Cms/BusinessAnalytics/ManageApiConnection?id=' + /*dataItem.*/Id +'&dataAction=Edit';
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'API Connection', Width: 700, Height: 750, Position: 'Right' });
        return false;
    }
    function OnCreateConnection() {
        var url = '/Cms/BusinessAnalytics/ManageApiConnection?dataAction=Create';
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'API Connection', Width: 700, Height: 750, Position: 'Right' });
        return false;
    }
    function refreshGridview() {
        getApiConnectionData();
       // $("#ApiConnectionGrid").data("kendoGrid").dataSource.read();
    }


    $(document).ready(function () {

        getApiConnectionData();

    });


    var columnDefs1 = [
        {
            field: "Id",
            headerName: "Action",
            cellRenderer: params => {
                return "<i class='fa fas fa-pencil'  onclick='OnEditConnection(\"" + params.data.Id + "\")'></i>&nbsp;&nbsp;<i class='fa fas fa-trash' onclick='OnDeleteConnection(\"" + params.data.Id + "\")'></i>";
            }
        },

           {
            field: "NoteSubject",
               headerName: "Name",

           },
           {
               field: "restApiUrl",
               headerName:"Rest API Url"

           },
           {
               field: "apiKey",
               headerName:"API Key"
           },
        {
            field: "pollingTime",
            headerName: "Polling Time"
        },


    ];



    function getApiConnectionData() {
        document.getElementById("ApiConnectionGrid").innerHTML = "";

        gridConfig(
            "ApiConnectionGrid",
            "/Cms/BusinessAnalytics/ReadApiConnectionData",
            columnDefs1,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>


<div>
    <h4>@ViewBag.Title</h4>

    <hr />

    <div class="row">
        <div class="col-12">

            <button type='button' class='btn btn-primary' onclick='OnCreateConnection();'><i class='fa fas fa-plus'></i>&nbsp;Create API Connection</button>

            <div id="ApiConnectionGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

            
            @*@(Html.Kendo().Grid<ApiConnectionViewModel>
    ()
    .Name("ApiConnectionGrid")
    .ToolBar(toolbar =>
    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateConnection();'><i class='fa fas fa-plus'></i>&nbsp;Create API Connection</button>"))

    .Columns(columns =>

    {
        columns.Command(command =>
        {
            command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditConnection").HtmlAttributes(new { @class = "action-icon" });
            command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteConnection").HtmlAttributes(new { @class = "action-icon" });
        }).Title("Action").Width(100);

        columns.Bound(c => c.NoteSubject).Title("Name");
        columns.Bound(c => c.restApiUrl).Title("Rest API Url");
        columns.Bound(c => c.parameters).Title("parameters");
        columns.Bound(c => c.apiKey).Title("API Key");
        columns.Bound(c => c.pollingTime).Title("Polling Time");

    })
    .Scrollable(x => x.Enabled(false))
                .Sortable(srt => srt.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                                    .Operators(o => o.ForString(s => s.Clear()
                                                    .Contains("Contains")
                                                    .IsEqualTo("Is equal to")
                                                )))
                .Pageable(pageable => pageable
                .Refresh(true)

                .PageSizes(true)
                .ButtonCount(5))
                .AutoBind(true)
                .DataSource(
                dataSource => dataSource
                .Ajax()
                .PageSize(10)
                //.Events(events => events.Error("OnError"))
                .Read(read => read.Action("ReadApiConnectionData", "BusinessAnalytics"))
                .Model(model => model.Id(p => p.Id))
                )
          )*@

        </div>
    </div>
</div>
