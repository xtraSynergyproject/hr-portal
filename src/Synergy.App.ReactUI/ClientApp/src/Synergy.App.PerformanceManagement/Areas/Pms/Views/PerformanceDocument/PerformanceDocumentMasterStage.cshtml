@inject IStringLocalizer<CMS.UI.Web.Areas.Pms.Controllers.PerformanceDocumentController> Resource
@using Synergy.App.ViewModel;
@*@using Kendo.Mvc.UI;*@
@using Synergy.App.Common;
@*@using Kendo.Mvc.Extensions;*@
@model PerformanceDocumentStageViewModel
@{
    ViewData["Title"] = "Performance Document Stage";
    // if (ViewBag.Layout.IsNotNull())
    // {
    Layout = ViewBag.Layout ?? ViewBag.Layout;
    // }

    //Layout = null;

}
<style>
    .kgrdPDMS {
        width: 100% !important;
    }
</style>
<script type="text/javascript">

    $(document).ready(function () {
        HideLoader($("#global-overlay"));
           $("#DocumentMasterId").kendoDropDownList({
                optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
                dataTextField: "Name",
                dataValueField: "NoteId",
                filter: "contains",
                value:"@Model.ParentNoteId",
                change: OnMasterChange,
                dataSource:
                {
                    transport:
                        {
                            read:
                                {
                                    dataType: "json",
                                url: "/PMS/PerformanceDocument/GetPerformanceDocumentsList",

                                }
                        }
                }
           });

        var ddl = $("#DocumentMasterId").data("kendoDropDownList");
        if ("@Model.ParentNoteId" != "" && "@Model.ParentNoteId" != "null")
        {
            ddl.enable(false);
        }
        if (ddl.value() == null || ddl.value() == '') {
            $('.k-grid-toolbar').hide();
        }
        else
        {
            $('.k-grid-toolbar').show();
        }
    });

    function ChangeStatusAndCalculatePerformanceRating(id, status) {
        ShowLoader($('.viewdata'));
        var masterId = "";
         var ddl = $("#DocumentMasterId").data("kendoDropDownList");
        if ("@Model.ParentNoteId" != "" && "@Model.ParentNoteId" != "null") {
            masterId = "@Model.ParentNoteId";
        }
        else
        {
            masterId = ddl.value();
        }
        if (masterId == '')
        {
            alert("Please select document Master");
            return false;
        }
        $.ajax({
            url: '/pms/PerformanceDocument/ChangeStatusAndCalculateStageRating?noteId='+masterId+'&status=' + status + '&stageId=' + id,
            type: "Get",

            dataType: "json",
            success: function (result) {
                var ddl = $("#DocumentMasterId").data("kendoDropDownList");
                if (result.success) {
                    $("#kgrdPDMS").data("kendoGrid").dataSource.read({ ParentNoteId: ddl.value() });
                    HideLoader($('.viewdata'));
                }
                else {
                    HideLoader($('.viewdata'));
                    $("#kgrdPDMS").data("kendoGrid").dataSource.read({ ParentNoteId: ddl.value() });
                }
            },
            error: function (result) {
                var ddl = $("#DocumentMasterId").data("kendoDropDownList");
                $("#kgrdPDMS").data("kendoGrid").dataSource.read({ ParentNoteId: ddl.value() });
                HideLoader($('.viewdata'));
            }
        });
    }

    function OnMasterChange(e)
    {
        var ddl = $("#DocumentMasterId").data("kendoDropDownList");
        if (ddl.value() == null || ddl.value() == '') {
            $('.k-grid-toolbar').hide();
        }
        else {
            $('.k-grid-toolbar').show();
        }
        GetPDMSData(ddl.value());
        //$("#kgrdPDMS").data("kendoGrid").dataSource.read({ ParentNoteId: ddl.value() });
    }

    function PerformanceStatusReport(id)
    {
        HideLoader($("#global-overlay"));

          var win = GetMainWindow();
        win.iframeOpenUrl = "/Pms/Performance/PerformanceDocumentDetailsData?masterNodeId=@Model.ParentNoteId&masterStageId=" +id;
    win.OpenWindow({ Title: '@Html.Raw(Resource["PerformanceStatusReport"])', Width: 1200, Height: 700 });
    return false;
    }
     $(function () {
        $.contextMenu({
            selector: '#pdms-menu',
            trigger: 'left',
            build: function ($trigger, e) {

                var id = $trigger.data('idvalue');
                 var status0 = ('@Model.MasterDocumentStageStatus' == '@PerformanceDocumentStatusEnum.Active' || '@Model.MasterDocumentStageStatus' == '@PerformanceDocumentStatusEnum.Publishing')?1:0;
                var pdStatus= $trigger.data('doc-status');
                var stageStatus = $trigger.data('stage-status');
                var noteid = $trigger.data('notevalue');
                var pid = $trigger.data('parentvalue');
                   return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        onEditPerDocStage(noteid,pid);
                                        break;
                                    case 'delete':
                                        OnDelete(noteid);
                                        break;
                                    case 'Publish':
                                    case 'Republish':
                                    case 'UnFreeze':
                                        ChangeStageStatus(noteid,"Publish");
                                        break;
                                    case 'Freeze':
                                        ChangeStageStatus(noteid, "Freeze");
                                        break;
                                    case 'Calculate':
                                        ChangeStageStatus(noteid, "Calculate");
                                        break;
                                    case 'Release':
                                        ChangeStageStatus(noteid, "Release");
                                        break;
                                    default:
                                    }
                       },

                            items: {
                                "edit": {
                                    name: "Edit", icon: "fas fa-pencil",
                                    visible: function (key, opt) {
                                        if (stageStatus === 0) {
                                            return true;
                                        }
                                        return false;
                                    }
                                },
                                "Publish": {

                                    name: "Publish Stage", icon: "fas fa-upload",
                                    visible: function (key, opt) {
                                        if ((pdStatus != 0) && (stageStatus === 0  )) {
                                            return true;
                                        }
                                        return false;
                                    }
                                },
                                "Republish": {

                                    name: "Re-publish Stage", icon: "fas fa-upload",
                                    visible: function (key, opt) {
                                        if ((pdStatus != 0) && (stageStatus === 1 || stageStatus===3)) {
                                            return true;
                                        }
                                        return false;
                                    }
                                },
                                "Freeze": {
                                    name: "Freeze Stage", icon: "fas fa-upload",
                                    visible: function (key, opt) {
                                        if ((pdStatus != 0) && (stageStatus === 1)) {
                                            return true;
                                        }
                                        return false;
                                    }
                                },
                                "UnFreeze": {
                                    name: "UnFreeze Stage", icon: "fas fa-upload",
                                    visible: function (key, opt) {
                                        if ((pdStatus != 0) && (stageStatus  === 4)) {
                                            return true;
                                        }
                                        return false;
                                    }
                                },
                                "Calculate": {
                                    name: "Calculate Rating", icon: "fas fa-upload",
                                    visible: function (key, opt) {
                                        if ((pdStatus != 0) && (stageStatus === 4 || stageStatus === 1)) {
                                            return true;
                                        }
                                        return false;
                                    }
                                },
                                "Release": {
                                    name: "Release Stage", icon: "fas fa-upload",
                                    visible: function (key, opt) {
                                        //if ((pdStatus != 0) && (stageStatus === 3 || stageStatus === 4)) {
                                        //    return true;
                                        //}
                                        return false;
                                    }
                                },
                                "delete": {
                                    name: "@Html.Raw(SharedResource["Delete"])", icon: "fas fa-trash",
                                    visible: function (key, opt) {
                                        if ((stageStatus === 0)) {
                                            return true;
                                        }
                                        return false;
                                    }
                                }
                                }
                        };
            }
        });

    });
    function OnCreatePerDocStage() {
        var masterId = "";

         var ddl = $("#DocumentMasterId").data("kendoDropDownList");
        if ("@Model.ParentNoteId" != "" && "@Model.ParentNoteId" != "null") {
            masterId = "@Model.ParentNoteId";
        }
        else
        {
            masterId = ddl.value();
        }
        var win = GetMainWindow();
        win.iframeOpenUrl = "/Pms/PerformanceDocument/PerformanceDocumentStageCreate?noteparentId=" + masterId;
        win.OpenWindow({ Title: 'Create New Stage', Width: 450, Height: 700 });
        return false;
    }
    function onEditPerDocStage(NoteId, pnId) {

        if (pnId == null && pnId == "") {
            pnId = "@Model.ParentNoteId";
        }

        var win = GetMainWindow();
        //var portalId = $('#GlobalPortalId').val();

        win.iframeOpenUrl = "/Pms/PerformanceDocument/PerformanceDocumentStageCreate?perDocStageId=" + NoteId + "&noteparentId=" + pnId;
        win.OpenWindow({ Title: 'Edit Stage', Width: 450, Height: 700 });
        return false;
    }

    function calculatePerformanceRating(noteid, status) {
        var masterId = "";
         var ddl = $("#DocumentMasterId").data("kendoDropDownList");
        if ("@Model.ParentNoteId" != "" && "@Model.ParentNoteId" != "null") {
            masterId = "@Model.ParentNoteId";
        }
        else
        {
            masterId = ddl.value();
        }
        if (masterId == '') {
            alert("Please select document Master");
            return false;
        }
        var win = GetMainWindow();
        win.iframeOpenUrl = "/Pms/PerformanceDocument/PublishPerformanceDocumentStage?parentNoteId=" + masterId+"&pdStageId=" + noteid + "&status=" + status;
        if (status == "cal") {
            win.OpenWindow({ Title: 'Calculate Performance Rating', Width: 450, Height: 700 });
        }
        else if (status == "Freezed") {
            win.OpenWindow({ Title: 'Freeze Stage', Width: 450, Height: 700 });
        }
    }

    @*function onEditPerDocStage(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var win = GetMainWindow();
        //var portalId = $('#GlobalPortalId').val();

        win.iframeOpenUrl = "/Pms/PerformanceDocument/PerformanceDocumentStageCreate?perDocStageId=" + dataItem.NoteId + "&noteparentId=@Model.ParentNoteId";
        win.OpenWindow({ Title: '@Html.Raw(Resource["EditStage"])', Width: 450, Height: 700 });
        return false;
    }*@

    function OnAfterPerDocStageCreate() {
        //$("#kgrdPDMS").data("kendoGrid").dataSource.read({ ParentNoteId: '@Model.ParentNoteId' });
        GetPDMSData();
        window.parent.GetPDMData();
    }

    @*function OnStagePublish(NoteId,status)
    {
         var win = GetMainWindow();
        //var portalId = $('#GlobalPortalId').val();

        win.iframeOpenUrl = "/Pms/PerformanceDocument/PublishPerformanceDocumentStage?pdStageId=" + NoteId + "&parentNoteId=@Model.ParentNoteId&status=" + status;
        win.OpenWindow({ Title: 'Publish Stage', Width: 450, Height: 700 });
        return false;
    }
    function OnStageFreeze(NoteId,status)
    {
         var win = GetMainWindow();
        win.iframeOpenUrl = "/Pms/PerformanceDocument/PublishPerformanceDocumentStage?pdStageId=" + NoteId + "&parentNoteId=@Model.ParentNoteId&status=" + status;
        win.OpenWindow({ Title: 'Freeze Stage', Width: 450, Height: 700 });
        return false;
    }*@
    function ChangeStageStatus(noteId,status)
    {
        var win = GetMainWindow();
        win.iframeOpenUrl = "/Pms/PerformanceDocument/PublishPerformanceDocumentStage?pdStageId=" + noteId + "&parentNoteId=@Model.ParentNoteId&status=" + status;
        win.OpenWindow({ Title: 'Change Stage Status', Width: 450, Height: 700 });
        return false;
    }

    function Submit(noteId,status)
    {
        var win = GetMainWindow();
        win.iframeOpenUrl = "/Pms/PerformanceDocument/PublishPerformanceDocumentStage?pdStageId=" + noteId + "&parentNoteId=@Model.ParentNoteId&status=" + status;
        win.OpenWindow({ Title: 'Change Stage Status', Width: 450, Height: 700 });
        return false;
    }

    function onDataBound(arg) {
        $("#kgrdPDMS tbody tr").each(function () {

            var currentDataItem = $("#kgrdPDMS").data("kendoGrid").dataItem($(this));
            var dlt = $(this).find(".k-grid-Delete");

            if ('@Model.MasterDocumentStageStatus' == '@PerformanceDocumentStatusEnum.Active' || '@Model.MasterDocumentStageStatus' == '@PerformanceDocumentStatusEnum.Publishing') {
                dlt.remove();
            }

        });
    }

    @*function OnDelete(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        kendo.confirm("@SharedResource["ConfirmDelete"]").then(function () {
            $.ajax({
                type: "POST",
                url: "/Pms/PerformanceDocument/DeletePerDocStage?noteId=" + nval /*dataItem.NoteId*/,

                success: function (data) {
                    kendo.alert("@Resource["StageDeletedSuccessfully"]");
                    //$("#kgrdPDMS").data("kendoGrid").dataSource.read();
                    GetPDMSData();
                },
                dataType: "json",
            });
        }, function () {

        });
    }*@
    function OnDelete(NoteId) {
      //  var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        kendo.confirm("Are you sure you want to delete?").then(function () {
            $.ajax({
                type: "POST",
                url: "/Pms/PerformanceDocument/DeletePerDocStage?noteId=" + NoteId,

                success: function (data) {
                    kendo.alert("Stage Deleted Successfully");
                    //var ddl = $("#DocumentMasterId").data("kendoDropDownList");
                    //$("#kgrdPDMS").data("kendoGrid").dataSource.read({ ParentNoteId: ddl.value() });
                    GetPDMSData();
                },
                dataType: "json",
            });
        }, function () {

        });
    }

    //Data Grid

    var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(PerformanceDocumentStatusEnum)))';
    var statusObj = JSON.parse(status);

    function GetPDMSData(parentnoteId) {

        var noteId;
        if (parentnoteId != null && parentnoteId != "") {
            noteId = parentnoteId;
        } else {
            noteId = '@Model.ParentNoteId';
        }

        var newUrl = "/Pms/PerformanceDocument/ReadPerformanceDocumentStageData?ParentNoteId=" + noteId;

        document.getElementById("kgrdPDMS").innerHTML = "";
        gridConfig(
            "kgrdPDMS",
            newUrl,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    var columnDefs = [
                            {
                                field: "Id",
                                headerName: "@SharedResource["Action"]",
                                cellRenderer: params => {
                                    return "<div class='btn-group grid-menu' id='pdms-menu' data-doc-status=\"" + params.data.DocumentStatus + "\" data-stage-status=\"" + params.data.DocumentStageStatus + "\" data-notevalue=\"" + params.data.NoteId + "\" data-parentvalue=\"" + params.data.ParentNoteId + "\"><i class='fas fa-ellipsis-v'></i></div>"
                               }
                            },
                            {
                                field: "Name",
                                headerName: "@SharedResource["Name"]",
                            },
                            {
                                field: "Description",
                                headerName:"@SharedResource["Description"]",width:200
                            },
                            {
                                field: "StartDate",
                                headerName: "@SharedResource["StartDate"]", width: 100,
                                cellRenderer: params => {
                                    var date = new Date(params.value);
                                    var d = new Date(date),
                                        month = '' + (d.getMonth() + 1),
                                        day = '' + d.getDate(),
                                        year = d.getFullYear();

                                    if (month.length < 2)
                                        month = '0' + month;
                                    if (day.length < 2)
                                        day = '0' + day;

                                    return [day, month, year].join('.');
                                }
                            },
                            {
                                field: "EndDate",
                                headerName: "@SharedResource["EndDate"]", width: 200,
                                cellRenderer: params => {
                                    var date = new Date(params.value);
                                    var d = new Date(date),
                                        month = '' + (d.getMonth() + 1),
                                        day = '' + d.getDate(),
                                        year = d.getFullYear();

                                    if (month.length < 2)
                                        month = '0' + month;
                                    if (day.length < 2)
                                        day = '0' + day;

                                    return [day, month, year].join('.');
                                }
                            },
                            {
                                field: "DocumentStageStatus",
                                headerName: "@SharedResource["Status"]", width: 200,
                                cellRenderer: params => {
                                    return statusObj[params.value]; //only for enum
                                }
                            },

    ];

    //context menu--------
    $(function () {

        GetPDMSData();

        $.contextMenu({
            selector: '#pdms-menu0',
            trigger: 'left',
            build: function ($trigger, e) {

                var status = ('@Model.MasterDocumentStageStatus' == '@PerformanceDocumentStatusEnum.Active' || '@Model.MasterDocumentStageStatus' == '@PerformanceDocumentStatusEnum.Publishing')?1:0;
                var noteid = $trigger.data('notevalue');
                var pid = $trigger.data('parentvalue');
                //var portalName = $trigger.data('portal-name');

                switch (status) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        onEditPerDocStage(noteid, pid);
                                        break;
                                    case 'delete':
                                        OnDelete(noteid);
                                        break;
                                    default:
                                    }
                            },
                            items: {
                                "edit": { name: "@Html.Raw(SharedResource["Edit"])", icon: "fas fa-pencil" },
                                "delete": { name: "@Html.Raw(SharedResource["Delete"])", icon: "fas fa-trash" }
                                }
                        };
                    case 1:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        onEditPerDocStage(noteid, pid);
                                        break;
                                    default:
                                    }
                            },
                            items: {
                                "edit": { name: "@Html.Raw(SharedResource["Edit"])", icon: "fas fa-pencil" },
                                }
                        };
                }
            }
        });

    });
</script>
<div class="row pad-15">
    <div class="col-3" style="text-align:right;">
        <label>Document Master :</label>
    </div>
    <div class="col-9">
        <input id="DocumentMasterId" class="form-control" style="width:80%;" />
    </div>
</div>
<div class="row" style="padding:10px;">

    <div class="col-md-12">
        <div>
            <button class="btn btn-primary" id="btnAdd" onclick="OnCreatePerDocStage();"><i class="fa fas fa-plus"></i>&nbsp;Add New Stage</button>
        </div>
        <div id="kgrdPDMS" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

        @*@(Html.Kendo().Grid<PerformanceDocumentStageViewModel>
            ().Name("kgrdPDMS").HtmlAttributes(new { @class = "kgrdPDMS" })
            .Columns(col =>
            {
                //col.Command(command =>
                //{
                //    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("onEditPerDocStage").HtmlAttributes(new { @class = "action-icon", @title = "" + SharedResource["Edit"] + "" });
                //    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon action-delete", title = "" + SharedResource["Delete"] + "" });
                //}).Title("" + SharedResource["Action"] + "").Width(100);
                col.Bound(c => c.Id).ClientTemplate("<div class='btn-group grid-menu' id='tree-menu1' data-idvalue=\"#:Id#\" data-status=\"#:DocumentStageStatus#\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>").Width(150).Title("" + SharedResource["Action"] + "")/*.HeaderHtmlAttributes(new { title = "Actions" })*/;
                col.Bound(c => c.MasterName).Title("" + SharedResource["MasterName"] + "");
                col.Bound(c=>c.Name).Title("" + SharedResource["Name"] + "");
                col.Bound(c => c.Description).Title("" + SharedResource["Description"] + "");
                col.Bound(c => c.StartDate).Title("" + SharedResource["StartDate"] + "").Format(ApplicationConstant.DateAndTime.DefaultDateFormat).Width(150);
                col.Bound(c=>c.EndDate).Title("" + SharedResource["EndDate"] + "").Format(ApplicationConstant.DateAndTime.DefaultDateFormat).Width(150);
                col.Bound(c=>c.DocumentStageStatus).Title("" + SharedResource["Status"] + "").Width(150);

            })
            .ToolBar(toolbar =>
            {
                toolbar.Custom().Text("" + Resource["AddNewStage"] + "").Name("btnAdd").IconClass("fa fas fa-plus").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreatePerDocStage();" });
            })
            .Scrollable(x => x.Enabled(true))
            .Sortable(srt => srt.Enabled(true))
            .Selectable(select => select.Enabled(false))
            .Filterable(f => f.Extra(false)
            .Operators(o => o.ForString(s => s.Clear()
            .Contains("Contains")
            .IsEqualTo("Is equal to")
            )))
            .Events(e=>e.DataBound("onDataBound"))
            .Resizable(resize => resize.Columns(true))
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
            .AutoBind(true)
            .DataSource(
            dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .Read(read => read.Action("ReadPerformanceDocumentStageData", "PerformanceDocument", new { Area="Pms", ParentNoteId = Model.ParentNoteId }))
            .Model(model => model.Id(x=>x.Id)))
            )*@
    </div>
</div>

