@inject IStringLocalizer<CMS.UI.Web.Areas.Pms.Controllers.PerformanceDocumentController> Resource
@using Synergy.App.ViewModel;
@*@using Kendo.Mvc.UI;*@
@using Synergy.App.Common;
@*@using Kendo.Mvc.Extensions;*@
@{
    ViewData["Title"] = "Performance Document Master";
    //Layout = "/Areas/Cms/Views/Shared/_LayoutCms.cshtml";
    Layout = null;
}
<style>
    .kgrdPDM {
        width: 100% !important;
    }

    .btn-group, .btn-group-vertical {
        position: inherit !important;
    }

    .dropdown-menu {
        background-color: white !important;
    }

    .btn-info {
        color: black;
        background-color: #fff;
        border-color: #fff;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
        HideLoader($("#global-overlay"));});

    function OnCreatePerformanceDocument() {
        var win = GetMainWindow();
        win.iframeOpenUrl = "/Pms/PerformanceDocument/CreatePDM";
        win.OpenWindow({ Title: 'Create Performance Document', Width: 450, Height: 700 });
        return false;
    }
@*function onEditPerformanceDocumentMaster(e) {

    e.preventDefault();
    var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

    var win = GetMainWindow();
    var portalId = $('#GlobalPortalId').val();

    win.iframeOpenUrl = "/Pms/PerformanceDocument/CreatePDM?noteId=" + dataItem.NtsNoteId ;
    win.OpenWindow({ Title: '@Html.Raw(Resource["EditPerformanceDocument"])', Width: 450, Height: 700 });
    }*@

    @* function OnPerformanceDocumentStage(e) {
        //e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //var portalId = $('#GlobalPortalId').val();
        //var customUrl = encodeURIComponent('noteId=' + dataItem.NtsNoteId);
        //var url = '/Cms/Page?pageName=PerformanceDocumentStage&portalId=' + portalId + '&customUrl=' + customUrl;
        //LoadCmsPartialView(url, "Custom", false, "", "", "");

        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var win = GetMainWindow();
        win.iframeOpenUrl = "/Pms/PerformanceDocument/PerformanceDocumentMasterStage?noteId=" + dataItem.NtsNoteId + "&masterDocStatus=" + dataItem.DocumentStatus;
        win.OpenWindow({ Title: '@Html.Raw(Resource["ManagePerformanceDocumentStage"])', Width: 1200, Height: 700 });
        return false;
    } *@

  function onEditPerformanceDocumentMaster(noteid) {
        var win = GetMainWindow();
        win.iframeOpenUrl = "/Pms/PerformanceDocument/CreatePDM?noteId=" + noteid ;
        win.OpenWindow({ Title: 'Edit Performance Document', Width: 450, Height: 700 });
  }

  function OnPerformanceDocumentStage(ntsNoteId, docStatus) {
        var win = GetMainWindow();
        win.iframeOpenUrl = "/Pms/PerformanceDocument/PerformanceDocumentMasterStage?noteId=" + ntsNoteId + "&masterDocStatus=" + docStatus+"&lo=Popup";
        win.OpenWindow({ Title: 'Manage Performance Document Stage', Width: 1200, Height: 700 });
        return false;
    }

  function MapUser(noteid) {

    var win = GetMainWindow();
      win.iframeOpenUrl = "/Pms/PerformanceDocument/MapUser?pdmId=" + noteid;
    win.OpenWindow({ Title: 'Map User To Performance Document', Width: 800, Height: 700 });
}
    function PerformanceStatusReport(noteid)
    {
        HideLoader($("#global-overlay"));

          var win = GetMainWindow();
        win.iframeOpenUrl = "/Pms/Performance/PerformanceDocumentDetailsData?masterNodeId=" + noteid;
    win.OpenWindow({ Title: 'Performance Status Report', Width: 1200, Height: 700 });
    return false;
    }
    function ChangeStatusAndCalculatePerformanceRating(noteid,status)
    {
        ShowLoader($('.viewdata'));
        $.ajax({
            url: '/pms/PerformanceDocument/ChangeStatusAndCalculatePerformanceRating?noteId=' + noteid + '&status=' + status,
            type: "Get",

            dataType: "json",
            success: function (result) {
                if (result.success) {
                    //$("#kgrdPDM").data("kendoGrid").dataSource.read();
                    GetPDMData();
                    HideLoader($('.viewdata'));
                }
                else {
                    HideLoader($('.viewdata'));
                }
            },
            error: function (result) {
                HideLoader($('.viewdata'));
            }

        });
    }
    function calculatePerformanceRating(noteid, status)
    {
          var win = GetMainWindow();
        win.iframeOpenUrl = "/Pms/PerformanceDocument/PublishPerformanceDocument?pdmId=" + noteid + "&status=" + status;
        if (status == "cal") {
            win.OpenWindow({ Title: 'Calculate Performance Rating', Width: 450, Height: 700 });
        }
        else if(status == "Freezed") {
            win.OpenWindow({ Title: 'Freeze Stage', Width: 450, Height: 700 });
        }
    }
function OnPerformanceGradeRating(noteid) {

    var win = GetMainWindow();
    win.iframeOpenUrl = "/Pms/PerformanceDocument/PerformanceGradeRating?noteId=" + noteid;
    win.OpenWindow({ Title: 'Manage Performance Grade Rating', Width: 1200, Height: 700 });
    return false;
}
    function Delete(noteid) {
        kendo.confirm("Are you sure you want to delete?").then(function () {
            confirmDelete(noteid);
        }, function () {

        });
    }

    function confirmDelete(id) {
         $.ajax({
            type: 'POST',
             url: "/pms/performancedocument/DeletePerformanceDocument?Docid=" + id ,
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function (data) {
                window.parent.ShowNotification("Deleted Successfully", "success");
                //$("#kgrdPDM").data("kendoGrid").dataSource.read();
                GetPDMData();
            }
        });
    }

function PublishDocumentMaster(noteid) {
    var win = GetMainWindow();
    win.iframeOpenUrl = "/Pms/PerformanceDocument/PublishPerformanceDocument?pdmId=" + noteid;
    win.OpenWindow({ Title: 'Publish Performance Document', Width: 450, Height: 700 });
}

function OnAfterPerDocCreate() {
    //$("#kgrdPDM").data("kendoGrid").dataSource.read();
    GetPDMData();
}

function reloadGrid() {
        // alert("ss");
        //$("#kgrdPDM").data("kendoGrid").dataSource.read();
    GetPDMData();
}

    //function onDataBound() {
    //    $("#kgrdPDM tbody tr").each(function () {

    //        var currentDataItem = $("#kgrdPDM").data("kendoGrid").dataItem($(this));
    //        var edit = $(this).find(".k-grid-Edit");
    //        var mapusr = $(this).find(".k-grid-MapUser");
    //        var publish = $(this).find(".k-grid-PublishDocumentMaster");
    //        var del = $(this).find(".k-grid-Delete");

    //        if (currentDataItem.DocumentStatus == 1 || currentDataItem.DocumentStatus == 2 || currentDataItem.DocumentStatus == 3) {
    //            edit.remove();
    //            del.remove();
    //        }
    //        if (currentDataItem.DocumentStatus == 3) {
    //            mapusr.remove();
    //            publish.remove();
    //        }
    //    });
    //}

@*function PublishDocumentMaster(e) {
    e.preventDefault();
    var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

    var win = GetMainWindow();
    win.iframeOpenUrl = "/Pms/PerformanceDocument/PublishPerformanceDocument?pdmId=" + dataItem.NtsNoteId;
    win.OpenWindow({ Title: '@Html.Raw(Resource["PublishPerformanceDocument"])', Width: 450, Height: 700 });
}*@

@*function MapUser(e) {
    e.preventDefault();
    var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

    var win = GetMainWindow();
    win.iframeOpenUrl = "/Pms/PerformanceDocument/MapUser?pdmId=" + dataItem.NtsNoteId;
    win.OpenWindow({ Title: '@Html.Raw(Resource["MapUserToPerformanceDocument"])', Width: 800, Height: 700 });
}*@


       @*function Delete(e) {
        //
        //  $('#dlg_DeleteConfirmation').data("kendoDialog").open();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        kendo.confirm("@SharedResource["Areyousure,youwanttodeletethedocument?"]").then(function () {
            confirmDelete(dataItem.NtsNoteId);
        }, function () {

        });

    }*@


    //context menu--------
    $(function () {

        GetPDMData();

        $.contextMenu({
            selector: '#pdm-menu',
            trigger: 'left',
            build: function ($trigger, e) {

                console.log($trigger);
                var id = $trigger.data('idvalue');
                var status = $trigger.data('status');
                var noteid = $trigger.data('noteid');
                //var portalName = $trigger.data('portal-name');

             return {
                    callback: function (key, options) {
                        switch (key) {
                            case 'edit':
                                onEditPerformanceDocumentMaster(noteid);
                                break;
                            case 'stage':
                                OnPerformanceDocumentStage(noteid, status);
                                break;
                            case 'gradeRating':
                                OnPerformanceGradeRating(noteid);
                                break;
                            case 'publishDoc':
                            case 'rePublish':
                                PublishDocumentMaster(noteid);
                                break;
                            case 'mapUser':
                                MapUser(noteid);
                                break;
                            case 'delete':
                                Delete(noteid);
                                break;
                            default:
                        }
                    },
                    items: {
                        "edit": {
                            name: "@Html.Raw(SharedResource["Edit"])", icon: "fas fa-pencil",
                            visible: function (key, opt) {

                                if (status === 0) {
                                    return true;
                                }
                                return false;
                            }
                        },
                        "mapUser": {
                            name: "Manage User Mapping", icon: "fas fa-user",
                            visible: function (key, opt) {
                                if (status === 5) {
                                    return false;
                                }
                                return true;
                            }
                        },
                        "gradeRating": {
                            name: "Manage Grade Rating", icon: "fas fa-star-half-alt",
                            visible: function (key, opt) {
                                if (status === 5) {
                                    return false;
                                }
                                return true;
                            }
                        },
                        "stage": {
                            name: "Manage Document Stage", icon: "fas fa-cog",
                            visible: function (key, opt) {
                                if (status === 5) {
                                    return false;
                                }
                                return true;
                            }
                        },
                        "publishDoc": {
                            name: "Publish Document", icon: "fas fa-upload",
                            visible: function (key, opt) {
                                if (status === 0 ) {
                                    return true;
                                }
                                return false;
                            }
                        },
                        "rePublish": {
                            name: "Re-publish Document", icon: "fas fa-upload",
                            visible: function (key, opt) {
                                if (status === 1) {
                                    return true;
                                }
                                return false;
                            }
                        },
                        "performancestatusreport": {
                            name: "Document Status Report", icon: "fas fa-upload",
                            visible: function (key, opt) {
                                if (status === 0 || status === 3) {
                                    return false;
                                }
                                return true;
                            }
                        },
                        "delete": {
                            name: "@Html.Raw(SharedResource["Delete"])", icon: "fas fa-trash",
                            visible: function (key, opt) {
                                if (status === 0) {
                                    return true;
                                }
                                return false;
                            }
                        }
                    }
                }
            }
        });
    });

    //Data grid

    var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(PerformanceDocumentStatusEnum)))';
    var statusObj = JSON.parse(status);

    function GetPDMData() {
        document.getElementById("kgrdPDM").innerHTML = "";
        gridConfig(
            "kgrdPDM",
            "/Pms/PerformanceDocument/ReadPerformanceDocumentData",
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    var columnDefs = [
                            {
                                field: "Id",
                                headerName: "@SharedResource["Action"]",
                                cellRenderer: params => {
                                    return "<div class='btn-group grid-menu' id='pdm-menu' data-idvalue=\"" + params.data.Id + "\" data-status=\"" + params.data.DocumentStatus + "\" data-noteid=\"" + params.data.NtsNoteId + "\" ><i class='fas fa-ellipsis-v'></i></div>"
                               }
                            },
                            {
                                field: "Name",
                                headerName: "@SharedResource["Name"]",
                            },
                            {
                                field: "Description",
                                headerName:"@SharedResource["Description"]",width:200
                            },
                            {
                                field: "StartDate",
                                headerName: "@SharedResource["StartDate"]", width: 100,
                                cellRenderer: params => {
                                    var date = new Date(params.value);
                                    var d = new Date(date),
                                        month = '' + (d.getMonth() + 1),
                                        day = '' + d.getDate(),
                                        year = d.getFullYear();

                                    if (month.length < 2)
                                        month = '0' + month;
                                    if (day.length < 2)
                                        day = '0' + day;

                                    return [day, month, year].join('.');
                                }
                            },
                            {
                                field: "EndDate",
                                headerName: "@SharedResource["EndDate"]", width: 200,
                                cellRenderer: params => {
                                    var date = new Date(params.value);
                                    var d = new Date(date),
                                        month = '' + (d.getMonth() + 1),
                                        day = '' + d.getDate(),
                                        year = d.getFullYear();

                                    if (month.length < 2)
                                        month = '0' + month;
                                    if (day.length < 2)
                                        day = '0' + day;

                                    return [day, month, year].join('.');
                                }
                            },
                            {
                                field: "DocumentStatus",
                                cellRenderer: params => {
                                    return statusObj[params.value]; //only for enum
                                }
                            },
    ];


</script>
<h3>@ViewBag.Title</h3>
<div class="row viewdata" style="padding:10px;">
    <div class="col-md-12">
        <div>
            <button class="btn btn-primary" onclick="OnCreatePerformanceDocument();"><i class="fas fa-plus"></i>&nbsp;@SharedResource["Create"]</button>
        </div>
        <div id="kgrdPDM" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

        @*@(Html.Kendo().Grid<PerformanceDocumentViewModel>
                ().Name("kgrdPDM").HtmlAttributes(new { @class = "kgrdPDM" })
                .Columns(col =>
                {
                    //col.Command(command =>
                    //{
                    //    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("onEditPerformanceDocumentMaster").HtmlAttributes(new { @class = "action-icon", @title = "" + SharedResource["Edit"] + "" });
                    //    command.Custom("ManagePerformanceDocumentStage").Text("<i class='fa fas fa-cog'></i>").Click("OnPerformanceDocumentStage").HtmlAttributes(new { @class = "action-icon", @title = "" + Resource["ManagePerformanceDocumentStage"] + "" });
                    //    command.Custom("ManagePerformanceGradeRating").Text("<i class='fas fa-star-half-alt'></i>").Click("OnPerformanceGradeRating").HtmlAttributes(new { @class = "action-icon", @title = "" + Resource["ManagePerformanceGradeRating"] + "" });
                    //    command.Custom("PublishDocumentMaster").Text("<i class='fa fas fa-upload'></i>").Click("PublishDocumentMaster").HtmlAttributes(new { @class = "action-icon", @title = "" + Resource["PublishDocumentMaster"] + "" });
                    //    command.Custom("MapUser").Text("<i class='fa fas fa-user'></i>").Click("MapUser").HtmlAttributes(new { @class = "action-icon", @title = "" + Resource["MapUser"] + "" });
                    //    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("Delete").HtmlAttributes(new { @class = "action-icon", @title = "" + Resource["Delete"] + "" });
                    //}).Title("" + SharedResource["Action"] + "").Width(180);
                    //col.Bound(c => c.Id);
                    //col.Bound(c => c.Id).ClientTemplate("<div class='btn-group'><i class='fas fa-ellipsis-v dropdown-toggle' data-toggle='dropdown'></i><ul class='dropdown-menu' role='menu'><li><button class='btn btn-info' onclick='OnPerformanceDocumentStage(\"#:NtsNoteId#\",\"#:DocumentStatus#\")'>Manage Performance Document Stage</button></li><br /></ul></div>").Width(150).Title("Actions").HeaderHtmlAttributes(new { title = "Actions" });
                    col.Bound(c => c.Id).ClientTemplate("<div class='btn-group grid-menu' id='tree-menu' data-idvalue=\"#:Id#\" data-status=\"#:DocumentStatus#\" data-noteid=\"#:NtsNoteId#\" ><i class='fas fa-ellipsis-v'></i></div>").Width(150).Title("" + SharedResource["Action"] + "")/*.HeaderHtmlAttributes(new { title = "Actions" })*/;

                    col.Bound(c=>c.Name).Title("" + SharedResource["Name"] + "");

                    col.Bound(c=>c.Description).Title("" + SharedResource["Description"] + "");
                    col.Bound(c => c.DepartmentId_DepartmentName).Title(""+ @SharedResource["Department"] + "");
                    col.Bound(c=>c.StartDate).Title("" + SharedResource["StartDate"] + "").Format(ApplicationConstant.DateAndTime.DefaultDateFormat).Width(150);
                    col.Bound(c=>c.EndDate).Title("" + SharedResource["EndDate"] + "").Format(ApplicationConstant.DateAndTime.DefaultDateFormat).Width(150);
                    col.Bound(c=>c.DocumentStatus).Title("" + SharedResource["Status"] + "").Width(150);
                })
            .ToolBar(toolbar =>
            {
                toolbar.Custom().Text("" + SharedResource["Create"] + "").Name("btnAdd").IconClass("fa fas fa-plus").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreatePerformanceDocument();" });
            })
            .Scrollable(x => x.Enabled(true))
            .Sortable(srt => srt.Enabled(true))
            .Selectable(select => select.Enabled(false))
            .Filterable(f => f.Extra(false)
            .Operators(o => o.ForString(s => s.Clear()
            .Contains("Contains")
            .IsEqualTo("Is equal to")
            )))
            //.Events(e=>e.DataBound("onDataBound"))
            .Resizable(resize => resize.Columns(true))
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
            .AutoBind(true)
            .DataSource(
            dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .Read(read => read.Action("ReadPerformanceDocumentData", "PerformanceDocument", new { Area="Pms"}))
            .Model(model => model.Id("Id")))
            )*@
    </div>
</div>

