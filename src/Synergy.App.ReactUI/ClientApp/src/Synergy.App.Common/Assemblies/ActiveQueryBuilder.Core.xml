<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ActiveQueryBuilder.Core</name>
    </assembly>
    <members>
        <member name="T:ActiveQueryBuilder.Core.AstExtender">
            <summary>Abstract Syntax Tree node that extends the SQL syntax of the owner node with database server specific elements.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.AstNode">
            <summary>Abstract Syntax Tree node that can be extended with database server specific elements.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.AstNode.Extender">
            <summary>Abstract Syntax Tree object to extend the node with database server specific elements.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.AstNodeBase">
            <summary>Base class for any Abstract Syntax Tree node.</summary>
            <remarks>Introduces the <see cref="P:ActiveQueryBuilder.Core.AstNodeBase.SQLContext">SQL Context property</see> that's required to build SQL text for node according to the syntax rules of specific Syntax Provider and the SQL Builder settings.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.AstNodeBase.SQLContext">
            <summary>Gets SQL Context for the node.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.AstNodeBase.#ctor(ActiveQueryBuilder.Core.SQLContext)">
            <summary> Initializes a new instance of the AST node. </summary>
            <param name="sqlContext"> Specifies SQL Context for the node. </param>
        </member>
        <member name="T:ActiveQueryBuilder.Core.AstToken">
            <summary>Abstract Syntax Tree node representing a single piece of text in the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.AstToken.Token">
            <summary>Gets or sets text of the token.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.AstTokenIdentifier">
            <summary>Abstract Syntax Tree node representing an identifier.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.AstTokenIdentifier.CaseSensitive">
            <summary>Gets or sets the mark indicating case sensitivity of the identifier.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.AstTokenIdentifier.ValidIdentifier">
            <summary>Indicates if identifier is valid or not.</summary>
            <remarks>Valid identifiers do not contain special symbols like spaces, etc., thus they do not need to be quoted.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.PrepareAndFixupVisitor.IsColumnOfMetadataObjectPartial(ActiveQueryBuilder.Core.SQLQualifiedName,ActiveQueryBuilder.Core.MetadataObject)">
            <summary>for example: columnName is Sales.Address.AddessID, but full metadata object is AdventureWorks.Sales.Address
            (AdventureWorks is not default, so IsColumnOfMetadataObject returns false)</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQLIdentifiersCollection">
            <summary>Collection of SQL identifiers.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLIdentifiersCollection.Item(System.Int32)">
            <summary>Gets the identifier from the collection at the specified index.</summary>
            <param name="index">The zero-based index of the identifier to be get.</param>
            <value>The identifier at the specified index.</value>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLIdentifiersCollection.#ctor(ActiveQueryBuilder.Core.SQLContext)">
            <summary> Initializes a new instance of the identifiers collection. </summary>
            <param name="sqlContext"> Specifies SQL Context for the identifiers in collection. </param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLIdentifiersCollection.Add">
            <summary>Adds a new identifier to the end of the collection.</summary>
            <returns>Returns AST token object representing identifier.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLIdentifiersCollection.AddIdentifier(System.String)">
            <summary>Adds an identifier to the collection.</summary>
            <param name="identifier">The identifier string to be added to the end of the collection.</param>
            <returns>Returns AST token object representing identifier.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLIdentifiersCollection.Insert(System.Int32)">
            <summary>Inserts a new identifier to the collection at the specified index.</summary>
            <param name="index">The zero-based index at which new identifier should be inserted.</param>
            <returns>Returns AST token object representing identifier.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLIdentifiersCollection.ContainsSameId(ActiveQueryBuilder.Core.AstTokenIdentifier)">
            <summary>Checks if such identifier contains in the collection.</summary>
            <param name="identifier">AST token object representing identifier to be checked for presence in the collection.</param>
            <returns>True if such identifier contains in the collection; false otherwise.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLIdentifiersCollection.ContainsSameIdStr(System.String)">
            <summary>Checks if such identifier contains in the collection.</summary>
            <param name="identifier">The identifier string to be checked for presence in the collection.</param>
            <returns>True if such identifier contains in the collection; false otherwise.</returns>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQLQualifiedName">
            <summary>Class for representation of the SQL qualified name (can be name of database object or field in a query, etc.).</summary>
            <remarks>SQL qualified name is a set of identifiers separated with dots. SQL qualified name class holds list of identifiers. It allows to modify this list from left or
            right side (consider working in LeftToRight text direction). These sides are called "Prefix" and "Name". I.e. if you want to add an element from the right
            side, you should call the <see cref="O:ActiveDatabaseSoftware.ActiveQueryBuilder.SQLQualifiedName.AddName">AddName method</see>; if you want to remove an element
            from the left side, you should call the <see cref="M:ActiveQueryBuilder.Core.SQLQualifiedName.RemoveFirstPrefix"/> method.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLQualifiedName.PreferAutoGeneratedRepresentation">
            <summary>Flag which tells SQL builder to emit auto-generated name instead of stored in this object.</summary>>
        </member>
        <member name="F:ActiveQueryBuilder.Core.SQLQualifiedName.DBLink">
            <summary>Gets or sets the DB Link qualified name (used for Oracle databases).</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLQualifiedName.QualifiedName">
            <summary>Gets qualified name string (may be quoted or not quoted according the SQL Context settings).</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.AddPrefix(System.String,System.Boolean)">
            <summary>Adds identifier to the left side from string with the specified case sensitivity flag.</summary>
            <overloads>Adds identifier to the left side of the qualified name.</overloads>
            <param name="caseSensitive">Flag to override identifier case sensitivity option of the syntax provider (<see cref="P:ActiveQueryBuilder.Core.BaseSyntaxProvider.IdentCaseSens">IdentCaseSens</see>) specified in the
            SQL context.</param>
            <param name="prefix">Identifier string to add to the left side of the qualified name.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.AddName(System.String,System.Boolean)">
            <summary>Adds identifier to the right side from string with the specified case sensitivity flag.</summary>
            <overloads>Adds identifier to the right side of the qualified name.</overloads>
            <param name="name">Identifier string to add to the right side of the qualified name.</param>
            <param name="caseSensitive">Flag to override identifier case sensitivity option of the syntax provider (<see cref="P:ActiveQueryBuilder.Core.BaseSyntaxProvider.IdentCaseSens">IdentCaseSens</see>) specified
            in the SQL context.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.AddPrefix(System.String)">
            <summary>Adds identifier to the left side from string.</summary>
            <param name="prefix">Identifier string to add to the left side of the qualified name.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.AddName(System.String)">
            <summary>Adds identifier to the right side from string.</summary>
            <param name="name">Identifier string to add to the right side of the qualified name.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.AddPrefix(ActiveQueryBuilder.Core.SQLQualifiedName)">
            <summary>Adds identifier(s) to the left side from SQL qualified name.</summary>
            <param name="prefix">SQL qualified name (i.e. list of identifiers) to add to the left side of the qualified name.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.AddName(ActiveQueryBuilder.Core.SQLQualifiedName)">
            <summary>Adds identifier(s) to the right side from SQL qualified name.</summary>
            <param name="name">SQL qualified name (i.e. list of identifiers) to add to the right side of the qualified name.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.AddPrefix(ActiveQueryBuilder.Core.AstToken)">
            <summary>Adds AST token identifier to the left side of name.</summary>
            <param name="prefix">AST token identifier to add to the left side of the qualified name.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.AddName(ActiveQueryBuilder.Core.AstToken)">
            <summary>Adds AST token identifier to the right side of name.</summary>
            <param name="name">AST token identifier to add to the right side of the qualified name.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.ExtractPrefix">
            <summary>Extracts (removes and returns) an identifier from the left side of the qualified name.</summary>
            <returns>Returns AST token identifier from the left side of the qualified name.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.ExtractName">
            <summary>Extracts (removes and returns) an identifier from the right side of the qualified name.</summary>
            <returns>Returns AST token identifier from the right side of the qualified name.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.RemoveLastName">
            <summary>Removes and disposes an identifier from the right side of the qualified name.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.RemoveFirstPrefix">
            <summary>Removes and disposes an identifier from the left side of the qualified name.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.StartsWith(ActiveQueryBuilder.Core.SQLQualifiedName)">
            <summary>Determines if the SQL qualified name starts with the specified set of identifiers.</summary>
            <param name="name">SQL qualified name (i.e. list of identifiers) to compare with identifiers at the left side of the qualified name.</param>
            <returns>Returns true if the SQL qualified name has the same list of identifiers from the left ("Prefix") side.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedName.ToString">
            <summary>Returns string representation of the object (same as the <see cref="P:ActiveQueryBuilder.Core.SQLQualifiedName.QualifiedName"/> property).</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQLQualifiedNameList">
            <summary>List of SQL qualified names.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLQualifiedNameList.Item(System.Int32)">
            <summary>Gets or sets the SQL qualified name in the list at the specified index.</summary>
            <param name="index">The zero-based index of the SQL qualified name to be get or set.</param>
            <value>The SQL qualified name at the specified index.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLQualifiedNameList.SQLContext">
            <summary>Gets the SQL Context for the SQL qualified names in the list.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLQualifiedNameList.Count">
            <summary>Gets the number of elements contained in the list.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLQualifiedNameList.IsReadOnly">
            <summary>Gets a value indicating whether the list is read-only.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.#ctor(ActiveQueryBuilder.Core.SQLContext)">
            <summary> Initializes a new instance of the SQL qualified names list. </summary>
            <param name="sqlContext"> Specifies SQL Context for the SQL qualified names in list. </param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.Assign(ActiveQueryBuilder.Core.SQLQualifiedNameList)">
            <summary>Assigns an SQLQualifuiedNameList to another SQLQualifiedNameList.</summary>
            <param name="source">The list to assign.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.Clear">
            <summary>Clears the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.Contains(ActiveQueryBuilder.Core.SQLQualifiedName)">
            <summary>Determines whether the list contains a specific SQL qualified name.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.CopyTo(ActiveQueryBuilder.Core.SQLQualifiedName[],System.Int32)">
            <summary>Copies the elements of the list to an array, starting at a particular array index.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.Add(ActiveQueryBuilder.Core.SQLQualifiedName)">
            <summary>Adds SQL qualified name to the end of the list.</summary>
            <overloads>Adds SQL qualified name to the end of the list.</overloads>
            <param name="obj">SQL qualified name to be added to the end of the list.</param>
            <returns>Returns index of the newly added SQL qualified name in the list.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.Extract(ActiveQueryBuilder.Core.SQLQualifiedName)">
            <summary>Removes and returns the SQL qualified name from the list.</summary>
            <param name="item">The SQL qualified name to be removed from the list.</param>
            <returns>Returns the extracted SQL qualified name object; returns null in case the specified SQL qualified name is not found in the list.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.RemoveAt(System.Int32)">
            <summary>Removes and disposes the SQL qualified name from the list at specified index.</summary>
            <param name="index">Index of item to remove and dispose.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.Remove(ActiveQueryBuilder.Core.SQLQualifiedName)">
            <summary>Removes and disposes the SQL qualified name from the list.</summary>
            <param name="obj">The SQL qualified name to be removed from the list.</param>
            <returns>Returns the index of removed SQL qualified name; returns -1 in case the specified SQL qualified name is not found in the list.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.IndexOf(ActiveQueryBuilder.Core.SQLQualifiedName)">
            <summary>Determines the index of a specific SQL qualified name in the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.Insert(System.Int32,ActiveQueryBuilder.Core.SQLQualifiedName)">
            <summary>Inserts SQL qualified name to the list at the specified index.</summary>
            <param name="index">The zero-based index at which new SQL qualified name should be inserted.</param>
            <param name="obj">The SQL qualified name to be inserted to the list at the specified index.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.First">
            <summary>Gets the first SQL qualified name in the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.Last">
            <summary>Gets the last SQL qualified name in the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.FindByName(ActiveQueryBuilder.Core.SQLQualifiedName)">
            <summary>Gets the index of the specified SQL quailfied name.</summary>
            <overloads>Gets the index of the specified SQL quailfied name.</overloads>
            <param name="obj">The SQL qualified name to find in the list.</param>
            <returns>The zero-based index of the specified SQL qualified name if found in the list; -1 otherwise.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.FindByName(System.String)">
            <summary>Gets the index of the specified SQL quailfied name represented as string.</summary>
            <param name="name">The SQL qualifed name string to find in the list.</param>
            <returns>The zero-based index of the specified SQL qualified name if found in the list; -1 otherwise.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.SortByNames">
            <summary>Sorts the SQL qualified names in the list by comparing the identifiers of SQL qualified names from left to right.</summary>
            <remarks>Comparison is performed over the leftmost prefixes of the SQL qualified names first, than over the next identifiers from left to right.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.Add(System.String)">
            <summary>Parses the string as SQL qualified name and adds it to the end of the list.</summary>
            <param name="name">String to be parsed as SQL qualified name and added to the end of the list.</param>
            <returns>Returns index of the newly added SQL qualified name in the list.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.AddIdentifier(System.String,System.Boolean)">
            <summary>Creates single SQL qualified name from identifier and adds it to the end of the list with the specified case sensitivity flag.</summary>
            <param name="caseSensitive">Flag to override identifier case sensitivity option of the syntax provider (<see cref="P:ActiveQueryBuilder.Core.BaseSyntaxProvider.IdentCaseSens">IdentCaseSens</see>) specified in the
            SQL context.</param>
            <param name="name">Identifier string to be added as a single SQL qualified name to the list.</param>
            <returns>Returns index of the newly added SQL qualified name in the list.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.AddIdentifier(System.String)">
            <summary>Creates single SQL qualified name from identifier string and adds it to the end of the list.</summary>
            <overloads>Creates single SQL qualified name from identifier and adds it to the end of the list.</overloads>
            <param name="name">Identifier string to be added as a single SQL qualified name to the list.</param>
            <returns>Returns index of the newly added SQL qualified name in the list.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQualifiedNameList.Move(System.Int32,System.Int32)">
            <summary>Moves the SQL qualified name at the specified index to a new location in the list.</summary>
            <param name="oldIndex">The zero-based index specifying the location of the SQL qualified name to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the SQL qualified name.</param>
        </member>
        <member name="T:ActiveQueryBuilder.Core.Attributes.NameAttribute">
            <summary>
            Specifies the default name for a target.
            </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.Attributes.NameAttribute.Name">
            <summary>
            Name of target
            </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.FormattedSQLBuilder">
            <summary>Intended for SQL query text generation in Plain Text format.</summary>
            <remarks>Read the <see cref="M:ActiveQueryBuilder.Core.FormattedSQLBuilder.GetSQL(ActiveQueryBuilder.Core.QueryBase,ActiveQueryBuilder.Core.SQLFormattingOptions)">GetSql() method</see> to get formatted SQL query text.</remarks>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQLBuilderConditionFormatNewLine">
            <summary>Defines line breaking rules in conditions of the query.</summary>
            <remarks>Applied to <see cref="P:ActiveQueryBuilder.Core.SQLBuilderConditionFormat.NewLineAfter"/> property.</remarks>
        </member>
        <member name="F:ActiveQueryBuilder.Core.SQLBuilderConditionFormatNewLine.None">
            <summary>
            	<para>Instructs not to break condition part by lines.</para>
            	<para>Note that this line still might be broken if the <see cref="!:FormattedSQLBuilder.RightMargin"/> property is not set to zero.</para>
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.SQLBuilderConditionFormatNewLine.TopmostOr">
            <summary>Instructs to insert line break after topmost OR operators of condition.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.SQLBuilderConditionFormatNewLine.TopmostLogical">
            <summary>Instructs to insert line break after topmost logical operators of condition.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.SQLBuilderConditionFormatNewLine.AllLogical">
            <summary>Instructs to insert line break after all logical operators (AND, OR, NOT, etc.)</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SkipKeywordMode">
            <summary>Defines various options for the component behavior in case of possibility of inserting an optional keyword.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.SkipKeywordMode.DontCare">
            <summary>Instructs the component to preserve the end-user notation or to act in default way.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.SkipKeywordMode.SkipIfPossible">
            <summary>Instructs the component to skip an optional keyword if this allowed by specific SQL dialect.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.SkipKeywordMode.PrintAlways">
            <summary>Instructs the component to add an optional keyword always.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.ObjectPrefixSkipping">
            <summary>Defines various options for skipping the unnecessary database object prefixes in the generated SQL query text.</summary>
            <remarks>Applied to <see cref="T:ActiveQueryBuilder.Core.ObjectPrefixSkipping"/> and <see cref="P:ActiveQueryBuilder.Core.SQLGenerationOptions.ObjectPrefixSkipping"/> properties.</remarks>
        </member>
        <member name="F:ActiveQueryBuilder.Core.ObjectPrefixSkipping.SkipAll">
            <summary>Instructs the component to skip all <u>unnecessary</u> database object prefixes.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.ObjectPrefixSkipping.SkipDatabase">
            <summary>Instructs the component to skip database object prefix possible in the current SQL context.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.ObjectPrefixSkipping.SkipNothing">
            <summary>Instructs the component to preserve all database object prefixes.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.IdentQuotation">
            <summary> Defines various options for quotation of identifiers by the SQL Builder. </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.IdentQuotation.None">
            <summary>Instructs the SQL Builder not to quote identifiers.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.IdentQuotation.IfNeed">
            <summary>Instructs the SQL Builder to quote identifiers if needed.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.IdentQuotation.All">
            <summary>Instructs the SQL Builder to quote all identifiers.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.KeywordFormat">
            <summary>Defines various options for keyword formatting in the generated SQL query text.</summary>
            <remarks>Applied to <see cref="T:ActiveQueryBuilder.Core.KeywordFormat"/> property.</remarks>
        </member>
        <member name="F:ActiveQueryBuilder.Core.KeywordFormat.FirstUpper">
            <summary>Instructs the component to generate keywords in First Upper Case.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.KeywordFormat.UpperCase">
            <summary>Instructs the component to generate keywords in UPPER CASE.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.KeywordFormat.LowerCase">
            <summary>Instructs the component to generate keywords in lower case.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.SQLBuilder.BeginBuildSQLForNode">
            <summary>Fired when the SQL Builder starts build SQL text for a node.</summary>
            <remarks>Used to implement custom SQL formatting rules.</remarks>
            <example>
            	<code title="BeginBuildSQLForNode" description="Adds opening parentesis before each function in the SQL text." lang="CS">
            private void plainTextSQLBuilder_BeginBuildSQLForNode(object sender, AstNode node)
            {
             if (node is SQLExpressionFunction || node is SQLExpressionAggregate)
             {
            	 plainTextSQLBuilder.SQLBuilder.WriteSymbol("(");
             }
            }</code>
            </example>
        </member>
        <member name="E:ActiveQueryBuilder.Core.SQLBuilder.EndBuildSQLForNode">
            <summary>Fired when the SQL Builder ends build SQL text for a node.</summary>
            <remarks>Used to implement custom SQL formatting rules.</remarks>
            <example>
            	<code title="EndBuildSQLForNode" description="Adds closing parenthesis after each function in the SQL text." lang="CS">
            private void plainTextSQLBuilder_EndBuildSQLForNode(object sender, AstNode node)
            {
             if (node is SQLExpressionFunction || node is SQLExpressionAggregate)
             {
            	 plainTextSQLBuilder.SQLBuilder.WriteSymbol(")");
             }
            }</code>
            </example>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQLBuilderConditionFormat">
            <summary>Defines SQL text formatting options of WHERE and HAVING parts of the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderConditionFormat.NewLineAfter">
            <summary>Defines line breaking rules in condition.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderConditionFormat.IndentNestedConditions">
            <summary>Defines indent of nested conditions.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQLBuilderFromClauseFormat">
            <summary>Defines SQL text formatting options of FROM part of the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderFromClauseFormat.NewLineAfterDatasource">
            <summary>Instructs to insert line break after each datasource.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderFromClauseFormat.NewLineAfterJoin">
            <summary>Instructs to insert line break after each JOIN keyword.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderFromClauseFormat.NewLineBeforeComma">
            <summary>Instructs to insert line break before each comma that separates items in the list.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderFromClauseFormat.NewLineBeforeJoinExpression">
            <summary>Instructs to start join expressions from new lines.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderFromClauseFormat.JoinConditionFormat">
            <summary>Determines SQL text formatting options of joining conditions in the FROM part of query.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQLBuilderItemListFormat">
            <summary>Defines SQL text formatting options of item lists in the query, i.e. SELECT, ORDER BY and GROUP BY parts of the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderItemListFormat.NewLineAfterItem">
            <summary>Instructs to insert line break after each item in the list.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderItemListFormat.NewLineBeforeComma">
            <summary>Instructs to insert line break before each comma that separates items in the list.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQLBuilderSelectFormat">
            <summary>Defines SQL text formatting options of a single SELECT statement.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.IndentGlobal">
            <summary>Defines indent of the whole single SELECT statement.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.IndentInPart"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.MainPartsFromNewLine">
            <summary>Instructs the component to start main parts of the query from new lines.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.NewLineAfterPartKeywords"></seealso>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.IndentInPart"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.IndentInPart">
            <summary>Defines indent of all lines of the query except the main query part keyword lines.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.MainPartsFromNewLine"></seealso>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.NewLineAfterPartKeywords"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.NewLineAfterPartKeywords">
            <summary>Instructs to insert line break after each main query part keyword (SELECT, FROM, WHERE, etc.)</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.MainPartsFromNewLine"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.SelectListFormat">
            <summary>Determines SQL text formatting options of SELECT part (list of output expressions) of the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.FromClauseFormat">
            <summary>Determines SQL text formatting options of FROM part of the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.WhereFormat">
            <summary>Determines SQL text formatting options of WHERE part of the query.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLBuilderFromClauseFormat.JoinConditionFormat"/>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.GroupByFormat">
            <summary>Determines SQL text formatting options of GROUP BY part of the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.HavingFormat">
            <summary>Determines SQL text formatting options of HAVING part of the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.WindowFormat">
            <summary>Determines SQL text formatting options of HAVING part of the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLBuilderSelectFormat.OrderByFormat">
            <summary>Determines SQL text formatting options of ORDER BY part of the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLFormattingOptions.KeywordFormat">
            <summary>Determines keywords format in the generated SQL query text.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLFormattingOptions.RightMargin">
            <summary>Defines maximum length of lines in the generated SQL query text. Zero value means unlimited length of lines.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLFormattingOptions.DynamicIndents">
            <summary>Allows to indent the next item in the list to the same position as the first item.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLFormattingOptions.DynamicRightMargin">
            <summary>Instructs the component not to take into account leading spaces when counting line lenght to wrap.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQLGenerationOptions">
            <summary>Determine SQL query text generation rules and display of SQL objects and expressions in the Query Builder.</summary>
            <remarks>
            	<para>Control the display of object names and expressions during the visual query building process (see the <see cref="P:ActiveQueryBuilder.Core.SQLGenerationOptions.ObjectPrefixSkipping"/>, <see cref="!:QuoteAllIdentifiers"/> properties).</para>
            	<para>Control SQL query text generation for the <see cref="!:QueryBuilder.SQL"/> property.</para>
            </remarks>
            <seealso cref="T:ActiveQueryBuilder.Core.SQLGenerationOptions"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLGenerationOptions.ParenthesizeANDGroups">
            <summary>Instructs the component to enclose in parentheses criteria groups joined with AND operator if they are separated by the OR operator for clarity
            of criteria representation in text form.</summary>
            <remarks>Can be used in conjunction with the <see cref="P:ActiveQueryBuilder.Core.SQLGenerationOptions.ParenthesizeSingleCriterion"/> property.</remarks>
            <value>if false, the result SQL will be: "a &gt;1 and b &gt; 1 or a &lt;= 1 and b &lt; 0";<br/>
            if true: "(a &gt;1 and b &gt; 1) or (a &lt;= 1 and b &lt; 0)".</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLGenerationOptions.ParenthesizeSingleCriterion">
            <summary>Instructs the component to enclose in parentheses single arithmetic operators for clarity of criteria representation in text form.</summary>
            <remarks>Can be used in conjunction with the <see cref="P:ActiveQueryBuilder.Core.SQLGenerationOptions.ParenthesizeANDGroups"/> property.</remarks>
            <example>
            if false, the result SQL will be: "a &gt;1 and b &gt; 1 or a &lt;= 1 and b &lt; 0";<br/>
            if true: "(a &gt;1) and (b &gt; 1) or (a &lt;= 1) and (b &lt; 0)".
            </example>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLGenerationOptions.ObjectPrefixSkipping">
            <summary>Instructs the component to skip the unnecessary database object prefixes or not.</summary>
            <remarks><para>The necessity of a prefix is determined in accordance with the current database connection. According to it, there could be defined a default database and
            default schemas that can be omitted in SQL query text. This information is retrieved by Active Query Builder from the database during metadata retrieval
            process and can be changed by setting the <see cref="P:ActiveDatabaseSoftware.ActiveQueryBuilder.Core.MetadataItem.Default"/> property of appropriate namespaces.</para>
            <para>Note: This property controls object prefix skipping in the component's user interface. The <see cref="P:ActiveDatabaseSoftware.ActiveQueryBuilder.Core.BaseSQLBuilder.ObjectPrefixSkipping">same named property</see> 
            	  of the <see cref="T:ActiveDatabaseSoftware.ActiveQueryBuilder.Core.BaseSQLBuilder">BaseSQLBuilder class</see> deterimes the presence of object prefixes in resultant SQL query text.</para>
            </remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLGenerationOptions.ObjectNamesNormalization">
            <summary>Normalize object and field names to the form as they defined in the database schema.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLGenerationOptions.OuterKeywordInLinks">
            <summary>Instructs the component to insert "OUTER" keyword before "JOIN" clause or not.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLGenerationOptions.InnerKeywordInLinks"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLGenerationOptions.InnerKeywordInLinks">
            <summary>Instructs the component to insert "INNER" keyword before "JOIN" clause or not.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLGenerationOptions.OuterKeywordInLinks"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLGenerationOptions.AsKeywordInExpressionAlias">
            <summary>Instructs the component to insert "AS" keyword between field name and alias ("Fleld AS Alias") or not.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLGenerationOptions.AsKeywordInObjectAlias"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLGenerationOptions.AsKeywordInObjectAlias">
            <summary>Instructs the component to insert "AS" keyword between object name and its alias ("Table AS Alias") or not.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLGenerationOptions.AsKeywordInExpressionAlias"></seealso>
        </member>
        <member name="M:ActiveQueryBuilder.Core.BatchUpdatableBase.BeginUpdate">
            <summary>Prevents the component from SQL generation until the EndUpdate method is called.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.BatchUpdatableBase.EndUpdate">
            <summary>Resumes SQL generation after it was suspended by the BeginUpdate method.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BatchUpdatableBase.IsUpdating">
            <summary>Indicates that the component is in update mode now.</summary>
            <remarks>See <see cref="M:ActiveQueryBuilder.Core.BatchUpdatableBase.BeginUpdate"/> and <see cref="M:ActiveQueryBuilder.Core.BatchUpdatableBase.EndUpdate"/> methods for details.</remarks>
        </member>
        <member name="T:ActiveQueryBuilder.Core.Helpers">
            <summary>
            Class with common constants, objects and helping functions.
            </summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.Helpers.GetAggregateList(ActiveQueryBuilder.Core.MetadataField,ActiveQueryBuilder.Core.SQLContext)">
            <summary>
            Collect allow aggregates for metadata field
            </summary>
            <param name="field"></param>
            <param name="sqlContext"></param>
            <returns></returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.Helpers.FindFieldIndexInDataReader(System.Data.IDataReader,System.String)">
            <summary>
            Find the field in IDataReader by name. Does not throws if not found, just returns -1.
            </summary>
            <returns>The field index if found, -1 otherwise.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.ILayoutItem.SaveLayout(System.Xml.XmlElement)">
            <summary>Save layout information by adding new XML node describing this ILayoutItem.</summary>
            <param name="parentXmlElement">Parent node to add to.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.ILayoutItem.LoadLayout(System.Xml.XmlElement)">
            <summary>Load layout information from given XML node.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.OptionsBase">
            <summary>Base class for many "Options" classes</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.UserMessageId">
            <summary>Lists possible situations that require to warn the user.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.UserMessageId.ColumnNameAlreadyUsed">
            <summary>
            	<para>Notifies that the specified alias matches the name of another column.</para>
            	<para>Multiple columns with same name in a sub-query may lead to inconsistency in the calling sub-query.</para>
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.UserMessageId.DeletingAliasCausesConflict">
            <summary>
            	<para>Notifies that deleting an alias leads to matching this column name to the name of another column.</para>
            	<para>Multiple columns with same name in a sub-query may lead to inconsistency in the calling sub-query.</para>
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.UserMessageId.SelectingExpressionCausesConflict">
            <summary>
            	<para>Notifies that adding the expression leads to the same named columns in the sub-query.</para>
            	<para>Multiple columns with same name in a sub-query may lead to inconsistency in the calling sub-query.</para>
            </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.UserMessageEventArgs">
            <summary>Class to define parameters passed to the <see cref="!:QueryBuilder.UserMessage"/> event.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.UserMessageEventArgs.MessageId">
            <summary>Gets the value that uniquely identifies the situation that requires to warn the user.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.UserMessageEventArgs.Message">
            <summary>Gets the warning message string to be displayed to the user.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQLContext">
            <summary>Defines context for the query building, parsing and SQL generation purposes.</summary>
            <remarks>This object holds links to the Syntax Provider that defines parsing and metadata retrieval rules, to the Metadata Provider that allows to
            retrieve metadata from the database and to the Metadata Container that holds metadata information retrieved from the database.</remarks>
        </member>
        <member name="E:ActiveQueryBuilder.Core.SQLContext.MetadataStructureChanged">
            <summary>Fired when MetadataStructure property changed.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.SQLContext.UserQueriesStructureChanged">
            <summary>Fired when UserQueriesStructure property changed.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLContext.SyntaxProvider">
            <summary>Gets or sets a reference to the Syntax Provider object used to define SQL syntax rules of specific database servers.</summary>
            <remarks>Syntax Provider is also used to define SQL statements intended for metadata retrieval process.</remarks>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLContext.MetadataProvider"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLContext.MetadataProvider">
            <summary>Gets or sets a reference to the Metadata Provider object used to retrieve metadata from a database or from another source.</summary>
            <remarks>
            	<para>Active Query Builder has metadata providers for most popular ADO.NET drivers and a Universal metadata provider to get access to a database trough generic
            <see cref="T:System.Data.Common.DBConnection">DBConnection</see> object.</para>
            	<para>Metadata Provider is not the only necessary object to retrieve metadata. You should also set a reference to a Syntax Provider via the <see cref="P:ActiveQueryBuilder.Core.SQLContext.SyntaxProvider">SyntaxProvider
            Property</see>.</para>
            </remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLContext.MetadataContainer">
            <summary>Returns a reference to the Metadata Container, an object to hold information about database schema, database objects and their attributes.</summary>
            <remarks>Use the <see cref="T:ActiveQueryBuilder.Core.MetadataLoadingOptions"/> property to limit the set of database objects loaded to the Metadata Container. You can also add and remove the items of
            the Metadata Container programmatically via this property.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLContext.LoadingOptions">
            <summary>Determines rules of loading database schema information to the Metadata Container.</summary>
            <remarks>Definition of these rules might be needed to limit the list of database objects displayed, as well as to reduce metadata loading time for some database servers
            (eg. Oracle).<br/>
            Formerly named as <see cref="T:ActiveQueryBuilder.Core.MetadataFilter">MetadataFilter</see>, the new option set introduces a simpler way to define metadata
            loading rules using <see cref="P:ActiveDatabaseSoftware.ActiveQueryBuilder.MetadataLoadingOptions.ExcludeFilter">ExcludeFilter</see> and <see cref="P:ActiveDatabaseSoftware.ActiveQueryBuilder.MetadataLoadingOptions.IncludeFilter">IncludeFilter</see> mask sets and other
            properties, among with old way that provides higher flexibility in defining metadata filtration rules.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLContext.ValidateExpression(System.String,System.String)">
            <summary>SQL expression validation helper.</summary>
            <param name="value">SQL expression to validate.</param>
            <param name="language">Language to translate validation errors.</param>
            <returns>null if expression is valid, error description if expression has errors.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLContext.ValidateLogicalExpression(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>Logical SQL expression validation helper.</summary>
            <param name="value">Logical SQL expression to validate.</param>
            <param name="strict">If true, parser does not allow expressions with skipped first part, like "= 1".</param>
            <param name="allowBooleanConstants">If true, "=true" and "=false" are allowed even if not supported by underlying server.</param>
            <param name="language">Language to translate validation errors.</param>
            <returns>null if expression is valid, error description if expression has errors.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLContext.ClearMetadata">
            <summary>Clears metadata (metadata container and metadata structure).</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.Localizer">
            <summary>Localizer is a static object that holds localization resources.</summary>
            <remarks>Use the <see cref="!:QueryBuilder.Language">QueryBuilder.Language property</see> to change language of the component.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.Localizer.Languages">
            <summary>Lists language codes of available localizations.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.Localizer.Language">
            <summary>Specifies component's UI language by it's code.</summary>
            <remarks>
            	<para>The list of available languages can be taken from the <see cref="P:ActiveQueryBuilder.Core.Localizer.Languages">Languages field</see>. The language list always contains "Auto" and "Default" strings.</para>
            	<para>If specified language code doesn't exist (eg. "es-MX"), the Localizer will try to fallback to the base language ("es"). If it doesn't exist too, the
            Localizer will use the "Default" language.</para>
            </remarks>
            <value>The "Auto" value means the language will be detected automatically according to CultureInfo specified for UI culture of the current thread
            (<see cref="P:System.Threading.Thread.CurrentUICulture">System.Threading.Thread.CurrentThread.CurrentUICulture</see>).<br/>
            The "Default" value means usage of default strings containing in embedded resources.</value>
        </member>
        <member name="E:ActiveQueryBuilder.Core.Localizer.LanguageChanged">
            <summary>Invoked when language is changed.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.Localizer.LoadLanguageFromFile(System.String)">
            <summary>Loads language from file.</summary>
            <param name="languageFile">File to load language from</param>
            <returns>true if language is loaded successfully; false if not.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.Localizer.LoadLanguageFromStream(System.IO.Stream)">
            <summary>Loads language from stream</summary>
            <param name="languageStream">Stream to load language from</param>
            <returns>true if language is loaded successfully; false if not.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.Localizer.LoadLanguageFromString(System.String)">
            <summary>Loads language from string.</summary>
            <param name="xmlString">String to load language from</param>
            <returns>true if language is loaded successfully; false if not.</returns>
        </member>
        <member name="T:ActiveQueryBuilder.Core.BaseMetadataProvider">
            <summary>Base class for all Metadata Provider components.</summary>
            <remarks>
                <para>Metadata Providers are used to provide access to the database connection to get the metadata information.</para>
                <para>Metadata Provider is intended to be assigned to the <see cref="!:QueryBuilder.MetadataProvider">QueryBuilder.MetadataProvider Property</see>.</para>
                <para>Using Metadata Provider you will get the metadata information loaded to the component automatically. However, you may use the Query Builder without a
            Metadata Provider, for example, if you can't establish direct connection to the database working in multi-tier environment. Working without a Metadata Provider
            you should fill the list of database objects to the <see cref="T:ActiveQueryBuilder.Core.MetadataContainer">Metadata Container</see> by yourself; otherwise you will not be able to browse the Database
            Schema Tree. Also you'll have to set the <see cref="!:QueryBuilder.OfflineMode">OfflineMode Property</see> to true to deny execution of metadata extraction queries and set
            the <see cref="E:ActiveQueryBuilder.Core.MetadataContainer.ItemMetadataLoading">MetadataContainer.ItemMetadataLoading Event</see> to fill the field lists of database objects being added to the
            query; otherwise you will see them empty at the Design Pane.</para>
            </remarks>
        </member>
        <member name="E:ActiveQueryBuilder.Core.BaseMetadataProvider.BeforeConnect">
            <summary>Fired before opening connection to the database.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.BaseMetadataProvider.AfterConnect">
            <summary>Fired after opening connection to the database.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.BaseMetadataProvider.BeforeDisconnect">
            <summary>Fired before closing connection to the database.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.BaseMetadataProvider.AfterDisconnect">
            <summary>Fired after closing connection to the database.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.BaseMetadataProvider.BeforeSqlExec">
            <summary>Fired before execution of SQL query.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.BaseMetadataProvider.AfterSqlExec">
            <summary>Fired after successful execution of the SQL query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseMetadataProvider.CanExecSQL">
            <summary>Indicates if a metadata provider is able to execute SQL queries against database connection.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseMetadataProvider.Connected">
            <summary>Gets or sets a value indicating whether the underlying <see cref="P:ActiveQueryBuilder.Core.BaseMetadataProvider.Connection"/> object is connected to the database.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseMetadataProvider.Description">
            <summary>Gets description string for the purpose of selecting the right metadata provider from the list of available providers.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseMetadataProvider.Connection">
            <summary>Gets or sets an object implementing IDbConnection interface to provide access to the database.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseMetadataProvider.CommandTimeout">
            <summary>Gets or sets the SQL command timeout.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.BaseMetadataProvider.ExecSQL(System.String,System.Boolean)">
            <summary>Executes SQL query against Connection and returns the IDataReader interface in result.</summary>
            <param name="sql">SQL query to be executed against Connection.</param>
            <param name="schemaOnly">Flag indicating that no data fetching is needed after the SQL query execution.</param>
            <returns>Returns IDataReader interface to get access to the SQL query execution result.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.BaseMetadataProvider.ExecSQLNoResult(System.String)">
            <summary>Executes SQL query against Connection. Returns no result.</summary>
            <param name="sql">SQL query to be executed against Connection.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.BaseMetadataProvider.Connect">
            <summary>Opens connection to the database.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.BaseMetadataProvider.Disconnect">
            <summary>Closes connection to the database.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataAggregate">
            <summary>Class to represent custom aggregate functions in the Metadata Container.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataContainer">
            <summary>Stores the necessary metadata from database.</summary>
            <remarks>Metadata Container was reorganized from the plain list of objects to the hierarchical structure. There are three types of elements of this structure:
            namespaces, objects and sub-object items. Namespaces reflect object grouping in the database server. They can represent linked servers, databases, schemas and
            packages. Objects can be tables, views, synonyms, stored procedures or functions (only those procedures and functions that return dataset and can be used as
            data sources in the SELECT queries). The component deals with three types of sub-object items: fields, parameters and foreign keys, as these types of items are
            needed by the component to build queries and to represent them visually.</remarks>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataContainer.ItemMetadataLoading">
            <summary>Fired when the component requests child metadata items for an item.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataContainer.ItemMetadataLoaded">
            <summary>Fired when the component has finished loading of child metadata items for an item.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataContainer.FilterMetadataItem">
            <summary>Allows to deny addition of unwanted objects to the Metadata Container.</summary>
            <remarks>Handler of this event should analyze the passed Metadata Item and set the abort flag to true to deny it's addition to the Metadata Container.</remarks>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataContainer.ConnectionIdle">
            <summary>Fired when metadata object has finised loading of child metadata items.</summary>
            <remarks>It allows for closing the database connection if it's not desirable to keep it open during the work session.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataContainer.LoadingOptions">
            <summary>Determines rules of loading database schema information to the Metadata Container.</summary>
            <remarks>Definition of these rules is required to limit the list of database objects displayed in the tree, as well as to reduce metadata loading time
            (for some database servers, e.g. Oracle).<br/>
            Formerly named as <see cref="T:ActiveQueryBuilder.Core.MetadataFilter">MetadataFilter</see>, the new option set introduces a simpler way to define metadata
            loading rules using <see cref="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.ExcludeFilter">ExcludeFilter</see> and <see cref="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.IncludeFilter">IncludeFilter</see> mask sets and other
            properties, but the old way is preserved due to higher flexibility and for compatibility reasons. The result set of objects to be loaded is determined using
            both old and new rules.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataContainer.XML">
            <summary>Gets or sets the content of Metadata Container as string in a form of XML document.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataContainer.AbortMetadataLoading">
            <summary>Aborts the metadata loading process.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataContainer.Clear">
            <summary>
            Removes all items from metadata container.
            </summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataContainer.ExportToXML(System.String,System.Collections.Generic.ICollection{ActiveQueryBuilder.Core.MetadataItem})">
            <summary>Saves the content of Metadata Container to file in a form of XML document.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataContainer.ExportToXML(System.IO.Stream,System.Collections.Generic.ICollection{ActiveQueryBuilder.Core.MetadataItem})">
            <summary>Saves the content of Metadata Container to stream in a form of XML document.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataContainer.AddFromXML(System.String)">
            <summary>Loads the content of Metadata Container from file in a form of XML document. Does not clear existing items.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataContainer.ImportFromXML(System.String)">
            <summary>Loads the content of Metadata Container from file in a form of XML document. Clears existing items.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataContainer.AddFromXML(System.IO.Stream)">
            <summary>Loads the content of Metadata Container from stream in a form of XML document. Does not clear existing items.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataContainer.ImportFromXML(System.IO.Stream)">
            <summary>Loads the content of Metadata Container from stream in a form of XML document. Clears existing items.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataField">
            <summary>Class to represent fields of database objects in the Metadata Container.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataField.FieldTypeName">
            <summary>Gets or sets native server data type name of a field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataField.FieldType">
            <summary>Gets or sets field type of a field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataField.Size">
            <summary>Gets or sets the data type size of a field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataField.Precision">
            <summary>Gets or sets the data type precision of a field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataField.Scale">
            <summary>Gets or sets the data type scale of a field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataField.PrimaryKey">
            <summary>Gets or sets the Primary Key attribute of a field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataField.Nullable">
            <summary>Gets or sets the Nullable attribute of a field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataField.ReadOnly">
            <summary>Gets or sets the Readonly attribute of a field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataField.Expression">
            <summary>Gets or sets the SQL expression string for a virtual metadata field.</summary>
            <remarks>Virtual fields are usually defined to hide complex SQL expressions or correlated sub-queries from the end-user.</remarks>
            <value>Valid SQL expression string to be used as replacement for this field in result SQL query text.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataField.ExpressionAST">
            <summary>Gets parsed SQL expression for a virtual metadata field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataField.EnumValues">
            <summary>Dictionary to translate field values to human-readable representation.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataField.DisplayInLookup">
            <summary>Use this field to identify a record of this entity when referenced in another entity. true by default</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataField.IsVirtual">
            <summary>Indicates that the metadata object is a virtual calculated field.</summary>
            <remarks>Virtual fields are replaced with expressions in result SQL query text. The <see cref="P:ActiveQueryBuilder.Core.MetadataField.Expression">Expression property</see> of virtual metadata field must be set to
            valid SQL expression to be used as replacement for this field in result SQL query.</remarks>
            <returns>True if Expression is not empty; false otherwise.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataField.FindForeignKeys">
            <summary>Find all foreign keys defined on this field.</summary>
            <returns>Returns a list of foreign keys defined on this field.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataField.FindForeignKey">
            <summary>Find foreign key defined on this field.</summary>
            <returns>Returns the foreign key defined on this field (returns first if there are many).</returns>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataFilter">
            <summary>Defines a set of rules to filter metadata.</summary>
            <remarks>
            	<para>Each rule defined in the list is represented by <see cref="T:ActiveQueryBuilder.Core.MetadataFilterItem"/> object. Metadata filter may have multiple exclusion and inclusion items (rules). If
            metadata filter has no inclusion items, the exclusion items will be applied to the whole database schema. If metadata filter has some inclusion items, they
            will constitute a subset of database schema, to which the exclusion items will be applied.</para>
            	<para>You may treat those rules as SQL conditions combined with OR operators in WHERE clause of the SELECT statement that retrieves the list of objects to be
            loaded to the Metadata Container. Conditions marked with the <see cref="P:ActiveQueryBuilder.Core.MetadataFilterItem.Exclude">MetadataFilterItem.Exclude</see> flag are prefixed with NOT operator. The result SQL condition
            will look like the following: "([inclusion rule] OR [inclusion rule] OR ...) AND NOT ([exclusion rule] OR [exclusion rule] OR ...)"</para>
            	<para>Alternate way to define metadata filtration rules is to use the <see cref="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.ExcludeFilter"/> and <see cref="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.IncludeFilter"/>. You may
            use both types of filters at a time: the conditions set using MetadataSimpleFilter will be converted to a set of MetadataFilterItems which will be added to the
            MetadataFilter.</para>
            </remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataFilter.Add">
            <summary>Adds new Metadata Filter item to collection</summary>
            <returns>Returns reference to the newly created item.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataFilter.Insert(System.Int32)">
            <summary>Adds new Metadata Filter item to the specified position in collection.</summary>
            <param name="index">specifies position for a new item</param>
            <returns>Returns reference to the newly created item.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataFilter.Filter(System.Collections.Generic.IEnumerable{ActiveQueryBuilder.Core.MetadataItem})">
            <summary>Holds the list of metadata filter items.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataFilterItem">
            <summary>Defines single metadata filtration rule.</summary>
            <remarks>
            	<para>Metadata filter item is a set of masks and flags that determines single filtration rule. Each rule can instruct to include or exclude metadata items that
            match the masks. Use the <see cref="P:ActiveQueryBuilder.Core.MetadataFilterItem.Exclude"/> property to specify if this rule defines objects for exclusion or inclusion.</para>
            	<para>Masks act similar to the "LIKE" SQL operator. Use the percent sign (%) to represent any sequence of characters; use the underscore sign (_) to represent any
            single character. If you want to define a set of masks for specific property (schema or object name), you have to add multiple filter items.</para>
            </remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataFilterItem.ObjectTypes">
            <summary>Defines which types of database objects (tables, views, etc.) will be selected by this item.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataFilterItem.FlagUser">
            <summary>Determines if this item will select matching system metadata objects or not.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataFilterItem.FlagSystem">
            <summary>Determines if this item will select matching system metadata objects or not.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataFilterItem.Server">
            <summary>Gets or sets server name mask.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataFilterItem.Database">
            <summary>Gets or sets database name mask.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataFilterItem.Schema">
            <summary>Gets or sets schema name mask.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataFilterItem.Package">
            <summary>Gets or sets package name mask.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataFilterItem.Object">
            <summary>Gets or sets object name mask.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataFilterItem.Field">
            <summary>Gets or sets field name mask.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataFilterItem.CaseSensitive">
            <summary>Instructs to treat masks as case sensitive or not.</summary>
            <value>True to treat masks as case sensitive; false - case insensitive.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataFilterItem.Exclude">
            <summary>Determines if this rule acts to exclude matching metadata items or include them.</summary>
            <remarks>If metadata filter has no inclusion items, the exculsion items will be applied to the whole database schema. If metadata filter has some inclusion
            items, they will constitute a subset of database schema, to which the exclusion items will be applied.</remarks>
            <value>True instructs to make this rule exclusive; false to make this rule inclusive.</value>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataForeignKeyCardinality">
            <summary>Determines possible cardinality values for one side of relationship of the foreign key.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataForeignKeyCardinality.Unknown">
            <summary>Indicates that the cardinality of this side of relationship is unknown.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataForeignKeyCardinality.One">
            <summary>Indicates that the side of relationship may have one occurrence only.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataForeignKeyCardinality.Many">
            <summary>Indicates that the side of relationship may have many occurrences.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataForeignKey">
            <summary>Class to represent foreign key relationships in the Metadata Container.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataForeignKey.ReferencedObject">
            <summary>Gets or sets the referenced metadata object of relationship.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataForeignKey.ReferencedObjectName">
            <summary>Gets or sets the name of referenced metadata object of relationship.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataForeignKey.ReferencedFields">
            <summary>Gets or sets list of fields of the referenced side of relationship.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataForeignKey.ReferencedCardinality">
            <summary>Gets or sets cardinality of the referenced side of relationship.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataForeignKey.Fields">
            <summary>Gets or sets list of fields of the referential side of relationship.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataForeignKey.Cardinality">
            <summary>Gets or sets cardinality of the referential side of relationship.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataType">
            <summary>Type of MetadataItem object</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Root">
            <summary>Determines the root node of the metadata tree.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Server">
            <summary>Determines the Server namespace node.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Database">
            <summary>Determines the Database namespace node.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Schema">
            <summary>Determines the Schema namespace node.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Package">
            <summary>Determines the Package namespace node.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Namespaces">
            <summary>Unites all possible namespace nodes: Connection, Server, Database, Schema, Package.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Table">
            <summary>Determines the Table database object node.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.View">
            <summary>Determines the View database object node.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Procedure">
            <summary>Determines the Stored Procedure or Function database object node.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Synonym">
            <summary>Determines the Synonym database object node.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Objects">
            <summary>Unites all possible database object nodes: Table, View, Procedure, Synonym.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Aggregate">
            <summary>Determines the aggregate function.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Parameter">
            <summary>Determines the Parameter node of a database object.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Field">
            <summary>Determines the Field node of a database object.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.ForeignKey">
            <summary>Determines the Foreign Key node of a database object.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.ObjectMetadata">
            <summary>Unites all possible child nodes of database objects: Field, Parameter, Foreign Key.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.UserQuery">
            <summary>Determines the user query virtual object node.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.UserField">
            <summary>Determines the user-defined calculated field node.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.Connection">
            <summary>Determines the Connection namespace node.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MetadataType.All">
            <summary>Unites all possible values of this type.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataTypeMethods">
            <summary>Extension method to check is MetadataType in a given set.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataTypeMethods.IsA(ActiveQueryBuilder.Core.MetadataType,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Check is given type is in given test range.</summary>
            <param name="type">Value to test</param>
            <param name="test">Contains possible items to test for</param>
            <returns>true if given type is in given range.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataTypeMethods.Contains(ActiveQueryBuilder.Core.MetadataType,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Check is given set of MetadataType values contains items from test.</summary>
            <param name="type">Values to test</param>
            <param name="test">Contains possible items to test for.</param>
            <returns>true if type contains items from test.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataTypeMethods.IsNamespace(ActiveQueryBuilder.Core.MetadataType)">
            <summary>Check is given type is in MetadataType.Namespaces range.</summary>
            <param name="type">Value to test</param>
            <returns>true if given type is namespace.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataTypeMethods.IsObject(ActiveQueryBuilder.Core.MetadataType)">
            <summary>Check is given type is in MetadataType.Objects range.</summary>
            <param name="type">Value to test</param>
            <returns>true if given type is object.</returns>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataItemEventHandler">
            <summary>Type to handle events for metadata container items.</summary>
            <param name="metadataItemSender">Sender metadata item.</param>
            <param name="metadataItem">Metadata item to handle.</param>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataItem">
            <summary>Base class for all items of the Metadata Container. Represents a node in the Metadata Container tree.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataItem.MetadataChildItemAdded">
            <summary>Fires on adding a child metadata item to the hierarchy of child items.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataItem.MetadataChildItemRemoving">
            <summary>Fires when the metadata item is about to be removed from the hierarchy of child items.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataItem.MetadataChildItemRemoved">
            <summary>Fires when the metadata item is removed from the hierarchy of child items.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataItem.NameChanged">
            <summary>Fires on changing the name of metadata item.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.MetadataItem.Name"></seealso>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataItem.AltNameChanged">
            <summary>Fires on changing the alternate name of metadata item.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.MetadataItem.AltName"></seealso>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataItem.DefaultChanged">
            <summary>Fires on changing the Default attribute of metadata item.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.MetadataItem.Default"></seealso>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataItem.SystemChanged">
            <summary>Fires on changing the System attribute of metadata item.</summary>
            <seealso cref="E:ActiveQueryBuilder.Core.MetadataItem.SystemChanged"></seealso>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataItem.FilteringPropsChanged">
            <summary>Fires on changing the attributes of metadata item that affect the filtering.</summary>
            <remarks>The event is fired on changing the AltName, Name, Default and System properties.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Type">
            <summary>Determines the type of Metadata Item (root, namespace, database object, field, etc.).</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.SQLContext">
            <summary>Refers to the context for SQL generation, SQL parsing and metadata loading purposes.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Name">
            <summary>Unquoted name of the metadata item.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.NameQuoted">
            <summary>Name of the metadata item, quoted if required.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.NameFull">
            <summary>Returns fully qualified name of the metadata item in form [database].[schema].[name].</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.AltName">
            <summary>Alternate name of the metadata item.</summary>
            <remarks>This name will substitute the real name when usage of the alternate names is activated.</remarks>
            <seealso cref="!:BehaviorOptions.UseAltNames">UseAltNames Property</seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Default">
            <summary>Indicates if the namespace metadata item is default one.</summary>
            <remarks>if this item can be omitted in the</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.System">
            <summary>Indicates if the metadata item is system or user object.</summary>
            <remarks>System objects are usually hidden from the database schema tree.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Description">
            <summary>Description of the metadata item.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Tag">
            <summary>Can hold custom data for the item at run-time.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.UserData">
            <summary>Can hold custom text data for the item. This data will be stored and loaded from XML snapshot.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Items">
            <summary>Lists the child nodes of this one.</summary>
            <value>List of the child Metadata Item objects.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.ParentItems">
            <summary>Points to the list of child metadata items of the parent node.</summary>
            <remarks>This list contains the reference to itself.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Parent">
            <summary>Points to the parent node of the tree.</summary>
            <value>Reference to the parent Metadata Item object. Null for the root node.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Object">
            <summary>Refers to the parent node of database object type.</summary>
            <value>Returns the first found metadata item of the database object type from the parent items hierarchy.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Package">
            <summary>Refers to the parent node of Package type.</summary>
            <value>Returns the first found metadata item of the Package type from the parent items hierarchy.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Schema">
            <summary>Refers to the parent node of Schema type.</summary>
            <value>Returns the first found metadata item of the Schema type from the parent items hierarchy.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Database">
            <summary>Refers to the parent node of Database type.</summary>
            <value>Returns the first found metadata item of the Database type from the parent items hierarchy.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Server">
            <summary>Refers to the parent node of Server type.</summary>
            <value>Returns the first found metadata item of the Server type from the parent items hierarchy.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Connection">
            <summary>Refers to the parent node of Connection type.</summary>
            <value>Returns the first found metadata item of the Connection type from the parent items hierarchy.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.MetadataContainer">
            <summary>Refers to the Metadata Container object to which this item belongs to.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataItem.Visible">
            <summary>Should this item be displayed in the QueryBuilder UI? true by default.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItems``1(ActiveQueryBuilder.Core.MetadataQualifiedName,ActiveQueryBuilder.Core.MetadataType,ActiveQueryBuilder.Core.MetadataItem.FindOptions)">
            <summary>Finds metadata items matching the specified Metadata Qualified Name of specific types in the child items hierarchy.</summary>
            <overloads>Finds matching metadata items in the child items hierarchy; uses FindOptions instance to fine-tune searching.</overloads>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItems``1(ActiveQueryBuilder.Core.MetadataQualifiedName,ActiveQueryBuilder.Core.MetadataType,System.Boolean)">
            <summary>Finds metadata items matching the specified Metadata Qualified Name of specific types in the child items hierarchy.</summary>
            <overloads>Finds matching metadata items in the child items hierarchy; loads items from database if necessary and allowed by the QueryBuilder.OfflineMode
            property.</overloads>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItems``1(ActiveQueryBuilder.Core.MetadataQualifiedName,System.Boolean)">
            <summary>Finds metadata items matching the specified Metadata Qualified Name in the child items hierarchy.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItems``1(ActiveQueryBuilder.Core.SQLQualifiedName,ActiveQueryBuilder.Core.MetadataType,ActiveQueryBuilder.Core.MetadataItem.FindOptions)">
            <summary>Finds metadata items matching the specified SQL Qualified Name of specific types in the child items hierarchy.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItems``1(ActiveQueryBuilder.Core.SQLQualifiedName,ActiveQueryBuilder.Core.MetadataType,System.Boolean)">
            <summary>Finds metadata items matching the specified SQL Qualified Name of specific types in the child items hierarchy.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItems``1(ActiveQueryBuilder.Core.SQLQualifiedName,System.Boolean)">
            <summary>Finds metadata items matching the specified SQL Qualified Name in the child items hierarchy.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItems``1(System.String,ActiveQueryBuilder.Core.MetadataType,System.Boolean)">
            <summary>Finds metadata items matching the specified string of specific types in the child items hierarchy.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItems``1(System.String)">
            <summary>Finds metadata items matching the specified string in the child items hierarchy.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItems``1(ActiveQueryBuilder.Core.MetadataFilter,ActiveQueryBuilder.Core.MetadataType,System.Boolean)">
            <summary>Finds metadata items according to the specified Metadata Filter of specific types in the child items hierarchy.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItems``1(ActiveQueryBuilder.Core.MetadataType,System.Boolean)">
            <summary>Finds metadata items of specific types in the child items hierarchy.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItem``1(ActiveQueryBuilder.Core.MetadataQualifiedName,ActiveQueryBuilder.Core.MetadataType,ActiveQueryBuilder.Core.MetadataItem.FindOptions)">
            <summary>Finds first metadata item matching the specified Metadata Qualified Name of specific types in the child items hierarchy.</summary>
            <overloads>Finds the first matching metadata item in the child items hierarchy; uses FindOptions to fine-tune searching.</overloads>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItem``1(ActiveQueryBuilder.Core.MetadataQualifiedName,ActiveQueryBuilder.Core.MetadataType,System.Boolean)">
            <summary>Finds first metadata item matching the specified Metadata Qualified Name of specific types in the child items hierarchy.</summary>
            <overloads>Finds the first matching metadata item in the child items hierarchy; loads items from database if necessary and allowed by the
            QueryBuilder.OfflineMode property.</overloads>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItem``1(ActiveQueryBuilder.Core.SQLQualifiedName,ActiveQueryBuilder.Core.MetadataType,System.Boolean)">
            <summary>Finds first item matching the specified SQL Qualified Name of specific types in the child items hierarchy.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.FindItem``1(System.String,ActiveQueryBuilder.Core.MetadataType,System.Boolean)">
            <summary>Finds first metadata item matching the specified string of specific types in the child items hierarchy.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.LoadAll(System.Boolean)">
            <summary>Recursively loads metadata for all items.</summary>
            <param name="withFields">Instructs to load fields for database objects (true) or not (false).</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddNamespace(System.String,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Adds and returns new child metadata item of the specified namespace type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddObject(System.String,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Adds and returns new child metadata item of the specified database object type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddConnection(System.String,ActiveQueryBuilder.Core.SQLContext)">
            <summary>Adds and returns new child metadata item of the Server type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddServer(System.String)">
            <summary>Adds and returns new child metadata item of the Server type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddDatabase(System.String)">
            <summary>Adds and returns new child metadata item of the Database type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddSchema(System.String)">
            <summary>Adds and returns new child metadata item of the Schema type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddPackage(System.String)">
            <summary>Adds and returns new child metadata item of the Package type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddTable(System.String)">
            <summary>Adds and returns new child metadata item of the Table type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddView(System.String)">
            <summary>Adds and returns new child metadata item of the View type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddProcedure(System.String)">
            <summary>Adds and returns new child metadata item of the Procedure type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddSynonym(System.String)">
            <summary>Adds and returns new child metadata item of the Synonym type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddParameter(System.String)">
            <summary>Adds and returns new child metadata item of the Parameter type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddField(System.String)">
            <summary>Adds and returns new child metadata item of the Field type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddUserField(System.String,System.String)">
            <summary>Adds and returns new child metadata item of the UserField type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.IsUniqueItemName(ActiveQueryBuilder.Core.MetadataType,System.String,System.StringComparison)">
            <summary> Check given name is unique for specified item types.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.GetUniqueItemName(ActiveQueryBuilder.Core.MetadataType,System.String,System.Int32,System.StringComparison)">
            <summary>Create unique name with given prefix.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddUserQuery(System.String,System.String,System.String)">
            <summary>Adds and returns new child metadata item of the UserQuery type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataItem.AddForeignKey(System.String)">
            <summary>Adds and returns new child metadata item of the Foreign Key type.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataList">
            <summary>List of metadata items.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.SQLContext">
            <summary>Refers to the context for SQL generation, SQL parsing and metadata loading purposes.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Parent">
            <summary>Refers to the parent metadata item.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Parameters">
            <summary>Lists metadata items of the Parameter type.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Fields">
            <summary>Lists metadata items of the Field type.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.ForeignKeys">
            <summary>Lists metadata items of the Foreign Key type.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Objects">
            <summary>Lists metadata items of the all database object types (Table, View, Procedure, Synonym).</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Tables">
            <summary>Lists metadata items of the Table type.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Views">
            <summary>Lists metadata items of the View type.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Procedures">
            <summary>Lists metadata items of the Procedure type.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Synonyms">
            <summary>Lists metadata items of the Synonym type.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Namespaces">
            <summary>Lists metadata items of the all namespace types (Server, Package, Database, Schema).</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Servers">
            <summary>Lists metadata items of the Server type.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Databases">
            <summary>Lists metadata items of the Database type.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Schemas">
            <summary>Lists metadata items of the Schema type.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataList.Packages">
            <summary>Lists metadata items of the Package type.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.GetItems``1(ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the list of all metadata items.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.GetItemsRecursive``1(ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the list of all metadata items and items of child lists recursively.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.GetDefaultItems``1(ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the list of default metadata items.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.Clear(ActiveQueryBuilder.Core.MetadataType)">
            <summary>Removes the metadata items of specified types from the list.</summary>
            <overloads>Removes items from the list.</overloads>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.Clear">
            <summary>Removes all items from the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindIndices``1(System.String)">
            <summary>Returns the list of indexes of metadata items that match the string name.</summary>
            <overloads>Finds and returns the list of matching item indexes from the list.</overloads>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindIndices``1(System.String,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the list of indexes of metadata items of the specified types that match the string name.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindIndices``1(ActiveQueryBuilder.Core.AstToken)">
            <summary>Returns the list of indexes of metadata items that match the name defined by AST token identifier.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindIndices``1(ActiveQueryBuilder.Core.AstToken,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the list of indexes of metadata items of the specified types that match the name defined by AST token identifier.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindIndices``1(ActiveQueryBuilder.Core.MetadataQualifiedNamePart)">
            <summary>Returns the list of indexes of metadata items that match the name defined by MetadataQualifiedNamePart.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindItems``1(System.String)">
            <summary>Returns the list of metadata items that match the string name.</summary>
            <overloads>Finds and returns the list of matching items from the list.</overloads>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindItems``1(System.String,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the list of metadata items of the specified types that match the string name.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindItems``1(ActiveQueryBuilder.Core.AstToken)">
            <summary>Returns the list of metadata items that match the name defined by AST token identifier.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindItems``1(ActiveQueryBuilder.Core.AstToken,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the list of metadata items of the specified types that match the name defined by AST token identifier.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindItems``1(ActiveQueryBuilder.Core.MetadataQualifiedNamePart)">
            <summary>Returns the list of metadata items that match the name defined by MetadataQualifiedNamePart.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindIndex``1(System.String)">
            <summary>Returns the index of first found metadata item that matches the string name.</summary>
            <overloads>Finds and returns index of the first matching item in the list.</overloads>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindIndex``1(System.String,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the index of first found metadata item of the specified types that matches the string name.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindIndex``1(ActiveQueryBuilder.Core.AstToken)">
            <summary>Returns the index of first found metadata item that matches the name defined by AST token identifier.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindIndex``1(ActiveQueryBuilder.Core.AstToken,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the index of first found metadata item of the specified type that matches the name defined by AST token identifier.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindIndex``1(ActiveQueryBuilder.Core.MetadataQualifiedNamePart)">
            <summary>Returns the index of first found metadata item that matches the name defined by MetadataQualifiedNamePart.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindItem``1(System.String)">
            <summary>Returns the first found metadata item that matches the string name.</summary>
            <overloads>Finds and returns the first matching item in the list.</overloads>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindItem``1(System.String,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the first found metadata item of the specified types that matches the string name.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindItem``1(ActiveQueryBuilder.Core.AstToken)">
            <summary>Returns the first found metadata item that matches the name defined by AST token identifier.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindItem``1(ActiveQueryBuilder.Core.AstToken,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the first found metadata item of the specified type that matches the name defined by AST token identifier.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindItem``1(ActiveQueryBuilder.Core.MetadataQualifiedNamePart)">
            <summary>Returns the first found metadata item that matches the name defined by MetadataQualifiedNamePart.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.IsLoaded(ActiveQueryBuilder.Core.MetadataType)">
            <summary>Indicates if the specified types of metadata items have been loaded to the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.SetLoaded(ActiveQueryBuilder.Core.MetadataType,System.Boolean)">
            <summary>Sets or clears the Loaded marker for specific types of metadata items.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.Load(ActiveQueryBuilder.Core.MetadataType,System.Boolean)">
            <summary>Loads specified types of metadata items to the list.</summary>
            <param name="loadTypes">Types of metadata items to load to the list.</param>
            <param name="recursive">True to load metadata items recursively; false to load items of this list only.</param>
            <remarks>On loading metadata items recursively, the loadTypes parameter will be applied to recursive calls of this method for child lists.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.Load(ActiveQueryBuilder.Core.MetadataType,System.String)">
            <summary>Loads specified types of metadata items to the list by mask.</summary>
            <param name="loadTypes">Types of metadata items to load to the list.</param>
            <param name="mask">Mask that metadata item names should match.</param>
            <remarks>Mask act similar to the "LIKE" SQL operator. Use the percent sign (%) to represent any sequence of characters; use the underscore sign (_) to represent any
            single character.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindForeignKeys(ActiveQueryBuilder.Core.MetadataNameList,ActiveQueryBuilder.Core.MetadataQualifiedName,ActiveQueryBuilder.Core.MetadataNameList)">
            <summary>Returns the list of metadata items of the Foreign Key type with the given fields, parent object and parent object fields.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataList.FindForeignKey(ActiveQueryBuilder.Core.MetadataNameList,ActiveQueryBuilder.Core.MetadataQualifiedName,ActiveQueryBuilder.Core.MetadataNameList)">
            <summary>Returns the first found metadata item of the Foreign Key type with the given fields, parent object and parent object fields.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataLoadingOptions">
            <summary>Determines rules of loading metadata to the component's Metadata Container.</summary>
            <remarks>
            	<para>Definition of these rules results in limitation of the list of database objects displayed in the tree. It may also help to reduce metadata loading time for some
            database servers (eg. Oracle).</para>
            	<para>Formerly named as <see cref="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.MetadataFilter"/>, the new option set introduces a simpler way to define metadata loading rules using <see cref="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.ExcludeFilter"/> and <see cref="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.IncludeFilter"/>
            mask sets and other properties, among with old way that provides higher flexibility in defining metadata filtration rules.</para>
             <para>MetadataSimpleFilter is just a simplified view of the MetadataFilter. You may use both types of filters at a time: 
            the masks defined in the ExcludeFilter and IncludeFilter will be converted to a set of MetadataFilterItems and joined with the items of the MetadataFilter.</para>
            </remarks>
            <seealso cref="P:ActiveQueryBuilder.Core.SQLContext.LoadingOptions"></seealso>s
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.OfflineMode">
            <summary>Allows to switch the component between normal and "Offline" modes.</summary>
            <remarks>
            	<para>The Offline mode is intended to suppress background query execution by the component. In normal mode the component retrieves field lists for objects used in
            the query and the lists of database objects by demand. Working in the Offline mode you have to provide the way to load the necessary information
            programmatically.</para>
            	<para>You can use the <see cref="E:ActiveDatabaseSoftware.ActiveQueryBuilder.MetadataContainer.ItemMetadataLoading">MetadataContainer.ItemMetadataLoading Event</see> for this purpose. To decrease metadata loading time and
            to limit the objects visible to the end-user you can define <see cref="T:ActiveQueryBuilder.Core.MetadataLoadingOptions">metadata filters</see> to limit the number of objects loaded at a time, or you
            can <see cref="M:ActiveDatabaseSoftware.ActiveQueryBuilder.MetadataContainer.ExportFromXML">save</see> the content of Metadata Container to the XML file and <see cref="M:ActiveDatabaseSoftware.ActiveQueryBuilder.MetadataContainer.ImportFromXML">load</see> metadata from the XML
            file or stream.</para>
            </remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.MetadataFilter">
            <summary>Introduces more complex but flexible way to define metadata filtration rules.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.IncludeFilter">
            <summary>Holds masks for database object and schema names to be loaded into the Metadata Container.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.ExcludeFilter"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.ExcludeFilter">
            <summary>Holds masks for database object and schema names that should NOT be loaded into the Metadata Container.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.IncludeFilter"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.LoadSystemObjects">
            <summary>Instructs to load database objects marked as System to the Metadata Container.</summary>
            <value>true to load system objects; false not to load them.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.LoadDefaultDatabaseOnly">
            <summary>Determines if only the default database should be loaded to the Metadata Container or all databases.</summary>
            <remarks>In case there is no default database set, the component will ignore this property and load all databases to avoid emptiness of the metadata container
            and the database schema tree.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.DisableAutomaticMetadataLoading">
            <summary>Determines whether the necessary metadata should be automatically loaded to the Metadata Container from database on parsing a query.</summary>
            <remarks>Loading metadata to the metadata container allows the component to find corresponding database objects for objects found in the query. In case of successful
            match, the component is capable to determine related objects, to retrieve additional information about this object and its fields, such as data
            type, description, etc. Generally, the component may not work as expected in some cases if metadata is not loaded, so we don't recommend to turn this property
            on, but this property might be helpful in case of non-standard usage of the component.</remarks>
            <value>True if automatic metadata loading is disabled; false otherwise. Default value is false.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.IgnoreNumericPrecisionForNonNumericTypes">
            <summary>Ignore "precision" column for non-numeric types. Most drivers return garbage in this column for non-numeric types.</summary>
            <remarks>Numeric precision have meaning only for numeric types, but some drivers returns non-null value even for VARCHAR or DATE types.
            Most drivers just returns the precision of the internal server type (for example, if server uses int64 value to store timestamps, driver 
            returns precision=19 for TIMESTAMP columns, this is the actual numeric precision of int64).</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.AllowRecursiveVirtualObjects">
            <summary>Allow virtual objects to reference other virtual objects.</summary>
            <remarks>If false, all names referenced in virtual objects expressions 
            treated as real database object names.</remarks>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataNameList">
            <summary>List of field names for fields of a foreign key</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataNameList.SQLContext">
            <summary>Refers to the context for SQL generation, SQL parsing and metadata loading purposes.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataNameList.Compare(ActiveQueryBuilder.Core.MetadataNameList)">
            <summary>Compares items of this list with items of another list.</summary>
            <returns>Zero if lists are equal; non-zero otherwise.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataNameList.FindIndex(System.String)">
            <summary>Gets index of a field name.</summary>
            <returns>Index of a field name if found; -1 otherwise.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataNameList.Find(System.String)">
            <summary>Determines if a field name exists in the list.</summary>
            <returns>True if found, false otherwise.</returns>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataNamesFetcher">
            <summary>Helper object to get list of available namespaces in the database.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataNamesFetcher.GetServerNames(ActiveQueryBuilder.Core.SQLContext)">
            <summary>Gets list of server names available within the current connection.</summary>
            <param name="sqlContext">Determines the current database connection and SQL syntax.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataNamesFetcher.GetDatabaseNames(ActiveQueryBuilder.Core.SQLContext,System.String)">
            <summary>Gets list of database names available within the current connection.</summary>
            <param name="sqlContext">Determines the current database connection and SQL syntax.</param>
            <param name="parentName">Defines the server name to retrieve the list of databases for.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataNamesFetcher.GetDefaultDatabaseNames(ActiveQueryBuilder.Core.SQLContext,System.String)">
            <summary>Gets list of default database names available within the current connection.</summary>
            <param name="sqlContext">Determines the current database connection and SQL syntax.</param>
            <param name="parentName">Defines the server name to retrieve the list of databases for.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataNamesFetcher.GetSchemaNames(ActiveQueryBuilder.Core.SQLContext,System.String)">
            <summary>Gets list of schema names available within the current connection.</summary>
            <param name="sqlContext">Determines the current database connection and SQL syntax.</param>
            <param name="parentName">Defines the server and database name to retrieve the list of schemas for. Example: "server.database" or "database".</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataNamesFetcher.GetDefaultSchemaNames(ActiveQueryBuilder.Core.SQLContext,System.String)">
            <summary>Gets list of default schema names available within the current connection.</summary>
            <param name="sqlContext">Determines the current database connection and SQL syntax.</param>
            <param name="parentName">Defines the server and database name to retrieve the list of schemas for. Example: "server.database" or "database".</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataNamesFetcher.GetPackageNames(ActiveQueryBuilder.Core.SQLContext,System.String)">
            <summary>Gets list of package names available within the current connection.</summary>
            <param name="sqlContext">Determines the current database connection and SQL syntax.</param>
            <param name="parentName">Defines the server, database and schema name to retrieve the list of packages for. Example: "server.database.schema" or "database.schema".</param>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataNamespace">
            <summary>Class to represent namespace items in the Metadata Container: Server, Package, Database, Schema.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataObject">
            <summary>Class to represent database objects in the Metadata Container.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataObject.ReferencedObjectName">
            <summary>Gets or sets the name of referenced object for synonym.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataObject.ReferencedObject">
            <summary>Gets the reference to Metadata Object referred by the ReferencedObjectName property.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataObject.Expression">
            <summary>Gets or sets the SQL expression string for a virtual metadata object.</summary>
            <value>Valid SELECT statement string to be used as replacement for this object in result SQL query text in a form of derived table.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataObject.ExpressionAST">
            <summary>Gets parsed SQL expression for a virtual metadata object.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataObject.IsVirtual">
            <summary>Indicates that the metadata object is a virtual calculated object.</summary>
            <remarks>Virtual objects are replaced with expressions in result SQL query text. The <see cref="P:ActiveQueryBuilder.Core.MetadataObject.Expression">Expression property</see> of virtual metadata object must be set
            to valid SELECT statement to be used as derived table in result SQL query.</remarks>
            <returns>True if Expression is not empty; false otherwise.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataObject.GetReferencingForeignKeys">
            <summary>
            Returns a list of <see cref="T:ActiveQueryBuilder.Core.MetadataForeignKey">MetadataForeignKey</see> which referencing this MetadataObject.
            This MetadataObject is a "master" object in all returned foreign keys.
            </summary>
            <returns>Returns filled List&lt;<see cref="T:ActiveQueryBuilder.Core.MetadataForeignKey">MetadataForeignKey</see>&gt;, or empty list if there are no such foreign keys.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataObject.GetReferencingObjects">
            <summary>Returns a list of <see cref="T:ActiveQueryBuilder.Core.MetadataObject">MetadataObjects</see> which have foreign keys referencing this <see cref="T:ActiveQueryBuilder.Core.MetadataObject">MetadataObject</see>.</summary>
            <returns>Returns filled List&lt;<see cref="T:ActiveQueryBuilder.Core.MetadataObject">MetadataObject</see>&gt;, or empty list if there are no such objects.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataObject.GetReferencedObjects">
            <summary>Returns a list of <see cref="T:ActiveQueryBuilder.Core.MetadataObject">MetadataObjects</see> which referenced by this object foreign keys.</summary>
            <returns>Returns filled List&lt;<see cref="T:ActiveQueryBuilder.Core.MetadataObject">MetadataObject</see>&gt;, or empty list if there are no such objects.</returns>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataParameter">
            <summary>Class to represent parameters of stored procedures and functions in the Metadata Container.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataParameter.DataTypeName">
            <summary>Gets or sets native server data type name of a field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataParameter.DataType">
            <summary>Gets or sets the data type of parameter.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataParameter.Size">
            <summary>Gets or sets the data type size of parameter.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataParameter.Precision">
            <summary>Gets or sets the data type precision of parameter.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataParameter.Scale">
            <summary>Gets or sets the data type scale of parameter.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataParameter.Direction">
            <summary>Gets or sets parameter direction.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataSelection`1">
            <summary>Selection of metadata items of specified types from the metadata list.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataSelection`1.Count">
            <summary>Gets number of items in selection.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataSelection`1.IsReadOnly">
            <summary>Indicates that selection can not be modified.</summary>
            <remarks>Not used in implementation.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.#ctor(ActiveQueryBuilder.Core.MetadataList,ActiveQueryBuilder.Core.MetadataType)">
            <summary>Creates new instance of MetadataSelection object to manipulate metadata items of specified types from the list.</summary>
            <param name="list">Metadata list to manupulate with their items.</param>
            <param name="types">Types of metadata items to manipulate with.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.IsLoaded">
            <summary>Indicates if the types of metadata items sprcified in constructor have been loaded to the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.Add(`0)">
            <summary>Adds metadata item to the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.Clear">
            <summary>Removes all items from selection.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.Contains(`0)">
            <summary>Indicates if selection contains an item.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.Remove(`0)">
            <summary>Removes metadata item from the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.Load">
            <summary>Loads types of metadata items specified in constructor to the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.FindIndices(System.String)">
            <summary>Returns the list of indexes of metadata items that match the string name.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.FindIndices(ActiveQueryBuilder.Core.AstToken)">
            <summary>Returns the list of indexes of metadata items that match the name defined by AST token identifier.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.FindItems(System.String)">
            <summary>Returns the list of metadata items that match the string name.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.FindItems(ActiveQueryBuilder.Core.AstToken)">
            <summary>Returns the list of metadata items that match the name defined by AST token identifier.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.FindIndex(System.String)">
            <summary>Returns the index of first found metadata item that matches the string name.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.FindIndex(ActiveQueryBuilder.Core.AstToken)">
            <summary>Returns the index of first found metadata item that matches the name defined by AST token identifier.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.FindItem(System.String)">
            <summary>Returns the first found metadata item that matches the string name.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataSelection`1.FindItem(ActiveQueryBuilder.Core.AstToken)">
            <summary>Returns the first found metadata item that matches the name defined by AST token identifier.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataSimpleFilter">
            <summary>Determines sets of masks for database object and schema names to be included to or excluded from loading to the Metadata Container.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.ExcludeFilter"/>
            <seealso cref="P:ActiveQueryBuilder.Core.MetadataLoadingOptions.IncludeFilter"/>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataSimpleFilter.Schemas">
            <summary>Holds the list of masks for database schema names.</summary>
            <remarks>Masks act similar to the "LIKE" SQL operator. Use the percent sign (%) to represent any sequence of characters; use the underscore sign (_) to
            represent any single character.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataSimpleFilter.Objects">
            <summary>Holds the list of masks for database object names.</summary>
            <remarks>Masks act similar to the "LIKE" SQL operator. Use the percent sign (%) to represent any sequence of characters; use the underscore sign (_) to
            represent any single character.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataSimpleFilter.Types">
            <summary>Defines set of database object types to filter.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.PropertiesEditors.IInformationMessageHost">
            <summary>
            Interface to display the informational message about the abnormal situation.
            </summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.PropertiesEditors.IInformationMessageHost.ShowInformationMessage(System.Object,ActiveQueryBuilder.Core.PropertiesEditors.PropertyErrorDescription)">
            <summary>
            Shows the information message (error or warning).
            </summary>
            <param name="sender">The sender object.</param>
            <param name="description">The complete information about the sutiation.</param>
        </member>
        <member name="T:ActiveQueryBuilder.Core.PropertiesEditors.PropertyErrorDescription">
            <summary>
            Describes the error in the properties bar.
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.PropertiesEditors.PropertyErrorDescription.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.PropertiesEditors.PropertyErrorDescription.Value">
            <summary>
            The erroneous property value.
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.PropertiesEditors.PropertyErrorDescription.Properties">
            <summary>
            The object containing the property for which the error is recorded.
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.PropertiesEditors.PropertyErrorDescription.PropertyName">
            <summary>
            The name of the property for which the error is recorded.
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.PropertiesEditors.PropertyErrorDescription.PropertyIndex">
            <summary>
            The index of the property for which the error is recorded.
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.PropertiesEditors.PropertyErrorDescription.IsError">
            <summary>
            Indicates if this situation is an error; otherwise it is a warning.
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.PropertiesEditors.PropertyErrorDescription.Tag">
            <summary>
            The tag object.
            </summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.PropertiesEditors.PropertyErrorDescription.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:ActiveQueryBuilder.Core.PropertiesEditors.PropertyEditorWidthType">
            <summary>
            Lists the possible format of editors in the Properties panel.
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.PropertiesEditors.PropertyEditorWidthType.Narrow">
            <summary>
            The narrow editor used for numbers, enumerations, etc. 
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.PropertiesEditors.PropertyEditorWidthType.Wide">
            <summary>
            The wide editor is used for long texts, combo boxes.
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.PropertiesEditors.PropertyEditorWidthType.Multiline">
            <summary>
            The multiline editor is used where it's needed to write long texts.
            </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.PropertiesEditors.IPropertyEditor">
            <summary>
            The interface for the property editor control.
            </summary>
            <seealso cref="!:ActiveQueryBuilder.View.PropertiesEditors.IPropertyItem" />
        </member>
        <member name="T:ActiveQueryBuilder.Core.PropertiesEditors.IPropertyItem">
            <summary>
            The common ancestor of all visual elements on the property editing control (editors, dividers, groups, etc).
            </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.IPropertyItem.IsPrimary">
            <summary>
            Gets or sets a value indicating whether this property is of high importance and should be placed top.
            </summary>
            <value>
              <c>true</c> if this property is of high importance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ActiveQueryBuilder.Core.PropertiesEditors.IPropertyStorage">
            <summary>Represents property storage, reading, writing and validation abstraction</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.PropertiesEditors.ObjectProperties">
            <summary>
            The abstract ancestor of object properties container.
            </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.ObjectProperties.PropertiesEditors">
            <summary>Gets the list of visual controls for editing properties of the query element.</summary>
            <value>The list of visual controls.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.ObjectProperties.GroupProperties">
            <summary>Gets the list of property groups for the query element.</summary>
            <value>The list of property groups.</value>
        </member>
        <member name="M:ActiveQueryBuilder.Core.PropertiesEditors.ObjectProperties.GetPropertiesNames">
            <summary>
            Gets the list of property names.
            </summary>
            <returns>The list of property names.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.PropertiesEditors.ObjectProperties.GetPropertyStorage(System.String)">
            <summary>Gets the storage of specific property by its name.</summary>
            <param name="name">The property name.</param>
            <returns>Requested property storage</returns>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.ObjectProperties.Name">
            <summary>
            Gets or sets the name of this property container. It is displayed in the header of the properties bar control.
            </summary>
            <value>
            The property container name.
            </value>
        </member>
        <member name="T:ActiveQueryBuilder.Core.PropertiesEditors.MultiLineEditorCaptionPosition">
            <summary>
            Determines position of the caption for multiline property editors
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.PropertiesEditors.MultiLineEditorCaptionPosition.Left">
            <summary>Caption is positioned at the left, so the editor's left will be aligned with the single-line editors.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.PropertiesEditors.MultiLineEditorCaptionPosition.Above">
            <summary>Caption is positioned above the editor to use the whole width of the properties bar for the editor.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions">
            <summary>Options to tune the layout of the properties editor control to suit different size of its container.</summary>
            <remarks>Property editors can be of three different types: narrow (currently of integer data type), wide and multiline. Each type has its own set of properties.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.CaptionsMaxWidth">
            <summary>
            Gets or sets the maximum width of the caption labels. 
            </summary>
            <value>
            The maximum width of the caption labels.
            </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.CaptionsMinWidth">
            <summary>
            Gets or sets the minimum width of the caption labels. 
            </summary>
            <value>
            The minimum width of the caption labels.
            </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.NarrowEditControlsMaxWidth">
            <summary>
            Gets or sets the maximum width of the narrow editors. (currently: Integer)
            </summary>
            <value>
            The maximum width of the narrow editors.
            </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.NarrowEditControlsMinWidth">
            <summary>
            Gets or sets the minimum width of the narrow editors. (currently: Integer)
            </summary>
            <value>
            The minimum width of the narrow editors.
            </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.WideEditControlsMaxWidth">
            <summary>
            Gets or sets the maximum width of the wide editors. (Currently: all except Integer)
            </summary>
            <value>
            The maximum width of the wide edit controls.
            </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.WideEditControlsMinWidth">
            <summary>
            Gets or sets the minimum width of the wide editors. (Currently: all except Integer)
            </summary>
            <value>
            The minimum width of the wide editors.
            </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.MultiLineEditorsMaxWidth">
            <summary>
            Gets or sets the maximum width of the multiline editors.
            </summary>
            <value>
            The maximum width of the multiline editors.
            </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.MultiLineEditorsMinWidth">
            <summary>
            Gets or sets the minimum width of the multiline editors.
            </summary>
            <value>
            The minimum width of the multiline editors.
            </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.DescriptionMinWidth">
            <summary>
            Gets or sets the minimum width of the description labels. (positioned at the right of the editor box)
            </summary>
            <value>
            The minimum width of the description labels.
            </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.DescriptionMaxWidth">
            <summary>
            Gets or sets the maximum width of the description labels. (positioned at the right of the editor box)
            </summary>
            <value>
            The maximum width of the description labels.
            </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.DescriptionMaxHeight">
            <summary>
            Gets or sets the maximum height of the description label.
            </summary>
            <value>
            The maximum height of the description label.
            </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.ShowDescriptions">
            <summary>
            Gets or sets a value indicating whether to show description labels.
            </summary>
            <value>
              <c>true</c> if descriotion labels are shown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.MultiLineEditorsCaptionPosition">
            <summary>
            Gets or sets the position of multiline editors caption labels.
            </summary>
            <value>
            The position of multiline editors caption labels.
            </value>
        </member>
        <member name="M:ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions.Assign(ActiveQueryBuilder.Core.PropertiesEditors.PropertiesEditorsOptions)">
            <summary>
            Assigns the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="T:ActiveQueryBuilder.Core.LinkManipulations">
            <summary>Defines list of permissible end-user manipulations with links during the query building process.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.BehaviorOptions.LinkManipulations"></seealso>
        </member>
        <member name="F:ActiveQueryBuilder.Core.LinkManipulations.Allow">
            <summary>Allows manual creation of any links between objects.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.LinkManipulations.Deny">
            <summary>Denies manual links creation by end-user.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.LinkManipulations.AllowForeignKeysOnly">
            <summary>
            	<para>Allow manual creation of links based on foreign keys fetched from a database to the Metadata Container.</para>
            	<para>In this mode the component will not allow you to drag and drop fields from one object to another if a corresponding foreign key does not exist in the Metadata
            Container.<br/>
            Also it is not possible to modify join expression via the Link Properties dialog in this mode.</para>
            </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.LinkManipulations.LinkCompatibleTypesOnly">
            <summary>Allow manual creation of links for compatible data types only.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.BehaviorOptions">
            <summary>Allows you to tune the way Active Query Builder parses and builds SQL queries.</summary>
            <remarks>The <see cref="P:ActiveQueryBuilder.Core.BehaviorOptions.ParsingErrorOnUnknownObjects"/> and <see cref="P:ActiveQueryBuilder.Core.BehaviorOptions.AllowSleepMode"/> properties determine the way Active Query Builder process SQL query parsing errors.<br/>
            The <see cref="P:ActiveQueryBuilder.Core.BehaviorOptions.CreateLinksFromForeignKeys"/> and <see cref="P:ActiveQueryBuilder.Core.BehaviorOptions.LinkManipulations"/> properties define rules of working with links (joins) between query
            objects.<br/>
            The <see cref="P:ActiveQueryBuilder.Core.BehaviorOptions.AddLinkedObjects"/> and <see cref="P:ActiveQueryBuilder.Core.BehaviorOptions.DeleteUnusedObjects"/> properties allow you to automate addition of necessary query objects and removing of needless ones.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BehaviorOptions.CreateColumnAliasesFromAltNames">
            <summary>Instructs the component to automatically create aliases for the fields with alternate names defined.</summary>
            <remarks>Setting this property to true will allow to have columns properly named in result dataset.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BehaviorOptions.LinkManipulations">
            <summary>Determines permissible end-user manipulations with links during the query building process.</summary>
            <remarks>This property is related to link creation and modification process only. If you want to deny links deletion, you should use the
            <see cref="!:QueryRoot.LinkDeleting"/> event. Also you can specify custom permissions on creating a link using the <see cref="!:QueryRoot.LinkCreating">LinkCreating</see> and
            </remarks>
            <seealso cref="P:ActiveQueryBuilder.Core.BehaviorOptions.CreateLinksFromForeignKeys"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BehaviorOptions.CreateLinksFromForeignKeys">
            <summary>Instructs the component to automatically create links (joins) in the query based on foreign keys information fetched from a database.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.BehaviorOptions.LinkManipulations"/>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BehaviorOptions.AllowSleepMode">
            <summary>Allows to suppress parsing errors on unsupported SQL statements (CREATE TABLE, INSERT, UPDATE, DELETE, etc.).</summary>
            <remarks>Setting this property to true is useful when you want to allow the end-user to write unsupported statements in the text editor.</remarks>
            <value>true allows to turns the component into "Sleep Mode" on parsing of unsupported SQL statements, false denies to do that.</value>
            <seealso cref="!:QueryBuilder.SleepModeChanged"/>
            <seealso cref="!:QueryBuilder.QueryAwake"/>
            <seealso cref="!:QueryBuilder.SleepMode"/>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BehaviorOptions.LoadJoinsFromWhereClause">
            <summary>Instructs the component to analyze WHERE clause of a query to find joins between objects and display them as links at the Design Pane.</summary>
            <remarks>Setting this property to false will instruct the component to add such joins to the Query Column List.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BehaviorOptions.ParsingErrorOnUnknownObjects">
            <summary>Instructs the component to raise an error on parsing SQL queries with database objects not listed in the Metadata Container.</summary>
            <seealso cref="T:ActiveQueryBuilder.Core.SQLParsingException"/>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BehaviorOptions.CreateLinksByIdenticalFieldNames">
            <summary>Instructs the component to automatically create links (joins) in the query if objects with the same field names are added to the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BehaviorOptions.CreateWhereJoinsByDefault">
            <summary>Instructs the component to create joins in WHERE clause instead of using ANSI joins.</summary>
            <remarks>
            	<para>Note that the ANSI joins still can be created if the user will make an OUTER JOIN as this join type can not be made in the WHERE clause.</para>
            	<para>For Oracle Database syntax, the component will create Oracle-style joins (+=, =+), except FULL OUTER JOIN.</para>
            </remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BehaviorOptions.CreateColumnAliasesForUnnamedColumns">
            <summary>Gets or sets whether to create aliases for unnamed columns.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BehaviorOptions.AddLinkedObjects">
            <summary>Instructs Query Builder to automatically add tables that required to link the newly added table to already existing tables in the query.</summary>
            <remarks>
            	<para>For example, havnig three tables in the database linked with each other (Orders -&gt; [Order Details] &lt;- Products), the [Order Details] table will be
            added automatically after the user adds the Orders and the Products tables to the query.</para>
            	<para>Setting this property to true is necessary to work when Design Pane is hidden.</para>
            </remarks>
            <seealso cref="P:ActiveQueryBuilder.Core.BehaviorOptions.DeleteUnusedObjects"></seealso>
            <seealso cref="!:PanesConfigurationOptions.DesignPaneVisible"></seealso>
            <seealso cref="P:ActiveQueryBuilder.Core.MetadataStructureOptions.ShowFields"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BehaviorOptions.DeleteUnusedObjects">
            <summary>Instructs Query Builder to automatically remove tables that has no fields used in expressions and are no longer required to link tables in the
            query.</summary>
            <remarks>
            	<para>For example, having three tables in the database linked with each other (Orders -&gt; [Order Details] &lt;- Products), the [Order Details] table with no
            fields selected will be removed automatically after the user removes the Orders or the Products table from the query.</para>
            	<para>Setting this property to true is necessary to work when Design Pane is hidden.</para>
            </remarks>
            <seealso cref="P:ActiveDatabaseSoftware.ActiveQueryBuilder.BehaviorOptions.AddLinkedObjects"></seealso>
            <seealso cref="P:ActiveDatabaseSoftware.ActiveQueryBuilder.PanesConfigurationOptions.DesignPaneVisible"></seealso>
            <seealso cref="P:ActiveDatabaseSoftware.ActiveQueryBuilder.MetadataStructureOptions.ShowFields"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BehaviorOptions.GenerateShortObjectAliases">
            <summary>Generate short object aliases when the object is added to the query.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQuery.GetSQL(ActiveQueryBuilder.Core.SQLGenerationOptions)">
            <summary>Get SQL formatted using the given options. Accepts any SQLGenerationOptions descendant,
            including SQLFormattingOptions to get multi-line SQL.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQuery.AddField(ActiveQueryBuilder.Core.UnionSubQuery,ActiveQueryBuilder.Core.MetadataObject,ActiveQueryBuilder.Core.MetadataField)">
            <summary>
            Adds datasource on the design page with a field selected.
            </summary>
            <param name="unionSubQuery"></param>
            <param name="metadataObject"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SQLQuery.LinkObjectBySameNamedFields(ActiveQueryBuilder.Core.DataSource)">
            <summary>Link dataSource to other datasource in query by fields with identical names.</summary>
            <returns>List of created links.</returns>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumn">
            <summary>Defines an aggregated column.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumn.Column">
            <summary>Gets the output column on which this aggregation is based.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumn.Expression">
            <summary>Gets the SQL expression string.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumn.Alias">
            <summary>Sets alias for aggregated column.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumn.#ctor">
            <summary>Internal constructor used in deserializer</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumn.#ctor(ActiveQueryBuilder.Core.QueryTransformer.OutputColumn,System.String,System.String)">
            <summary>Creates new aggregation based on the specified column with the specified SQL expression.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList">
            <summary>Defines list of aggregations.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.Item(System.Int32)">
            <summary>Gets the element at the specified index.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.Count">
            <summary>Indicates the number of items in the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.Dispose">
            <summary>Clear and dispose this instance.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.Assign(ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList,ActiveQueryBuilder.Core.QueryTransformer.OutputColumnList)">
            <summary>Clear this instance and deep copy all items and props from the given source.</summary>
            <param name="source">Instance to copy from</param>
            <param name="columns">Use this columns collection during copy</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.Add(ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumn,System.String)">
            <summary>Adds new Selected Column item with the specified alias to the list.</summary>
            <returns>Returns the index of the newly added item.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.Add(ActiveQueryBuilder.Core.QueryTransformer.OutputColumn,System.String)">
            <summary>Adds new Selected Column item with the specified alias to the list.</summary>
            <returns>Returns the index of the newly added item.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.Clear">
            <summary>Clears the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.Delete(System.Int32)">
            <summary>Removes item at the specified index from the list and disposes it.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.IndexOf(ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumn)">
            <summary>Determines the index of a specific Selected Column item in the list.</summary>
            <overloads>Determines the index of a specific item in the list.</overloads>
            <returns>Returns the index of the specified item; returns -1 if item is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.IndexOf(ActiveQueryBuilder.Core.QueryTransformer.OutputColumn)">
            <summary>Determines the index of of the first found item based on the specified Output Column item in the list.</summary>
            <returns>Returns the index of the specified column; returns -1 if item is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.IndexOf(System.String)">
            <summary>Determines the index of item with the specified SQL Expression string in the list.</summary>
            <returns>Returns the index of item with the specified SQL Expression; returns -1 if item is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.Remove(ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumn)">
            <summary>Removes the Selected Column from the list and disposes it.</summary>
            <overloads>Removes the item from the list and disposes it.</overloads>
            <returns>Returns the index of removed item; returns -1 if item is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.Remove(ActiveQueryBuilder.Core.QueryTransformer.OutputColumn)">
            <summary>Removes the first found item based on the specified Output Column from the list and disposes it.</summary>
            <returns>Returns the index of removed item; returns -1 if item is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumnsList.Remove(System.String)">
            <summary>Removes the item with the specified SQL Expression from the list and disposes it.</summary>
            <returns>Returns the index of removed item; returns -1 if item is not found.</returns>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.FilterColumnCondition">
            <summary>Defines filtration condition based on the output column.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.FilterColumnCondition.Column">
            <summary>Gets the output column on which this condition is based.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.FilterColumnCondition.#ctor(ActiveQueryBuilder.Core.QueryTransformer.OutputColumn,System.String)">
            <summary>Creates new filter based on the specified column with condition specified by the given SQL expression.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.FilterCondition">
            <summary>Defines filtration condition.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.FilterCondition.Condition">
            <summary>Gets the SQL expression string.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunctionType">
            <summary>Defines possible types of junctions for conditions.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunctionType.Or">
            <summary>Disjunction.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunctionType.And">
            <summary>Conjunction</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunctionType.Any">
            <summary>Alias for conjunction.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunctionType.All">
            <summary>Alias for disjunction.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunction">
            <summary>Defines a set of filtration conditions.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunction.Operator">
            <summary>Gets or sets the type of junction (conjunction or disjunction).</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunction.Not">
            <summary>Gets or sets the negation flag for the junction.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunction.Item(System.Int32)">
            <summary>Gets the element at the specified index.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunction.Count">
            <summary>Indicates the number of items in the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunction.Add(ActiveQueryBuilder.Core.QueryTransformer.FilterCondition)">
            <summary>Adds new Filter Condition item to the list.</summary>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunction.Insert(System.Int32,ActiveQueryBuilder.Core.QueryTransformer.FilterCondition)">
            <summary>Adds new Filter Condition item to the specified position in the list.</summary>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunction.Clear">
            <summary>Clears the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunction.Delete(System.Int32)">
            <summary>Removes item at the specified index from the list and disposes it.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunction.IndexOf(ActiveQueryBuilder.Core.QueryTransformer.FilterCondition)">
            <summary>Determines the index of a specific Filter Condition in the list.</summary>
            <returns>Returns the index of the specified item; returns -1 if item is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.FilterConditionJunction.Remove(ActiveQueryBuilder.Core.QueryTransformer.FilterCondition)">
            <summary>Removes the Filter Condition from the list and disposes it.</summary>
            <returns>Returns the index of removed item; returns -1 if item is not found.</returns>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.FilterFactory">
            <summary>A factory to create sets of filtration conditions.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.FilterFactory.Conjunction">
            <summary>Returns a new set of conditions joined with the AND operator.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.FilterFactory.And">
            <summary>Returns a new set of conditions joined with the AND operator. Alias for "Conjunction".</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.FilterFactory.Disjunction">
            <summary>Returns a new set of conditions joined with the OR operator.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.FilterFactory.Or">
            <summary>Returns a new set of conditions joined with the OR operator. Alias for "Disjunction".</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn">
            <summary>Describes an output column of initial query result set.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.QueryTransformer">
            <summary>Gets the reference to the parent QueryTransformer component that owns and maintains entire columns list.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Query">
            <summary>Gets the reference to the main Query component.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Column">
            <summary>Gets the reference to the StatisticsOutputColumn corresponding to this column.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.OriginalName">
            <summary>Gets the original name of source query column.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.PreassignedName">
            <summary>Specify the name of transformed query column.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.ResultName">
            <summary>Get the name of result name of transformed query column.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.IsSupportFiltering">
            <summary>Indicates if it's possible to add filtration conditions for this column.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.IsSupportSorting">
            <summary>Indicates if it's possible to sort by this column.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Visible">
            <summary>Gets or sets the sign of presence of the column in result SQL query.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Asc">
            <summary>Creates new sorting item to sort by the column in ascending order. Alias for "Ascending".</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Ascending">
            <summary>Creates new sorting item to sort by the column in ascending order.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Desc">
            <summary>Creates new sorting item to sort by the column in descending order. Alias for "Descending".</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Descending">
            <summary>Creates new sorting item to sort by the column in descending order.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.IsNull">
            <summary>Creates new filter condition for the column to accept Null values.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Not_IsNull">
            <summary>Creates new filter condition to accept Not Null values for the column.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.IsNotNull">
            <summary>Creates new filter condition to accept Not Null values for the column. Alias for "Not_IsNull".</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Equal(System.String)">
            <summary>Creates new filter condition for the column to accept values that are Equal to the specified.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Not_Equal(System.String)">
            <summary>Creates new filter condition for the column to accept values that are Not Equal to the specified.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Less(System.String)">
            <summary>Creates new filter condition for the column to accept values that are Less than the specified.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Not_Less(System.String)">
            <summary>Creates new filter condition for the column to accept values that are Not Less than the specified.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.LessEqual(System.String)">
            <summary>Creates new filter condition for the column to accept values that are Less or Equal to the specified.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Not_LessEqual(System.String)">
            <summary>Creates new filter condition for the column to accept values that are Not Less or Equal than the specified. Alias for "Greater".</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Greater(System.String)">
            <summary>Creates new filter condition for the column to accept values that are Greater than the specified.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Not_Greater(System.String)">
            <summary>Creates new filter condition for the column to accept values that are Not Greater than the specified.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.GreaterEqual(System.String)">
            <summary>Creates new filter condition for the column to accept values that are Greater or Equal to the specified.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Not_GreaterEqual(System.String)">
            <summary>Creates new filter condition for the column to accept values that are Not Greater or Equal than the specified. Alias for "Less".</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Between(System.String,System.String)">
            <summary>Creates new filter condition for the column to accept values in a range Between the specified.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Not_Between(System.String,System.String)">
            <summary>Creates new filter condition for the column to accept values not in a range Between the specified.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.In(System.String)">
            <summary>Creates new filter condition for the column to accept values Listed in the specified comma-separated string.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Not_In(System.String)">
            <summary>Creates new filter condition for the column to accept values Not Listed in the specified comma-separated string.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Like(System.String)">
            <summary>Creates new filter condition for the column to accept values like the specified pattern.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Not_Like(System.String)">
            <summary>Creates new filter condition for the column to accept values Not like the specified pattern.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Condition(System.String)">
            <summary>Creates new filter condition for the column to accept values that meet the specified condition.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Count">
            <summary>Creates new aggregation item to count the number of not-null items in resultset.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Sum">
            <summary>Creates new aggregation item to summarize values of this column in resultset.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Avg">
            <summary>Creates new aggregation item to return the average value of this column in resultset.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Min">
            <summary>Creates new aggregation item to return the minimum value of this column in resultset.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Max">
            <summary>Creates new aggregation item to return the maximum value of this column in resultset.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.OutputColumnList">
            <summary>Lists output columns of initial query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.OutputColumnList.Item(System.Int32)">
            <summary>Gets the element at the specified index.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.OutputColumnList.Count">
            <summary>Indicates the number of items in the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumnList.GetColumnByOriginalName(System.String)">
            <summary>Gets column with the specified name.</summary>
            <exception>Raises exception if column with the specified name is not found.</exception>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumnList.GetColumnByResultName(System.String)">
            <summary>Gets column with the specified name.</summary>
            <exception>Raises exception if column with the specified name is not found.</exception>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumnList.FindColumnByOriginalName(System.String)">
            <summary>Gets column with the specified name.</summary>
            <returns>Returns OutputColumn with name that equals to the specified name; returns null if column is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumnList.FindColumnByResultName(System.String)">
            <summary>Gets column with the specified name.</summary>
            <returns>Returns OutputColumn with name that equals to the specified name; returns null if column is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumnList.IndexOf(ActiveQueryBuilder.Core.QueryTransformer.OutputColumn)">
            <overloads>Determines the index of a specific item in the list.</overloads>
            <summary>Determines the index of the specified Output Column item in the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumnList.IndexOfByOriginalName(System.String)">
            <summary>Determines the index of item with the specified name in the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumnList.IndexOfByResultName(System.String)">
            <summary>Determines the index of item with the specified name in the list.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer">
            <summary>Changes the result SQL query in order to transfigure result data according to the end user's needs.</summary>
            <example>
            	<code title="VB.NET" description="" groupname="Query Transformer usage sample" lang="VB.NET">
            Using queryTransformer As New QueryTransformer()
                queryTransformer.QueryBuilder = queryBuilder1
                queryTransformer.SqlBuilder = plainTextSQLBuilder1
             
                queryTransformer.BeginUpdate()
             
                Try
                    ' filter
                    queryTransformer.Filters.Clear()
             
                    queryTransformer.Where(queryTransformer.Columns(1).Not_Equal("100")). _
                     Where(queryTransformer.Columns(2).[In]("('Value 1','Value 2','Value 3')")). _
                     Where(queryTransformer.Columns.GetColumnByName("OrderId").Condition("&gt; 100")). _
                     Where("OrderDate is not null"). _
                     Where(FilterFactory.[Or](). _
                      Add(queryTransformer.Columns(1).Not_Equal("100")). _
                      Add(queryTransformer.Columns(1).Not_Equal("200")))
             
                    ' ordering
                    queryTransformer.Sortings.Clear()
             
                    queryTransformer. _
                     OrderBy(queryTransformer.Columns(1)). _
                     OrderBy(queryTransformer.Columns(2), False). _
                     OrderBy(queryTransformer.Columns.GetColumnByName("OrderId")). _
                     OrderBy("OrderDate")
             
                    ' offset
                    queryTransformer. _
                     Skip("100"). _
                     Take("50")
             
                    ' aggregations
                    queryTransformer.Aggregations.Clear()
             
                    queryTransformer. _
                     SelectRecordsCount("recordsCount"). _
                     Select(queryTransformer.Columns(1).Count(), "column1Count"). _
                     Select(queryTransformer.Columns(1).Sum(), "column1Sum"). _
                     Select(queryTransformer.Columns(1).Avg(), "column1Avg"). _
                     Select(queryTransformer.Columns(1).Min(), "column1Min"). _
                     Select(queryTransformer.Columns(1).Max(), "column1Max")
             
                Finally
                    queryTransformer.EndUpdate()
                End Try
             
                MessageBox.Show(queryTransformer.SQL, "Modified SQL")
            End Using</code>
            	<code title="C#" description="" groupname="Query Transformer usage sample" lang="CS">
            using (QueryTransformer queryTransformer = new QueryTransformer())
            {
                queryTransformer.QueryBuilder = queryBuilder1;
                queryTransformer.SqlBuilder = plainTextSQLBuilder1;
             
                queryTransformer.BeginUpdate();
             
                try
                {
                    // filter
                    queryTransformer.Filters.Clear();
             
                    queryTransformer
                        .Where(queryTransformer.Columns[1].Not_Equal("100"))
                        .Where(queryTransformer.Columns[2].In("('Value 1','Value 2','Value 3')"))
                        .Where(queryTransformer.Columns.GetColumnByName("OrderId").Condition("&gt; 100"))
                        .Where("OrderDate is not null")
                        .Where(FilterFactory.Or()
                            .Add(queryTransformer.Columns[1].Not_Equal("100"))
                            .Add(queryTransformer.Columns[1].Not_Equal("200")));
             
                    // ordering
                    queryTransformer.Sortings.Clear();
             
                    queryTransformer
                        .OrderBy(queryTransformer.Columns[1])
                        .OrderBy(queryTransformer.Columns[2], false)
                        .OrderBy(queryTransformer.Columns.GetColumnByName("OrderId"))
                        .OrderBy("OrderDate");
             
                    // offset
                    queryTransformer
                        .Skip("100")
                        .Take("50");
             
                    // aggregations
                    queryTransformer.Aggregations.Clear();
             
                    queryTransformer
                        .SelectRecordsCount("recordsCount")
                        .Select(queryTransformer.Columns[1].Count(), "column1Count")
                        .Select(queryTransformer.Columns[1].Sum(), "column1Sum")
                        .Select(queryTransformer.Columns[1].Avg(), "column1Avg")
                        .Select(queryTransformer.Columns[1].Min(), "column1Min")
                        .Select(queryTransformer.Columns[1].Max(), "column1Max");
                }
                finally
                {
                    queryTransformer.EndUpdate();
                }
             
                MessageBox.Show(queryTransformer.SQL, "Modified SQL");
            }</code>
            </example>
        </member>
        <member name="E:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.SQLUpdated">
            <summary>Occurs each time the component updates the output SQL query text.</summary>
            <remarks>Read the <see cref="P:ActiveDatabaseSoftware.ActiveQueryBuilder.Query.SQL">Query.SQL Property</see> to get the updated SQL query text.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.IsUpdating">
            <summary>Indicates that the component is in update mode now.</summary>
            <remarks>The update mode is initialzed via the <see cref="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.BeginUpdate">BeginUpdate Method</see> and finalized via the <see cref="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.EndUpdate">EndUpdate Metod</see>.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.Query">
            <summary>Gets or sets the reference to the main Query component.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.SQLGenerationOptions">
            <summary>Gets or sets the reference to the SQLGenerationOptions component (or its descendant) that is used to generate the modified query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.Columns">
            <summary>Returns the list of output columns of initial query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.Filters">
            <summary>Gets the list of filtration conditions.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.Sortings">
            <summary>Gets the list of sortings.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.IsSupportLimitOffset">
            <summary>Indicates if it's possible to skip first records by means of the current database server SQL syntax.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.IsSupportLimitCount">
            <summary>Indicates if it's possible to limit the number of records by means of the current database server SQL syntax.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.ResultOffset">
            <summary>Gets or sets the number of first records to be skipped.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.ResultCount">
            <summary>Gets or sets the number of records to return.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.Aggregations">
            <summary>Gets the list of aggregation columns.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.SQL">
            <summary>Gets the modidied SQL query text.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.SelectMode">
            <summary>Gets or sets the selection mode of result SQL query (DISTINCT, ALL or default).</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.XML">
            <summary>Gets or sets the content of Query Transformer as string in a form of XML document.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.NotifyUpdated">
            <summary>Set up "updated" flag. This method should be called between BeginUpdate and EndUpdate</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.BeginUpdate">
            <summary>Prevents the component from SQL generation until the EndUpdate method is called.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.EndUpdate">
            <summary>Resumes SQL generation after it was suspended by the BeginUpdate method.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.Where(ActiveQueryBuilder.Core.QueryTransformer.FilterCondition)">
            <summary>Adds filtration condition defined by the FilterCondition object.</summary>
            <overloads>Adds filtration condition to the query.</overloads>
            <remarks>FilterCondition object can be obtained by calling one of the following methods of the
            <see cref="T:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn"/>OutputColumn object: Condition, Equal, Not_Equal, Less, LessOrEqual, Greater,
            GreaterOrEqual, Between, In, Not_In, etc.</remarks>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.Where(System.String)">
            <summary>Adds filtration condition defined by the SQL expression.</summary>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.OrderBy(ActiveQueryBuilder.Core.QueryTransformer.SortedColumn)">
            <summary>Adds sorting to the query.</summary>
            <overloads>Adds sorting to the query.</overloads>
            <remarks>SortedColumn object can be obtained by calling the <see cref="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Ascending">Ascending</see> 
            		 and <see cref="M:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn.Descending">Descending</see> methods of the 
            		 <see cref="T:ActiveQueryBuilder.Core.QueryTransformer.OutputColumn"/>OutputColumn object.</remarks>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.OrderBy(ActiveQueryBuilder.Core.QueryTransformer.OutputColumn,System.Boolean)">
            <summary>Adds sorting by the column in the specified order.</summary>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.OrderBy(ActiveQueryBuilder.Core.QueryTransformer.OutputColumn)">
            <summary>Adds sorting by the column in ascending order.</summary>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.OrderBy(System.String,System.Boolean)">
            <summary>Adds sorting by the SQL expression in the specified order.</summary>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.OrderBy(System.String)">
            <summary>Adds sorting by the SQL expression in ascending order.</summary>
            <remarks>Returns self.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.Skip(System.String)">
            <summary>Sets the number of first records to be skipped.</summary>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.Take(System.String)">
            <summary>Sets the number of records to return.</summary>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.Select(ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumn,System.String)">
            <summary>Adds aggregate defined by the AggregatedColumn object with the specified alias.</summary>
            <overloads>Adds aggregate defined by the AggregatedColumn object.</overloads>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.Select(ActiveQueryBuilder.Core.QueryTransformer.AggregatedColumn)">
            <summary>Adds aggregate defined by the AggregatedColumn object.</summary>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.SelectRecordsCount(System.String)">
            <summary>Adds the "COUNT(*)" aggregate with the specified alias to the query.</summary>
            <overloads>Adds the "COUNT(*)" aggregate to the query.</overloads>
            <returns>Returns self.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.SelectRecordsCount">
            <summary>Adds the "COUNT(*)" aggregate to the query.</summary>
            <returns>Returns self.</returns>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.IsResultQueryWrapped">
            <summary>Indicates if the query will be wrapped in a sub-query after transformation.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.ExportToXML(System.String)">
            <summary>Saves the content of Query Transformer to XML file.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.ExportToXML(System.IO.Stream)">
            <summary>Saves the content of Query Transformer to stream in a form of XML document.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.ImportFromXML(System.String)">
            <summary>Loads the content of Query Transformer from file in a form of XML document.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformer.ImportFromXML(System.IO.Stream)">
            <summary>Loads the content of Metadata Container from stream in a form of XML document.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformerSelectMode">
            <summary>Lists all possible selection modes.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformerSelectMode.Default">
            <summary>Does not explicitly set the selection mode. Usually equivalent to the All mode.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformerSelectMode.All">
            <summary>Instructs to select all records that meet the condition in the SQL statement. Duplicates are allowed.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.QueryTransformer.QueryTransformerSelectMode.Distinct">
            <summary>Instructs to omits records that contain duplicate data in the selected fields.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.SortedColumn">
            <summary>Defines a sorting item.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.SortedColumn.Column">
            <summary>Gets the output column on which this condition is based.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.SortedColumn.Expression">
            <summary>Gets the SQL expression string.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.SortedColumn.SortType">
            <summary>Gets the ordering type (ascending or descending).</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.SortedColumn.#ctor(ActiveQueryBuilder.Core.QueryTransformer.OutputColumn,System.String,ActiveQueryBuilder.Core.ItemSortType)">
            <summary>Creates new sorting based on the specified column with the specified SQL expression of the given sort type.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryTransformer.SortedColumnList">
            <summary>Defines list of sortings.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.SortedColumnList.Item(System.Int32)">
            <summary>Gets the element at the specified index.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryTransformer.SortedColumnList.Count">
            <summary>Indicates the number of items in the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.SortedColumnList.Add(ActiveQueryBuilder.Core.QueryTransformer.SortedColumn)">
            <summary>Adds new Sorted Column item to the list.</summary>
            <returns>Returns the index of the newly added item.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.SortedColumnList.Clear">
            <summary>Clears the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.SortedColumnList.Delete(System.Int32)">
            <summary>Removes item at the specified index from the list and disposes it.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.SortedColumnList.IndexOf(ActiveQueryBuilder.Core.QueryTransformer.SortedColumn)">
            <overloads>Determines the index of a specific item in the list.</overloads>
            <summary>Determines the index of a specific Sorted Column item in the list.</summary>
            <returns>Returns the index of the specified item; returns -1 if item is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.SortedColumnList.IndexOf(ActiveQueryBuilder.Core.QueryTransformer.OutputColumn)">
            <summary>Determines the index of the first found item based on the specified Output Column in the list.</summary>
            <returns>Returns the index of the specified column; returns -1 if item is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.SortedColumnList.IndexOf(System.String)">
            <summary>Determines the index of item with the specified SQL Expression string in the list.</summary>
            <returns>Returns the index of item with the specified SQL Expression; returns -1 if item is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.SortedColumnList.Remove(ActiveQueryBuilder.Core.QueryTransformer.SortedColumn)">
            <overloads>Removes the item from the list and disposes it.</overloads>
            <summary>Removes the Sorted Column from the list and disposes it.</summary>
            <returns>Returns the index of removed item; returns -1 if item is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.SortedColumnList.Remove(ActiveQueryBuilder.Core.QueryTransformer.OutputColumn)">
            <summary>Removes the first found item based on the specified Output Column from the list and disposes it.</summary>
            <returns>Returns the index of removed item; returns -1 if item is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryTransformer.SortedColumnList.Remove(System.String)">
            <summary>Removes the item with the specified SQL Expression from the list and disposes it.</summary>
            <returns>Returns the index of removed item; returns -1 if item is not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.Link.GetForeignKey(ActiveQueryBuilder.Core.MetadataObject,System.String,ActiveQueryBuilder.Core.MetadataObject,System.String)">
            <summary>Find MetadataForeignKey for the link with given params.</summary>
            <param name="leftObject">Left MetadataObject of the link.</param>
            <param name="leftField">Left field of the link.</param>
            <param name="rightObject">Right MetadataObject of the link.</param>
            <param name="rightField">Right field of the link.</param>
            <returns>The found MetadataFroreignKey, or null if not found.</returns>
        </member>
        <member name="T:ActiveQueryBuilder.Core.Parameter">
            <summary>Describes single parameter that was found in the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.Parameter.Symbol">
            <summary>Returns parameter symbol.</summary>
            <remarks>The following symbols are acceptable by Active Query Builder:<br/>
            "?" - unnamed parameter ("WHERE Field = ?")<br/>
            ":" - named parameter ("WHERE Field = :Param")<br/>
            "@" - MS SQL Server named parameter (WHERE Field = @Param")</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.Parameter.Name">
            <summary>Returns name of parameter. Returns empty string in case of unnamed parameter.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.Symbol"></seealso>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.FullName"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.Parameter.FullName">
            <summary>Returns full name of parameter (name and symbol).</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.Name"></seealso>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.Symbol"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.Parameter.DataType">
            <summary>Returns compared field data type.</summary>
            <remarks>Returns DbType.Object value in case of using parameter in a complex expression.</remarks>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.MetadataField"></seealso>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.ComparedField"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.Parameter.CompareOperator">
            <summary>Returns comparison operator that was used with this parameter.</summary>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.ComparedField"></seealso>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.ComparedObject"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.Parameter.ComparedField">
            <summary>Returns field name that was compared with this parameter.</summary>
            <remarks>Returns empty string in case of using parameter in a complex expression.</remarks>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.MetadataField"></seealso>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.ComparedObject"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.Parameter.ComparedObject">
            <summary>Returns database object name of a field that was compared with this parameter.</summary>
            <remarks>Returns empty string in case of using parameter in a complex expression.</remarks>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.ComparedField"></seealso>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.MetadataObject"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.Parameter.MetadataObject">
            <summary>Returns a reference to MetadataObject object from the Metadata Container if a corresponding field's object was found in it.</summary>
            <remarks>Returns null in case of using parameter in a complex expression.</remarks>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.MetadataField"></seealso>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.ComparedObject"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.Parameter.MetadataField">
            <summary>Returns a reference to MetadataField object from the Metadata Container if a corresponding field was found in it.</summary>
            <remarks>Returns null in case of using parameter in a complex expression.</remarks>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.MetadataObject"></seealso>
            <seealso cref="P:ActiveQueryBuilder.Core.Parameter.ComparedField"></seealso>
        </member>
        <member name="T:ActiveQueryBuilder.Core.ParameterList">
            <summary>Lists parameters that were found in the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.ParameterList.Query">
            <summary>Refers to the <see cref="P:ActiveQueryBuilder.Core.ParameterList.Query"/> object to which this Parameter List belongs to.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.ParameterList.Count">
            <summary>Returns the number of parameters in the list.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.ParameterList.Item(System.Int32)">
            <summary>Gets access to the items of the list.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryColumnList.AddCondition(ActiveQueryBuilder.Core.ConditionType,ActiveQueryBuilder.Core.SQLExpressionItem)">
            <summary>Append additional condition to the tree of existing conditions using AND logical operator.</summary>
            <param name="conditionType">Part of the query to add condition - WHERE or HAVING</param>
            <param name="condition">Condition to add</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryColumnList.AddCondition(ActiveQueryBuilder.Core.ConditionType,System.String)">
            <summary>Append additional condition to the tree of existing conditions using AND logical operator.</summary>
            <param name="conditionType">Part of the query to add condition - WHERE or HAVING</param>
            <param name="condition">Condition to add</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryElement.BeginUpdate">
            <summary>Prevents the component from SQL generation until the EndUpdate method is called.</summary>
            <seealso cref="M:ActiveQueryBuilder.Core.QueryElement.EndUpdate"></seealso>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryElement.EndUpdate">
            <summary>Resumes SQL generation after it was suspended by the BeginUpdate method.</summary>
            <seealso cref="M:ActiveQueryBuilder.Core.QueryElement.BeginUpdate"></seealso>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryElement.GetLayout(System.Type)">
            <summary>Get layout object for specified UI control type.</summary>
            <param name="type">Type if the UI control displaying this QueryElement</param>
            <returns>Stored layout object, or null if not found.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryElement.KeepLayout(System.Type,ActiveQueryBuilder.Core.ILayoutItem)">
            <summary>Keep layout object for specified UI control type.</summary>
            <param name="type">Type if the UI control displaying this QueryElement</param>
            <param name="layoutItem">Layout object to keep</param>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryRoot.AllowSleepMode">
            <summary>Allows to suppress parsing errors on unsupported SQL statements (CREATE TABLE, INSERT, UPDATE, DELETE, etc.).</summary>
            <remarks>Setting this property to true is useful when you want to allow the end-user to write unsupported statements in the text editor.</remarks>
            <value>true allows to turns the component into "Sleep Mode" on parsing of unsupported SQL statements, false denies to do that.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryRoot.ParsingErrorOnUnknownObjects">
            <summary>Instructs the component to raise an error on parsing SQL queries with database objects not listed in the Metadata Container.</summary>
            <seealso cref="T:ActiveQueryBuilder.Core.SQLParsingException"/>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryRoot.GetSQL(ActiveQueryBuilder.Core.SQLGenerationOptions)">
            <summary>Get SQL formatted using the given options. Accepts any SQLGenerationOptions descendant,
            including SQLFormattingOptions to get multi-line SQL.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryRoot.Clear">
            <summary>Clears the query. This method adds empty new UnionSubQuery after clear.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.QueryRoot.RefreshDataSourcesMetadata">
            <summary>Refreshes the list of fields for dataSources of the current query.</summary>
            <remarks>Useful when metadata is loaded in another thread to update the loaded query after the metadata loading process is finished.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SubQuery.IsSubQueryCTE">
            <summary>
            Gets whether the current subquery is CTE.
            </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SubQuery.WithClauseItem">
            <summary>
            Gets the reference to the parent WITH clause item which this subquery belongs to.
            </summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SubQuery.GetParentWithClause">
            <summary>
            Get a reference to the WITH clause this CTE subquery belongs to.
            Throws if called for non-CTE subquery.
            </summary>
            <returns>SQLWithClause instance this subquery belongs to.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SubQuery.GetSubQueryCTEIndex">
            <summary>
            Get the index of this CTE subquery in the parent WITH clause.
            Throws if called for non-CTE subquery.
            </summary>
            <returns>The index of this subquery in the parent WITH clause.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SubQuery.GetSqlForDataPreview(System.Int32,System.Int32)">
            <summary>Get SQL for data preview</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.SubQuery.GetSubQueryCTEList">
            <summary>
            Returns list of all CTEs defined in this subquery.
            </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SubQuery.IsQueryWithCTE">
            <summary>
            Get whether the current subquery contains CTE.
            </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SubQuery.WithClauseAst">
            <summary>
            Get the reference to the WITH clause of this subquery (if exists).
            </summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UnionGroup.ClearInternal">
            <summary>Remove all items from this UnionGroup.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UnionGroup.Clear">
            <summary>Clear this UnionGroup.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UnionSubQuery.DeleteUnusedObjects(ActiveQueryBuilder.Core.DataSource)">
            <summary>
            Analyze and delete unneeded datasources.
            </summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.Serialization.IDescriptionBuilder.BeginObject(System.String)">
            <summary>Start root object description</summary>
            <param name="name">Name of root object</param>
            <returns>Handle of opened root description. Disposing handle will close the description</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.Serialization.IDescriptionBuilder.WriteProperty(System.IDisposable,System.String,System.String)">
            <summary>Write simple object property, short form</summary>
            <remarks>
            WriteProperty and WriteObject do the same, but some writers use different representation.
            For example, XmlWriter issues attribute for WriteProperty, and child tag for WriteObject
            JsonWriter issues the same JSON code for both methods
            </remarks>
            <param name="parentHandle">Parent object description</param>
            <param name="name">Property name</param>
            <param name="value">Property value</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.Serialization.IDescriptionBuilder.WriteObject(System.IDisposable,System.String,System.String)">
            <summary>Write simple object property, long form</summary>
            <remarks>
            WriteProperty and WriteObject do the same, but some writers use different representation.
            For example, XmlWriter issues attribute for WriteProperty, and child tag for WriteObject
            JsonWriter issues the same JSON code for both methods
            </remarks>
            <param name="parentHandle">Parent object description</param>
            <param name="name">Property name</param>
            <param name="value">Property value</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.Serialization.IDescriptionBuilder.BeginObjectProperty(System.IDisposable,System.String,System.String)">
            <summary>Open complex object property description</summary>
            <param name="parentHandle">Parent object description</param>
            <param name="name">Property name</param>
            <param name="value">Property value (optional)</param>
            <returns>Handle of opened complex property description. Disposing handle will close the description</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.Serialization.IDescriptionBuilder.BeginArrayProperty(System.IDisposable,System.String)">
            <summary>Open array property description</summary>
            <param name="parentHandle">Parent object description</param>
            <param name="name">Property name</param>
            <returns>Handle of opened array property description. Disposing handle will close the description</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.Serialization.IDescriptionBuilder.BeginArrayObjectItem(System.IDisposable,System.String)">
            <summary>Open array item object description</summary>
            <param name="parentHandle">Parent array description</param>
            <param name="name">name of the item</param>
            <returns>Handle of opened array item description. Disposing handle will close the description</returns>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QueryStatistics">
            <summary>Allows to retrieve various information about the query: list of used database objects and their fields, list of output query columns.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryStatistics.UsedDatabaseObjects">
            <summary>Gets list of database objects that were used in the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryStatistics.UsedDatabaseObjectFields">
            <summary>Gets list of database object fields that were used in the query.</summary>
            <example>
            Use the <see cref="P:ActiveQueryBuilder.Core.StatisticsField.Selected">Selected Property</see> to get list of fields that were used for output (in the SELECT list of the query).
            </example>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QueryStatistics.OutputColumns">
            <summary>Gets list of the query result set expressions (output columns of the query).</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.StatisticsDatabaseObject">
            <summary>Describes a database object being used in the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsDatabaseObject.MetadataObject">
            <summary>Gets the reference to the MetadataObject object that corresponds to the database object.</summary>
            <remarks>Can be null if a corresponding MetadataObject object is not found in the MetadataContainer.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsDatabaseObject.ObjectName">
            <summary>Gets fully qualified name of the database object.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsDatabaseObject.Aliases">
            <summary>Lists aliases that were used in the query for the database object.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsDatabaseObject.IsFromQuery">
            <summary>Indicates that the object was explicitly used in the query.</summary>
            <remarks>An object might also be added to the query during expansion of virtual objects and fields.</remarks>
            <seealso cref="P:ActiveQueryBuilder.Core.StatisticsDatabaseObject.IsFromVirtual"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsDatabaseObject.IsFromVirtual">
            <summary>Indicates that the object was added to the query during expansion of virtual objects and fields.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.StatisticsDatabaseObjectList">
            <summary>Lists database objects used in the query (<see cref="P:ActiveQueryBuilder.Core.QueryStatistics.UsedDatabaseObjects"/>).</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsDatabaseObjectList.Count">
            <summary>Indicates the number of items in the list.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsDatabaseObjectList.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="T:ActiveQueryBuilder.Core.StatisticsField">
            <summary>Describes a database object field being used in the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsField.MetadataObject">
            <summary>Gets the reference to the MetadataObject object that corresponds to the database object field.</summary>
            <remarks>Can be null if a corresponding field is not found in the Metadata Container.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsField.MetadataField">
            <summary>Gets the reference to the MetadataField object that corresponds to the database object field.</summary>
            <remarks>Can be null if a corresponding field is not found in the Metadata Container.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsField.FieldName">
            <summary>Gets the name of the database object field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsField.ObjectName">
            <summary>Gets the database object name for the database object field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsField.FullName">
            <summary>Gets the fully qualified name of the database object field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsField.Selected">
            <summary>Indicates that the field is used in the SELECT list, i.e. it affects the query result set.</summary>
            <remarks>Unlike the <see cref="P:ActiveQueryBuilder.Core.QueryStatistics.OutputColumns"/>, this property allows to retrieve the list of fields, not expressions that were used for output.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsField.FieldType">
            <summary>Gets DB type for the database object field.</summary>
            <value>Value is taken from the MetadataField.FieldType property; is set to DbType.Object if a corresponding field is not found in the Metadata
            Container.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsField.IsFromQuery">
            <summary>Indicates that the field was explicitly used in the query.</summary>
            <remarks>A field might also be added to the query during expansion of virtual objects and fields.</remarks>
            <seealso cref="P:ActiveQueryBuilder.Core.StatisticsField.IsFromVirtual"></seealso>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsField.IsFromVirtual">
            <summary>Indicates that the field was added to the query during expansion of virtual objects and fields.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsField.IsDirectlyMentioned">
            <summary>Indicates this field was directly mentioned in the query text.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.StatisticsFieldList">
            <summary>Lists database object fields used in the query (<see cref="P:ActiveQueryBuilder.Core.QueryStatistics.UsedDatabaseObjectFields"/>).</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsFieldList.Count">
            <summary>Indicates the number of items in the list.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsFieldList.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="T:ActiveQueryBuilder.Core.StatisticsOutputColumn">
            <summary>Describes a column in result set of the query.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumn.QueryColumnListItem">
            <summary>Gets the reference to the Query Column List item object.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumn.Expression">
            <summary>Gets the SQL expression string for the column as it is written in the SELECT list.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumn.ColumnAlias">
            <summary>Gets the alias of the column.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumn.ColumnName">
            <summary>Gets the name of column as it should be referred in the outer query or as will be named in the query resultSet.</summary>
            <value>Returns column alias if it's not empty, otherwise returns field name.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumn.FieldName">
            <summary>Gets the database object field name.</summary>
            <value>Returns field name if the column is a simple database object field, otherwise returns empty string.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumn.ObjectAlias">
            <summary>Gets the alias of database object if the column is a single database object field.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumn.ObjectName">
            <summary>Gets the name of database object.</summary>
            <value>Returns the name of database object if the column is a single database object field, otherwise returns empty string.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumn.FieldType">
            <summary>Gets DB type for the database object field if the column is a single database object field.</summary>
            <value>Returns the type of appropriate database object field. Returns DbType.Object value if a corresponding field is not found in the Metadata Container or
            the column is not a single database object field.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumn.MetadataField">
            <summary>Gets the reference to the MetadataField object that corresponds to the database object field.</summary>
            <remarks>Can be null if a corresponding field is not found in the Metadata Container or the column is not a single database object field.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumn.MetadataObject">
            <summary>Gets the reference to the MetadataObject object that corresponds to the database object field.</summary>
            <remarks>Can be null if a corresponding field is not found in the Metadata Container or the column is not a single database object field.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumn.DataSource">
            <summary>Gets the reference to the DataSource query object to which this field belongs to.</summary>
            <value>Returns DataSource object if the column is a single database object field, otherwise returns null.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumn.ObjectNameInQuery">
            <summary>Gets the name of database object as it should be referred to qualify fields.</summary>
            <value>Returns object alias if it's not empty, otherwise returns object name.</value>
        </member>
        <member name="T:ActiveQueryBuilder.Core.StatisticsOutputColumnList">
            <summary>Lists output (result set) columns of the query (<see cref="P:ActiveQueryBuilder.Core.QueryStatistics.OutputColumns"/>).</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumnList.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.StatisticsOutputColumnList.Count">
            <summary>Indicates the number of items in the list.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataStructureItemNotification">
            <summary>Type to handle events for metadata container items.</summary>
            <param name="item">Metadata structure item to handle.</param>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataStructure">
            <summary>Complex object that determines the tree-like structure to group metadata objects within the Database Schema Tree. Root object of the structure.</summary>
            <remarks>See the <see cref="T:ActiveQueryBuilder.Core.MetadataStructureItem"/> description for details.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructure.Options">
            <summary>Set of options of the metadata structure.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructure.XML">
            <summary>Gets or sets the content of Metadata Container as string in a form of XML document.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructure.ExportToXML(System.String)">
            <summary>Saves the content of Metadata Structure to file in a form of XML document.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructure.ExportToXML(System.IO.Stream)">
            <summary>Saves the content of Metadata Structure to stream in a form of XML document.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructure.ImportFromXML(System.String)">
            <summary>Loads the content of Metadata Structure from file in a form of XML document.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructure.Clear">
            <summary>
            Clears metadata structure.
            </summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructure.CopyItemToFolder(ActiveQueryBuilder.Core.MetadataStructureItem,ActiveQueryBuilder.Core.MetadataStructureItem)">
            <summary>Creates a copy of the item in the given destination folder.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataStructureItem">
            <summary>Represents a node in the metadata structure.</summary>
            <remarks>
            	<para>Each item in the metadata structure can be bound to the metadata item to represent it in the structure or it can be a folder that groups other items by
            specific feature, for example, according to the subject area. Metadata item to bind to this structure item is defined in the <see cref="P:ActiveQueryBuilder.Core.MetadataStructureItem.MetadataName"/>
            property.</para>
            	<para>Metadata items are bound to structure items on calling the parent's <see cref="M:ActiveQueryBuilder.Core.MetadataStructureItem.LoadChildItems"/> method and unbound on calling the parent's <see cref="M:ActiveQueryBuilder.Core.MetadataStructureItem.UnloadChildItems"/> method.
            Binding is performed by finding in the Metadata Container a corresponding to the <see cref="P:ActiveQueryBuilder.Core.MetadataStructureItem.MetadataName"/> property metadata item and assigning it to the <see cref="P:ActiveQueryBuilder.Core.MetadataStructureItem.MetadataItem"/> property.</para>
            	<para>In order to customize the structure, the user may define some structure items beforehand ("static" items). The underlying items may be created in two
            ways:</para>
            	<para>1) Automatically according to the <see cref="P:ActiveQueryBuilder.Core.MetadataStructureItem.MetadataName"/> property. Automatic items creation is performed in accordance with the physical database schema. This means
            that if you've defined a static node and specified the schema name in the MetadataName property, the child items of this node will be database objects of this
            schema. If you've defined a table name in the MetadataName, the child items will be fields of this table (if their creation is allowed by the
            <see cref="P:ActiveQueryBuilder.Core.MetadataStructureOptions.ShowFields"/> property), etc. You may deny automatic creation of child nodes by setting the <see cref="P:ActiveQueryBuilder.Core.MetadataStructureItem.AllowChildAutoItems"/> property to
            false.</para>
            	<para>2) Dynamically according to the set of metadata filtration rules defined by the <see cref="P:ActiveQueryBuilder.Core.MetadataStructureItem.MetadataFilter"/> property.</para>
            </remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.Structure">
            <summary>Gets reference to the Metadata Structure object, i.e. the root node of the structure.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.Parent">
            <summary>Gets reference to the parent metadata structure item.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.IsDynamic">
            <summary>Indicates if item was created dynamically or it's a static item that was defined beforehand.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.IsBound">
            <summary>Indicates if metadata item is bound to this structure item.</summary>
            <remarks>
            	<para></para>
            </remarks>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataStructureItem.ItemAdded">
            <summary>Fired when new item is added to the structure.</summary>
            <remarks>Occurs when the metadata structure item is created and bound to appropriate metadata item.</remarks>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataStructureItem.ItemUpdateStarted">
            <summary>Fired when the item begins updating it's properties.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataStructureItem.ItemBinding">
            <summary>Fired when the item is about to be expanded.</summary>
            <remarks>Occurs before the metadata structure item creates child items and binds them to appropriate metadata items.</remarks>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataStructureItem.ItemBound">
            <summary>Fired when the item is expanded.</summary>
            <remarks>Occurs after the metadata structure item has created child items and bound them to appropriate metadata items.</remarks>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataStructureItem.ItemUnbinding">
            <summary>Fired when the item is about to be unbound from a metadata item.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataStructureItem.ItemUnbound">
            <summary>Fired when the item is unbound from a metadata item.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataStructureItem.ItemUpdated">
            <summary>Fired when the item updates some of it's properties.</summary>
            <remarks>Use the <see cref="E:ActiveQueryBuilder.Core.MetadataStructureItem.ItemUpdateStarted"/> and the <see cref="E:ActiveQueryBuilder.Core.MetadataStructureItem.ItemUpdateEnded"/> events to avoid handling of the ItemUpdated event multiple times.</remarks>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataStructureItem.ItemUpdateEnded">
            <summary>Fired when the item ends updating it's properties.</summary>
        </member>
        <member name="E:ActiveQueryBuilder.Core.MetadataStructureItem.ItemRemoving">
            <summary>Fired when the item is about to be removed from the structure.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.IsChildItemsLoaded">
            <summary>Indicates if child structure items are loaded (created and bound).</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructureItem.LoadChildItems">
            <summary>Creates dynamic child structure items and binds all child structure items to appropriate metadata items.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructureItem.UnloadChildItems">
            <summary>Unbinds static child structure items from metadata items and removes dynamic child structure items.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.MetadataName">
            <summary>Defines the name of a corresponding metadata object to map metadata item to this structure item.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.MetadataItem">
            <summary>Gets or sets the reference to the Metadata Item object.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.ParentMetadataItem">
            <summary>Gets reference to the metadata item assigned to the parent metadata structure item.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.MetadataFilter">
            <summary>Defines a set of metadata filtration rules to select metadata items for adding them as child structure items.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.Items">
            <summary>Gets list of child metadata structure items.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.Caption">
            <summary>Gets or sets the caption text that will represent this item in the database structure tree.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.ImageIndex">
            <summary>Gets or sets the index of image that will be assigned</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureItem.AllowChildAutoItems">
            <summary>Allows to create child structure items automatically according to the physical database schema or not.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructureItem.GetAllMetadataItems">
            <summary>Returns the list of all Metadata Items from the underlying hierarchy of Metadata Structure Items.</summary>
            <overloads>Returns the list of Metadata Items from the underlying hierarchy of Metadata Structure Items.</overloads>
            <remarks>Execution of this method in online mode may take a long time as it will require complete loading of the underlying Metadata Structure tree among with retrieval
            of the corresponding Metadata Items from database.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructureItem.GetAllMetadataItems(ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the list of all child Metadata Items of the specified type from the underlying hierarchy of Metadata Structure Items.</summary>
            <remarks>Execution of this method in online mode may take a long time as it will require complete loading of the underlying Metadata Structure tree among with retrieval
            of the corresponding Metadata Items from database.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructureItem.GetAllItems">
            <summary>Returns the list of all Metadata Structure Items in the underlying hierarchy.</summary>
            <overloads>Returns the list of Metadata Structure Items in the underlying hierarchy.</overloads>
            <remarks>Execution of this method in online mode may take a long time as it will require complete loading of the underlying Metadata Structure tree among with retrieval
            of the corresponding Metadata Items from database.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructureItem.GetAllItems(ActiveQueryBuilder.Core.MetadataType)">
            <summary>Returns the list of Metadata Structure Items of the specified type in the underlying hierarchy.</summary>
            <remarks>Execution of this method in online mode may take a long time as it will require complete loading of the underlying Metadata Structure tree among with retrieval
            of the corresponding Metadata Items from database.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructureItem.Refresh">
            <summary>Clears and reloads the structure item according to the actual content of the Metadata Container.</summary>
            <remarks>This method unbinds static and removes dynamic child items from the metadata structure node, then binds static items and creates dynamic items
            according to the actual content of the Metadata Container.</remarks>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructureItem.IsUniqueFolderName(System.String,System.StringComparison)">
            <summary> Check given name is unique for specified item types.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.MetadataStructureItem.GetUniqueFolderName(System.String,System.Int32,System.StringComparison)">
            <summary>Create unique name with given prefix.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MetadataStructureOptions">
            <summary>Contains various options that affect on displaying of the Metadata Structure.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.GroupByServers">
            <summary>Instructs to group database objects by servers or not.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.GroupByDatabases">
            <summary>Instructs to group database objects by databases or not.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.GroupBySchemas">
            <summary>Instructs to group database objects by schemas or not.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.GroupByTypes">
            <summary>Instructs to group database objects by types or not.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.GroupFieldsByTypes">
            <summary>Instructs to group database field objects by types or not.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.AllowFavourites">
            <summary>Allows users to place specific objects to the "Favourites" folder for quicker access to them.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.ShowFields">
            <summary>Instructs the component to show fields of database objects in the tree.</summary>
            <remarks>Setting this property to true is necessary if you want to use the component without Design Pane. See the <see cref="!:PanesConfigurationOptions.DesignPaneVisible"/> property
            for details.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.TablesFolderText">
            <summary>Gets or sets the text displayed for the table grouping folders.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.ViewsFolderText">
            <summary>Gets or sets the text displayed for the view grouping folders.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.ProceduresFolderText">
            <summary>Gets or sets the text displayed for the procedure and function grouping folders.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.SynonymsFolderText">
            <summary>Gets or sets the text displayed for the synonym grouping folders.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.FieldsFolderText">
            <summary>Gets or sets the text displayed for the field grouping folders.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.ForeignKeysFolderText">
            <summary>Gets or sets the text displayed for the foreign key grouping folders.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MetadataStructureOptions.ParametersFolderText">
            <summary>Gets or sets the text displayed for the parameter grouping folders.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.UserQueries">
            <summary>Low-level UserQueries API</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.IsFolder(ActiveQueryBuilder.Core.MetadataStructureItem)">
            <summary>Lets determine if an item is a folder or not.</summary>
            <param name="item">Item to analyze. Cannot be null.</param>
            <returns>true if item is folder, false otherwise.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.IsUserQueryExist(ActiveQueryBuilder.Core.MetadataContainer,System.String)">
            <summary>
            Check is UserQuery with given name exists in MetadataContainer.
            </summary>
            <param name="metadataContainer">MetadataContainer storing UserQueries. Cannot be null.</param>
            <param name="name">Name of UserQuery to find. Cannot be null or empty string.</param>
            <returns>true if UserQuery exists, false otherwise.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.AddUserQuery(ActiveQueryBuilder.Core.MetadataContainer,ActiveQueryBuilder.Core.MetadataStructureItem,System.String,System.String,System.Int32,System.String)">
            <summary>
            Add new user query to specified folder. Refresh parent folder display new UserQuery.
            </summary>
            <param name="metadataContainer">MetadataContainer reference where new UserQuery objects will be created. Cannot be null.</param>
            <param name="parentFolder">MetadataStructure folder to place new UserQuery. Cannot be null.</param>
            <param name="name">Name of new UserQuery. Cannot be null or empty string.</param>
            <param name="query">SQL Query expression for the new UserQuery object. Cannot be null or empty string.</param>
            <param name="imageIndex">Optional image index for new UserQuery. Default: -1</param>
            <param name="layout">Optional layout XML for given SQL Query expression. Default: null</param>
            <returns>Newly created MetadataStructureItem which references new UserQuery object.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.AddFolder(ActiveQueryBuilder.Core.MetadataStructureItem,System.String,System.Int32)">
            <summary>
            Create new folder with given name. Refresh parent node to display new folder.
            </summary>
            <param name="parentFolder">Parent folder for newly created folder. Cannot be null.</param>
            <param name="name">Name of new folder. Cannot be null or empty string.</param>
            <param name="imageIndex">Optional image index for new folder. Default: -1</param>
            <returns>Newly created MetadataStructureItem representing folder.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.SaveUserQuery(ActiveQueryBuilder.Core.MetadataContainer,ActiveQueryBuilder.Core.MetadataStructureItem,System.String,System.String)">
            <summary>
            Replaces the user query content with the new SQL string and layout.
            </summary>
            <param name="metadataContainer">MetadataContainer storing UserQuery metadata object. Cannot be null.</param>
            <param name="userQuery">MetadataStructureItem representing UserQuery object. Cannot be null.</param>
            <param name="query">New SQL Query expression. Cannot be null or empty string.</param>
            <param name="layout">Optional SQL Query expression layout XML. Default: null</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.MoveUserQuery(ActiveQueryBuilder.Core.MetadataStructureItem,ActiveQueryBuilder.Core.MetadataStructureItem)">
            <summary>
            Moves the query to the specified folder.
            </summary>
            <remarks>
            This method actually creates a copy of given MetadataStructureItem in destination folder 
            and then removes copyed item, not just moves given item.
            </remarks>
            <param name="userQuery">UserQuery to move. Cannot be null. Will be removed after move.</param>
            <param name="destinationFolder">Destination folder. Should be folder. Cannot be null.</param>
            <returns>New MetadataStructureItem object references same UserQuery as given.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.MoveFolder(ActiveQueryBuilder.Core.MetadataStructureItem,ActiveQueryBuilder.Core.MetadataStructureItem)">
            <summary>
            Moves the folder into another folder as a subfolder.
            </summary>
            <remarks>
            This method actually creates a copy of given MetadataStructureItem in destination folder 
            and then removes copyed item, not just moves given item.
            </remarks>
            <param name="folder">Folder to move. Cannot be null.</param>
            <param name="destinationFolder">Destination folder. Should be folder. Cannot be null.</param>
            <returns>New MetadataStructureItem representing new subfolder.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.RenameUserQuery(ActiveQueryBuilder.Core.MetadataContainer,ActiveQueryBuilder.Core.MetadataStructureItem,System.String)">
            <summary>
            Sets the given name for the MetadataStructureItem.
            </summary>
            <param name="metadataContainer">MetadataContainer storing MetadataStructureItem object. Cannot be null.</param>
            <param name="item">MetadataStructureItem to rename. Cannot be null.</param>
            <param name="newName">New name. Should be unique for MetadataStructureItem. Cannot be null or empty string.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.RenameFolder(ActiveQueryBuilder.Core.MetadataStructureItem,System.String)">
            <summary>
            Sets the given name for the folder.
            </summary>
            <param name="folder">Folder to rename.</param>
            <param name="newName">New name. Should be unique in parent folder. Cannot be null or empty string.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.RemoveUserQuery(ActiveQueryBuilder.Core.MetadataContainer,ActiveQueryBuilder.Core.MetadataStructureItem)">
            <summary>
            Deletes the UserQuery.
            </summary>
            <param name="metadataContainer">MetadataContainer storing UserQueries.</param>
            <param name="userQuery">UserQuery to delete.</param>
            <returns>Removed MetadataObject representing UserQuery object.</returns>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.RemoveFolder(ActiveQueryBuilder.Core.MetadataContainer,ActiveQueryBuilder.Core.MetadataStructureItem)">
            <summary>
            Deletes the folder and all of it's queries and subfolders.
            </summary>
            <param name="metadataContainer">MetadataContainer storing UserQueries. Cannot be null.</param>
            <param name="folder">Folder to remove. Cannot be null.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.ExportToXML(ActiveQueryBuilder.Core.MetadataContainer,ActiveQueryBuilder.Core.MetadataStructure,System.String)">
            <summary>
            Saves the queries and their tree structure to file identified by the fileName parameter.
            </summary>
            <param name="metadataContainer">MetadataContainer storing UserQueries. Cannot be null.</param>
            <param name="metadataStructure">MetadataStructure storing UserQueries hierarhy. Cannot be null.</param>
            <param name="fileName">File name to save to.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.ExportToXML(ActiveQueryBuilder.Core.MetadataContainer,ActiveQueryBuilder.Core.MetadataStructure,System.IO.Stream)">
            <summary>
            Saves the queries and their tree structure to the stream.
            </summary>
            <param name="metadataContainer">MetadataContainer storing UserQueries. Cannot be null.</param>
            <param name="metadataStructure">MetadataStructure storing UserQueries hierarhy. Cannot be null.</param>
            <param name="stream">Stream to export to. Cannot be null.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.ImportFromXML(ActiveQueryBuilder.Core.MetadataContainer,ActiveQueryBuilder.Core.MetadataStructure,System.String)">
            <summary>
            Loads the queries and their tree structure from file identified by the fileName parameter.
            </summary>
            <param name="metadataContainer">MetadataContainer storing UserQueries. Cannot be null.</param>
            <param name="metadataStructure">MetadataStructure storing UserQueries hierarhy. Cannot be null.</param>
            <param name="fileName">File name to import from.</param>
        </member>
        <member name="M:ActiveQueryBuilder.Core.UserQueries.ImportFromXML(ActiveQueryBuilder.Core.MetadataContainer,ActiveQueryBuilder.Core.MetadataStructure,System.IO.Stream)">
            <summary>
            Loads the queries and their tree structure from the stream.
            </summary>
            <param name="metadataContainer">MetadataContainer storing UserQueries. Cannot be null.</param>
            <param name="metadataStructure">MetadataStructure storing UserQueries hierarhy. Cannot be null.</param>
            <param name="stream">Stream to import from. Cannot be null.</param>
        </member>
        <member name="T:ActiveQueryBuilder.Core.AdvantageSyntaxProvider">
            <summary>Syntax Provider for Advantage.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.AutoSyntaxProvider">
            <summary>This syntax provider will try to detect database server automatically and will act as specific syntax provider for the detected database server.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.AutoSyntaxProvider.DetectedSyntaxProvider">
            <summary>Refers to an instance of the syntax provider object detected with the DetectSyntaxProvider method call.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.AutoSyntaxProvider.DetectSyntaxProvider(ActiveQueryBuilder.Core.SQLContext)">
            <summary>Runs the database server auto-detection routine.</summary>
            <param name="sqlContext">SQL context to specify database connection for SQL query execution.</param>
            <remarks>The detection routine sends a series of server-specific SQL queries that allows to uniquely define the underlying database server. This
            information is used to instantiate the <see cref="P:ActiveQueryBuilder.Core.AutoSyntaxProvider.DetectedSyntaxProvider"/> property with the right syntax provider. In case of auto-detection failure, the ANSI SQL/92
            syntax (<see cref="T:ActiveQueryBuilder.Core.SQL92SyntaxProvider"/>) will be used.</remarks>
        </member>
        <member name="T:ActiveQueryBuilder.Core.IdentCaseSensitivity">
            <summary>Determines various types of database server case sensitivity options.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.IdentCaseSensitivity.Insensitive">
            <summary>Instructs to treat all identifiers case insensitive.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.IdentCaseSensitivity.SensitiveUpperCase">
            <summary>Instructs to treat quoted identifies case sensitive; assumes unquoted identifies referring to objects in upper case.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.IdentCaseSensitivity.SensitiveLowerCase">
            <summary>Instructs to treat quoted identifies case sensitive; assumes unquoted identifies referring to objects in lower case.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.BaseSyntaxProvider">
            <summary>Base class for all syntax providers.</summary>
            <remarks>Syntax providers determine the syntax rules of specific database servers and the rules to retrieve metadata from database servers.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseSyntaxProvider.QuoteBegin">
            <summary>Gets the symbol to start quotation of identifier.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseSyntaxProvider.QuoteEnd">
            <summary>Gets the symbol to finish quotation of identifier.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseSyntaxProvider.Description">
            <summary>Gets description of the syntax provider class.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseSyntaxProvider.IdentCaseSens">
            <summary>Defines the way database server treats quoted and unquoted identifiers.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseSyntaxProvider.BuiltinFunctionNames">
            <summary> Gets or sets a list of names of the builtin functions. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseSyntaxProvider.DenyIntoClause">
            <summary> Instructs to deny the INTO clause parsing and generation. </summary>
            <value>false to allow INTO clause; true to deny it.</value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseSyntaxProvider.DetectServerVersion">
            <summary>Instructs the component to detect database server version automatically.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.BaseSyntaxProvider.UseBatchMetadataLoading">
            <summary>Always use batch metadata loading if available</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.BaseSyntaxProvider.ValidateQuery(System.String,System.String@)">
            <summary>Validates the given SQL query for compliance with the rules of SQL syntax.</summary>
            <param name="sql">SQL query text.</param>
            <param name="errorInfo">SQL parsing error message string.</param>
            <remarks>Please note that Active Query Builder does not perform validation against specific database context, 
            		 i.e. presence of table fields, function parameters, constants, etc.</remarks>
            <returns>true if the query is valid; false otherwise.</returns>
            <example>
            	<code title="ValidateQuery method sample" description="Validates a query against rules of MS SQL Server syntax." lang="CS">
            MSSQLSyntaxProvider syntax = new MSSQLSyntaxProvider();
            string errorInfo = "";
             
            if (!syntax.ValidateQuery("select * from Orders", ref errorInfo))
            {
            MessageBox.Show(errorInfo);
            }</code>
            </example>
        </member>
        <member name="T:ActiveQueryBuilder.Core.DB2NamingConventions">
            <summary>Determines possible database object naming conventions for DB2 databases.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.DB2NamingConventions.SQL">
            <summary>SQL naming convention: Dot (.) is used to separate parts of qualilfied identifiers.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.DB2NamingConventions.System">
            <summary>SQL naming convention: Slash (/) is used to separate parts of qualilfied identifiers.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.DB2SyntaxProvider">
            <summary>Syntax provider for IBM DB2 database.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.DB2SyntaxProvider.NamingConvention">
            <summary>Gets or sets database objects naming convention.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.DB2SyntaxProvider.ObeySchemaListFromDriver">
            <summary>Instruct syntax provider to load schemas and objects lists from driver, 
            not from server system catalog.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.FirebirdVersion">
            <summary> Firebird server versions enumeration. </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.FirebirdVersion.Firebird10">
            <summary>Firebird versions 1.x (less than 1.5)</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.FirebirdVersion.Firebird15">
            <summary>Firebird versions 1.5.x</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.FirebirdVersion.Firebird20">
            <summary>Firebird versions 2.0.x</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.FirebirdVersion.Firebird25">
            <summary>Firebird versions 2.5.x</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.FirebirdSyntaxProvider">
            <summary>Syntax provider for Firebird databases.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.FirebirdSyntaxProvider.ServerVersion">
            <summary> Gets or sets Firebird database server version. </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.GenericSyntaxServerType">
            <summary> Enumerates possible database server types to be used by the Generic Syntax Provider. </summary>
            <remarks> Used to determine correct quotation of identifiers and their case sensitivity. </remarks>
        </member>
        <member name="T:ActiveQueryBuilder.Core.GenericSyntaxIdentifierQuotes">
            <summary> Enumerates possible identifier quotation marks to be used by the Generic Syntax Provider. </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.GenericSyntaxProvider">
            <summary>This provider can be used with any database server. 
            		 It implements most of the ANSI SQL/92 syntax standard definitions, 
            		 but lacks most of server-specific SQL syntax extensions.</summary>
            <remarks>
            	<para>The generic syntax provider is also able to detect database server automatically, but this information is used only to determine correct quotation of
            identifiers, their case sensitivity and some other critical requirements of specific database server. So, it basically suits most of the database servers
            that claim to support ANSI-compatible SQL syntax, but it lacks many SQL syntax features of specific database servers.</para>
            	<para>Usage of specific database server syntax providers for supported database servers is recommended. If your database server is not known beforehand, you
            can use the <see cref="T:ActiveQueryBuilder.Core.AutoSyntaxProvider"/> which will try to detect database server and will actually use specific SQL syntax provider for this server.</para>
            </remarks>
        </member>
        <member name="F:ActiveQueryBuilder.Core.GenericSyntaxProvider._customDescriptor">
            <summary> Defines the set of settings to use when the Custom server type selected. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.GenericSyntaxProvider.CustomServerDescriptor">
            <summary>Gets the database server descriptor to customize it's settings for unsupported servers.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.GenericSyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.GenericSyntaxProvider.PreferredServer">
            <summary> Determines the server type for the database server detection routine to start from; uniquely determines the server type to be used if auto-detection is turned off. </summary>
            <remarks>Setting this property to prospective server type will allow to reduce the number of unsuccessful attempts to detect database server.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.GenericSyntaxProvider.AutoDetectServer">
            <summary>Allows for database server autodetection.</summary>
            <remarks>
             <para>The detection routine sends a series of server-specific SQL queries that allows to uniquely define 
             	  the underlying database server. 
            		  This information is used to determine correct quotation of identifiers and their case sensitivity. 
            		  It is also used to retrieve database schema from supported database servers more precisely.</para>
             <para>Due to it's nature, the detection routine may generate a series of SQL query execution errors and 
             	  it works only if connection to a database server is established.</para>
            </remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.GenericSyntaxProvider.UsedServer">
            <summary> Returns the detected database server type; returns the <see cref="P:ActiveQueryBuilder.Core.GenericSyntaxProvider.PreferredServer"/> if auto-detection is turned off. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.GenericSyntaxProvider.DetectServerVersion">
            <summary>Allows for database server version autodetection.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.GenericSyntaxProvider.GetQuoteBegin">
            <summary>Gets the opening identifier quotation symbol.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.GenericSyntaxProvider.GetQuoteEnd">
            <summary>Gets closing identified quotation symbol.</summary>
        </member>
        <member name="M:ActiveQueryBuilder.Core.GenericSyntaxProvider.DetectServer(ActiveQueryBuilder.Core.SQLContext)">
            <summary>Detects the database server to which the component is currently connected.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.ServerDescriptor">
            <summary>Object that determines general features of a database server and it's SQL syntax.</summary>
            <remarks>It is used in Generic syntax provider to adapt SQL generation rules to specific database server requirements.</remarks>
        </member>
        <member name="T:ActiveQueryBuilder.Core.ServerDescriptor.LoadMetadataDelegate">
            <summary>Delegate to load metdata items.</summary>
            <param name="metadataList">The list to load metadata into it.</param>
            <param name="loadingOptions">Options to which the loaded data must comply with.</param>
            <param name="serverParams">Cache of additional server properties, required for loading (server version, SQL dialect, ...)</param>
            <returns>Must return true in case of success; false otherwise.</returns>
        </member>
        <member name="P:ActiveQueryBuilder.Core.ServerDescriptor.IdentCaseSensitivity">
            <summary>Determines identifiers case sensitivity.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.ServerDescriptor.ForceBinaryANSIJoins">
            <summary>Determines whether to use only binary joins in the FROM clause.</summary>
            <remarks>Some database servers deny joining more than two tables with the JOIN operator. Joining more tables is allowed by using multilevel
            nested binary joins, i.e. each prevoius join should be enclosed in parentheses to join the next table. (for example, MS Access)</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.ServerDescriptor.SupportCrossJoin">
            <summary>Indicates if a server supports CROSS JOIN clause.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.ServerDescriptor.UniversalExpressions">
            <summary>Determines whether it is allowed to use predicates as ordinary SQL expressions.</summary>
            <remarks>Most of the database servers let use predicates only in particluar places, such as WHERE, HAVING clauses and in functions. But some of them allow for
            using them in SELECT or GROUP BY clauses as usual SQL expressions of boolean type. (for example, PostgreSQL)</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.ServerDescriptor.SupportDatabases">
            <summary>Indicates if a server supports database namespace.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.ServerDescriptor.SupportSchemas">
            <summary>Indicates if a server supports schema namespace.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.ServerDescriptor.IdQuotes">
            <summary>Determines identifier quotation symbols</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.ServerDescriptor.QueryToLoadFieldsForObject">
            <summary>Gets or sets the template to load field list for objects.</summary>
            <remarks>It must be a query that selects all columns from an object with minimal or no data in return.</remarks>
        </member>
        <member name="F:ActiveQueryBuilder.Core.ServerDescriptor.LoadServers">
            <summary>Delegate function to load list of servers.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.ServerDescriptor.LoadDatabases">
            <summary>Delegate function to load list of databases.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.ServerDescriptor.LoadSchemas">
            <summary>Delegate function to load list of schemas.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.ServerDescriptor.LoadObjects">
            <summary>Delegate function to load list of database objects.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.ServerDescriptor.LoadFields">
            <summary>Delegate function to load list of fields for an object.</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.ServerDescriptor.LoadForeignKeys">
            <summary>Delegate function to load list of foreign keys for an object.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.InformixVersion">
            <summary> Informix Database Server versions enumeration. </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.InformixVersion.DS8">
            <summary> Informix Database Server 8 </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.InformixVersion.DS9">
            <summary> Informix Database Server 9 </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.InformixVersion.DS10">
            <summary> Informix Database Server 10 </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.InformixVersion.DS11">
            <summary> Informix Database Server 11 </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.InformixSyntaxProvider">
            <summary>Syntax provider for Informix database server.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.InformixSyntaxProvider.ServerVersion">
            <summary>Gets or sets Informix database server version.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.InformixSyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MSAccessServerVersion">
            <summary> MS Jet versions enumeration </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MSAccessServerVersion.MSJET3">
            <summary>MS Jet 3 (for MS Access 97)</summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MSAccessServerVersion.MSJET4">
            <summary>MS Jet 4 (for MS Access 2000 and newer)</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MSAccessSyntaxProvider">
            <summary>Syntax provider for MS Jet-compatible databases: MS Access, MS Excel, MS Project as well as DBF, CSV and text files.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MSAccessSyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MSAccessSyntaxProvider.ServerVersion">
            <summary> Gets or sets MS Jet Engine version. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MSAccessSyntaxProvider.DenyIntoClause">
            <summary> Instructs to deny the INTO clause parsing and generation. </summary>
            <value>false to allow INTO clause; true to deny it.</value>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MSSQLAzureSyntaxProvider">
            <summary>
            The Syntax Provider for the Microsoft SQL Server Compact Edition dialect.
            </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MSSQLCESyntaxProvider">
            <summary>Syntax provider for Microsoft SQL Server Compact Edition.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MSSQLServerVersion">
            <summary> Microsoft SQL Server versions enumeration. </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MSSQLServerVersion.Auto">
            <summary> Instructs to detect MS SQL Server version automatically </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MSSQLServerVersion.MSSQL7">
            <summary> MS SQL Server 7 </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MSSQLServerVersion.MSSQL2000">
            <summary> MS SQL Server 2000 </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MSSQLServerVersion.MSSQL2005">
            <summary> MS SQL Server 2005 </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MSSQLServerVersion.MSSQL2008">
            <summary> MS SQL Server 2008 </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MSSQLServerVersion.MSSQL2012">
            <summary> MS SQL Server 2012 </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MSSQLServerVersion.MSSQL2014">
            <summary> MS SQL Server 2014 </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MSSQLServerVersion.MSSQL2016">
            <summary> MS SQL Server 2016 </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MSSQLServerVersion.MSSQL2017">
            <summary> MS SQL Server 2017 </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.MSSQLServerVersion.MSSQL2019">
            <summary> MS SQL Server 2019 </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MSSQLSyntaxProvider">
            <summary>Syntax Provider for Microsoft SQL Server.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MSSQLSyntaxProvider.ServerVersion">
            <summary> Gets or sets Microsoft SQL Server version. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MSSQLSyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MSSQLSyntaxProvider.DenyIntoClause">
            <summary> Instructs to deny the INTO clause parsing and generation. </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.MySQLSyntaxProvider">
            <summary>Syntax provider for MySQL.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MySQLSyntaxProvider.ServerVersionInt">
            <summary> Gets or sets MySQL server version as integer. </summary>
            <value> For example, for MySQL version 5.1.93, the value of this propery will be 50193. To get the major version you may divide it by 10000. </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MySQLSyntaxProvider.ServerVersion">
            <summary> Gets or sets MySQL server version string. </summary>
            <value> The value of this property is string represenation of the ServerVersionInt property split with dots by two digits. 
            		I.e. for MySQL version 5.1.93, the value of this property will be "5.01.93". </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MySQLSyntaxProvider.AnsiQuotes">
            <summary> Instructs the component to quote identifiers with double quotes instead of back quotes. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MySQLSyntaxProvider.TryToSelectLinksViaDriver">
            <summary> Instructs the component to try to retrieve foreign keys from the database via data 
            		  access component method calls in case of failing to retrieve them by querying system objects. </summary>
            <remarks>This property was made because some ODBC drivers were failing to retrieve this information and hanged up. 
            		 Note that ability to retrieve foreign keys by querying system objects was implemented only in MySQL 5.0.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MySQLSyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.MySQLSyntaxProvider.DenyIntoClause">
            <summary> Instructs to deny the INTO clause parsing and generation. </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.NetezzaSyntaxProvider">
            <summary>Syntax provider for Netezza.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.NetezzaSyntaxProvider.DenyIntoClause">
            <summary> Instructs to deny the INTO clause parsing and generation. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.NetezzaSyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.OracleServerVersion">
            <summary> Oracle Database server versions enumeration. </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.OracleServerVersion.Oracle7">
            <summary> Oracle 7 </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.OracleServerVersion.Oracle8">
            <summary> Oracle 8, 8i Database </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.OracleServerVersion.Oracle9">
            <summary> Oracle 9i Database </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.OracleServerVersion.Oracle10">
            <summary> Oracle Database 10g </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.OracleServerVersion.Oracle11">
            <summary> Oracle Database 11g </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.OracleServerVersion.Oracle12">
            <summary> Oracle Database 12c </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.OracleServerVersion.Oracle18">
            <summary> Oracle Database 18c </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.OracleServerVersion.Oracle19">
            <summary> Oracle Database 19c </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.OracleSyntaxProvider">
            <summary>Syntax provider for Oracle Database.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.OracleSyntaxProvider.ServerVersion">
            <summary> Gets or sets Oracle Database server version. </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.PervasiveSyntaxProvider">
            <summary>Syntax provider for ANSI SQL/92 standard.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PervasiveSyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PervasiveSyntaxProvider.UseInformationSchema">
            <summary> Instructs the component to try to retrieve database schema information from the INFORMATION_SCHEMA system objects. </summary>
            <remarks>In case of failure, the component will try to retrieve this information using Metadata Provider methods to query the underlying data access components. </remarks>
            <value> true to use INFORMATION_SCHEMA, false to bypass querying INFORMATION_SCHEMA objects. </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PervasiveSyntaxProvider.SupportDatabases">
            <summary>Gets or sets the sign of presence of database namespace support for the server.</summary>
            <remarks>Default value is true. This sign will be automatically switched off if no database will be found during the metadata loading process. Switching if off manually
            will cancel the query to load a list of databases to the Metadata Container.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PervasiveSyntaxProvider.SupportSchemas">
            <summary>Gets or sets the sign of presence of schema namespace support for the server.</summary>
            <remarks>Default value is true. This sign will be automatically switched off if no schema will be found during the metadata loading process. Switching if off
            manually will cancel the query to load a list of schemas to the Metadata Container.</remarks>
        </member>
        <member name="T:ActiveQueryBuilder.Core.PostgreSQLSyntaxProvider">
            <summary>Syntax provider for PostgreSQL.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PostgreSQLSyntaxProvider.ComparisonOperators">
            <summary> Lists the user-defined binary (comparison) operators. See PostgreSQL help for details. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PostgreSQLSyntaxProvider.DenyIntoClause">
            <summary> Instructs to deny the INTO clause parsing and generation. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.PostgreSQLSyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.QuickBooksSyntaxProvider">
            <summary>Syntax provider for QuickBooks.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QuickBooksSyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.QuickBooksSyntaxProvider.DenyIntoClause">
            <summary> Instructs to deny the INTO clause parsing and generation. </summary>
            <value>false to allow INTO clause; true to deny it.</value>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SapHanaSyntaxProvider">
            <summary>Syntax provider for SAP Hana server.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SnowflakeSyntaxProvider">
            <inheritdoc />
            <summary>Syntax provider for Snowflake.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQL2003SyntaxProvider">
            <summary>Syntax provider for ANSI SQL/2003 standard.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQL2003SyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQL2003SyntaxProvider.UseInformationSchema">
            <summary> Instructs the component to try to retrieve database schema information from the INFORMATION_SCHEMA system objects. </summary>
            <remarks>In case of failure, the component will try to retrieve this information using Metadata Provider methods to query the underlying data access components. </remarks>
            <value> true to use INFORMATION_SCHEMA, false to bypass querying INFORMATION_SCHEMA objects. </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQL2003SyntaxProvider.SupportDatabases">
            <summary>Gets or sets the sign of presence of database namespace support for the server.</summary>
            <remarks>Default value is true. This sign will be automatically switched off if no database will be found during the metadata loading process. Switching if off manually
            will cancel the query to load a list of databases to the Metadata Container.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQL2003SyntaxProvider.SupportSchemas">
            <summary>Gets or sets the sign of presence of schema namespace support for the server.</summary>
            <remarks>Default value is true. This sign will be automatically switched off if no schema will be found during the metadata loading process. Switching if off
            manually will cancel the query to load a list of schemas to the Metadata Container.</remarks>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQL89SyntaxProvider">
            <summary>Syntax provider for ANSI SQL/89 standard.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQL89SyntaxProvider.SupportDatabases">
            <summary>Gets or sets the sign of presence of database namespace support for the server.</summary>
            <remarks>Default value is true. This sign will be automatically switched off if no database will be found during the metadata loading process. Switching if off manually
            will cancel the query to load a list of databases to the Metadata Container.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQL89SyntaxProvider.SupportSchemas">
            <summary>Gets or sets the sign of presence of schema namespace support for the server.</summary>
            <remarks>Default value is true. This sign will be automatically switched off if no schema will be found during the metadata loading process. Switching if off
            manually will cancel the query to load a list of schemas to the Metadata Container.</remarks>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQL92SyntaxProvider">
            <summary>Syntax provider for ANSI SQL/92 standard.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQL92SyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQL92SyntaxProvider.UseInformationSchema">
            <summary> Instructs the component to try to retrieve database schema information from the INFORMATION_SCHEMA system objects. </summary>
            <remarks>In case of failure, the component will try to retrieve this information using Metadata Provider methods to query the underlying data access components. </remarks>
            <value> true to use INFORMATION_SCHEMA, false to bypass querying INFORMATION_SCHEMA objects. </value>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQL92SyntaxProvider.SupportDatabases">
            <summary>Gets or sets the sign of presence of database namespace support for the server.</summary>
            <remarks>Default value is true. This sign will be automatically switched off if no database will be found during the metadata loading process. Switching if off manually
            will cancel the query to load a list of databases to the Metadata Container.</remarks>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQL92SyntaxProvider.SupportSchemas">
            <summary>Gets or sets the sign of presence of schema namespace support for the server.</summary>
            <remarks>Default value is true. This sign will be automatically switched off if no schema will be found during the metadata loading process. Switching if off
            manually will cancel the query to load a list of schemas to the Metadata Container.</remarks>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SQLiteSyntaxProvider">
            <summary>Syntax provider for SQLite.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SQLiteSyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SybaseServerVersion">
            <summary> Sybase Server types enumeration. </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.SybaseServerVersion.SybaseASA">
            <summary> Sybase Adaptive Server Anywhere </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.SybaseServerVersion.SybaseASE">
            <summary> Sybase Adaptive Server Enterprise </summary>
        </member>
        <member name="F:ActiveQueryBuilder.Core.SybaseServerVersion.SybaseIQ">
            <summary> Sybase IQ </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.SybaseSyntaxProvider">
            <summary>Syntax provider for Sybase ASA/ASE.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SybaseSyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.SybaseSyntaxProvider.ServerVersion">
            <summary> Gets or sets the Sybase server type (ASA, ASE or IQ). </summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.TeradataSyntaxProvider">
            <summary>The Syntax Provider for the Teradata SQL dialect.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.TeradataSyntaxProvider.IdentCaseSens">
            <summary>Defines the way database server treats quoted and unquoted identifiers.</summary>
        </member>
        <member name="T:ActiveQueryBuilder.Core.VistaDBSyntaxProvider">
            <summary>Syntax provider for VistaDB embedded database engine.</summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.VistaDBSyntaxProvider.IdentCaseSens">
            <summary> Defines the way database server treats quoted and unquoted identifiers. </summary>
        </member>
        <member name="P:ActiveQueryBuilder.Core.VistaDBSyntaxProvider.DenyIntoClause">
            <summary> Instructs to deny the INTO clause parsing and generation. </summary>
        </member>
    </members>
</doc>
