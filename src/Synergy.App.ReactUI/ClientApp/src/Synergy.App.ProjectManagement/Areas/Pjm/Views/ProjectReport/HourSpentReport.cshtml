@*@using Kendo.Mvc.UI;*@
@using Synergy.App.WebUtility
@using Synergy.App.Common;
@model TaskWorkTimeViewModel


@{
    ViewBag.Title = "Hour Spent Report";
    Layout = null;
}

@{
    var myproject = "Project";
}


<style>
    /*.col-template-val {
            margin: 0 0 1em .5em;
        }

        .k-grid .k-alt {
            background-color: #dae8ef;*/ /* specify the alternate background-color */
    /*}



        @@keyframes click-wave {
            0% {
                height: 40px;
                width: 40px;
                opacity: 0.35;
                position: relative;
            }

            100% {
                height: 200px;
                width: 200px;
                margin-left: -80px;
                margin-top: -80px;
                opacity: 0;
            }
        }

        .option-input {
            -webkit-appearance: none;
            -moz-appearance: none;
            -ms-appearance: none;
            -o-appearance: none;
            appearance: none;
            position: relative;
            top: 13.33333px;
            right: 0;
            bottom: 0;
            left: 0;
            height: 40px;
            width: 40px;
            transition: all 0.15s ease-out 0s;
            background: #cbd1d8;
            border: none;
            color: #fff;
            cursor: pointer;
            display: inline-block;
            margin-right: 0.5rem;
            outline: none;
            position: relative;
            z-index: 1000;
        }

            .option-input:hover {
                background: #9faab7;
            }

            .option-input:checked:focus {
                outline: none;
            }

            .option-input:checked {
                background: #40e0d0;
            }

                .option-input:checked::before {
                    height: 40px;
                    width: 40px;
                    position: absolute;
                    content: '✔';
                    display: inline-block;
                    font-size: 26.66667px;
                    text-align: center;
                    line-height: 40px;
                }

                .option-input:checked::after {
                    -webkit-animation: click-wave 0.65s;
                    -moz-animation: click-wave 0.65s;
                    animation: click-wave 0.65s;
                    background: #40e0d0;
                    content: '';
                    display: block;
                    position: relative;
                    z-index: 100;
                }

            .option-input.radio {
                border-radius: 50%;
            }

                .option-input.radio::after {
                    border-radius: 50%;
                }

        .p-5 {
            padding: 5px;
        }

        .border-banner {
            border: 1px solid #f1f1f1;
            height: 162px;
        }

        .container-im {
            position: relative;
            text-align: center;
            color: white;
        }*/

    /* The hero image */
    /*.head-image {
            object-fit: fill;
        }*/

    /* Place text in the middle of the image */
    /*.head-text {
            text-align: left;
            position: absolute;
            top: 28%;
            color: white;
        }

        .head-img {
            max-width: 100%;*/
    /* max-height: 149px; */
    /*width: 100%;*/
    /* object-fit: none; */
    /*height: 180px !important;
        }*/

    /*.k-dropdown-wrap.k-state-default, .k-dropdown-wrap.k-state-default.k-state-focused {*/
    /*        width: 280px;
          height: 42px;*/
    /*background-color: #2D9FCA;
            border: 1px solid #E8E5E5;
            box-sizing: border-box;
            border-radius: 3px;
            color: black;
        }*/
    /*#Sdate,#Project,#TaskGroup,#User{
            width: 280px;
            height: 42px;
            background-color: #2D9FCA;
            border: 1px solid #E8E5E5;
            box-sizing: border-box;
            border-radius: 3px;
            color: black;
        }*/
    /*#kgrdTask{
            height:550px;
        }*/
    .wordWrapGridColumn {
        overflow: visible !important;
        white-space: normal !important;
        word-wrap: break-word;
    }

    .WrapText {
        width: 100%;
        word-break: break-all;
    }

    #header {
        /*        width: 159px;
    */ height: 24px;
        font-family: Roboto;
        font-style: normal;
        font-weight: 500;
        font-size: 18px;
        line-height: 24px;
        /* identical to box height, or 133% */
        color: #353535;
    }

    #filters {
        width: 100%;
        height: 110px;
        left: 389px;
        top: 157px;
        background: #2D9FCA;
        border: 1px solid #FFFFFF;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.25);
        border-radius: 6px;
    }

    .hr-x-large search-control {
        background: #2D9FCA;
    }

    .k-list {
        background-color: #92c1c8;
        color: white;
    }

    .k-dropdownlist:hover {
        background-color: #2D9FCA;
        color: white;
    }

    #filtertext {
        font-family: Roboto;
        font-style: normal;
        font-weight: normal;
        font-size: 14px;
        line-height: 24px;
        /* identical to box height, or 171% */
        color: #FFFFFF;
    }

    .oddrowstyle {
        left: 390px;
        top: 317px;
        background: #DAEDFF;
        border: 1px solid #FFFFFF;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.25);
        border-radius: 6px;
        font-family: Roboto;
        font-style: normal;
        font-weight: normal;
        font-size: 14px;
        line-height: 24px;
        /* or 171% */
        color: #292929;
    }

    .evenrowstyle {
        left: 390px;
        top: 521px;
        background: #8CC2EC;
        border: 1px solid #FFFFFF;
        border-radius: 0px;
        font-family: Roboto;
        font-style: normal;
        font-weight: normal;
        font-size: 14px;
        line-height: 24px;
        /* or 171% */
        color: #292929;
    }

    .banner-container {
        position: relative;
        color: white;
    }

    .banner-text {
        position: absolute;
        top: 14px;
        left: 60px;
        font-size: 35px;
    }
</style>
<script type="text/javascript">
    function ColorMeBad() {
        var grid = $("#DemoGrid").data("kendoGrid");
        var data = grid.dataSource.data();
        $.each(data, function (i, row) {
            if (i % 2 == 0) {
                $('tr[data-uid="' + row.uid + '"] ').addClass("oddrowstyle");
            } else {
                $('tr[data-uid="' + row.uid + '"] ').addClass("evenrowstyle");
            }
        })
    }

    function FilterGrid() {

        var search = {
            Userfilter: $("#User").val(),
            Projectfilter: $("#Project").val(),
            Taskfilter: $("#TaskGroup").val(),
            Datefilter1: $("#Sdate").val(),
            Datefilter2: $("#Edate").val(),
        };
        return search;
    }

    function FilterGrid1() {

        var search = {
            Datefilter: $("#Sdate").val(),
        };
        return search;
    }

    function onUserChange() {
        // $("#kgrdTask").data("kendoGrid").dataSource.read();
        GetReportData();
    }
    function onSearch() {
        GetReportData();
    }
    function onProjectChange() {
        
        var p = $("#Project").data("kendoDropDownList");
        //alert(p.text())
        //   document.getElementById("projectname").innerHTML = p.text();
        //$("#projectname").val(p.text());

        // $("#kgrdTask").data("kendoGrid").dataSource.read();
        GetReportData();
    }

    function onTaskChange() {
        // $("#kgrdTask").data("kendoGrid").dataSource.read();
        GetReportData();
    }

    function onDateChange() {
        //$("#kgrdTask").data("kendoGrid").dataSource.read();
        GetReportData();
    }

    //function excelExport(e) {
    //    var sheet = e.workbook.sheets[0];

    //    for (var rowIndex = 1; rowIndex < sheet.rows.length; rowIndex++) {
    //        var row = sheet.rows[rowIndex];
    //        for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
    //            row.cells[cellIndex].format = "dd-MM-yy hh:mm";
    //            var cell = row.cells[cellIndex];
    //            if (cellIndex == 6 || cellIndex == 7) {
    //                row.cells[cellIndex].format = "dd-MM-yy";
    //            }


    //            if (cellIndex == 9) { row.cells[cellIndex].wrap = true; }

    //            // cell.wrap = true;
    //            //if (cell.value && cell.value.toString().indexOf("<br />") >= 0) {
    //            //    cell.value = cell.value.replace("<br />", "\n");
    //            //    cell.wrap = true;
    //            //}
    //        }
    //    }
    //    sheet.frozenRows = 1;
    //    sheet.mergedCells = ["A1:J1"];
    //    var today = new Date(Date.now()).toLocaleString().split(',')[0];
    //    //alert(today);

    //    //lert(dd);
    //    var myHeaders = [{
    //        value: document.getElementById("projectname").innerHTML + " " + "Daily Work Report" + " " + today,
    //        fontSize: 20,
    //        textAlign: "center",
    //        background: "#60b5ff",
    //        color: "#ffffff"
    //    }];
    //    sheet.rows.splice(0, 0, { cells: myHeaders, type: "header", height: 30 });

    //}
</script>

<script>
    function dataBound() {
        var grid = $("#kgrdTask").data("kendoGrid");
        var data = grid.dataSource.data();

        $.each(data, function (i, row) {
            if (i % 2 == 0) {
                $('tr[data-uid="' + row.uid + '"] ').addClass("oddrowstyle");
            } else {
                $('tr[data-uid="' + row.uid + '"] ').addClass("evenrowstyle");
            }
        })
        detailExportPromises = [];
        this.expandRow(this.tbody.find("tr.k-master-row"));
    }

    var detailExportPromises = [];
    function detailInit(e) {
        var deferred = $.Deferred();
        // get the index of the master row
        var masterRowIndex = e.masterRow.index(".k-master-row");
        // add the deferred to the list of promises
        detailExportPromises.push(deferred);
        var detailGrid = e.detailRow.find("[data-role=grid]").data("kendoGrid");
        detailGrid.bind("excelExport", function (e) {
            // prevent saving the file
            e.preventDefault();
            var sheet = e.workbook.sheets[0];

            var row = sheet.rows[0];
            for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
                row.cells[cellIndex].background = "#92c1c8";
                row.cells[cellIndex].color = "#000000";
            }

            for (var rowIndex = 1; rowIndex < sheet.rows.length; rowIndex++) {
                var row = sheet.rows[rowIndex];
                // row.cells.background = "blue";
                for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
                    row.cells[cellIndex].format = "dd-MM-yy hh:mm:ss";

                    if (cellIndex == 7) { row.cells[cellIndex].wrap = true; }
                    //row.cells[cellIndex]. = "dd-MM-yy hh:mm:ss";

                }
            }

            // resolve the deferred
            deferred.resolve({
                masterRowIndex: masterRowIndex,
                sheet: e.workbook.sheets[0]
            });
        });
    }

    function excelExport(e) {
        // prevent saving the file because we will update the workbook
        // e.sender.hideColumn(1);
        e.preventDefault();
        var rows = e.workbook.sheets[0].rows;
        for (var i = 0; i < rows.length; i++) {
            console.log(rows[i].type);
            if (rows[i].type == "header") {
                rows.splice(i, 1);
            }
        }


        var sheet = e.workbook.sheets[0];

        for (var rowIndex = 1; rowIndex < sheet.rows.length; rowIndex++) {
            var row = sheet.rows[rowIndex];
            // row.cells.background = "blue";
            for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
                //  alert(row.cells.length);
                row.cells[cellIndex].format = "dd-MM-yy hh:mm:ss";
                //  row.cells[cellIndex].background = "blue";
                var cell = row.cells[cellIndex];
                //if (cellIndex == 6 || cellIndex == 7) {
                //    row.cells[cellIndex].format = "dd-MM-yy";
                //}
                if (cellIndex == 7) { row.cells[cellIndex].wrap = true; }

                // cell.wrap = true;
                //if (cell.value && cell.value.toString().indexOf("<br />") >= 0) {
                //    cell.value = cell.value.replace("<br />", "\n");
                //    cell.wrap = true;
                //}
            }
        }


        var workbook = e.workbook;
        // Export all detail grids
        $("[data-role=grid]", this.element).each(function () {
            $(this).data("kendoGrid").saveAsExcel();
        });
        // wait for all detail grids to finish exporting
        $.when.apply(null, detailExportPromises)
            .then(function () {
                // get the export results
                var detailExports = $.makeArray(arguments);
                // sort by masterRowIndex
                detailExports.sort(function (a, b) {
                    return a.masterRowIndex - b.masterRowIndex;
                });
                // add an empty column
                //  workbook.sheets[0].columns.unshift({ width: 30 });
                // prepend an empty cell to each row
                // for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
                //     workbook.sheets[0].rows[i].cells.unshift({});
                // }
                // merge the detail export sheet rows with the master sheet rows
                // loop backwards so the masterRowIndex doesn't need to be updated
                for (var i = detailExports.length - 1; i >= 0; i--) {
                    var masterRowIndex = detailExports[i].masterRowIndex + 1;
                    var sheet = detailExports[i].sheet;
                    // prepend an empty cell to each row
                    for (var ci = 0; ci < sheet.rows.length; ci++) {
                        if (sheet.rows[ci].cells[0].value) {
                            sheet.rows[ci].cells.unshift({});
                        }
                    }
                    // insert the detail sheet rows after the master row
                    [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
                }
                // save the workbook
                var sheet1 = workbook.sheets[0];
                sheet1.frozenRows = 1;
                sheet1.mergedCells = ["A1:H1"];
                var today = new Date(Date.now()).toLocaleString().split(',')[0];
                //alert(today);

                //lert(dd);

                var myHeaders = [{
                    value: document.getElementById("projectname").innerHTML + " " + "Daily Work Report" + " " + today,
                    fontSize: 20,
                    textAlign: "center",
                    background: "#60b5ff",
                    color: "#ffffff"
                }];
                sheet1.rows.splice(0, 0, { cells: myHeaders, type: "header", height: 30 });

                kendo.saveAs({
                    dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
                    fileName: "Export.xlsx"
                });
            });
    }
</script>
<script>
    $(document).ready(function () {
        HideLoader($("#global-overlay"));

        $("#Sdate").kendoDatePicker({ /*change: onDateChange*/ value: new Date(),
            format: "MM.dd.yyyy"
        });
        $("#Edate").kendoDatePicker({ /*change: onDateChange*/ value: new Date(), format: "MM.dd.yyyy" });
           $("#Project").kendoDropDownList({
            optionLabel: "--All--",
            dataTextField: "Name",
            dataValueField: "Id",
               filter: "contains",
               //change: onProjectChange,
            dataSource: {
                transport: {
                    read: {
                        url: "/PJM/ProjectTask/GetProjectsList",
                    }
                }
            }
           });
        $("#User").kendoDropDownList({
            optionLabel: "--All--",
            dataTextField: "Name",
            dataValueField: "Id",
               filter: "contains",
            //change: onUserChange,
            dataSource: {
                transport: {
                    read: {
                        url: "/Cms/User/GetUserIdNameList",
                    }
                }
            }
        });
    });

     var columnDefs = [
        {
            field: "ProjectName",
             headerName:"Project Name"
         },
         {
             field: "TaskName",
             headerName: "Task Name"
         },
         {
             field: "TaskNo",
             headerName: "Task No"
         },
        {
            field: "TaskStartDate",
            headerName: "@SharedResource["TaskStartDate"]",
            cellRenderer: params => {
                var date = new Date(params.value);
                var d = new Date(date),
                    month = '' + (d.getMonth() + 1),
                    day = '' + d.getDate(),
                    year = d.getFullYear();

                if (month.length < 2)
                    month = '0' + month;
                if (day.length < 2)
                    day = '0' + day;

                return [day, month, year].join('.');
            }
        },
        {
            field: "TaskDueDate",
            headerName: "@SharedResource["TaskDueDate"]",
            cellRenderer: params => {

                if (params.value != null && params.value != undefined)
                {
                    var date = new Date(params.value);
                    var d = new Date(date),
                        month = '' + (d.getMonth() + 1),
                        day = '' + d.getDate(),
                        year = d.getFullYear();

                    if (month.length < 2)
                        month = '0' + month;
                    if (day.length < 2)
                        day = '0' + day;

                    return [day, month, year].join('.');
                }

            }
         },
        {
            field: "AssigneeName",
            headerName:"Assignee Name"
        },

        {
            field: "TaskStatusName",
            headerName:"@SharedResource["TaskStatus"]"
        },
        {
            field: "SLA",
            headerName:"SLA(In Days)"
        },
        {
            field: "WSDate",
            headerName: "Work Start Time",
            cellRenderer: (data) => {
                //return new Date(data.value).toLocaleDateString();
                return moment(data.value).format('MM.DD.YYYY HH:mm')
            }
         },
         {
             field: "WEDate",
             headerName: "Work End Time",
             cellRenderer: (data) => {
                 //return new Date(data.value).toLocaleDateString();
                 return moment(data.value).format('MM.DD.YYYY HH:mm')
             }
         },
         {
             field: "Duration",
             headerName: "Duration"
         },
         {
             field: "WorkComment",
             headerName: "Work Comment"
         },


    ];

    function onBtExport() {
        //alert($("#Project").data("kendoDropDownList").value())
        var sd = kendo.toString($("#Sdate").data("kendoDatePicker").value(), '@ApplicationConstant.Database.JQueryDateFormat');
        var ed = kendo.toString($("#Edate").data("kendoDatePicker").value(), '@ApplicationConstant.Database.JQueryDateFormat');
        //alert(sd);
        //alert(ed);
        window.location.href = "/PJM/ProjectReport/HourSpentReportDataExcel?projectId=" + $("#Project").data("kendoDropDownList").value() + "&assigneeId=" + $("#User").data("kendoDropDownList").value() + "&sdate=" + sd + "&edate=" + ed;
    }
    function GetReportData() {
       // alert($("#TimeLogDate").data("kendoDatePicker").value());
        //if (date == null || date == "" || date == "undefined")
        //{
        //    date = "";
        //}
        var sd = kendo.toString($("#Sdate").data("kendoDatePicker").value(), '@ApplicationConstant.Database.JQueryDateFormat');
          var ed = kendo.toString($("#Edate").data("kendoDatePicker").value(), '@ApplicationConstant.Database.JQueryDateFormat');
        var url = "/PJM/ProjectReport/ReadData?projectId=" + $("#Project").data("kendoDropDownList").value() + "&assigneeId=" + $("#User").data("kendoDropDownList").value() + "&sdate=" + sd + "&edate=" + ed;

        document.getElementById("kgrdTask").innerHTML = "";
        gridConfig(
            "kgrdTask",
            url,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
    $(function () {
        GetReportData();
    });
</script>
<script>
    function back() {
        //window.location.href = '/pmt/ProjectReport';
        LoadPartailView1("/pjm/ProjectReport/Index", 'cms-content');
    }
</script>
<div class="banner-container">
    <img style="width:100%; height:100px" src="~/images/pmt/Hour Spent Report.jpg" />
    <div class="banner-text">Hour Spent Report</div>
</div>
<div class="row col-12" style="margin:10px">

    <div class="col-6">
        <p id="header">@*Hour Spent Report*@</p>
    </div>
    <div class="col-6">
        <button style="float:right" class="btn btn-dark" onclick="back()">Back</button>
    </div>

</div>
<div class="row" id="filters" style="margin:10px">
    <div class="row col-12">
        <div class="col-3">
            <br />
            <p id="filtertext">Select Project</p>
            <input type="text" id="Project" class="form-control" />
            @*@(Html.Kendo().DropDownList().Name("Project")
                                 .DataSource(source =>
                                 {
                                     source.Read(read =>
                                     {
                                     read.Action("GetProjectsList", "ProjectTask");
                                 });
                })
                                 .DataTextField("Name")
                                 .DataValueField("Id")
                                 .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                                 .Events(x => x.Change("onProjectChange"))
                                 .HtmlAttributes(new { @class = "hr-x-large search-control" })
                    )*@
        </div>

        @*<div class="col-xs-3">
                <br />
                <p id="filtertext">
                    Select Task Group
                </p>
                @(Html.Kendo().DropDownList().Name("TaskGroup")
                                     .DataSource(source =>
                                     {
                                         source.Read(read =>
                                         {
                                             // read.Action("GetTask", "ProjectReport");
                                             read.Action("GetIdNameList", "ListOfValue", new { area = "General", lovTypeCode = "TASK_GROUP" });
                                         });
                                     })
                                     .DataTextField("Name")
                                     .DataValueField("Value")
                                      .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                                     .Events(x => x.Change("onTaskChange"))
                                     .HtmlAttributes(new { @class = "hr-x-large search-control" })
                    )
            </div>*@

        <div class="col-3">
            <br />
            <p id="filtertext">
                Select Assignee
            </p>
            <input type="text" id="User" class="form-control" />
            @*@(Html.Kendo().DropDownList().Name("User")
                             .DataSource(source =>
                             {
                                 source.Read(read =>
                                 {
                                     read.Action("GetUserIdNameList", "User", new { area = "Cms" });
                                 });
                             })
                             .DataTextField("Name")
                             .DataValueField("Id")
                             .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                             .Events(x => x.Change("onUserChange"))
                             .HtmlAttributes(new { @class = "hr-x-large search-control" })
                )*@
        </div>

        <div class="col-3">
            <br />
            <p id="filtertext">
                Start Date
            </p>
            @*@(Html.Kendo().DatePicker()
                        .Name("Sdate")
                        .Value("")
                        .Events(x => x.Change("onDateChange"))
                .HtmlAttributes(new { @class = "hr-x-large search-control"})
                   )*@
            <input id="Sdate" class="hr-x-large search-control" />
        </div>
        <div class="col-2">
            <br />
            <p id="filtertext">
                End Date
            </p>
            @*@(Html.Kendo().DatePicker()
                        .Name("Sdate")
                        .Value("")
                        .Events(x => x.Change("onDateChange"))
                .HtmlAttributes(new { @class = "hr-x-large search-control"})
                   )*@
            <input id="Edate" class="hr-x-large search-control" />
        </div>
        <div class="col-1">
            <br />
            <br />
            <button class="btn btn-primary" onclick="onSearch();">Search</button>
        </div>
    </div>



</div>







<div class="hr-pad-10">
    <button class="btn btn-primary" onclick="onBtExport();">Export To Excel</button>
    <div id="kgrdTask" style="width:100%;height:550px" class="ag-theme-alpine"></div>
    @*@(Html.Kendo().Grid<TaskViewModel>
        ().Name("kgrdTask").ToolBar(tools => tools.Excel()).Events(e => e.ExcelExport("excelExport").DetailInit("detailInit")).Excel(excel => excel


                    .AllPages(true))
        .ClientDetailTemplateId("template")
        .Columns(columns =>
        {
        columns.Group(colGroup =>
        { colGroup.Title("").HeaderTemplate(@<text>
                            <label><span id="projectname">PROJECT</span> Daily Work Report @DateTime.Today.ToYYYY_MM_DD_Dash()</label>
                        </text>).HtmlAttributes(new { @class="group-header"});
            //colGroup.Title();
            colGroup.Columns(col => {
               // col.Bound(c => c.ProjectName).Width(220)/*.Title("Project Name")*/;
               // col.Bound(o => o.Subject)/*.Title("Task Name")*/.Width(120);
                col.Bound(o => o.StartDate).Width(135);
               // col.Bound(o => o.TaskGroup).Width(135);
               // col.Bound(o => o.AssigneeName).Width(135);
                col.Bound(o => o.DueDate).Width(150);
                col.Bound(o => o.TaskStatus).Width(120);
               // col.Bound(o => o.SLAText).Width(120);
                //col.Bound(o => o.TaskId).Hidden(true);
            });
        });
        })


        .Scrollable(x => x.Enabled(false))
        .Sortable(srt => srt.Enabled(true))
        .Filterable(f => f.Extra(false)
        .Operators(o => o.ForString(s => s.Clear()
        .Contains("Contains")
        .IsEqualTo("Is equal to")
        )))
        .Pageable(pageable => pageable
        .Refresh(true)

        .PageSizes(true)
        .ButtonCount(5))
        .AutoBind(true)
        .DataSource(
        dataSource => dataSource
        .Ajax()
        .PageSize(30)


        .Read(read => read.Action("ReadSubData", "ProjectReport").Data("FilterGrid"))


        )
        .Events(events => events.DataBound("dataBound"))

        )*@

</div>
<script id="template" type="text/kendo-tmpl">
        @*@(Html.Kendo().Grid<TaskWorkTimeViewModel>()

                    .Name("grid_#=Id#") // template expression, to be evaluated in the master context
                                        // .Events(e=>e.ExcelExport("ce"))
                   .Excel(excel => excel
                        .AllPages(true))
                    .Columns(col =>
                    {
                        //columns.Bound(o => o.Subject).Title("Task Name").Width(120);
                        //columns.Bound(o => o.StartDate).Width(135);
                        //columns.Bound(o => o.DueDate).Width(150);
                        //columns.Bound(o => o.TaskStatus).Width(120);
                        //columns.Bound(o => o.SLAText).Width(120);
                        //columns.Bound(o => o.TaskId).Hidden(true);
                        // col.Bound(c => c.ProjectName).Width(220);
                        //col.Bound(c => c.TaskGroup).Width(100);
                        // col.Bound(c => c.TaskName).Title("Task Name").Width(430);
                        //  col.Bound(c => c.AssigneeName).Width(150);
                        col.Bound(c => c.WSDate).Title("Work Start Time").Width(135).Format("{0:dd.MM.yyyy hh:mm tt}");
                        col.Bound(c => c.WEDate).Title("Work End Time").Width(135).Format("{0:dd.MM.yyyyhh:mm tt}");
                        //  col.Bound(c => c.TaskStartDate).Width(100).Format("{0:dd.MM.yyyy}");
                        //  col.Bound(c => c.TaskDueDate).Width(100).Format("{0:dd.MM.yyyy}");
                        col.Bound(c => c.DurationText).Title("Duration").Width(100);
                        col.Bound(c => c.WorkComment).Width(400);

                    })
                    //.DataSource(source =>
                    //{
                    //    source.Custom()
                    //        .ServerFiltering(true)
                    //        .ServerPaging(true)
                    //        .PageSize(100)
                    //        .Type("aspnetmvc-ajax")
                    //        .Transport(transport =>
                    //        {
                    //            transport.Read(read => read.Action("ReadData", "ProjectReport", new { taskid = "#=Id#" }).Data("FilterGrid1"));
                    //        })
                    //        .Schema(schema =>
                    //        {
                    //            schema.Data("Data")
                    //            .Total("Total");
                    //        });
                    //})
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(30)
                        .Read(read => read.Action("ReadData", "ProjectReport", new { taskid = "#=Id#" }).Data("FilterGrid1"))
                    )
                    //.Pageable()
                    //  .Events(events => events.DataBound("ColorMeBad"))

                    .Sortable()
                    .ToClientTemplate())*@

</script>


@*<script id="sp" type="text/kendo-ui-template">
        <span>Daily Work Report</span>
    </script>*@




@*<div class="hr-pad-10">

        @(Html.Kendo().Grid<TaskWorkTimeViewModel>
        ().Name("kgrdTask").ToolBar(tools => tools.Excel()).Events(e => e.ExcelExport("excelExport").DetailInit("detailInit")).Excel(excel => excel


                    .AllPages(true))
        .ClientDetailTemplateId("template")
        //.Columns(col =>
        //{
        //    col.Bound(c => c.ProjectName).Width(220);
        //    col.Bound(c => c.TaskGroup).Width(100);
        //    col.Bound(c => c.TaskName).Title("Task Name").Width(430);
        //    col.Bound(c => c.AssigneeName).Width(100);
        //    col.Bound(c => c.WSDate).Title("Work Start Time").Width(135).Format("{0:dd.MM.yyyy hh:mm tt}");
        //    col.Bound(c => c.WEDate).Title("Work End Time").Width(135).Format("{0:dd.MM.yyyyhh:mm tt}");
        //    col.Bound(c => c.TaskStartDate).Width(100).Format("{0:dd.MM.yyyy}");
        //    col.Bound(c => c.TaskDueDate).Width(100).Format("{0:dd.MM.yyyy}");
        //    col.Bound(c => c.DurationText).Title("Duration").Width(100);
        //    col.Bound(c => c.WorkComment).Width(400);

        //    //col.Bound(c => c.AssigneeDisplayName).Hidden(true);
        //    //col.Bound(c => c.SLAText).Hidden(true);
        //    //col.Bound(c => c.TaskStatusName).Width(100).Hidden(true);
        //    //col.Bound(c => c.StartDate);
        //    //col.Bound(c => c.DueDate);
        //})

        .Columns(columns =>
        {
        columns.Group(colGroup =>
        { colGroup.Title("").HeaderTemplate(@<text>
                            <label><span id="projectname">PROJECT</span> Daily Work Report @DateTime.Today.ToYYYY_MM_DD_Dash()</label>
                        </text>).HtmlAttributes(new { @class="group-header"});
            //colGroup.Title();
            colGroup.Columns(col => {
                col.Bound(c => c.ProjectName).Width(220);
                col.Bound(c => c.TaskGroup).Width(100);
                col.Bound(c => c.TaskName).Title("Task Name").Width(430);
                col.Bound(c => c.AssigneeName).Width(150);
                col.Bound(c => c.WSDate).Title("Work Start Time").Width(135).Format("{0:dd.MM.yyyy hh:mm tt}");
                col.Bound(c => c.WEDate).Title("Work End Time").Width(135).Format("{0:dd.MM.yyyyhh:mm tt}");
              //  col.Bound(c => c.TaskStartDate).Width(100).Format("{0:dd.MM.yyyy}");
              //  col.Bound(c => c.TaskDueDate).Width(100).Format("{0:dd.MM.yyyy}");
                col.Bound(c => c.DurationText).Title("Duration").Width(100);
                col.Bound(c => c.WorkComment).Width(400);

                //col.Bound(c => c.AssigneeDisplayName).Hidden(true);
                //col.Bound(c => c.SLAText).Hidden(true);
                //col.Bound(c => c.TaskStatusName).Width(100).Hidden(true);
                //col.Bound(c => c.StartDate);
                //col.Bound(c => c.DueDate);
            });
        });
        })


        .Scrollable(x => x.Enabled(false))
        .Sortable(srt => srt.Enabled(true))
        .Filterable(f => f.Extra(false)
        .Operators(o => o.ForString(s => s.Clear()
        .Contains("Contains")
        .IsEqualTo("Is equal to")
        )))
        .Pageable(pageable => pageable
        .Refresh(true)

        .PageSizes(true)
        .ButtonCount(5))
        .AutoBind(true)
        .DataSource(
        dataSource => dataSource
        .Ajax()
        .PageSize(10)

        //  .Events(events => events.Error("OnError"))
        .Read(read => read.Action("ReadData", "ProjectReport").Data("FilterGrid"))

        //  .Model(model => model.Id(p => p.Id))
        )
        .Events(events => events.DataBound("dataBound"))

        )

    </div>*@