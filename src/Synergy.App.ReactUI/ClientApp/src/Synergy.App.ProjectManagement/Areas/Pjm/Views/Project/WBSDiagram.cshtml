@using Synergy.App.WebUtility;
@*@using Kendo.Mvc.UI;*@
@using Synergy.App.Common;
@{
    //Layout = "~/Areas/Core/Views/Shared/_PopupLayout.cshtml";
    Layout = "~/Areas/Core/Views/Shared/_PopupLayout.cshtml";
}
<script src="~/lib/joint.js/config/halo.js"></script>
<script src="~/lib/joint.js/lodash.js"></script>
<script src="~/lib/joint.js/backbone.js"></script>
<script src="~/lib/joint.js/joint.js"></script>
<script src="~/lib/joint.js/config/selection.js"></script>
<script src="~/lib/joint.js/dagre.js"></script>
<script src="~/lib/joint.js/graphlib.core.js"></script>
<script src="~/lib/joint.js/config/rappid.js"></script>
@*<script src="~/js/PJM/projectMindMap.js"></script>*@

<div style="padding:5px">
    <button style="margin-top:10px;" class="btn btn-primary" onclick="onZoomIn()"><span class="fas fa-search-plus"></span></button>
    <button style="margin-top:10px;" class="btn btn-primary" onclick="onZoomOut()"><span class="fas fa-search-minus"></span></button>
</div>
<div id="paper-container" style=" height: 700px; overflow: scroll;"><div id="paper" style="width:3000px"></div></div>
<script>

    // Canvas where sape are dropped
    var graph = new joint.dia.Graph;
      var  paper = new joint.dia.Paper({
            el: $('#paper'),
            model: graph,
            height: 2000,
            width: 3000
      });

    var paperScroller = new joint.ui.PaperScroller({
        paper: paper
    });

    $('#paper-container').append(paperScroller.render().el);
    HideLoader($("#global-overlay"));
    onload();
    var xp = 100;
    var yp = 100;
    var type = '';
    var parent = '';
    function onload() {
        graph.clear();
        $.ajax({
            url: '/PJM/Project/GetWBSItem?ProjectId=@ViewBag.ProjectId',
            dataType: "json",
            success: function (result) {
                console.log(result);
                var ids;
                

                var project = result.filter(x => x.Type == "PROJECT");
                var child = result.filter(x => x.ParentId == project[0].Id);

                var projectN = new joint.shapes.standard.HeaderedRectangle();
                projectN.resize(180, 180);
                projectN.position(xp, yp);
                projectN.attr('root/tabindex', 12);
                projectN.attr('root/title', project[0].Title);
                projectN.attr('header/fill', '#89b0d8');
                projectN.attr('header/fillOpacity', 0.5);
                projectN.attr('headerText/text', project[0].Title);
                projectN.attr('body/fillOpacity', 0.5);
                projectN.attr('body/fontSize', 10);
                projectN.attr('bodyText/fontSize', 13);
                projectN.attr('bodyText/text', 'S: ' + formatDate(project[0].Start) + '\nE: ' + formatDate(project[0].End) + '\n\nStatus: ' + project[0].NtsStatus);
                graph.addCell(projectN);

                if (type != project.Type) {
                    xp = 50;
                    yp = yp + 150;
                    type = project[0].Type;
                }
                xp = xp + 150;

                createChild(child, result, projectN);
            }
        });
    }

    var parentVal;
    var dataLib = [];
    function createChild(child, result, parent) {
        xp = 50
        
        for (var i = 0; i < child.length; i++) {

            //var oUserId = userData.filter(x => x.Name == cells[i].attrs.headerText.text.split(":")[1].trim());
            //var aUserId = userData.filter(x => x.Name == cells[i].attrs.bodyText.text.split(":")[cells[0].attrs.bodyText.text.split(":").length - 1].trim());
            var title = child[i].Title;
            if (title.length > 20) title = title.substring(0, 20);

            if (child[i].Type == "PROJECT") {

                var sheaderedRectangle = new joint.shapes.standard.HeaderedRectangle();
                sheaderedRectangle.resize(120, 120);
                sheaderedRectangle.position(xp, yp);
                sheaderedRectangle.attr('root/tabindex', 12);
                sheaderedRectangle.attr('root/title', child[i].Title);
                sheaderedRectangle.attr('header/fill', '#89b0d8');
                sheaderedRectangle.attr('header/fillOpacity', 0.5);
                sheaderedRectangle.attr('headerText/text', child[i].Title);
                sheaderedRectangle.attr('body/fill', '#ffafb1');
                sheaderedRectangle.attr('body/fillOpacity', 0.5);
                sheaderedRectangle.attr('body/fontSize', 10);
                sheaderedRectangle.attr('bodyText/text', 'S: ' + formatDate(child[i].Start) + '\nE: ' + formatDate(child[i].End) + '\n\nStatus: ' + child[i].NtsStatus);
                sheaderedRectangle.attr('bodyText/fontSize', 13);
                sheaderedRectangle.attr('bodyText/color', '#FF0000');
                graph.addCell(sheaderedRectangle);

                if (parentVal != child[i].ParentId) {
                    xp = 50;
                    type = child[i].Type;
                    parentVal = child[i].ParentId;
                }
                xp = xp + 150;
                createlink(parent.id, sheaderedRectangle.id);
                dataLib.push({ id: child[i].Id, cell: sheaderedRectangle });
            } else if (child[i].Type == "STAGE") {

                var stheaderedRectangle = new joint.shapes.standard.HeaderedRectangle();
                stheaderedRectangle.resize(180, 180);
                stheaderedRectangle.position(xp, yp);
                stheaderedRectangle.attr('root/tabindex', 12);
                stheaderedRectangle.attr('root/title', child[i].Title);
                stheaderedRectangle.attr('header/fill', '#6c119c');
                stheaderedRectangle.attr('header/fillOpacity', 0.5);
                stheaderedRectangle.attr('headerText/text', title);
                //stheaderedRectangle.attr('body/fill', '#efc404');
                stheaderedRectangle.attr('body/fillOpacity', 0.5);
                stheaderedRectangle.attr('body/fontSize', 10);
                stheaderedRectangle.attr('bodyText/text', 'S: ' + formatDate(child[i].Start) + '\nE: ' + formatDate(child[i].End) + '\n\nStatus: ' + child[i].NtsStatus);
                stheaderedRectangle.attr('bodyText/fontSize', 13);

                graph.addCell(stheaderedRectangle);

                if (parentVal != child[i].ParentId) {
                    type = child[i].Type;
                    parentVal = child[i].ParentId;
                }
                xp = xp + 150;
                createlink(parent, stheaderedRectangle);
                dataLib.push({ id: child[i].Id, cell: stheaderedRectangle });
            } else if (child[i].Type == "TASK") {

                var theaderedRectangle = new joint.shapes.standard.HeaderedRectangle();
                theaderedRectangle.resize(180, 180);
                theaderedRectangle.position(xp, yp);
                theaderedRectangle.attr('root/tabindex', 12);
                theaderedRectangle.attr('root/title', child[i].Title);
                theaderedRectangle.attr('header/fill', '#008bde');
                theaderedRectangle.attr('header/fillOpacity', 0.5);
                theaderedRectangle.attr('headerText/text', title);
                //theaderedRectangle.attr('body/fill', '#ff9c00');
                theaderedRectangle.attr('body/fillOpacity', 0.5);
                theaderedRectangle.attr('body/fontSize', 10);
                theaderedRectangle.attr('bodyText/text', 'S: ' + formatDate(child[i].Start) + '\nE: ' + formatDate(child[i].End) + '\n\nStatus: ' + child[i].NtsStatus + '\n\Assiged To: ' + child[i].UserName);
                theaderedRectangle.attr('bodyText/fontSize', 13);
                graph.addCell(theaderedRectangle);
                if (parentVal != child[i].ParentId) {
                    type = child[i].Type;
                    parentVal = child[i].ParentId;
                }
                xp = xp + 150;

                createlink(parent, theaderedRectangle);
                dataLib.push({ id: child[i].Id, cell: theaderedRectangle });
            } else if (child[i].Type == "SUBTASK") {

                var theaderedRectangle = new joint.shapes.standard.HeaderedRectangle();
                theaderedRectangle.resize(180, 180);
                theaderedRectangle.position(xp, yp);
                theaderedRectangle.attr('root/tabindex', 12);
                theaderedRectangle.attr('root/title', child[i].Title);
                theaderedRectangle.attr('header/fill', '#cced00');
                theaderedRectangle.attr('header/fillOpacity', 0.5);
                theaderedRectangle.attr('headerText/text', title);
                //theaderedRectangle.attr('body/fill', '#f49880');
                theaderedRectangle.attr('body/fillOpacity', 0.5);
                theaderedRectangle.attr('body/fontSize', 10);
                theaderedRectangle.attr('bodyText/text', 'S: ' + formatDate(child[i].Start) + '\nE: ' + formatDate(child[i].End) + '\n\nStatus: ' + child[i].NtsStatus + '\n\Assiged To: ' + child[i].UserName);
                theaderedRectangle.attr('bodyText/fontSize', 13);
                graph.addCell(theaderedRectangle);
                if (parentVal != child[i].ParentId) {
                    type = child[i].Type;
                    parentVal = child[i].ParentId;
                }
                xp = xp + 150;

                createlink(parent, theaderedRectangle);
                dataLib.push({ id: child[i].Id, cell: theaderedRectangle });
            }
            joint.layout.DirectedGraph.layout(graph, {
                setLinkVertices: false,
                nodeSep: 150,
                edgeSep: 80,
                rankDir: "TB",
                marginX: 50,
                marginY:50,
                clusterPadding: { left: 20, right: 20, top: 20, bottom: 20 }
            });
        }

        for (var i = 0; i < child.length; i++) {

            var chs = result.filter(x => x.ParentId == child[i].Id);
            var pt = dataLib.filter(x => x.id == child[i].Id)[0].cell;
            createChild(chs, result, pt);

        }

    }

    function formatDate(date) {
        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2)
            month = '0' + month;
        if (day.length < 2)
            day = '0' + day;

        return [day, month, year].join('-');
    }

    function createlink(parent, child) {


        // Create a connection between elements.
        var link = new joint.shapes.standard.Link();
        link.source(parent);
        link.target(child);
        link.addTo(graph);

        // Add remove button to the link.
        var tools = new joint.dia.ToolsView({
            tools: [new joint.linkTools.Remove()]
        });
        link.findView(paper).addTools(tools);
    }

    function onZoomIn() {
        paperScroller.zoom(0.2, { max: 4 });
    }

    function onZoomOut() {
        paperScroller.zoom(-0.2, { min: 0.2 });
    }


</script>


