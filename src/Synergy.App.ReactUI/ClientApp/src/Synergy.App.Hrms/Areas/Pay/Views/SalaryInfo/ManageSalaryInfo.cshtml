@inject IStringLocalizer<CMS.UI.Web.Areas.Pay.Controllers.SalaryInfoController> Resource
@*@using Kendo.Mvc.UI;*@
@using Synergy.App.ViewModel;
@using Synergy.App.Common;
@model SalaryInfoViewModel
@{
    //  Layout = "~/Areas/Core/Views/Shared/_PopupLayout.cshtml";
    Layout = ViewBag.Layout;
}

<script type="text/javascript">
    function OnDataBound(arg) {
        var grid = $("#kgrdSalaryElementInfo").data("kendoGrid").dataItems();

        if (grid.length == 0) {
            $("#total").show();
        }
        else {
            $("#total").hide();
        }
    }


    function filter() {
        return {
            PersonId: $("#PersonId").val()
        };
    }
    function PaymentModeChange(e) {
        
        var dataItem = this.dataItem(e.item);
        var tit = $("#PaymentMode").val();

        //if (dataItem.Code == 'BANK_TRANSFER')
        if (tit == '@PaymentModeEnum.BankTransfer')
        {
            $("#bank").show();
            $('#BankBranchId').prop('required', true);
            $('#BankAccountNo').prop('required', true);
            $("#PaymentModeCode").val(dataItem.Code);
        }
        else {
            $("#bank").hide();
            $('#BankBranchId').prop('required', false);
            $('#BankAccountNo').prop('required', false);
        }
    }
    function OnCalendarChange(element) {
        var cal = $("#PayCalendarId").val();

        if (cal != null && cal != '') {
            $("#calendar").show();
        }
        else {
            $("#calendar").hide();
        }
    }
    function OnClickCalendar() {
        var cal = $("#PayCalendarId").val();
      
        var url = "/pay/Calendar/Correct?rs=PersionView&layoutMode=Iframe&id=" + cal;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: "@Html.Raw(Resource["Calendar"])", Width: 1200, Height: 600 });
        return false;
    }

</script>
<script type="text/javascript">
    var id = '@Model.NoteId';
    var Noteid='@Model.NoteId'
  //  alert(id);
    $(document).ready(function () {

        @*$("#PersonId").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@Model.PersonId",
            filter: "contains",
            autoBind: true,
            dataSource: {
                transport: {
                    read: {
                        url: "/CHR/HRDirect/GetPersonList",
                    }
                }
            }
        });*@
        $("#PersonId").kendoDropDownList({

            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "Select",


            virtual: {
                itemHeight: 26,
                valueMapper: function (options) {
                    $.ajax({

                        /*url: "/CHR/HRDirect/GetPersonValueMapper",*/
                        url: "/Cms/Person/GetActivePersonValueMapper",
                        type: "GET",
                        dataType: "json",
                        data: convertValues(options.value),
                        success: function (data) {
                            options.success(data);
                        }
                    })
                }
            },
            height: 260,
            dataSource: {
                type: "json",
                transport: {
                    read: function (options) {

                        console.log(options.data)
                        $.ajax({
                            /*url: "/CHR/HRDirect/GetPersonVirtualData",*/
                            url: "/Cms/Person/GetPersonVirtualData",

                            dataType: 'json',
                            type: 'GET',
                            data: ConvertOptions(options.data),
                            success: function (result) {
                                options.success(result);
                            }
                        })
                    }
                },

                schema: {
                    model: {
                        fields: {
                            Id: { type: "string" },
                            Name: { type: "string" }
                        }
                    },
                    data: "Data",
                    total: "Total"
                },
                pageSize: 40,
                serverPaging: true,
                serverFiltering: true,

            }
        });
        $("#PayGroupId").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@Model.PayGroupId",
            filter: "contains",
            autoBind: true,
            dataSource: {
                transport: {
                    read: {
                        url: "/Pay/PayrollBatch/GetPayGroupList",
                    }
                }
            }
        });

        $("#PayCalendarId").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@Model.PayCalendarId",
            filter: "contains",
            autoBind: true,
            change: OnCalendarChange,
            dataSource: {
                transport: {
                    read: {
                        url: "/Pay/PayrollBatch/GetPayCalenderList",
                    }
                }
            }
        });

        $("#FlightTicketFrequency").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@Model.FlightTicketFrequency",
            filter: "contains",
            autoBind: true,
            dataSource: {
                transport: {
                    read: {
                        url: "/Home/GetEnumIdNameList?enumType=FlightTicketFrequentEnum",
                    }
                }
            }
        });

        $("#OvertimePaymentType").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@Model.OvertimePaymentType",
            filter: "contains",
            autoBind: true,
            dataSource: {
                transport: {
                    read: {
                        url: "/Home/GetEnumIdNameList?enumType=OTPaymentTypeEnum",
                    }
                }
            }
        });

        $("#PaymentMode").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@Model.PaymentMode",
            filter: "contains",
            autoBind: true,
            change: PaymentModeChange,
            dataSource: {
                transport: {
                    read: {
                        url: "/Home/GetEnumIdNameList?enumType=PaymentModeEnum",
                    }
                }
            }
        });

        $("#BankBranchId").kendoDropDownList({
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            dataTextField: "Name",
            dataValueField: "Id",
            value: "@Model.BankBranchId",
            filter: "contains",
            autoBind: true,
            dataSource: {
                transport: {
                    read: {
                        url: "/Pay/PayrollBatch/GetPayBankBranchList",
                    }
                }
            }
        });

        '@Model.TakeAttendanceFromTAA' == 'True' ? $('#TAA').prop('checked', true) : $('#TAA').prop('checked', false);
        '@Model.IsEmployeeEligibleForOvertime' == 'True' ? $('#ForOvertime').prop('checked', true) : $('#ForOvertime').prop('checked', false);
        '@Model.IsEmployeeEligibleForEndOfService' == 'True' ? $('#ForEndOfService').prop('checked', true) : $('#ForEndOfService').prop('checked', false);
        '@Model.IsEmployeeEligibleForFlightTicketsForSelf' == 'True' ? $('#ForFlightTicketsForSelf').prop('checked', true) : $('#ForFlightTicketsForSelf').prop('checked', false);
        '@Model.IsEmployeeEligibleForFlightTicketsForDependants' == 'True' ? $('#ForFlightTicketsForDependants').prop('checked', true) : $('#ForFlightTicketsForDependants').prop('checked', false);
        '@Model.DisableFlightTicketProcessingInPayroll' == 'True' ? $('#ProcessingInPayroll').prop('checked', true) : $('#ProcessingInPayroll').prop('checked', false);
        '@Model.IsValidateDependentDocumentForBenefit' == 'True' ? $('#DependentDocumentForBenefit').prop('checked', true) : $('#DependentDocumentForBenefit').prop('checked', false);
        '@Model.IsEligibleForSalaryTransferLetter' == 'True' ? $('#ForSalaryTransferLetter').prop('checked', true) : $('#ForSalaryTransferLetter').prop('checked', false);

           @*if ('@Model.PaymentModeCode' == 'BANK_TRANSFER')*@
    if ('@Model.PaymentMode' == '@PaymentModeEnum.BankTransfer')
        {
          $("#bank").show();
            $('#BankBranchId').prop('required', true);
            $('#BankAccountNo').prop('required', true);

        }
        else {
            $("#bank").hide();
            $('#BankBranchId').prop('required', false);
            $('#BankAccountNo').prop('required', false);
        }

        if ('@Model.DataAction' == '@DataActionEnum.Edit') {

            $("#salaryinfoelement").show();
            @*$("#kgrdSalaryElementInfogrid").data("kendoGrid").dataSource.read({ ParentNoteId: '@Model.NoteId' });*@
        }
        else {
            $("#salaryinfoelement").hide();
        }
       // PaymentModeChange();
        OnCalendarChange();
        //$.validator.unobtrusive.parse(document);
       // SetTabControls(0);
         $("#btnSubmit2").click(function (e) {
        
        var msg;
        var paymentMode = $("#PaymentMode").val();
             if ($("#PaymentMode").data("kendoDropDownList").value() == "" || $("#PaymentMode").data("kendoDropDownList").value() == null ||
            $("#PaymentMode").data("kendoDropDownList").value() == undefined)
        {
            $("#validation-summary").removeClass("validation-summary-valid");
            $("#validation-summary").addClass("validation-summary-errors");
            msg = "@Resource["PaymentModefieldisRequired"] <br/>";
            $("#validation-summary").html(msg);
            e.preventDefault();
            return false;
        }
             //if ($("#PaymentModeCode").val() == "BANK_TRANSFER")
             if ($("#PaymentMode").val() == '@PaymentModeEnum.BankTransfer')
            {
                var BankBranchId = $("#BankBranchId").data("kendoDropDownList").value();
                if (BankBranchId == "" || BankBranchId == null) {
                    $("#validation-summary").removeClass("validation-summary-valid");
               $("#valiModelation-summary").addClass("validation-summary-errors");
                    msg = "@Resource["BankBranchfieldisRequired"] <br/>";
                    $("#validation-summary").html(msg);
                    e.preventDefault();
                    return false;
                }

                if ($('#BankAccountNumber').val()== "")
                {
                    $("#validation-summary").removeClass("validation-summary-valid");
                    $("#validation-summary").addClass("validation-summary-errors");
                    msg = "@Resource["BankAccountNo.fieldisRequired"] <br/>";
                    $("#validation-summary").html(msg);
                    e.preventDefault();
                    return false;
                }

        }

        if ($('#IsEligibleForOT').is(':checked'))
        {
            var OTPaymentType = $("#OvertimePaymentType").val();
            if (OTPaymentType == "" || OTPaymentType == null) {
                $("#validation-summary").removeClass("validation-summary-valid");
                $("#validation-summary").addClass("validation-summary-errors");
                msg = "@Resource["OverTimePaymentTypefieldisRequired"] <br/>";
                $("#validation-summary").html(msg);
                e.preventDefault();
                return false;
            }
        }

    });
    });
    var filter = null;
    function ConvertOptions(data) {
        if (data != null) {
            if (data['filter'] != null && data['filter'] != undefined && data['filter'].filters != null && data['filter'].filters != undefined && data['filter'].filters.length > 0) {
                filter = data['filter'].filters[0].value;
                data['filters'] = data['filter'].filters[0].value;
            }
            return data;
        }
    }
    function convertValues(value) {

        var data = {};
        data["value"] = value;
        data["filters"] = filter;
        return data;
    }
    function OnSave() {
        
        $('#TakeAttendanceFromTAA').val($('#TAA').is(":checked"));
        $('#IsEmployeeEligibleForOvertime').val($('#ForOvertime').is(":checked"));
        $('#IsEmployeeEligibleForEndOfService').val($('#ForEndOfService').is(":checked"));
        $('#IsEmployeeEligibleForFlightTicketsForSelf').val($('#ForFlightTicketsForSelf').is(":checked"));
        $('#IsEmployeeEligibleForFlightTicketsForDependants').val($('#ForFlightTicketsForDependants').is(":checked"));
        $('#DisableFlightTicketProcessingInPayroll').val($('#ProcessingInPayroll').is(":checked"));
        $('#IsValidateDependentDocumentForBenefit').val($('#DependentDocumentForBenefit').is(":checked"));
        $('#IsEligibleForSalaryTransferLetter').val($('#ForSalaryTransferLetter').is(":checked"));
    }


    function Delete(id) {

        kendo.confirm("@SharedResource["Areyousurethatyouwanttoproceed?"]").then(function () {
             $.ajax({
                type: "POST",
                 url: "/pay/SalaryElementInfo/Delete?id=" + id ,

                success: function (data) {
                    kendo.alert("@SharedResource["DeletedSuccessfully"]");
                    $("#kgrdSalaryElementInfo").data("kendoTreeList").dataSource.read();
               DataActionEnum},
                dataType: "json",
            });
        }, function () {

        });



    }

    function OnCancel(e) {

        win = GetMainWindow();
        win.CloseWindow({ MethodName: "OnAfterNoteCreate" });
    }
    function Next() {
        var rs = $("#RequestSource").val();

        if (rs == "WorkStructure") {
            var layout = $("#LayoutMode").val();
            var person = $("#PersonId").val();
            window.location.href = "/admin/user/create?empId=" + person + "&rs=" + rs + "&layoutMode=" + layout;
        }
        else {
            window.location.href = "/pay/SalaryInfo";
        }
        return true;
    }

    function ShowErrors(err) {
        $(".hr-v-summary").removeClass("validation-summary-valid");
        $(".hr-v-summary").addClass("validation-summary-errors");
        var msg = ExtractError(err);
        $(".hr-v-summary ul").html(msg);
    }

      function Close(dorefresh, mode) {
          var win = GetMainWindow();
        win.CloseWindow();
        return false;

        if (dorefresh) {

            if (mode == "Create") {
                $("#kgrdSalaryElementInfo").data("kendoTreeList").dataSource.read();
                @*ShowNotification('@ERP.Translation.Message.InsertSuccess');*@
            }
            else if (mode == "Correct") {
                $("#kgrdSalaryElementInfo").data("kendoTreeList").dataSource.read();
                @*ShowNotification('@ERP.Translation.Message.CorrectionSuccess');*@
            }
             else if (mode == "Update") {
                $("#kgrdSalaryElementInfo").data("kendoTreeList").dataSource.read();
                @*ShowNotification('@ERP.Translation.Message.UpdateSuccess');*@
            }
        }
    }

    function OnEdit(source, id) {
      OnManage(source, id)
    }
    function OnManage(source, id) {
        //alert('@ViewBag.Layout');
        var url = "/pay/SalaryElementInfo/" + source + "?SalaryInfoId=@Model.Id" + (id == null ? "" : "&id=" + id);
        //window.location.href = url;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: "@Html.Raw(Resource["ManageSalaryElementInfo"])", Width: 1200, Height: 500 });
        return false;

    }
    function Calculate() {
        var total = $("#TotalSalary").val();
        if (total != null) {
            $.ajax({
                type: "POST",
                url: "/pay/SalaryElementInfo/CalculateSalaryElement?personId=@Model.PersonId&salaryInfoId=@Model.Id&total="+total,

                success: function (data) {
                    $("#kgrdSalaryElementInfo").data("kendoTreeList").dataSource.read();
                },
                dataType: "json",
            });
        }
        else {

            kendo.alert("@Resource["PleaseEntertheTotalvalue"]");
        }
    }

     var onAjaxSuccess = function (res) {
         if (res.success) {
             
           // win = GetMainWindow();
           // win.CloseWindow({ MethodName: "OnAfterNoteCreate" });
            // document.getElementById("btnSubmit2").disabled = true;
            ShowNotification("@SharedResource["SavedSuccessfully"]", "success");
             id = res.note.Item.UdfNoteTableId;
             Noteid = res.note.Item.NoteId;
           //  alert(id);
          //   url = "/pay/SalaryInfo/Create?salaryInfoId=" + id;
          //   LoadPartailView(url, $('#salaryinfo'));
             $("#DataAction").val('@DataActionEnum.Edit');
             $("#Id").val(id);
             $("#NoteId").val(Noteid);
            $("#salaryinfoelement").show();
            // $("#kgrdSalaryElementInfogrid").data("kendoGrid").dataSource.read({ ParentNoteId: id });
             OnAfterNoteCreate();
             
             window.parent.GetSalData();
             @*if ('@ViewBag.Layout' != '') {
                 var win = GetMainWindow();
                 win.CloseWindow({ MethodName:"OnPayrollUpdate"});
                 //window.parent.$("#kgrdSalaryInfo").data("kendoGrid").dataSource.read();
             }*@

         }
        else {
             $(".text-danger").removeClass("validation-summary-valid");
             $(".text-danger").addClass("validation-summary-errors");
             $(".text-danger").html(res.error);
             HideLoader($('#update'));
        }

    };

    function OnDelete(NoteId) {
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        kendo.confirm("@SharedResource["Areyousurethatyouwanttoproceed?"]").then(function () {
            $.ajax({
                type: "POST",
                url: "/pay/SalaryInfo/DeleteSalaryElement?noteId=" + NoteId,

                success: function (data) {
                    kendo.alert("@SharedResource["DeletedSuccessfully"]");
                    //$("#kgrdSalaryElementInfogrid").data("kendoGrid").dataSource.read({ ParentNoteId: Noteid });
                    OnAfterNoteCreate();
                },
                dataType: "json",
            });
        }, function () {

        });



    }
    function OnCreateSalaryElementInfo() {
        var win = GetMainWindow();

        win.iframeOpenUrl = "/pay/SalaryInfo/CreateSalaryElement?salaryInfoId=" + Noteid;
        win.OpenWindow({ Title: '@Html.Raw(Resource["CreateSalaryElementInfo"])', Width: 1000, Height: 700 });
        return false;
    }
    function onEditElementSalaryInfo(NoteInfoId, id) {
        // var prms=enco
        //e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //alert(dataItem.NoteId);
        //alert(NoteInfoId);
        var win = GetMainWindow();
        var portalId = $('#GlobalPortalId').val();

        win.iframeOpenUrl = "/pay/SalaryInfo/CreateSalaryElement?noteId=" + NoteInfoId + "&salaryInfoId=" + Noteid +"&salaryElementId="+id;
        win.OpenWindow({ Title: '@Html.Raw(Resource["EditSalaryElementInfo"])', Width: 1000, Height: 700 });
    }


    function OnAfterNoteCreate() {

       // $("#kgrdSalaryElementInfogrid").data("kendoGrid").dataSource.read({ ParentNoteId: Noteid});
        //  window.parent.getSalaryInfoElement();
        @*if (parentnoteId == undefined || parentnoteId == "" || parentnoteId == null) {
            parentnoteId = '@Model.NoteId';
        }*@
        getSalaryInfoElement(Noteid);
    }
</script>
<div id="salaryinfo">
    <div class="row-12">
        <form asp-area="Pay" asp-controller="SalaryInfo" asp-action="ManageSalaryInfo" class="form-horizontal"
              data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
              data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
              data-ajax="true" data-ajax-method="POST">
            <div id="validation-summary" class="text-danger" asp-validation-summary="All"></div>

            <div id="appWrapper5">
                <div id="loading1"></div>
                @*<div class="formHeader">
                    <h4>Salary Info</h4>
                </div>*@

                <div class="row no-gutter hr-pad-top-15">

                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col-lg-3 label-div">
                            <span class="required">*</span>
                            @Resource["Person"]
                        </div>
                        <div class="col-lg-9">
                            @if (Model.PersonId.IsNotNullAndNotEmpty())
                            {
                                @*@(Html.Kendo().DropDownListFor(model => model.PersonId)
                                .AutoBind(true)
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("GetPersonList", "HRDirect",new { @area= "CHR" });
                                    });
                                })
                                .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                                .DataTextField("Name")
                                .DataValueField("Id")
                                .Filter(FilterType.Contains)
                                .HtmlAttributes(new { @class = "form-control k-state-disabled" })
                        )*@
                                <input asp-for="PersonId" id="PersonId" class="form-control k-state-disabled" />

                            }

                            else
                            {
                                @*@(Html.Kendo().DropDownListFor(model => model.PersonId)
                                .AutoBind(true)
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("GetPersonList", "HRDirect",new { @area= "CHR" });
                                    });
                                })
                                .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                                .DataTextField("Name")
                                .DataValueField("Id")
                                .Filter(FilterType.Contains)
                                .HtmlAttributes(new { @class = "form-control " })
                        )*@
                                <input asp-for="PersonId" id="PersonId" class="form-control" />

                            }

                        </div>
                    </div>

                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col-lg-3 label-div">
                            <span class="required">*</span>
                            @Resource["PayGroup"]
                            @*@Html.LabelFor(m => m.PayGroupId, new { @class = "control-label" })*@
                        </div>
                        <div class="col-lg-9">
                            @*@(Html.Kendo().DropDownListFor(x => x.PayGroupId)
                    .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("GetPayGroupList", "PayrollBatch", new { area = "Pay" });
                        });
                    })
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .Filter(FilterType.Contains)
                    .AutoBind(true)
                    //.Events(e => e.Change("OnChange"))
                    .HtmlAttributes(new { @class = "form-control" }))*@

                            <input asp-for="PayGroupId" id="PayGroupId" class="form-control" />

                        </div>
                    </div>
                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col-lg-3 label-div">
                            <span class="required">*</span>
                            @Resource["PayCalendar"]
                            @*@Html.LabelFor(m => m.PayCalendarId, new { @class = "control-label" })*@
                        </div>
                        <div class="col-lg-9">
                            @*@(Html.Kendo().DropDownListFor(x => x.PayCalendarId)
                    .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("GetPayCalenderList", "PayrollBatch", new { area = "Pay" });
                        });
                    })
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .Filter(FilterType.Contains)
                    .AutoBind(true)
                    .Events(e => e.Change("OnCalendarChange"))
                    .HtmlAttributes(new { @class = "form-control" }))*@
                            @*<a href="#" onclick="return OnClickCalendar()">View Calendar</a>*@

                            <input asp-for="PayCalendarId" id="PayCalendarId" class="form-control" />

                        </div>
                    </div>
                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col">
                            @*@Html.Kendo().CheckBoxFor(m => m.TakeAttendanceFromTAA).Label("").HtmlAttributes(new { @class = "form-control" })*@
                            <input type="checkbox" id="TAA" />
                            <span>&nbsp;@Resource["Take Attendance From TAA"]</span>
                        </div>
                        @*<div class="col-lg-9 label-div">
                            @Resource["TakeAttendanceFromTAA"]
                        </div>*@
                    </div>
                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col">
                            @*@Html.Kendo().CheckBoxFor(m => m.IsEmployeeEligibleForOvertime).Label("").HtmlAttributes(new { @class = "form-control" })*@
                            <input type="checkbox" id="ForOvertime" />
                            <span>&nbsp;@Resource["IsEmployeeEligibleForOvertime"]</span>
                        </div>
                        @*<div class="col-lg-9 label-div">
                            @Resource["IsEmployeeEligibleForOvertime"]
                        </div>*@
                    </div>
                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col">
                            @*@Html.Kendo().CheckBoxFor(m => m.IsEmployeeEligibleForEndOfService).Label("").HtmlAttributes(new { @class = "form-control" })*@
                            <input type="checkbox" id="ForEndOfService" />
                            <span>&nbsp;@Resource["IsEmployeeEligibleForEndOfService"]</span>
                        </div>
                        @*<div class="col-lg-9 label-div">
                            @Resource["IsEmployeeEligibleForEndOfService"]
                        </div>*@
                    </div>
                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col">
                            @*@Html.Kendo().CheckBoxFor(m => m.IsEmployeeEligibleForFlightTicketsForSelf).Label("").HtmlAttributes(new { @class = "form-control" })*@
                            <input type="checkbox" id="ForFlightTicketsForSelf" />
                            <span>&nbsp;@Resource["IsEmployeeEligibleForFlightTicketsForSelf"]</span>
                        </div>
                        @*<div class="col-lg-9 label-div">
                            @Resource["IsEmployeeEligibleForFlightTicketsForSelf"]
                        </div>*@
                    </div>
                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col">
                            @*@Html.Kendo().CheckBoxFor(m => m.IsEmployeeEligibleForFlightTicketsForDependants).Label("").HtmlAttributes(new { @class = "form-control" })*@
                            <input type="checkbox" id="ForFlightTicketsForDependants" />
                            <span>&nbsp;@Resource["IsEmployeeEligibleForFlightTicketsForDependants"]</span>
                        </div>
                        @*<div class="col-lg-9 label-div">
                            @Resource["IsEmployeeEligibleForFlightTicketsForDependants"]
                        </div>*@
                    </div>

                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col-lg-3 label-div">
                            @Resource["FlightTicketFrequency"]
                        </div>
                        <div class="col-lg-9">
                            @*@(Html.Kendo().DropDownListFor(x=>x.FlightTicketFrequency)
                    .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .DataSource(source =>
                    {
                    source.Read(read =>
                    {
                        read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "FlightTicketFrequentEnum" });
                    });
                    })

                    .Filter(FilterType.Contains)
                    .Value(Model.FlightTicketFrequency.ToString())
                    .HtmlAttributes(new { @class = "form-control" })
                    )*@

                            <input asp-for="FlightTicketFrequency" id="FlightTicketFrequency" class="form-control" />

                        </div>
                    </div>
                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col">
                            @*@Html.Kendo().CheckBoxFor(m => m.DisableFlightTicketProcessingInPayroll).Label("").HtmlAttributes(new { @class = "form-control" })*@
                            <input type="checkbox" id="ProcessingInPayroll" />
                            <span>&nbsp;@Resource["DisableFlightTicketProcessingInPayroll"]</span>
                        </div>
                        @*<div class="col-lg-9 label-div">
                            @Resource["DisableFlightTicketProcessingInPayroll"]
                        </div>*@
                    </div>
                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col">
                            @*@Html.Kendo().CheckBoxFor(m => m.IsValidateDependentDocumentForBenefit).Label("").HtmlAttributes(new { @class = "form-control" })*@
                            <input type="checkbox" id="DependentDocumentForBenefit" />
                            <span>&nbsp;@Resource["IsValidateDependentDocumentForBenefit"]</span>
                        </div>
                        @*<div class="col-lg-9 label-div">
                            @Resource["IsValidateDependentDocumentForBenefit"]
                        </div>*@
                    </div>
                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col">                            
                                @*@Html.Kendo().CheckBoxFor(m => m.IsEligibleForSalaryTransferLetter).Label("").HtmlAttributes(new { @class = "form-control " })*@
                                <input type="checkbox" id="ForSalaryTransferLetter" />  
                                <span>&nbsp;@Resource["IsEligibleForSalaryTransferLetter"]</span>
                        </div>
                        @*<div class="col-lg-9 label-div">
                            @Resource["IsEligibleForSalaryTransferLetter"]
                        </div>*@
                    </div>
                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col-lg-3 label-div">
                            @*<span class="required">*</span>*@
                            @Resource["OvertimePaymentType"]
                        </div>
                        <div class="col-lg-9">
                            @*@(Html.Kendo().DropDownListFor(x=>x.OvertimePaymentType)
                    .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .DataSource(source =>
                    {
                    source.Read(read =>
                    {
                        read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "OTPaymentTypeEnum" });
                    });
                    })
                    .Filter(FilterType.Contains)
                    .Value(Model.OvertimePaymentType.ToString())
                    .HtmlAttributes(new { @class = "form-control" })
                    )*@

                            <input asp-for="OvertimePaymentType" id="OvertimePaymentType" class="form-control" />

                        </div>
                    </div>
                    <div class="form-group col-xs-12 col-sm-6">
                        <div class="col-lg-3 label-div">
                            <span class="required">*</span>
                            @Resource["PaymentMode"]
                        </div>
                        <div class="col-lg-9">
                            @*@(Html.Kendo().DropDownListFor(x=>x.PaymentMode)
                    .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                    .DataTextField("Name")
                    .DataValueField("Id")
                    .DataSource(source =>
                    {
                    source.Read(read =>
                    {
                        read.Action("GetEnumIdNameList", "Home", new { @area = "", enumType = "PaymentModeEnum" });
                    });
                    })
                    .Events(x => x.Change("PaymentModeChange"))
                    .Filter(FilterType.Contains)
                    .Value(Model.PaymentMode.ToString())
                    .HtmlAttributes(new { @class = "form-control" })
                    )*@

                            <input asp-for="PaymentMode" id="PaymentMode" class="form-control" />

                        </div>
                    </div>
                    <div id="bank" style="display:none;" class="row form-group col-xs-12 col-sm-12">
                        <div class="form-group col-xs-12 col-sm-6">
                            <div class="col-lg-3 label-div">
                                @*<span class="required">*</span>*@
                                @Resource["BankBranch"]
                            </div>
                            <div class="col-lg-9">
                                @*@(Html.Kendo().DropDownListFor(model => model.BankBranchId)
                                    .AutoBind(true)
                                    .DataSource(source =>
                                    {
                                        source.Read(read =>
                                        {
                                            read.Action("GetPayBankBranchList", "PayrollBatch",new { area="Pay"});
                                        });
                                    })
                                .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                                // .Events(e => e.DataBound("OnSponsorDataBound"))
                                .DataTextField("Name")
                                .DataValueField("Id")
                                .Filter(FilterType.Contains)
                                .HtmlAttributes(new { @class = "form-control" })
                        )*@
                                <input asp-for="BankBranchId" id="BankBranchId" class="form-control" />

                            </div>
                        </div>
                        <div class="form-group col-xs-12 col-sm-6">
                            <div class="col-lg-3 label-div">
                                @*<span class="required">*</span>*@
                                @Resource["BankAccountNumber"]
                            </div>
                            <div class="col-lg-9">
                                @*@Html.Kendo().TextBoxFor(m => m.BankAccountNumber).HtmlAttributes(new { @class = "form-control" })*@
                                <input asp-for="BankAccountNumber" type="text" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group col-xs-12 col-sm-6">
                            <div class="col-lg-9 label-div">
                                @*<span class="required">*</span>*@
                                @Resource["BankIbanNumber"]
                            </div>
                            <div class="col-lg-9">
                                @*@Html.Kendo().TextBoxFor(m => m.BankIBanNumber).HtmlAttributes(new { @class = "form-control " })*@
                                <input asp-for="BankIBanNumber" type="text" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group  col-sm-12 col-lg-6">
                            <div class="col-lg-9 label-div">
                                @*<span class="required">*</span>*@
                                @Resource["UnpaidLeavesNotInSystem"]
                            </div>
                            <div class="col-lg-9">
                                @*@Html.DisplayFor(m => m.Organization, new { @class = "display-label" })*@
                                @*@Html.Kendo().TextBoxFor(m => m.UnpaidLeavesNotInSystem).HtmlAttributes(new { @class = "form-control " })*@
                                <input asp-for="UnpaidLeavesNotInSystem" type="text" class="form-control" />
                            </div>
                        </div>
                    </div>
                    @*<div class="form-group  col-sm-12 col-lg-6" style="display:none">
                <div class="col-lg-3 label-div">
                    <span class="required">*</span>
                    @Html.LabelFor(m => m.EffectiveStartDate, new { @class = "control-label" })
                </div>
                <div class="col-lg-9">
                    @Html.Kendo().DatePickerFor(m => m.EffectiveStartDate).HtmlAttributes(new { @class = "form-control hr-small" })
                </div>
            </div>
            <div class="form-group  col-sm-12 col-lg-6" style="display:none">
                <div class="col-lg-3 label-div">
                    <span class="required">*</span>
                    @Html.LabelFor(m => m.EffectiveEndDate, new { @class = "control-label" })
                </div>
                <div class="col-lg-9">

                    @Html.Kendo().DatePickerFor(m => m.EffectiveEndDate).HtmlAttributes(new { @class = "form-control hr-small" })
                </div>
            </div>*@
                    @*<div class="form-group col-xs-12 col-sm-6" style="display:none">
                <div class="col-lg-3 label-div">
                    <span class="required">*</span>
                    @Html.LabelFor(m => m.Status, new { @class = "control-label" })
                </div>
                <div class="col-lg-9">
                    @(Html.Kendo().DropDownList()
                    .Name("Status")
                    .DataTextField("Text")
                    .DataValueField("Value")
                    .OptionLabel(ApplicationConstant.PlaceHolder_SelectOption)
                    .Filter(FilterType.Contains)
                    .HtmlAttributes(new { @class = "hr-xx-large" })
                    .BindTo(EnumExtension.SelectListFor(typeof(StatusEnum), Model.Status)))
                </div>
            </div>*@


                </div>
                @Html.HiddenFor(x => x.DataAction)
                @Html.HiddenFor(x => x.Id)
                @Html.HiddenFor(x => x.NoteId)
                @Html.HiddenFor(x => x.AirTicketInterval)
                @Html.HiddenFor(x => x.Json)
                @Html.HiddenFor(x => x.DataJson)
                @Html.HiddenFor(x => x.CompanyId)
                @Html.HiddenFor(x => x.CreatedBy)
                @Html.HiddenFor(x => x.CreatedDate)
                @Html.HiddenFor(x => x.LastUpdatedBy)
                @Html.HiddenFor(x => x.LastUpdatedDate)
                @Html.HiddenFor(x => x.PaymentModeCode)
                @Html.HiddenFor(x => x.TakeAttendanceFromTAA)
                @Html.HiddenFor(x => x.IsEmployeeEligibleForOvertime)
                @Html.HiddenFor(x => x.IsEmployeeEligibleForEndOfService)
                @Html.HiddenFor(x => x.IsEmployeeEligibleForFlightTicketsForSelf)
                @Html.HiddenFor(x => x.IsEmployeeEligibleForFlightTicketsForDependants)
                @Html.HiddenFor(x => x.DisableFlightTicketProcessingInPayroll)
                @Html.HiddenFor(x => x.IsValidateDependentDocumentForBenefit)
                @Html.HiddenFor(x => x.IsEligibleForSalaryTransferLetter)
                                
                @if (Model.Id.IsNotNullAndNotEmpty())
                {

                    <div class="row" id="total" style="display:none">

                        <div class="col-md-1">
                            @Resource["TotalSalary"]
                        </div>
                        <div class="col-md-1">
                            @*@Html.Kendo().NumericTextBoxFor(m => m.TotalSalary).HtmlAttributes(new { @class = "form-control " })*@
                        </div>
                        <div class="col-md-2">
                            <a class="k-button k-button-icontext" href="#" id="btnCalc" onclick="return Calculate();">
                                @Resource["CalculateSalaryElement"]
                            </a>
                        </div>

                    </div>
                <br />

                }

            </div>

            <br />

            <div class="row no-gutter">
                <div class="form-group col-xs-12 col-sm-6">
                    <div class="col-lg-3 label-div">
                        * @SharedResource["RequiredFields"]
                    </div>
                    <div class="col-lg-9">
                        &nbsp;
                    </div>
                </div>
                <div class="form-group col-xs-12 col-sm-6">
                    <div class="col-lg-3 label-div">
                        &nbsp;
                    </div>
                    <div class="col-lg-9" style="text-align:right">

                        @*@Html.Kendo().Button().Name("btnCancel2").Content(@SharedResource["Cancel"]).Icon("cancel").Events(x => x.Click("OnCancel")).HtmlAttributes(new { @type = "button" })*@
                        <button type="button" class='btn btn-light' id="btnCancel2" onclick="OnCancel();">@SharedResource["Cancel"]</button>
                        <input type="submit" value="@SharedResource["Submit"]" class="btn btn-primary" id="btnSubmit2" onclick="OnSave();"/>

                    </div>
                </div>
            </div>
        </form>
    </div>
    <hr />

    <div class="row-12" id="salaryinfoelement">
        <div class="col-md-12">@Resource["SalaryInfoElement"]</div>
        <div class="col-12">
            <button type='button' class='btn btn-primary' onclick='OnCreateSalaryElementInfo();'><i class='fa fas fa-plus'></i>&nbsp;Create</button>
            <br /><br />
            <div id="myGridSalaryInfoElement" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        </div>
        @*<div class="col-md-12">
                @(Html.Kendo().Grid<SalaryElementInfoViewModel>
        ().Name("kgrdSalaryElementInfogrid").HtmlAttributes(new { @class = "kgrdSalaryInfoStyle" })
        .Columns(col =>
        {
            col.Command(command =>
            {
                command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("onEditElementSalaryInfo").HtmlAttributes(new { @class = "action-icon", @title = @SharedResource["Edit"] });
                command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon action-delete", title = @SharedResource["Delete"] });
            }).Title(@SharedResource["Action"]).Width(120);
            col.Bound(c => c.ElementName).Title(@Resource["ElementName"]).Width(150);
            col.Bound(c => c.Amount).Title(@Resource["Amount"]).Width(120);
            col.Bound(c => c.EffectiveStartDate).Title(@Resource["EffectiveStartDate"]).ClientTemplate("#= kendo.toString(kendo.parseDate(EffectiveStartDate, 'yyyy-MM-dd'), 'dd MMM yyyy') #").Width(200);
            col.Bound(c => c.EffectiveEndDate).Title(@Resource["EffectiveEndDate"]).ClientTemplate("#= kendo.toString(kendo.parseDate(EffectiveEndDate, 'yyyy-MM-dd'), 'dd MMM yyyy') #").Width(200);

        })
        .ToolBar(toolbar =>
        {
            toolbar.Custom().Text(@SharedResource["Create"]).Name("btnAdd").IconClass("fa fas fa-plus").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreateSalaryElementInfo();" });
        })
        .Scrollable(x => x.Enabled(true))

        .Sortable(srt => srt.Enabled(true))
        .Selectable(select => select.Enabled(false))
        .Filterable(f => f.Extra(false)
        .Operators(o => o.ForString(s => s.Clear()
        .Contains("Contains")
        .IsEqualTo("Is equal to")
        )))
          .Resizable(resize => resize.Columns(true))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .AutoBind(true)
        .DataSource(
        dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Read(read => read.Action("ReadSalaryElementInfoData", "SalaryInfo", new { Area="Pay", ParentNoteId=Model.NoteId }))
        .Model(model => model.Id(p => p.Id)))
        )
            </div>*@
    </div>
</div>
<Script>
  var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(StatusEnum)))';
    var statusObj = JSON.parse(status);

    var columnDefs = [
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuSalaryInfoElement' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid= '" + params.data.NoteId + "' ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
        { field: "ElementName"},
        { field: "Amount" },
        {
            field: "EffectiveStartDate",
            cellRenderer: params => {

                var date = new Date(params.value);
                return date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
            }
        },
        {
            field: "EffectiveEndDate",
            cellRenderer: params => {

                var date = new Date(params.value);
                return date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
            }
        }
    ];


            $(function () {

                getSalaryInfoElement('@Model.NoteId');
                $.contextMenu({
                    selector: '#tree-menuSalaryInfoElement',
                    trigger: 'left',
                    build: function ($trigger, e) {

                        var id = $trigger.data('idvalue');
                        var NoteInfoId = $trigger.data('noteid');

                        //var portalName = $trigger.data('portal-name');

                        switch (0) {
                            case 0:
                                return {
                                    callback: function (key, options) {
                                        switch (key) {
                                            case 'edit':
                                                onEditElementSalaryInfo(NoteInfoId,id);
                                                break;

                                            case 'delete':
                                                OnDelete(NoteInfoId);
                                                break;

                                            default:
                                        }
                                    },
                                    items: {
                                        "edit": { name: "Edit", icon: "fas fa-edit" },
                                        "delete": { name: "Delete", icon: "fas fa-trash" },
                                    }
                                };

                        }
                    }
                });

            });

    function getSalaryInfoElement(parentnoteId) {
        document.getElementById("myGridSalaryInfoElement").innerHTML = "";
        //var templateId = $("#TemplateId").val();
        //var projectNo = $("#ProjectNo").val();
        //var noteNo = $("#NoteNo").val();
        //var docDescription = $("#DocumentName").val();

        gridConfig(
            "myGridSalaryInfoElement",
            @*"@Url.Action("ReadSalaryElementInfoData", "SalaryInfo", new { Area = "Pay", ParentNoteId = Model.NoteId })",*@
            '@Url.Action("ReadSalaryElementInfoData", "SalaryInfo", new { @area = "Pay" })?ParentNoteId=' + parentnoteId,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</Script>