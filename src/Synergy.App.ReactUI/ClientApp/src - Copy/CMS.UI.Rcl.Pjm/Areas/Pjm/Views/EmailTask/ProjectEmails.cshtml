@inject IStringLocalizer<CMS.UI.Web.Areas.PJM.Controllers.EmailTaskController> Resource
@using Kendo.Mvc.UI;
@using CMS.UI.ViewModel;
@using CMS.Common;
@inject CMS.Common.IUserContext _userContext
@{
    ViewBag.Title = @Resource["EmailTaskList"];
    Layout = null;
}

<script id="select-email" type="text/x-kendo-template">

@*@(Html.Kendo().RadioButton().Name("select-task").Checked(false).Label("Link")
.HtmlAttributes(new { onchange = "OnCheckBox(\"#=TaskId#\")" })
)*@
    <section class="section-preview">
    <div class="custom-control custom-radio custom-control-inline">
         <input type="radio" class="custom-control-input" id="select-task" name="select-task" onchange="OnCheckBox('#=TaskId#');">
         <label class="custom-control-label" for="select-task">Link</label>
    </div>
    </section>
</script>
<script>
    function OnRequestStart_TopLinePriceGrid(e) {
        if (e.type === "update") {
            showLoader();
        }
    }
    function OnRequestEnd_TopLinePriceGrid(e) {
        if (e.type === "update") {
            hideLoader();
            var grid = $('#treelist').data('kendoTreeList');
            grid.dataSource.read();
        }
    }

    function dragEndEmail(e) {
        var sid = e.source.Id;
        var did = e.destination.Id;
        $.ajax({
            type: "POST",
            url: "/pmt/pmthome/ChangeEmailTaskParent?sourceId=" + sid + "&destinationId=" + did,
            success: function (data) {
                ShowNotification("@Resource["EmailParentChangedSuccessfully"]");
                $("#treelist1").data("kendoTreeList").dataSource.read();
            },
            dataType: "json",
        });
    }

    var selectedEmail = "";
    function OnCheckBox(id) {
        selectedEmail = id;


          var url = "/pjm/EmailTask/ViewProjectWithWBSItem?id=" + id;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
       win.OpenWindow({ Title: '@Html.Raw(SharedResource["WBSItem"])', Width: 1400, Height: 1200 });
        return false;
    }

    function CloseWBSSelect(sid, parentId, type) {


        var win = GetMainWindow();
        win.CloseWindow();
        return false;
        var tid = selectedEmail;//$("#select-task").data("kendoRadioButton").value();
        $.ajax({
            type: "POST",
            url: "/pjm/emailTask/ManageEmailTask?id=" + tid + "&taskId=" + sid + "&parentId=" + parentId + "&type=" + type,
            success: function (data) {
                if (data.success) {
                    ShowNotification("@SharedResource["Email"] " + type + " @Resource["LinkedSuccessfully"]");
                    $("#treelist1").data("kendoTreeList").dataSource.read();
                }
                else {
                    ShowNotification("@SharedResource["Email"] " + type + " @Resource["LinkedFailed"]!");
                }
            },
            dataType: "json",
        });
    }

    function AddTask(messageid, subject, fromid, description) {

        // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
       // var id = $("#" + subject);
       // var bd=id.attr("data-Body");
       // alert(subject);
        var portalId = $('#GlobalPortalId').val();
        var prms = encodeURIComponent('subject=' + subject + '&ownerUserId=' + fromid + '&assignedToUserId=' + '@_userContext.UserId');
       // var prms = encodeURIComponent('subject=' + dataItem.Subject + '&description=' + dataItem.Body + '&assignedToUserId=' + '@_userContext.UserId');
        var udfs = encodeURIComponent('MessageId=' + messageid);
        var url = '/Cms/Page?lo=Popup&cbm=OnAfterTaskCreate&source=Create&dataAction=Create&templateCodes=EMAIL_TASK&portalId=' + portalId + '&prms=' + prms + '&udfs=' + udfs;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: '@Html.Raw(SharedResource["CreateTask"])', Width: 1200, Height: 600 });
        return false;
    }
    function OnAfterTaskCreate(service) {
        //$("#kgdProjectGridView").data('kendoGrid').dataSource.read({ id: "INBOX" });
        var url = "/PJM/EmailTask/ReadProjectEmail?id=INBOX";
        GetProjectEmail(url);
    }
    function ViewTask(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var portalId = $('#GlobalPortalId').val();
        var url = '/Cms/Page?lo=Popup&cbm=OnAfterTaskCreate&source=View&dataAction=View&templateCodes=EMAIL_TASK&portalId=' + portalId + '&recordId=' + dataItem.TaskId;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: '@Html.Raw(SharedResource["ViewTask"])', Width: 1200, Height: 600 });
        return false;
    }
      function onEmail(taskId)
    {

          url = '@Url.Action("NtsEmail", "Cms", new { @area = "" })?refId=' + taskId + '&refType=@ReferenceTypeEnum.NTS_Task';
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
          win.OpenWindow({ Title: '@Html.Raw(SharedResource["Email"])', Width: 1200, Height: 600 });
    }

    @*function getcompanyinbox() {
        $("#inboxTreeView").data('kendoTreeView').dataSource.read({ config: "company"});
        $("#kgdProjectGridView").data('kendoGridView').dataSource.read({ config: "company",id:'@ViewBag.Id'});
    }*@

    function OnServiceChange() {
        var projectid = $("#emailprojectddl").data("kendoDropDownList").value();
       // $("#inboxTreeView2").data('kendoTreeView').dataSource.read({ config: "project", projectid: projectid });
        //$("#kgdProjectGridView").data('kendoGrid').dataSource.read({ id: "INBOX", projectid: projectid });
        $('#inboxTreeView2').jstree(true).refresh();
        var url = "/PJM/EmailTask/ReadProjectEmail?id=INBOX&projectid=" + projectid;
        GetProjectEmail(url);
        $("#mails").show();
    }

    function OnSelect(/*e*/id) {
        //expandedObjlist = [];

        var proj = $("#emailprojectddl").val();
        //var data = this.dataItem(e.node);
        //$("#kgdProjectGridView").data('kendoGrid').dataSource.read({ id: data.id, projectid: proj });
       
        var url = "/PJM/EmailTask/ReadProjectEmail?id="+id+"&projectid=" + proj;
        GetProjectEmail(url);

    }
    function onDataBound(arg) {
        $("#kgdSelfGridView tbody tr").each(function () {
            var currentDataItem = $("#kgdSelfGridView").data("kendoGrid").dataItem($(this));
            var add = $(this).find(".k-grid-AddTask");
            var viewt = $(this).find(".k-grid-ViewTask");
            var viewe = $(this).find(".k-grid-ViewMail");

            //update.click(function () {
            //    OnEdit("Update", currentDataItem.Id);
            //});
            //correct.click(function () {
            //    OnEdit("Correct", currentDataItem.Id);
            //});
            //del.click(function () {
            //    OnEdit("Delete", currentDataItem.Id);EmailType=='INBOX' && TaskId!=''
            //});EmailType=='INBOX' && TaskId=='' && IsTaskCreated==false
            if (currentDataItem.EmailType == 'INBOX' && currentDataItem.TaskId == '' && currentDataItem.IsTaskCreated == false) {
                viewt.remove();
                viewe.remove();
            }
            else if (currentDataItem.EmailType == 'INBOX' && currentDataItem.TaskId != '') {
                add.remove();
            }
            else {
                add.remove();
                viewt.remove();
                viewe.remove();
            }


        });
    }

    function OnChange(e) {

        var a = document.getElementById("kgdSelfGridView_active_cell");
        var classname = a.className;
        if (classname.includes("k-command-cell")) {
            e.preventDefault();
            return false;
        }
        var selectedRows = this.select();
        var selectedDataItems = [];
        for (var i = 0; i < selectedRows.length; i++) {
            var dataItem = this.dataItem(selectedRows[i]);
            //  selectedDataItems.push(dataItem);
            // url = '@Url.Action("ViewEmail", "Cms", new { @area = ""})?subject=' + dataItem.Subject + '&body=' + dataItem.Body + '&to=' + dataItem.To + '&from=' + dataItem.From + '&cc=' + dataItem.Cc + '&bcc=' + dataItem.Bcc;
            var prms = encodeURIComponent('subject=' + dataItem.Subject + '&body=' + dataItem.Body + '&to=' + dataItem.To + '&from=' + dataItem.From + '&cc=' + dataItem.Cc + '&bcc=' + dataItem.Bcc);
            url = '@Url.Action("ViewEmail", "Cms", new { @area = ""})?prms=' + prms;
            var win = GetMainWindow();
            win.iframeOpenUrl = url;
            win.OpenWindow({ Title: '@Html.Raw(SharedResource["ViewEmail"])', Width: 1200, Height: 900 });

        }
    }

    $(document).ready(function () {
        $("#emailprojectddl").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "select project",
            change: OnServiceChange,
            dataSource:
            {
            transport:
                {
                read:
                    {
                        url: "/PJM/EmailTask/ReadProjectEmailSetups",
                    }
                }
            }
         });

        GetProjectEmail();

    });

     function GetProjectEmail(url) {
       
        var newUrl = "";
        if (url != "" && url != undefined) {
            newUrl = url;
        }
        else {
            newUrl = "/PJM/EmailTask/ReadProjectEmail";
        }
         document.getElementById("kgdProjectGridView").innerHTML = "";
        gridConfig(
            "kgdProjectGridView",
            newUrl,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    var columnDefs = [
                            {
                                field: "MessageId",
                                headerName: "@Resource["Action"]",
                                cellRenderer: params => {
                                    
                                        
                                            return "<section class='section-preview'>"+
                                                "<div class='custom-control custom-radio custom-control-inline'>"+
                                                " <input type='radio' class='custom-control-input' id='select-task' name='select-task' onchange='OnCheckBox(\"" + params.data.TaskId + "\");'>" +
                                                "<label class='custom-control-label' for='select-task'>Link</label>" +
                                                "</div>" +
                                                "</section>"
                                        
                                    
                               }
                            },
                            {
                                field: "To",
                                headerName: "@SharedResource["To"]",
                            },
                            {
                                field: "From",
                                headerName:"@SharedResource["From"]",width:200
                            },
                            {
                                field: "Subject",
                                headerName: "@SharedResource["Subject"]", width: 100,
                            },
                            {
                                field: "Bcc",
                                headerName: "@Resource["Bcc"]", width: 200,
                            },
                            {
                                field: "Cc",
                                headerName: "@Resource["Cc"]", width: 200,
                            },
                            {
                                field: "MessageId",
                                headerName: "@Resource["Action"]",
                                cellRenderer: params => {
                                    return "<div class='btn-group grid-menu' id='grid-menu-item' data-msgvalue=\"" + params.data.MessageId + "\" data-typevalue=\"" + params.data.EmailType + "\" data-taskvalue=\"" + params.data.TaskId + "\" data-sbjvalue=\"" + params.data.Subject + "\" data-fromvalue=\"" + params.data.FromUserId + "\"><i class='fas fa-ellipsis-v'></i></div>"
                               }
                            },
    ];

    $(function () {
        
        //grid context menu
        $.contextMenu({
            selector: '#grid-menu-item',
            trigger: 'left',
            build: function ($trigger, e) {
                debugger;
                console.log($trigger);
                var emailType = $trigger.data('typevalue');
                var taskId = $trigger.data('taskvalue');
                var status = (emailType == 'INBOX' && taskId != '') ? 0 : 1;
                var msgId = $trigger.data('msgvalue');
                var subj = $trigger.data('sbjvalue');
                var fromval = $trigger.data('fromvalue');

                switch (status) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'viewTask':
                                        ViewTask(taskId);
                                        break;
                                    case 'viewMail':
                                        onEmail(taskId);
                                        break;
                                    default:
                                }
                            },
                            items: {
                                "viewTask": { name: "View Task", icon: "fas fa-eye" },
                                "viewMail": { name: "View Mail", icon: "far fa-envelope-open-text" },
                            }
                        };
                    case 1:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'addTask':
                                        AddTask(msgId, subj, fromval);
                                        break;
                                    default:
                                }
                            },
                            items: {
                                "addTask": { name: "Add Task", icon: "fa-plus" },
                            }
                        };
                }
            }
        });

    });
</script>
<style>
    .employee-photo {
        display: inline-block;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background-size: 32px 35px;
        background-position: center center;
        vertical-align: middle;
        line-height: 32px;
        box-shadow: inset 0 0 1px #999, inset 0 0 10px rgba(0,0,0,.2);
        margin-left: 5px;
    }

    .employee-name {
        display: inline-block;
        vertical-align: middle;
        line-height: 32px;
        padding-left: 3px;
    }

    #mailfolders {
        border-right: solid;
        background-color: lightblue;
    }
</style>
<h4>@ViewBag.Title</h4>
<br />
<div class="row" style="padding-left:15px">
    @Resource["PleaseSelectProjecttoViewEmails"] &nbsp;&nbsp;
    @*@(Html.Kendo().DropDownList().Name("emailprojectddl")
        .DataTextField("Name")
        .DataValueField("Id").OptionLabel("select project")
        .Filter(FilterType.Contains)
        .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Action("ReadProjectEmailSetups", "EmailTask"/*, new { @area = "PJM" }*/);
            });
        })
        .Events(x => x.Change("OnServiceChange"))
        .HtmlAttributes(new { @class = "form-control" , @style="width:20%" })
        )*@
    <input id="emailprojectddl" class="form-control" style="width:20%" />
</div>
<div></div>
<div class="row" style="padding-left:15px;display:none" id="mails">
    <div class="col-2" id="mailfolders">
        <script>
            $('#inboxTreeView2')
                .on('changed.jstree', function (e, data) {
                    var i, j, r = [];
                    for (i = 0, j = data.selected.length; i < j; i++) {
                        debugger;
                        nodetext = data.instance.get_node(data.selected[i]).text;
                        //  Type = data.instance.get_node(data.selected[i]).original.Type;
                        Id = data.instance.get_node(data.selected[i]).original.id;
                        // ParentId = data.instance.get_node(data.selected[i]).original.ParentId;
                        OnSelect(Id);
                    }

                })
                .jstree({
                    'core': {
                        'data': function (node, cb) {
                            debugger;
                            if (node.id === "#") {
                                $.ajax({
                                    async: true,
                                    type: "GET",
                                    url: "/PJM/EmailTask/GetInboxTreeviewList?config=project&projectid=" + $("#emailprojectddl").val(),
                                    dataType: "json",
                                    success: function (json) {
                                        cb(json);
                                    },

                                    error: function (xhr, ajaxOptions, thrownError) {
                                        alert(xhr.status);
                                        alert(thrownError);
                                    }
                                });
                                //cb([{ "text": "Root", "id": "1", "children": true }]);
                            }
                            else {
                                $.ajax({
                                    async: true,
                                    type: "GET",
                                    url: "/PJM/EmailTask/GetInboxTreeviewList?id=" + node.id + "&config=project&projectid=" + $("#emailprojectddl").val(),
                                    dataType: "json",
                                    success: function (json) {
                                        cb(json);
                                    },

                                    error: function (xhr, ajaxOptions, thrownError) {
                                        alert(xhr.status);
                                        alert(thrownError);
                                    }
                                });
                            }
                        }
                    }
                });
        </script>
        <div id="inboxTreeView2" class="demo treeview"></div>
        @*@(Html.Kendo().TreeView()
        .Name("inboxTreeView2").HtmlAttributes( new {@class="treeview2"})
      .Events(e=>e.Select("OnSelect"))
        .DataTextField("Name")
        .TemplateId("ct-tv-template")
        .DataSource(dataSource => dataSource
            .Read(read => read
                .Action("GetInboxTreeviewList", "EmailTask",new { @area="PJM", config= "project" })
            )
        )
    )*@
    </div>
    <div class="col-10">
        <div id="kgdProjectGridView" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

        @*@(Html.Kendo().Grid<MessageEmailViewModel>()
    .Name("kgdProjectGridView")
    .Columns(columns =>
    {
        //        columns.Select().Width(75).HtmlAttributes(new { @class = "checkbox-align" }).HeaderHtmlAttributes(new { @class = "checkbox-align" });
        columns.Bound(p => p.MessageId).Title(@SharedResource["Action"]).ClientTemplateId("select-email").Width(100);
        columns.Bound(p => p.To).Title(@SharedResource["To"]).Width(300);
        columns.Bound(p => p.From).Title(@SharedResource["From"]).Width(250);
        columns.Bound(p => p.Subject).Title(@SharedResource["Subject"]).Width(250);
        columns.Bound(p => p.Body).Title(@SharedResource["Body"]).ClientTemplate("#if(Body!=null&&Body.length>30){# # var myContent =Body; #  # var dcontent = myContent.substring(0,30); # <span>#=kendo.toString(dcontent)#</span> #}else{# <span>#=Body#</span> #}#").Width(200);
        columns.Bound(p => p.Bcc).Title(@Resource["BCC"]).Width(200);
        columns.Bound(p => p.Cc).Title(@Resource["CC"]).Width(200);
        columns.Bound(p => p.MessageId).Title(@Resource["MessageId"]).Visible(false).Width(200);
        // columns.Bound(p => p.MessageId).ClientTemplate("#if(EmailType=='INBOX' && TaskId=='' && IsTaskCreated==false){#<i class='fa fa-plus' title='AddTask' data-Body='#:Body#' id='#:Subject#' onclick='AddTask(\"#:MessageId#\",\"#:Subject#\",\"#:FromUserId#\");'></i> #} else if(EmailType=='INBOX' && TaskId!='' ){#<i class='fa fas fa-eye' title='ViewTask' onclick='ViewTask(\"#:TaskId#\")'></i>&nbsp;&nbsp;  <i class='far fa-envelope-open-text' onclick='onEmail(\"#:TaskId#\")'></i> #}#").Title(" ").Width(100).Sortable(false);
        columns.Command(command =>
        {
            command.Custom("AddTask").Text("<i class='fa fa-plus' title='AddTask'></i>").Click("AddTask").HtmlAttributes(new { @class = "action-icon" });
            command.Custom("ViewTask").Text("<i class='fa fas fa-eye' title='ViewTask'></i>").Click("ViewTask").HtmlAttributes(new { @class = "action-icon" });
            command.Custom("ViewMail").Text("<i class='far fa-envelope-open-text' title='ViewMail'></i>").Click("onEmail").HtmlAttributes(new { @class = "action-icon" });

        }).Width(150).Exportable(false).Title(" ");
    })
    .ToolBar(toolbar =>
    {

        toolbar.Search().Text(@SharedResource["Search"]);
    }).Selectable(s => s.Mode(GridSelectionMode.Single)).PersistSelection(true)
    .ColumnMenu(col=>col.Filterable(false))
    .Height(700)
    .Editable()
    .Pageable(pageable => pageable
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5))
    .Sortable()
    .Navigatable()
    .Resizable(r=>r.Columns(true))
    .Reorderable(r => r.Columns(true))
    .Groupable(g=>g.ShowFooter(false))
    .Filterable()
    .Scrollable()
     .Events(events => events.DataBound("onDataBound").Change("OnChange"))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .PageSize(20)
        .AutoSync(true)
        .ServerOperation(false)
        //.Events(events => events.Error("error_handler"))
        .Model(model =>
        {
            model.Id(p => p.To);

        })
        .Read(read=>
        read.Action("ReadProjectEmail", "EmailTask", new { @area = "PJM"})
        )


    )
)*@
    </div>
</div>




