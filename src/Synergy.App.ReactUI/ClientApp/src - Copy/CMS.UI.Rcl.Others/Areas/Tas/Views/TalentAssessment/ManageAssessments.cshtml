@inject IStringLocalizer<CMS.UI.Web.Areas.Pay.Controllers.CalendarController> Resource
@using CMS.UI.ViewModel;
@using Kendo.Mvc.UI;
@using CMS.Common;
@using Kendo.Mvc.Extensions;
@{
    ViewData["Title"] = "Manage Assessments";
    //Layout = "/Areas/Cms/Views/Shared/_LayoutCms.cshtml";
    Layout = null;
}
<style>
</style>
<script type="text/javascript">


    function CreateAssessment(serId, assessmentid, userId, type, language, scheduledassessmentid) {
        ShowLoader($("#assessment"));
        //url: '/TAS/TalentAssessment/CreateAssessment?assessmentId=' + assessmentid + '&userId=' + userId + '&type=' + type + '&lang=' + language,
        $.ajax({
            url: '/TAS/TalentAssessment/CreateAssessment?assessmentId=' + assessmentid + '&userId=' + userId + '&type=' + type + '&lang=' + language + '&serviceId=' + serId + '&scheduledAssessmentId=' + scheduledassessmentid,
            type: 'POST',

            dataType: 'json',
            success: function (response) {

                if (response.success) {

                    ShowNotification("Assessment created successfully", "success");
                    getAssessmentsData();
                   // $("#kgrdAssessments").data("kendoGrid").dataSource.read();
                }
                HideLoader($("#assessment"));
            },

            error: function (errData) {
                HideLoader($("#assessment"));
                ShowNotification(errData.error, "error");
                //OnError(errData);
            }
        });
    }
    function StartAssessment(id) {
        ShowLoader($("#assessment"));
        var url = "/TAS/TalentAssessment/ManageAssessmentStatus?serviceId=" + id + "&isAssessmentStopped=false";
        $.ajax({
            url: url,
            type: "POST",

            success: function (data) {
                if (data) {
                    ShowNotification("Assessment updated successfully", "success");
                    getAssessmentsData();
                   // $("#kgrdAssessments").data("kendoGrid").dataSource.read();
                }
                HideLoader($("#assessment"));
            },
            dataType: "json",
            error: function (errData) {
                HideLoader($("#assessment"));
                //OnError(errData);
            }
        });
    }

    function StopAssessment(id) {
        ShowLoader($("#assessment"));
        var url = "/TAS/TalentAssessment/ManageAssessmentStatus?serviceId=" + id + "&isAssessmentStopped=true";
        $.ajax({
            url: url,
            type: "POST",

            success: function (data) {
                if (data.success) {
                    ShowNotification("Assessment updated successfully", "success");
                    getAssessmentsData();
                  //  $("#kgrdAssessments").data("kendoGrid").dataSource.read();
                }
                HideLoader($("#assessment"));
            },
            dataType: "json",
            error: function (errData) {
                HideLoader($("#assessment"));
                //OnError(errData);
            }
        });
    }
</script>

<script>
    var columnDefs = [
        {
            field: "Id",
            headerName: "View",
            cellRenderer: params => {
                debugger;
                 if (params.data.AssessmentStatus == null) {
                     return  "<input type='button' value='Create Assessment' class='btn btn-sm btn-info' onclick='CreateAssessment(\"" + params.data.Id + "\",\"" + params.data.UserId + "\",\"" + params.data.AssessmentId + "\",\"" + params.data.AssessmentType + "\",\"" + params.data.PreferredLanguageId + "\",\"" + params.data.ScheduledAssessmentId + "\")'/>"
                }
                 else if (params.data.IsAssessmentStopped == true) {
                     return "<input type='button' value='Start Assessment' class='btn btn-sm btn-warning' onclick='StartAssessment(\"" + params.data.Id + "\")'/>"
                 }
                else if (params.data.AssessmentStatus != 'Complete') {
                     return  "<input type='button' value='Stop Assessment' class='btn btn-sm btn-danger' onclick='StopAssessment(\"" + params.data.Id + "\")' />"
                }
            }


        },
        {
            field: "UserName",
            headerName: "Candidate Name",
            cellRenderer: params => {
                return "<div class='text-justify' >" + params.value + "</div>";
            }
        },
        {
            field: "Email",
            headerName: "Candidate Email",
            cellRenderer: params => {
                return "<div class='text-justify' >" + params.value + "</div>";
            }
        },
        {
            field: "ScheduledStartDate",
            headerName: "Scheduled Start Date",
            cellRenderer: params => {
                //  debugger;
                var date = new Date(params.value);
                return date.getDate() + "." + (date.getMonth() + 1) + "." + date.getFullYear();
            }

        },
        {
            field: "AssessmentType",
            headerName: "Assessment Type",
            cellRenderer: params => {
                return "<div class='text-justify' >" + params.value + "</div>";
            }

        },

        {
            field: "AssessmentName",
            headerName: "Assessment Name",
            cellRenderer: params => {
                return "<div class='text-justify' >" + params.value + "</div>"
            }

        },
        {
            field: "AssessmentStatus",
            headerName: "Assessment Status",
            cellRenderer: params => {
                return "<div class='text-justify' >" + params.value + "</div>"; 
            }
        },

   

    ];

    $(function () {

        getAssessmentsData();

    });

    function getAssessmentsData() {
        document.getElementById("kgrdAssessments").innerHTML = "";
       // var param = Filter();
        gridConfig(
            "kgrdAssessments",
            "/tas/TalentAssessment/ReadAssessmentsList?userId=@ViewBag.UserId",
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>
@*<h3>@ViewBag.Title</h3>*@
<div class="row" id="assessment">
    <div class="col-md-12">

        <div id="kgrdAssessments" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

        @*@(Html.Kendo().Grid<AssessmentDetailViewModel>
            ().Name("kgrdAssessments").HtmlAttributes(new { @class = "kgrdCalendar" })
            .Columns(col =>
            {

                col.Bound(c => c.Id).Title("Action").ClientTemplate("#if (AssessmentStatus == null) {# <input type=\"button\" value=\"Create Assessment\" class=\"btn btn-sm btn-info\" onclick=\"CreateAssessment('#=Id#','#=AssessmentId#','#=UserId#','#=AssessmentType#','#=PreferredLanguageId#','#=ScheduledAssessmentId#')\"/> #}else if(IsAssessmentStopped==true){#<input type=\"button\" value=\"Start Assessment\" class=\"btn btn-sm btn-warning\" onclick=\"StartAssessment('#=Id#')\"/>#}else if(AssessmentStatus!='Complete'){# <input type=\"button\" value=\"Stop Assessment\" class=\"btn btn-sm btn-danger\" onclick=\"StopAssessment('#=Id#')\"/> #}#").Filterable(false).Sortable(false); ;
                col.Bound(c=>c.UserName).Title("Candidate Name");
                col.Bound(c => c.Email).Title("Candidate Email");
                col.Bound(c => c.ScheduledStartDate).Title("Scheduled Start Date").Format(ApplicationConstant.DateAndTime.DefaultDateTimeFormat);
                col.Bound(c => c.AssessmentType).Title("Assessment Type");
                col.Bound(c => c.AssessmentName).Title("Assessment Name");
                col.Bound(c => c.AssessmentStatus).Title("Assessment Status");

            })
            .ToolBar(toolbar =>
            {
                //toolbar.Custom().Text(@SharedResource["Create"]).Name("btnAdd").IconClass("fa fas fa-plus").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreateCalendar();" });
            })
            .Scrollable(x => x.Enabled(true))
            .Sortable(srt => srt.Enabled(true))
            .Selectable(select => select.Enabled(false))
            .Filterable(f => f.Extra(false)
            .Operators(o => o.ForString(s => s.Clear()
            .Contains("Contains")
            .IsEqualTo("Is equal to")
            )))
            .Resizable(resize => resize.Columns(true))
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
            .AutoBind(true)
            .DataSource(
            dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .Read(read => read.Action("ReadAssessmentsList", "TalentAssessment", new { Area="TAS", userId = ViewBag.UserId}))
            .Model(model => model.Id("Id")))
            )*@
    </div>
</div>

