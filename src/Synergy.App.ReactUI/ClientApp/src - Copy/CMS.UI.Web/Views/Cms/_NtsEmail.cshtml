@using CMS.UI.ViewModel;
@using CMS.Common;

@{
    ViewData["Title"] = "Portal";
     Layout = "/Views/Shared/_PopupLayout.cshtml";
    //Layout = null;
}
@inject CMS.Common.IUserContext _userContext
@model TaskViewModel
<style>
    .k-upload {
        width: 100%;
    }

    .SYN-Main-wrapper {
        width: 700px;
        height: auto;
        padding: 0;
        margin: 20px auto;
        box-shadow: 4px 4px 10px #CBD0CE;
        border-radius: 6px;
    }

    .SYN-upload-row {
        width: 96%;
        padding: 0;
        margin: 4px auto;
        background-color: #10B0ED;
        border-radius: 6px;
    }

    .SYN-ico-pdf {
        width: 96%;
        padding: 20px;
        margin: 0 auto;
    }

    .SYN-ico-action {
        padding: 26px 4px;
        margin: 4px;
        float: left;
    }

    .SYN-ico-action-eye {
        padding: 26px 4px;
        margin: 4px;
        float: left;
        color: blue;
        cursor: pointer;
    }

    .SYN-ico-action-down {
        padding: 26px 4px;
        margin: 4px;
        float: left;
        color: greenyellow;
        cursor: pointer;
    }

    .SYN-ico-action-del {
        padding: 26px 4px;
        margin: 4px;
        float: left;
        color: red;
        cursor: pointer;
    }

    .SYN-tag-field {
        padding: 0;
        margin: 0;
        font-size: 14px;
        color: #939598;
    }

    .SYN-txt-field {
        padding: 0;
        margin: 0;
    }

    .SYN-row-gap {
        padding: 0;
        margin: 12px 0;
    }

    .SYN-dummy-row {
        width: 96%;
        padding: 4px;
        margin: 4px auto;
    }

    .SYN-list-box {
        width: 96%;
        padding: 0;
        margin: 4px auto;
        background-color: #ffffff;
        border-radius: 6px;
        border: 1px solid #C4C4C4;
    }

    .SYN-sub-docName {
        padding: 2px 0 2px 0;
        font-size: 14px;
    }

    .SYN-sub-white-txt {
        padding: 2px 0 2px 12px;
        font-size: 14px;
    }

    .SYN-inn-title-row {
        width: 96%;
        padding: 0;
        margin: 4px auto;
        background-color: #353535;
        border-radius: 6px;
        color: #fff;
    }

    .SYN-ico-close {
        width: 96%;
        padding: 6px;
        margin: 6px auto;
        height: auto;
    }

    .SYN-ico-expand {
        width: 96%;
        padding: 6px;
        margin: 6px auto;
        height: auto;
    }

    .SYN-inn-row {
        width: 96%;
        padding: 0;
        margin: 4px auto;
    }

    .SYN-sub-title {
        font-weight: 500;
        font-size: 14px;
    }

    .SYN-white-text {
        font-weight: 500;
        font-size: 16px;
        color: #fff;
    }

    .SYN-main-title {
        font-weight: 500;
        font-size: 16px;
        padding: 16px 0;
    }

    .k-button {
        border-color: #353535;
        color: #fff;
        background-color: #353535;
    }

    .k-upload .k-dropzone {
        border-color: #dee2e6;
        color: #bababa;
        background-color: #10B0ED;
    }

        .k-upload .k-dropzone .k-dropzone-hint, .k-upload .k-dropzone .k-upload-status {
            color: #ffff;
        }
    .gridbg{
        background-color:antiquewhite !important;
    }

    .treeheader {
        font-weight: 500;
        text-align: center;
        font-size: medium;
        background-color: #006699;
        color: #f2f2f2 !important;
        border-style: solid;
        border-width: 1px;
        border-color: lightgrey;
        padding: 5px 0px 5px 0px;
    }

    .treebody {
        padding: 10px !important;
        color: black !important;
    }

    .fancytree-icon {
        display: none !important;
    }

    .pagination li:hover {
        cursor: pointer;
    }

    .page {
        font-size: 20px;
        padding: 6px;
        border: solid;
        border-width: thin;
        border-color: lightgrey;
        margin-bottom: 45px;
    }

    .ancpagination {
        padding: 20px;
        border-right: solid;
        padding-top: 8px;
        padding-bottom: 8px;
        border-color: lightgrey;
        border-width: thin;
    }
</style>

<script>

    function CallBack() {
       // $("#Emailgrid").data("kendoTreeList").dataSource.read({ refId: '@Model.ReferenceId', refType:'@Model.ReferenceType' });
        getEmailTree();
    }

    function OnCreate() {
        url = '@Url.Action("ManageNtsEmail", "Cms", new { @area = "", refId = Model.ReferenceId, mode="Create", refType=Model.ReferenceType })';
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Send Email', Width: 1200, Height: 900 });
            return false;
    }

     function OnEdit(id) {
         url = '@Url.Action("ManageNtsEmail", "Cms", new { @area = "", refId = Model.ReferenceId, mode="Edit", refType = Model.ReferenceType })&newid=' + id;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Send Email', Width: 1200, Height: 900 });
            return false;
    }

    function OnView(id) {
            
        url = '@Url.Action("ManageNtsEmail", "Cms", new { @area = "", refId = Model.ReferenceId, mode="View", refType = Model.ReferenceType })&newid=' + id;
                var win = GetMainWindow();
                win.iframeOpenUrl = url;
                win.OpenWindow({ Title: 'View Email', Width: 1200, Height: 900 });


            return false;
    }

    function OnReply(id) {
        url = '@Url.Action("ManageNtsEmail", "Cms", new { @area = "", refId = Model.ReferenceId, mode="Reply", refType = Model.ReferenceType })&newid=' + id;
                var win = GetMainWindow();
                win.iframeOpenUrl = url;
                win.OpenWindow({ Title: 'Reply Email', Width: 1200, Height: 900 });


            return false;
    }

    function OnRefresh() {
        getEmailTree();
      //  $("#Emailgrid").data("kendoTreeList").dataSource.read({ refId: '@Model.ReferenceId', refType:'@Model.ReferenceType' });
    }
    function traverse(nodes, callback) {
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var children = node.hasChildren /*&& node.children.data()*/;
            callback(node);
            if (children) {
                traverse(children, callback);
            }
        }
    }
    function OnBound(e) {
        var rootNodes = $("#Emailgrid").data("kendoTreeList").dataSource.data();
        traverse(rootNodes, function (node) {
            if (node.id == '@Model.ReferenceId') {
                
                var grid = $("#Emailgrid").data("kendoTreeList");
                var currenRow = grid.table.find("tr[data-uid='" + node.uid + "']");
                $(currenRow).addClass("gridbg");
              //  alert("true");
            }
        });
    }

</script>


<div style="margin-top: 5px;padding-left: 20px;padding-right: 20px;width: 100%;">

    <div class="row">
        <div class="col-12">
            <button type='button' class='btn btn-primary' onclick='OnCreate();'><i class='fa fas fa-plus'></i>&nbsp;Create New Email</button>
            <button type='button' class='btn btn-primary' onclick='OnRefresh();'><i class='fa fas fa-sync-alt'></i>&nbsp;Referesh</button>

            <table id="Emailgrid" style="width:100%">
                <colgroup>
                    <col width="10">
                    <col width="20">
                    <col width="200">
                    <col width="200">
                    <col width="200">
                    <col width="200">
                    <col width="200">



                </colgroup>
                <thead>
                    <tr>
                        <th class="treeheader"><div id="NoteId"></div></th>
                        <th class="treeheader"><div id="TaskSubject">Subject</div></th>
                        <th class="treeheader"><div id="From">From</div></th>
                        <th class="treeheader"><div id="To">To</div></th>
                        <th class="treeheader"><div id="CC">CC</div></th>
                        <th class="treeheader"><div id="BCC">BCC</div></th>
                        <th class="treeheader"><div id="Action">Action</div></th>

                    </tr>
                </thead>
                <tbody>
                    <tr>


                        <td class="treebody"></td>
                        <td class="treebody"></td>
                        <td class="treebody"></td>
                        <td class="treebody"></td>
                        <td class="treebody"></td>
                        <td class="treebody"></td>
                        <td class="treebody"></td>

                    </tr>
                </tbody>
            </table>
            <script>
                function getEmailTree() {
                    debugger;
                    $("#Emailgrid").fancytree({
                        extensions: ["table"],
                        source: $.ajax({
                            url: "/cms/ReadEmailData?refId=@Model.ReferenceId&refType=@Model.ReferenceType",
                            dataType: "json"
                        }),
                        lazyLoad: function (event, data) {
                            var node = data.node;
                            // Issue an Ajax request to load child nodes
                            data.result = {
                                url: "/cms/ReadEmailData?refId=@Model.ReferenceId&refType=@Model.ReferenceType",
                                data: { id: node.key }
                            }

                        },
                        renderNode: function (event, data) {
                            // Optionally tweak data.node.span
                            // debugger;
                            //var node = data.node;
                            //  node.renderTitle();
                            var node = data.node,
                                $tdList = $(node.tr).find(">td");
                            // (index #0 is rendered by fancytree by adding the checkbox)
                            //  $tdList.eq(0).text(node.data.NoteSubject).addClass("alignRight");
                            // (index #2 is rendered by fancytree)
                            //if(Type=='Question'){#<div><i class='fa fas fa-pencil' onclick='onEditSalaryInfo(\"#:NoteId#\")'></i></div>#}
                            if (node.data.id == '@Model.ReferenceId') {

                                $(node.tr).addClass("gridbg");
                              
              //  alert("true");
                            } 
                            $tdList.eq(1).text(node.data.TaskSubject);
                            $tdList.eq(2).text(node.data.From);
                            $tdList.eq(3).text(node.data.To);
                            $tdList.eq(4).text(node.data.CC);
                            $tdList.eq(5).text(node.data.BCC);

                            var temp = "<button type='button' class='btn btn-primary' onclick='OnView(\""+node.data.Id+"\");'><i class='fa fas fa-eye'></i>&nbsp;View Email</button> &nbsp;"
                            if ("@_userContext.Email" == node.data.AssignedToUserName) {
                                temp += "<br><button type='button' class='btn btn-primary' onclick='OnReply(\"" + node.data.Id+"\");' > <i class='fa fas fa-reply'></i> &nbsp; Reply Email</button >&nbsp;"
                            }
                            if (node.data.StatusCode == 'TASK_STATUS_DRAFT') {
                                temp += "< button type = 'button' class='btn btn-primary' onclick = 'OnEdit(\"" + node.data.Id +"\");' > <i class='fa fas fa-envelope-open-text'></i> &nbsp; Send Email</button >"
                            }
                    $tdList.eq(6).html(temp);

                        },
                        dblclick: function (event, data) {
                            var node = data.node;
                        },
                        contextMenu: {
                            menu: function (data) {
                                debugger;
                                return {
                                }
                            },
                            actions: function (node, action, options) {
                            }
                        }
                    });

                }

                $(function () {
                    getEmailTree();

                    setTimeout(function () {
                        debugger;
                        $('#Emailgrid').after('<div id="nav" class="page"></div>');
                        var rowsShown = 10;
                        var rowsTotal = $('#Emailgrid tbody tr').length;
                        var numPages = rowsTotal / rowsShown;
                        for (i = 0; i < numPages; i++) {
                            var pageNum = i + 1;
                            $('#nav').append('<a class="ancpagination" href="#" rel="' + i + '">' + pageNum + '</a> ');
                        }
                        $('#Emailgrid tbody tr').hide();
                        $('#Emailgrid tbody tr').slice(0, rowsShown).show();
                        $('#nav a:first').addClass('active');
                        $('#nav a').bind('click', function () {

                            $('#nav a').removeClass('active');
                            $(this).addClass('active');
                            var currPage = $(this).attr('rel');
                            var startItem = currPage * rowsShown;
                            var endItem = startItem + rowsShown;
                            $('#Emailgrid tbody tr').css('opacity', '0.0').hide().slice(startItem, endItem).
                                css('display', 'table-row').animate({ opacity: 1 }, 300);
                        });
                    }, 3000);

                    // getPagination('#treetable');
                });
            </script>


            @*@(Html.Kendo().TreeList<EmailTaskViewModel>
    ()
    .Name("Emailgrid")
    //  .ToolBar())

    .Columns(columns =>

    {
        columns.Add().Field(e => e.TaskSubject).Title("Subject").Width(150);
        //columns.Add().Field(e => e.TaskDescription).Title("Body").Width(150);
        columns.Add().Field(e => e.From).Title("From").Width(150);
        columns.Add().Field(e => e.To).Title("To").Width(100);
        columns.Add().Field(e => e.CC).Width(100);
        columns.Add().Field(e => e.BCC).Width(100);
        columns.Add().Title("").Template("<button type='button' class='btn btn-primary' onclick='OnView(\"#:Id#\");'><i class='fa fas fa-eye'></i>&nbsp;View Email</button>&nbsp;#if('" + _userContext.Email + "'==AssignedToUserName){#<button type='button' class='btn btn-primary' onclick='OnReply(\"#:Id#\");'><i class='fa fas fa-reply'></i>&nbsp;Reply Email</button>&nbsp;#}if(StatusCode=='TASK_STATUS_DRAFT'){#<button type='button' class='btn btn-primary' onclick='OnEdit(\"#:Id#\");'><i class='fa fas fa-envelope-open-text'></i>&nbsp;Send Email</button>#}#").Width(300).Filterable(false);

        //columns.Add().Command(command =>

        //{
        //   // command.Custom().Text("").Click
        //     command.Custom().Text("<i class='fa fas fa-eye'></i>").Click("OnView");
        //   // command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon" });
        //}).Width(120);

    })
    //.Selectable(true)
    .Events(e=>e.DataBound("OnBound"))
    .Resizable(true).Filterable().Sortable()
                .Pageable(pageable => pageable
                //.Refresh(true)
                .PageSize(20)
                .PageSizes(true)
                //.ButtonCount(5)
                )
                .AutoBind(true)
                .DataSource(
                dataSource => dataSource
                //.Ajax()
                //.PageSize(20)
                .Read(read => read.Action("ReadEmailData", "Cms", new { refId=Model.ReferenceId, refType =Model.ReferenceType }))
                //.Events(events => events.Error("OnError"))
                .Model(m =>
                {
                    m.Id(f => f.Id);
                    m.ParentId(f => f.ParentTaskId);
                    m.Expanded(true);
                    m.Field(f => f.TaskSubject);
                    m.Field(f => f.TaskDescription);
                    m.Field(f => f.AssignedToUserName);
                    m.Field(f => f.CC);
                    m.Field(f => f.BCC);
                    m.Field(f => f.OwnerUserName);
                })
                )
          )*@

        </div>
    </div>
</div>


