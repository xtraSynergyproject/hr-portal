@using CMS.UI.ViewModel;
@using CMS.Common;

@model CompanyViewModel

@{
    ViewData["Title"] = "Company";
    Layout = null;
}
<script>
   var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(StatusEnum)))';
    var statusObj = JSON.parse(status);

    var columnDefs = [
        {
            field: "Name",
        },
        { field: "Code" },
        { field: "Address" },
        {
            field: "Phone",
        },
        { field: "Fax" },
        { field: "Email" },
        { field: "PrimaryContactPerson" },
        { field: "PrimaryContactEmail" },

        //{
        //    field: "Address",
        //    cellRenderer: params => {
        //        return statusObj[params.value]; //only for enum
        //    }
        //},
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinCompany' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\"><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        getDataCompany();

        //$.contextMenu('update');
        //$('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-menuBinCompany',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        onEdit(id);
                                        break;

                                    case 'delete':
                                        OnDelete(id);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-edit" },
                                "delete": { name: "Delete", icon: "fas fa-trash" },


                            }
                        };


                }
            }
        });


    });
  function OnCreateCompany() {
       
         var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("CreateComp", "Company", new { @area = "" })';
        win.OpenWindow({ Title: 'Manage Company', Width: 600, Height: 600 });
        return false;

        }

        function onEdit(id) {
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("EditComp", "Company", new { @area = "" })?Id=' + id;
        win.OpenWindow({ Title: 'Manage Company', Width: 600, Height: 600 });
        return false;
        }

        function OnDelete(id) {
        var flag = confirm('Do you really want to delete the Company?');

        if (flag) {
        $.ajax({
        url:'@Url.Action("DeleteComp", "Company", new { @area = "" })?Id=' + id,
        type: 'POST',
        data: {},
        dataType: 'json',
        success: function (result) {
        debugger;
        if (result.success) {
        getDataCompany();
        kendo.alert("Company Deleted Successfully.");
        } else {
        getDataCompany();
        var err = result.errors.BinderCountError.errors[0];
        kendo.alert(err);
        }
        },
        error: function (ert) {
        getDataCompany();
        }
        });
        return false;
        }
        }

        function getDataCompany() {
        document.getElementById("myGridCompany").innerHTML = "";
        gridConfig(
        "myGridCompany",
        "/company/ReadData",
        columnDefs,
        false,
        true,
        true,
        true,
        1,
        true,
        10);
        }

        </script>

        <div>
            <h4>@ViewBag.Title</h4>

            <hr />


            <div class="row">
                <div class="col-12">
                    <button type='button' class='btn btn-primary' onclick='OnCreateCompany();'><i class='fa fas fa-plus'></i>&nbsp;Create Company</button>
                    <br /><br />
                    <div id="myGridCompany" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
                </div>
            </div>
        </div>


        @*<script>
        function OnDeleteCompany(e) {
        var flag = confirm('Do you really want to delete the Company?');
        //alert("..Delete");
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        if (flag) {
            $.ajax({
                url:'@Url.Action("DeleteComp", "Company", new { @area = "" })?Id=' + dataItem.id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        $("#Companygrid").data("kendoGrid").dataSource.read();
                        kendo.alert("Company Deleted Successfully.");
                    } else {
                        $("#Companygrid").data("kendoGrid").dataSource.read();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    //
                    $("#Companygrid").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }



        </script>


        <div>
            <h4>@ViewBag.Title</h4>

            <hr />

            <div class="row">
                <div>

                    @(Html.Kendo().Grid<CompanyViewModel>
    ()
    .Name("Companygrid")
    .ToolBar(toolbar =>
    toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateCompany();'><i class='fa fas fa-plus'></i>&nbsp;Create Company</button>"))

    .Columns(columns =>

    {
        columns.Command(command =>
        {
            command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditCompany").HtmlAttributes(new { @class = "action-icon" });
            command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteCompany").HtmlAttributes(new { @class = "action-icon" });
        }).Title("Action").Width(200);

        columns.Bound(c => c.Name);
        columns.Bound(c => c.Code);
        columns.Bound(c => c.Address);
        columns.Bound(c => c.Phone);
        columns.Bound(c => c.Fax);
        columns.Bound(c => c.Email);
        columns.Bound(c => c.PrimaryContactPerson);
        columns.Bound(c => c.PrimaryContactEmail);




    })
    .Scrollable(x => x.Enabled(false))
                .Sortable(srt => srt.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                                    .Operators(o => o.ForString(s => s.Clear()
                                                    .Contains("Contains")
                                                    .IsEqualTo("Is equal to")
                                                )))
                .Pageable(pageable => pageable
                .Refresh(true)

                .PageSizes(true)
                .ButtonCount(5))
                .AutoBind(true)

                .DataSource(
                dataSource => dataSource
                .Ajax()
                .PageSize(10)

                //.Events(events => events.Error("OnError"))
                .Read(read => read.Action("ReadData", "Company"))
                .Model(model => model.Id(p => p.Id))
                )
          )

                </div>
            </div>
        </div>*@
