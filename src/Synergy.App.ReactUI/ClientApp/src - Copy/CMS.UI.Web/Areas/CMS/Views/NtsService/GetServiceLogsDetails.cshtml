@{
    ViewData["Title"] = "Log";
    Layout = "/Views/Shared/_PopupLayout.cshtml";
}
@using CMS.UI.ViewModel;
@using CMS.Common;

@model NtsLogViewModel

<script>

     var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(StatusEnum)))';
    var statusObj = JSON.parse(status);

    var columnDefs = [


           @for (int i = 0; i < Model.ColumnName.Count(); i++)
        {
        if (Model.ColumnName[i] == "LogStartDate")
        {
        
       @:{field: "LogStartDate", width:150,cellRenderer: params => {
                @:return new Date(params.value).getDate() + "/" + new Date(params.value).getMonth() + "/" + new Date(params.value).getFullYear();
            @:}},
                    @:{ field: "OwnerName", headerName:"Event Created By",width:150},
                    @:{ field: "EventName",headerName:"Event Name",width:150},
        }
        else
        {
                    @:{ field: "@Model.ColumnName[i]",width:150},

        }
        }

    ];

    $(function () {

        getLogData();




    });

    function getLogData() {
        document.getElementById("KgrdLog").innerHTML = "";
        gridConfig(
            "KgrdLog",
            "/cms/NtsService/ReadDataLog?ServiceId=@Model.Id&TemplateCode=@Model.TemplateCode&TemplateType=@ViewBag.TemplateType ",
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>
<div class="row">
    <div class="col-12">
        <div id="KgrdLog" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        @*@(Html.Kendo().Grid<dynamic>
        ()
        .Name("KgrdLog")

        //toolbar.Custom().Text("Create Group").HtmlAttributes(new { href = "javascript:OnCreateGroup();" }))
        .Columns(columns =>
        {
        for (int i = 0; i < Model.ColumnName.Count(); i++)
        {
        if (Model.ColumnName[i] == "LogStartDate")
        {
        columns.Bound("LogStartDate").ClientTemplate("#= kendo.toString(kendo.parseDate("+ Model.ColumnName[i]+ ", 'yyyy-MM-dd'), 'dd MMM yyyy') #").Width(150);
        columns.Bound("OwnerName").Title("Event Created By").Width(150);
        columns.Bound("EventName").Title("Event Name").Width(150);
        }
        else
        {
        columns.Bound(Model.ColumnName[i]).Width(200);
        }
        }
        })
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(8)
        .Read(read => read.Action("ReadDataLog", "NtsService", new { ServiceId = Model.Id, TemplateCode = Model.TemplateCode, TemplateType=ViewBag.TemplateType }))
        )

        .HtmlAttributes(new { style = "height: 550px"})
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))

        .Scrollable(x => x.Enabled(true))
        .Sortable(srt => srt.Enabled(true))
        .Resizable(r => r.Columns(true))


        )*@
    </div>
</div>

<script>

</script>