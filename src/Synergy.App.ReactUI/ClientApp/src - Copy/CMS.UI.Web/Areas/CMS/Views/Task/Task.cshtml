@using Kendo.Mvc.UI;
@using CMS.Data.Model
@using CMS.UI.ViewModel
@using CMS.Common;
@model CMS.UI.ViewModel.RecTaskViewModel
@{
    ViewBag.Title = "Task";
    //Layout = ViewBag.Layout ?? "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
    Layout = "/Views/Shared/_PopupLayoutTask.cshtml";
}
<style>
    .k-upload .k-dropzone {
        border-color: #323333 !important;
        border: 1px solid #929292 !important;
        background-color: #ffffff !important;
        /* background-color: #f8f9fa; */
    }

    span {
        display: inline;
    }

    .k-button {
        margin-bottom: 5px;
        margin-top: 5px;
        min-width: 150px;
        min-height: 30px;
        border-radius: 0px;
        font-size: 1em;
    }

    .btn-default {
        color: #333;
        background-color: rgba(9,30,66,.04);
        border-color: rgba(9,30,66,.04);
        border-radius: 0px;
        margin-bottom: 5px;
        margin-top: 5px;
        width: 150px;
        height: 30px;
        text-align: left;
    }

    .btn-card {
        font-size: 13px;
    }

    .sub-div {
        overflow-y: scroll;
        height: 260px;
        overflow-x: hidden;
    }
    .template-banner {
        height: 100px;
        width: 100%;
    }
</style>
<script>
     function OpenTask(taskId) {


         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Index", "Task", new { @area= "Cms" })?taskId=' + taskId +'&isPopUp=true';
         win.OpenWindow({ Title: 'View Task', Width: 1200, Height: 950 });
        return false;
    }

    $(document).ready(function () {
        uploadFile1();
        uploadFile2();
        uploadFile3();
        uploadFile4();
        uploadFile5();
        uploadFile6();
        uploadFile7();
        uploadFile8();
        uploadFile9();
        uploadFile10();

        kendo.culture("en-US");


        $("#TaskVersionId").kendoDropDownList({
            dataTextField: "EnumId",
            dataValueField: "Id",            
            value: '@Model.TaskVersionId',
            change: OnVersionChange,
            enable: '@Model.SaveNewVersionButton',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: "/Cms/Task/GetVersionList?taskId=" + '@Model.Id' + "&versionId="+'@Model.TaskVersionId',
                    }
                }
            }
        });

        $("#AssigneeTeamId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.AssigneeTeamId',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: "/CMS/Team/GetTeamList",
                    }
                }
            }
        });

        $("#AssigneeUserId").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.AssigneeUserId',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: "/CMS/User/GetUserIdNameList",
                    }
                }
            }
        });

        $("#DropdownValue1").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.DropdownValue1',
            change: onDropDownListChange1,
            enable: '@Model.IsDropDownEdit1',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: '@Model.DropdownValueMethod1',
                    }
                }
            }
        });

        $("#DropdownValue2").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.DropdownValue2',
            change: onDropDownListChange2,
            enable: '@Model.IsDropDownEdit2',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: '@Model.DropdownValueMethod2',
                    }
                }
            }
        });

        $("#DropdownValue3").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.DropdownValue3',
            change: onDropDownListChange3,
            enable: '@Model.IsDropDownEdit3',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: '@Model.DropdownValueMethod3',
                    }
                }
            }
        });

        $("#DropdownValue4").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.DropdownValue4',
            change: onDropDownListChange4,
            enable: '@Model.IsDropDownEdit4',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: '@Model.DropdownValueMethod4',
                    }
                }
            }
        });

        $("#DropdownValue5").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.DropdownValue5',
            change: onDropDownListChange5,
            enable: '@Model.IsDropDownEdit5',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: '@Model.DropdownValueMethod5',
                    }
                }
            }
        });

        $("#DropdownValue6").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.DropdownValue6',
            change: onDropDownListChange6,
            enable: '@Model.IsDropDownEdit6',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: '@Model.DropdownValueMethod6',
                    }
                }
            }
        });

        $("#DropdownValue7").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.DropdownValue7',
            change: onDropDownListChange7,
            enable: '@Model.IsDropDownEdit7',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: '@Model.DropdownValueMethod7',
                    }
                }
            }
        });

        $("#DropdownValue8").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.DropdownValue8',
            change: onDropDownListChange8,
            enable: '@Model.IsDropDownEdit8',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: '@Model.DropdownValueMethod8',
                    }
                }
            }
        });

        $("#DropdownValue9").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.DropdownValue9',
            change: onDropDownListChange9,
            enable: '@Model.IsDropDownEdit9',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: '@Model.DropdownValueMethod9',
                    }
                }
            }
        });

    $("#DropdownValue10").kendoDropDownList({
            dataTextField: "Name",
            dataValueField: "Id",
            filter: "contains",
            optionLabel: "@ApplicationConstant.PlaceHolder_SelectOption",
            value: '@Model.DropdownValue10',
            change: onDropDownListChange10,
            enable: '@Model.IsDropDownEdit10',
            dataSource: {
                serverFiltering: true,
                transport: {
                    read: {
                        url: '@Model.DropdownValueMethod10',
                    }
                }
            }
    });

        function FilterData() {
            return data = {
                referenceType: '@Model.NtsType',
                referenceId: '@Model.Id'
            };
        }

        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Recruitment/Notification/ReadNotificationDataByTask",
                    data: FilterData,
                    dataType: "json",
                }
            },            
        });

        $("#kgrdNotification").kendoListView({
            dataSource: dataSource,
            template: kendo.template($("#templateNotification").html())
        });


    });
    function onFileUploadSuccess1(e) {
        var fileId = e.response.fileId;
        var fileName = e.response.filename;
        $("#AttachmentCode1").val(fileId);
        $("#AttachmentValue1").val(fileName);
        $("#Av1").html("");
    }
    function uploadFile1() {
        $("#attachment1").dmUploader({ //
            url: '/Cms/Task/SaveAttachment', //- controller
            multiple: false,
            extFilter: ["jpg", "jpeg", "png", "gif"],
            maxFileSize: 3000000, // 3 Megs 
            onDragEnter: function () {
                // Happens when dragging something over the DnD area
                this.addClass('active');
            },
            onDragLeave: function () {
                this.removeClass('active');
            },
            onInit: function () {
            },
            onComplete: function () {
            },
            onNewFile: function (id, file) {
                ui_multi_add_file(id, file);
            },
            onBeforeUpload: function (id) {
                ui_multi_update_file_status(id, 'uploading', 'Uploading...');
                ui_multi_update_file_progress(id, 0, '', true);
            },
            onUploadCanceled: function (id) {
                ui_multi_update_file_status(id, 'warning', 'Canceled by User');
                ui_multi_update_file_progress(id, 0, 'warning', false);
            },
            onUploadProgress: function (id, percent) {
                ui_multi_update_file_progress(id, percent);
            },
            onUploadSuccess: function (id, data) {
                var fileId = data.fileId;
                var fileName = data.filename;
                $("#AttachmentCode1").val(fileId);
                $("#AttachmentValue1").val(fileName);
                $("#Av1").html("");


                ui_multi_update_file_status(id, 'success', 'Upload Complete');
                ui_multi_update_file_progress(id, 100, 'success', false);
            },
            onUploadError: function (id, xhr, status, message) {
                ui_multi_update_file_status(id, 'danger', message);
                ui_multi_update_file_progress(id, 0, 'danger', false);
            },
            onFallbackMode: function () {
            },
            onFileSizeError: function (file) {
            }
        });
    }

    function onFileUploadSuccess2(e) {
        var fileId = e.response.fileId;
        var fileName = e.response.filename;
        $("#AttachmentCode2").val(fileId);
        $("#AttachmentValue2").val(fileName);
        $("#Av2").html("");
    }
    function uploadFile2() {
        $("#attachment2").dmUploader({ //
            url: '/Cms/Task/SaveAttachment', //- controller
            multiple: false,
            extFilter: ["jpg", "jpeg", "png", "gif"],
            maxFileSize: 3000000, // 3 Megs 
            onDragEnter: function () {
                // Happens when dragging something over the DnD area
                this.addClass('active');
            },
            onDragLeave: function () {
                this.removeClass('active');
            },
            onInit: function () {
            },
            onComplete: function () {
            },
            onNewFile: function (id, file) {
                ui_multi_add_file(id, file);
            },
            onBeforeUpload: function (id) {
                ui_multi_update_file_status(id, 'uploading', 'Uploading...');
                ui_multi_update_file_progress(id, 0, '', true);
            },
            onUploadCanceled: function (id) {
                ui_multi_update_file_status(id, 'warning', 'Canceled by User');
                ui_multi_update_file_progress(id, 0, 'warning', false);
            },
            onUploadProgress: function (id, percent) {
                ui_multi_update_file_progress(id, percent);
            },
            onUploadSuccess: function (id, data) {
                var fileId = data.fileId;
                var fileName = data.filename;
                $("#AttachmentCode2").val(fileId);
                $("#AttachmentValue2").val(fileName);
                $("#Av2").html("");


                ui_multi_update_file_status(id, 'success', 'Upload Complete');
                ui_multi_update_file_progress(id, 100, 'success', false);
            },
            onUploadError: function (id, xhr, status, message) {
                ui_multi_update_file_status(id, 'danger', message);
                ui_multi_update_file_progress(id, 0, 'danger', false);
            },
            onFallbackMode: function () {
            },
            onFileSizeError: function (file) {
            }
        });
    }

    function onFileUploadSuccess3(e) {
        var fileId = e.response.fileId;
        var fileName = e.response.filename;
        $("#AttachmentCode3").val(fileId);
        $("#AttachmentValue3").val(fileName);
        $("#Av3").html("");
    }
    function uploadFile3() {
        $("#attachment3").dmUploader({ //
            url: '/Cms/Task/SaveAttachment', //- controller
            multiple: false,
            extFilter: ["jpg", "jpeg", "png", "gif"],
            maxFileSize: 3000000, // 3 Megs 
            onDragEnter: function () {
                // Happens when dragging something over the DnD area
                this.addClass('active');
            },
            onDragLeave: function () {
                this.removeClass('active');
            },
            onInit: function () {
            },
            onComplete: function () {
            },
            onNewFile: function (id, file) {
                ui_multi_add_file(id, file);
            },
            onBeforeUpload: function (id) {
                ui_multi_update_file_status(id, 'uploading', 'Uploading...');
                ui_multi_update_file_progress(id, 0, '', true);
            },
            onUploadCanceled: function (id) {
                ui_multi_update_file_status(id, 'warning', 'Canceled by User');
                ui_multi_update_file_progress(id, 0, 'warning', false);
            },
            onUploadProgress: function (id, percent) {
                ui_multi_update_file_progress(id, percent);
            },
            onUploadSuccess: function (id, data) {
                var fileId = data.fileId;
                var fileName = data.filename;
                $("#AttachmentCode3").val(fileId);
                $("#AttachmentValue3").val(fileName);
                $("#Av3").html("");


                ui_multi_update_file_status(id, 'success', 'Upload Complete');
                ui_multi_update_file_progress(id, 100, 'success', false);
            },
            onUploadError: function (id, xhr, status, message) {
                ui_multi_update_file_status(id, 'danger', message);
                ui_multi_update_file_progress(id, 0, 'danger', false);
            },
            onFallbackMode: function () {
            },
            onFileSizeError: function (file) {
            }
        });
    }

    function onFileUploadSuccess4(e) {
        var fileId = e.response.fileId;
        var fileName = e.response.filename;
        $("#AttachmentCode4").val(fileId);
        $("#AttachmentValue4").val(fileName);
        $("#Av4").html("");
    }
    function uploadFile4() {
        $("#attachment4").dmUploader({ //
            url: '/Cms/Task/SaveAttachment', //- controller
            multiple: false,
            extFilter: ["jpg", "jpeg", "png", "gif"],
            maxFileSize: 3000000, // 3 Megs 
            onDragEnter: function () {
                // Happens when dragging something over the DnD area
                this.addClass('active');
            },
            onDragLeave: function () {
                this.removeClass('active');
            },
            onInit: function () {
            },
            onComplete: function () {
            },
            onNewFile: function (id, file) {
                ui_multi_add_file(id, file);
            },
            onBeforeUpload: function (id) {
                ui_multi_update_file_status(id, 'uploading', 'Uploading...');
                ui_multi_update_file_progress(id, 0, '', true);
            },
            onUploadCanceled: function (id) {
                ui_multi_update_file_status(id, 'warning', 'Canceled by User');
                ui_multi_update_file_progress(id, 0, 'warning', false);
            },
            onUploadProgress: function (id, percent) {
                ui_multi_update_file_progress(id, percent);
            },
            onUploadSuccess: function (id, data) {
                var fileId = data.fileId;
                var fileName = data.filename;
                $("#AttachmentCode4").val(fileId);
                $("#AttachmentValue4").val(fileName);
                $("#Av1").html("");


                ui_multi_update_file_status(id, 'success', 'Upload Complete');
                ui_multi_update_file_progress(id, 100, 'success', false);
            },
            onUploadError: function (id, xhr, status, message) {
                ui_multi_update_file_status(id, 'danger', message);
                ui_multi_update_file_progress(id, 0, 'danger', false);
            },
            onFallbackMode: function () {
            },
            onFileSizeError: function (file) {
            }
        });
    }

    function onFileUploadSuccess5(e) {
        var fileId = e.response.fileId;
        var fileName = e.response.filename;
        $("#AttachmentCode5").val(fileId);
        $("#AttachmentValue5").val(fileName);
        $("#Av5").html("");
    }
    function uploadFile5() {
        $("#attachment5").dmUploader({ //
            url: '/Cms/Task/SaveAttachment', //- controller
            multiple: false,
            extFilter: ["jpg", "jpeg", "png", "gif"],
            maxFileSize: 3000000, // 3 Megs 
            onDragEnter: function () {
                // Happens when dragging something over the DnD area
                this.addClass('active');
            },
            onDragLeave: function () {
                this.removeClass('active');
            },
            onInit: function () {
            },
            onComplete: function () {
            },
            onNewFile: function (id, file) {
                ui_multi_add_file(id, file);
            },
            onBeforeUpload: function (id) {
                ui_multi_update_file_status(id, 'uploading', 'Uploading...');
                ui_multi_update_file_progress(id, 0, '', true);
            },
            onUploadCanceled: function (id) {
                ui_multi_update_file_status(id, 'warning', 'Canceled by User');
                ui_multi_update_file_progress(id, 0, 'warning', false);
            },
            onUploadProgress: function (id, percent) {
                ui_multi_update_file_progress(id, percent);
            },
            onUploadSuccess: function (id, data) {
                var fileId = data.fileId;
                var fileName = data.filename;
                $("#AttachmentCode5").val(fileId);
                $("#AttachmentValue5").val(fileName);
                $("#Av1").html("");


                ui_multi_update_file_status(id, 'success', 'Upload Complete');
                ui_multi_update_file_progress(id, 100, 'success', false);
            },
            onUploadError: function (id, xhr, status, message) {
                ui_multi_update_file_status(id, 'danger', message);
                ui_multi_update_file_progress(id, 0, 'danger', false);
            },
            onFallbackMode: function () {
            },
            onFileSizeError: function (file) {
            }
        });
    }

    function onFileUploadSuccess6(e) {
        var fileId = e.response.fileId;
        var fileName = e.response.filename;
        $("#AttachmentCode6").val(fileId);
        $("#AttachmentValue6").val(fileName);
        $("#Av6").html("");
    }
    function uploadFile6() {
        $("#attachment6").dmUploader({ //
            url: '/Cms/Task/SaveAttachment', //- controller
            multiple: false,
            extFilter: ["jpg", "jpeg", "png", "gif"],
            maxFileSize: 3000000, // 3 Megs 
            onDragEnter: function () {
                // Happens when dragging something over the DnD area
                this.addClass('active');
            },
            onDragLeave: function () {
                this.removeClass('active');
            },
            onInit: function () {
            },
            onComplete: function () {
            },
            onNewFile: function (id, file) {
                ui_multi_add_file(id, file);
            },
            onBeforeUpload: function (id) {
                ui_multi_update_file_status(id, 'uploading', 'Uploading...');
                ui_multi_update_file_progress(id, 0, '', true);
            },
            onUploadCanceled: function (id) {
                ui_multi_update_file_status(id, 'warning', 'Canceled by User');
                ui_multi_update_file_progress(id, 0, 'warning', false);
            },
            onUploadProgress: function (id, percent) {
                ui_multi_update_file_progress(id, percent);
            },
            onUploadSuccess: function (id, data) {
                var fileId = data.fileId;
                var fileName = data.filename;
                $("#AttachmentCode6").val(fileId);
                $("#AttachmentValue6").val(fileName);
                $("#Av6").html("");


                ui_multi_update_file_status(id, 'success', 'Upload Complete');
                ui_multi_update_file_progress(id, 100, 'success', false);
            },
            onUploadError: function (id, xhr, status, message) {
                ui_multi_update_file_status(id, 'danger', message);
                ui_multi_update_file_progress(id, 0, 'danger', false);
            },
            onFallbackMode: function () {
            },
            onFileSizeError: function (file) {
            }
        });
    }

    function onFileUploadSuccess7(e) {
        var fileId = e.response.fileId;
        var fileName = e.response.filename;
        $("#AttachmentCode7").val(fileId);
        $("#AttachmentValue7").val(fileName);
        $("#Av7").html("");
    }
    function uploadFile7() {
        $("#attachment7").dmUploader({ //
            url: '/Cms/Task/SaveAttachment', //- controller
            multiple: false,
            extFilter: ["jpg", "jpeg", "png", "gif"],
            maxFileSize: 3000000, // 3 Megs 
            onDragEnter: function () {
                // Happens when dragging something over the DnD area
                this.addClass('active');
            },
            onDragLeave: function () {
                this.removeClass('active');
            },
            onInit: function () {
            },
            onComplete: function () {
            },
            onNewFile: function (id, file) {
                ui_multi_add_file(id, file);
            },
            onBeforeUpload: function (id) {
                ui_multi_update_file_status(id, 'uploading', 'Uploading...');
                ui_multi_update_file_progress(id, 0, '', true);
            },
            onUploadCanceled: function (id) {
                ui_multi_update_file_status(id, 'warning', 'Canceled by User');
                ui_multi_update_file_progress(id, 0, 'warning', false);
            },
            onUploadProgress: function (id, percent) {
                ui_multi_update_file_progress(id, percent);
            },
            onUploadSuccess: function (id, data) {
                var fileId = data.fileId;
                var fileName = data.filename;
                $("#AttachmentCode7").val(fileId);
                $("#AttachmentValue7").val(fileName);
                $("#Av7").html("");


                ui_multi_update_file_status(id, 'success', 'Upload Complete');
                ui_multi_update_file_progress(id, 100, 'success', false);
            },
            onUploadError: function (id, xhr, status, message) {
                ui_multi_update_file_status(id, 'danger', message);
                ui_multi_update_file_progress(id, 0, 'danger', false);
            },
            onFallbackMode: function () {
            },
            onFileSizeError: function (file) {
            }
        });
    }

    function onFileUploadSuccess8(e) {
        var fileId = e.response.fileId;
        var fileName = e.response.filename;
        $("#AttachmentCode8").val(fileId);
        $("#AttachmentValue8").val(fileName);
        $("#Av8").html("");
    }
    function uploadFile8() {
        $("#attachment8").dmUploader({ //
            url: '/Cms/Task/SaveAttachment', //- controller
            multiple: false,
            extFilter: ["jpg", "jpeg", "png", "gif"],
            maxFileSize: 3000000, // 3 Megs 
            onDragEnter: function () {
                // Happens when dragging something over the DnD area
                this.addClass('active');
            },
            onDragLeave: function () {
                this.removeClass('active');
            },
            onInit: function () {
            },
            onComplete: function () {
            },
            onNewFile: function (id, file) {
                ui_multi_add_file(id, file);
            },
            onBeforeUpload: function (id) {
                ui_multi_update_file_status(id, 'uploading', 'Uploading...');
                ui_multi_update_file_progress(id, 0, '', true);
            },
            onUploadCanceled: function (id) {
                ui_multi_update_file_status(id, 'warning', 'Canceled by User');
                ui_multi_update_file_progress(id, 0, 'warning', false);
            },
            onUploadProgress: function (id, percent) {
                ui_multi_update_file_progress(id, percent);
            },
            onUploadSuccess: function (id, data) {
                var fileId = data.fileId;
                var fileName = data.filename;
                $("#AttachmentCode1").val(fileId);
                $("#AttachmentValue1").val(fileName);
                $("#Av1").html("");


                ui_multi_update_file_status(id, 'success', 'Upload Complete');
                ui_multi_update_file_progress(id, 100, 'success', false);
            },
            onUploadError: function (id, xhr, status, message) {
                ui_multi_update_file_status(id, 'danger', message);
                ui_multi_update_file_progress(id, 0, 'danger', false);
            },
            onFallbackMode: function () {
            },
            onFileSizeError: function (file) {
            }
        });
    }

    function onFileUploadSuccess9(e) {
        var fileId = e.response.fileId;
        var fileName = e.response.filename;
        $("#AttachmentCode9").val(fileId);
        $("#AttachmentValue9").val(fileName);
        $("#Av9").html("");
    }
    function uploadFile9() {
        $("#attachment9").dmUploader({ //
            url: '/Cms/Task/SaveAttachment', //- controller
            multiple: false,
            extFilter: ["jpg", "jpeg", "png", "gif"],
            maxFileSize: 3000000, // 3 Megs 
            onDragEnter: function () {
                // Happens when dragging something over the DnD area
                this.addClass('active');
            },
            onDragLeave: function () {
                this.removeClass('active');
            },
            onInit: function () {
            },
            onComplete: function () {
            },
            onNewFile: function (id, file) {
                ui_multi_add_file(id, file);
            },
            onBeforeUpload: function (id) {
                ui_multi_update_file_status(id, 'uploading', 'Uploading...');
                ui_multi_update_file_progress(id, 0, '', true);
            },
            onUploadCanceled: function (id) {
                ui_multi_update_file_status(id, 'warning', 'Canceled by User');
                ui_multi_update_file_progress(id, 0, 'warning', false);
            },
            onUploadProgress: function (id, percent) {
                ui_multi_update_file_progress(id, percent);
            },
            onUploadSuccess: function (id, data) {
                var fileId = data.fileId;
                var fileName = data.filename;
                $("#AttachmentCode9").val(fileId);
                $("#AttachmentValue9").val(fileName);
                $("#Av1").html("");


                ui_multi_update_file_status(id, 'success', 'Upload Complete');
                ui_multi_update_file_progress(id, 100, 'success', false);
            },
            onUploadError: function (id, xhr, status, message) {
                ui_multi_update_file_status(id, 'danger', message);
                ui_multi_update_file_progress(id, 0, 'danger', false);
            },
            onFallbackMode: function () {
            },
            onFileSizeError: function (file) {
            }
        });
    }

    function onFileUploadSuccess10(e) {
        var fileId = e.response.fileId;
        var fileName = e.response.filename;
        $("#AttachmentCode10").val(fileId);
        $("#AttachmentValue10").val(fileName);
        $("#Av10").html("");
    }
    function uploadFile10() {
        $("#attachment10").dmUploader({ //
            url: '/Cms/Task/SaveAttachment', //- controller
            multiple: false,
            extFilter: ["jpg", "jpeg", "png", "gif"],
            maxFileSize: 3000000, // 3 Megs 
            onDragEnter: function () {
                // Happens when dragging something over the DnD area
                this.addClass('active');
            },
            onDragLeave: function () {
                this.removeClass('active');
            },
            onInit: function () {
            },
            onComplete: function () {
            },
            onNewFile: function (id, file) {
                ui_multi_add_file(id, file);
            },
            onBeforeUpload: function (id) {
                ui_multi_update_file_status(id, 'uploading', 'Uploading...');
                ui_multi_update_file_progress(id, 0, '', true);
            },
            onUploadCanceled: function (id) {
                ui_multi_update_file_status(id, 'warning', 'Canceled by User');
                ui_multi_update_file_progress(id, 0, 'warning', false);
            },
            onUploadProgress: function (id, percent) {
                ui_multi_update_file_progress(id, percent);
            },
            onUploadSuccess: function (id, data) {
                var fileId = data.fileId;
                var fileName = data.filename;
                $("#AttachmentCode10").val(fileId);
                $("#AttachmentValue10").val(fileName);
                $("#Av1").html("");


                ui_multi_update_file_status(id, 'success', 'Upload Complete');
                ui_multi_update_file_progress(id, 100, 'success', false);
            },
            onUploadError: function (id, xhr, status, message) {
                ui_multi_update_file_status(id, 'danger', message);
                ui_multi_update_file_progress(id, 0, 'danger', false);
            },
            onFallbackMode: function () {
            },
            onFileSizeError: function (file) {
            }
        });
    }

</script>
<script type="text/x-kendo-tmpl" id="templateNotification">
    <div>
        <div class="row" style="padding:3px;margin-left:10px;margin-right:5px;">

            <div class="col-11" id="openTask" style="padding: 5px;cursor:pointer;"  title="click to open Notification" onclick="OpenTask('#:ReferenceTypeId#');">

                <span style="font-size:1em; color:Highlight">#if(Subject != null) {# #:Subject# #} else{# 'NA' #}#</span>



            </div>

        </div>

        <hr style="margin-bottom: 1px !important;">

    </div>
</script>
<div style="margin-left:15px;" class="Task_Card">
    @if (Model.BannerId != null)
    {
        <div>

            <img class="template-banner" style="height:100px;@Model.BannerStyle" src="/cms/Document/GetImageMongo?id=@Model.BannerId" />
        </div>
    }
  
    <form asp-area="CMS" asp-controller="Task" asp-action="Manage" class="form-horizontal"
          data-ajax-begin="onAjaxBegin" data-ajax-complete="onAjaxComplete"
          data-ajax-failure="onAjaxFailed" data-ajax-success="onAjaxSuccess"
          data-ajax="true" data-ajax-method="POST" id="taskForm">
        <div id="validation-summary" class="text-danger" asp-validation-summary="All"></div>



        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-9">
                        <h5 class="card-title" style="color:red">Task No #:&nbsp;@Model.TaskNo</h5>
                    </div>
                    <div class="col-3">
                        <span class="" style="position:relative;top:-3px;color:#e55705;">
                            @*@(Html.Kendo().DropDownListFor(x => x.TaskVersionId)
                                                                    .HtmlAttributes(new { @class = "hr-xx-small" })
                                                                    .DataTextField("EnumId")
                                                                    .Events(x => x.Change("OnVersionChange"))
                                                                    .DataValueField("Id")
                                                                    .DataSource(source =>
                                                                    {
                                                                        source.Read(read =>
                                                                        {
                                                                            read.Action("GetVersionList", "Task", new { area = "Cms", taskId = Model.Id, versionId = Model.TaskVersionId });
                                                                        }).ServerFiltering(true);
                                                                    })
                                                                    .Enable(!Model.SaveNewVersionButton)
                                                                    .AutoBind(true)

                                )*@

                            <input asp-for="TaskVersionId" id="TaskVersionId" class="hr-xx-small"/>

                        </span>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="form-group col-4">
                        <div class="col-md-12 label-div">
                            <i class="fad fa-indent"></i>
                            @Html.LabelFor(x => x.Subject, Model.SubjectLabelName, new { @class = "control-label" })
                        </div>
                        <div class="col-md-9">
                            @if (Model.IsSubjectEditable && Model.CanEditHeader)
                            {
                                @*@Html.Kendo().TextBoxFor(x => x.Subject).HtmlAttributes(new { @class = "hr-xxl-large" })*@
                                <input type="text" asp-for="Subject" class="form-control"  />
                            }
                            else
                            {
                                @Html.DisplayFor(x => x.Subject, new { @class = "form-control hr-xxl-large" })
                                @Html.HiddenFor(x => x.Subject)
                            }
                        </div>
                    </div>
                    <div class="form-group col-4">
                        <div class="col-md-12 label-div">
                            @Html.LabelFor(x => x.AssignToType, "Assign To Type", new { @class = "control-label" })
                        </div>
                        @if (Model.CanEditHeader)
                        {
                            <div class="col-md-9">

                                @Html.DisplayFor(x => x.AssignToType)
                                @Html.HiddenFor(x => x.AssignToType)
                            </div>
                        }
                        else
                        {
                            <div class="col-md-9">
                                @Html.DisplayFor(x => x.AssignToType)
                                @Html.HiddenFor(x => x.AssignToType)
                            </div>
                        }
                    </div>
                    @if (Model.AssigneeTeamId.IsNotNullAndNotEmpty())
                    {
                        if (Model.CanEditHeader)
                        {
                            <div class="form-group col-4" id="div-team">
                                <div class="col-md-12 label-div">
                                    @Html.LabelFor(x => x.AssigneeTeamId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-9">
                                    @*@(Html.Kendo().DropDownListFor(model => model.AssigneeTeamId)
                                            .HtmlAttributes(new { @class = "hr-x-large" })
                                            .OptionLabel("Select")
                                            //.Events(e => e.Change("OnTeamChange"))
                                            .DataTextField("Name")
                                            .DataValueField("Id")
                                            .DataSource(source =>
                                            {
                                                source.Read(read =>
                                                        {
                                                            read.Action("GetTeamList", "Team", new { area = "CMS" });
                                                        });
                                            })
                                            .AutoBind(true)
                                            .Filter(FilterType.Contains)
                                )*@

                                    <input asp-for="AssigneeTeamId" id="AssigneeTeamId" class="hr-x-large" />
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="form-group col-4" id="div-team">
                                <div class="col-md-12 label-div">
                                    @Html.LabelFor(x => x.AssigneeTeamId, new { @class = "control-label" })
                                </div>
                                <div class="col-md-9">
                                    @*@(Html.Kendo().DropDownListFor(model => model.AssigneeTeamId)
                                            .HtmlAttributes(new { @class = "hr-x-large", @readonly = "readonly" })
                                            .OptionLabel("Select")
                                            //.Events(e => e.Change("OnTeamChange"))
                                            .DataTextField("Name")
                                            .DataValueField("Id")
                                            .DataSource(source =>
                                            {
                                                source.Read(read =>
                                                        {
                                                            read.Action("GetTeamList", "Team", new { area = "CMS" });
                                                        });
                                            })
                                            .AutoBind(true)
                                            .Filter(FilterType.Contains)
                                )*@

                                    <input asp-for="AssigneeTeamId" id="AssigneeTeamId" class="hr-x-large" readonly="readonly"/>
                                </div>
                            </div>
                            @Html.HiddenFor(x => x.AssigneeTeamId)
                        }
                    }
                    @if (Model.AssigneeUserId.IsNotNullAndNotEmpty())
                    {
                        if (Model.CanEditHeader)
                        {
                            <div class="form-group col-4" id="div-user">
                                <div class="col-md-12 label-div">
                                    @Html.LabelFor(x => x.AssigneeUserId, "Assign To", new { @class = "control-label" })
                                </div>
                                <div class="col-md-9">
                                    @*@(Html.Kendo().DropDownListFor(model => model.AssigneeUserId)
                                            .HtmlAttributes(new { @class = "hr-x-large" })
                                            .OptionLabel("Select")
                                            //.Events(e => e.Change("OnTeamChange"))
                                            .DataTextField("Name")
                                            .DataValueField("Id")
                                            .DataSource(source =>
                                            {
                                                source.Read(read =>
                                                        {
                                                            read.Action("GetUserIdNameList", "User", new { area = "CMS" });
                                                        });
                                            })
                                            .AutoBind(true)
                                            .Filter(FilterType.Contains)
                                )*@

                                    <input asp-for="AssigneeUserId" id="AssigneeUserId" class="hr-x-large" />
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="form-group col-4" id="div-user">
                                <div class="col-md-12 label-div">
                                    @Html.LabelFor(x => x.AssigneeUserId, "Assign To", new { @class = "control-label" })
                                </div>
                                <div class="col-md-9">
                                    @*@(Html.Kendo().DropDownListFor(model => model.AssigneeUserId)
                                            .HtmlAttributes(new { @class = "hr-x-large", @readonly = "readonly" })
                                            .OptionLabel("Select")
                                            //.Events(e => e.Change("OnTeamChange"))
                                            .DataTextField("Name")
                                            .DataValueField("Id")
                                            .DataSource(source =>
                                            {
                                                source.Read(read =>
                                                        {
                                                            read.Action("GetUserIdNameList", "User", new { area = "CMS" });
                                                        });
                                            })
                                            .AutoBind(true)
                                            .Filter(FilterType.Contains)
                                )*@

                                    <input asp-for="AssigneeUserId" id="AssigneeUserId" class="hr-x-large" readonly="readonly"/>
                                </div>
                            </div>
                            @Html.HiddenFor(x => x.AssigneeUserId)
                        }
                    }
                </div>
                <div class="row">
                    <div class="form-group col-12">
                        <div class="col-md-12 label-div">
                            <i class="fad fa-indent"></i>
                            @Html.LabelFor(x => x.Description, Model.DescriptionLabelName, new { @class = "control-label" })
                        </div>
                        <div class="col-md-9">
                            @if (Model.IsDescriptionEditable && Model.CanEditHeader)
                            {
                                @Html.Kendo().TextBoxFor(x => x.Description).HtmlAttributes(new { @class = "hr-xxl-large" })
                                <input type="text" asp-for="Description" class="form-control" />
                            }
                            else
                            {
                                @Html.DisplayFor(x => x.Description, new { @class = "form-control hr-xxl-large" })
                                @Html.HiddenFor(x => x.Description)
                            }
                        </div>
                    </div>
                </div>
                @*<div class="row">

                    </div>*@

                <div class="row">
                    @if (Model.CandidateName.IsNotNullAndNotEmpty())
                    {
                        <div class="form-group col-4">
                            <div class="col-md-12 label-div">
                                @Html.LabelFor(x => x.CandidateName, "Candidate Name", new { @class = "control-label" })
                            </div>
                            <div class="col-md-9">
                                @Html.DisplayFor(x => x.CandidateName, new { @class = "form-control hr-xxl-large" })
                            </div>
                        </div>
                    }
                    @if (Model.JobName.IsNotNullAndNotEmpty())
                    {
                        <div class="form-group col-4">
                            <div class="col-md-12 label-div">
                                @Html.LabelFor(x => x.JobName, "Job Name", new { @class = "control-label" })
                            </div>
                            <div class="col-md-9">
                                @Html.DisplayFor(x => x.JobName, new { @class = "form-control hr-xxl-large" })
                            </div>
                        </div>
                    }
                    @if (Model.OrgUnitName.IsNotNullAndNotEmpty())
                    {
                        <div class="form-group col-4">
                            <div class="col-md-12 label-div">
                                @Html.LabelFor(x => x.OrgUnitName, "Org Unit", new { @class = "control-label" })
                            </div>
                            <div class="col-md-9">
                                @Html.DisplayFor(x => x.OrgUnitName, new { @class = "form-control hr-xxl-large" })
                            </div>
                        </div>
                    }
                </div>
                <div class="row">

                    @if (Model.GaecNo.IsNotNullAndNotEmpty())
                    {
                        <div class="form-group col-6">
                            <div class="col-md-12 label-div">
                                @Html.LabelFor(x => x.GaecNo, "GAEC No", new { @class = "control-label" })
                            </div>
                            <div class="col-md-9">
                                @Html.DisplayFor(x => x.GaecNo, new { @class = "form-control hr-xxl-large" })
                            </div>
                        </div>
                    }
                </div>

            </div>
        </div>
        <div class="card">
            <div class="card-body">
                <h5 class="card-title" style="color:darkgrey">Notification</h5>
                <hr />
                <div class="sub-div">
                    @*@(Html.Kendo().ListView<NotificationViewModel>()
                        .Name("kgrdNotification")
                        .TagName("div")
                        .ClientTemplateId("templateNotification")
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .Read(read => read.Action("ReadNotificationDataByTask", "Notification", new { Area = "Recruitment", referenceType = Model.NtsType,referenceId=Model.Id }))
                        )
                        //.Events(events => events.DataBound("OnDataBoundPending"))
                        .HtmlAttributes(new { @style = "min-width:1000px;" })
                    )*@

                    <div id="kgrdNotification" style="min-width:1000px;"></div>
                </div>
            </div>

        </div>
        <div class="accordion" id="accordionExample">
            <div class="card">
                <div class="card-header" id="headingOne">
                    <h2 class="mb-0">
                        <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                            SLA Details
                        </button>
                    </h2>
                </div>

                <div id="collapseOne" class="collapse hide" aria-labelledby="headingOne" data-parent="#accordionExample">
                    <div class="card-body">
                        <div class="row">
                            @if (!Model.HideDateAndSLA.ToSafeBool())
                            {
                                <div class="form-group col-6">
                                    <div class="col-md-3 label-div">
                                        @Html.LabelFor(x => x.StartDate, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-9">
                                        @if (Model.CanEditHeader)
                                        {
                                            @*@Html.Kendo().DateTimePickerFor(x => x.StartDate).HtmlAttributes(new { @class = "hr-large" })*@
                                            @Html.DisplayFor(x => x.StartDate, new { @class = "form-control hr-xxl-large" })
                                            @Html.HiddenFor(x => x.StartDate)
                                        }
                                        else
                                        {
                                            @Html.DisplayFor(x => x.StartDate, new { @class = "form-control hr-xxl-large" })
                                            @Html.HiddenFor(x => x.StartDate)

                                        }
                                    </div>
                                </div>
                            }
                            @if (!Model.HideDateAndSLA.ToSafeBool())
                            {

                                <div class="form-group col-6">
                                    <div class="col-md-3 label-div">
                                        @Html.LabelFor(x => x.DueDate, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-9" style="width:620px;">
                                        @if (Model.CanEditHeader)
                                        {

                                            @*@Html.Kendo().DateTimePickerFor(x => x.DueDate).HtmlAttributes(new { @class = "hr-large", })*@
                                            @Html.DisplayFor(x => x.DueDate, new { @class = "form-control hr-xxl-large" })
                                            @Html.HiddenFor(x => x.DueDate)
                                        }
                                        else
                                        {

                                            @Html.DisplayFor(x => x.DueDate, new { @class = "form-control hr-xxl-large" })
                                            @Html.HiddenFor(x => x.DueDate)

                                        }

                                    </div>
                                </div>
                            }
                        </div>
                        <div class="row">
                            @if (!Model.HideDateAndSLA.ToSafeBool())
                            {
                                <div class="form-group col-6">
                                    <div class="col-md-3 label-div">
                                        @Html.LabelFor(x => x.SLA, new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-9">
                                        <span class="slaid">
                                            @Html.DisplayFor(x => x.SLA)
                                        </span>
                                        @Html.HiddenFor(x => x.SLA)
                                    </div>
                                </div>
                            }

                        </div>

                    </div>
                </div>
            </div>
        </div>
        @if (Model.ReferenceTypeCode == ReferenceTypeEnum.NTS_Task && Model.TaskStatusCode != "DRAFT" && Model.ServiceDetailsHeight.IsNotNullAndNotEmpty())
        {
            <div class="accordion" id="accordionService">
                <div class="card">
                    <div class="card-header" id="headingService">
                        <h2 class="mb-0">
                            <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseService" aria-expanded="true" aria-controls="collapseOne">
                                Service Details
                            </button>
                            <span class="fal fa-window-restore" style="font-size:20px;color:Highlight;cursor:pointer" title="Open Service" onclick="OnService()"></span>
                        </h2>
                    </div>

                    <div id="collapseService" class="collapse hide" aria-labelledby="headingService" data-parent="#accordionService">
                        <div class="card-body">
                            <iframe src="/cms/task/service?taskId=@Model.ReferenceTypeId&isPopUp=true&isSimpleCard=true" width="100%" height="@Model.ServiceDetailsHeight"></iframe>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="card">
            <div class="card-body">
                <h5 class="card-title" style="color:darkgrey">Details - @Model.Subject</h5>
                <hr />
                <div class="row no-gutters">
                    @if (Model.UdfIframeSrc.IsNullOrEmpty())
                    {
                        <div class="col-md-10">

                            <div class="row">
                                @if (Model.TextBoxDisplay1.IsNotNullAndNotEmpty() && Model.TextBoxDisplayType1 != NtsFieldType.NTS_HtmlArea)
                                {

                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredTextBoxDisplay1)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.TextDisplay1, Model.TextBoxDisplay1, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @if (Model.TextBoxDisplayType1 == NtsFieldType.NTS_TextArea)
                                            {
                                                @if (Model.IsTextBoxEdit1)
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue1, new { @class = "hr-xxl-large", @rows = "4", @cols = "24", @style = "border-color:lightgray" })

                                                }
                                                else
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue1, new { @class = "hr-xxl-large", @readonly = "readonly", @rows = "4", @cols = "24", @style = "border-color:lightgray" })
                                                    @Html.HiddenFor(x => x.TextValue1)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType1 == NtsFieldType.NTS_HyperLink)
                                            {
                                                <div onclick="onLinkView('@Model.TextBoxLink1')" style="cursor:pointer" title="Click here to view">
                                                    <span style="font-size: 20px;text-align: center;color: dodgerblue">
                                                        @Model.TextBoxDisplay1
                                                    </span>
                                                </div>
                                            }
                                            else if (Model.TextBoxDisplayType1 == NtsFieldType.NTS_DatePicker)
                                            {
                                                @Html.Kendo().DatePickerFor(x => x.DatePickerValue1).Format("dd MMM yyyy").Enable(Model.IsTextBoxEdit1)
                                                @if (!Model.IsTextBoxEdit1)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue1)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType1 == NtsFieldType.NTS_DateTimePicker)
                                            {
                                                @Html.Kendo().DateTimePickerFor(x => x.DatePickerValue1).HtmlAttributes(new { @style = "width:275px" }).Format("{0:dd MMM yyyy HH:mm}").Enable(Model.IsTextBoxEdit1)
                                                @if (!Model.IsTextBoxEdit1)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue1)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType1 == NtsFieldType.NTS_Attachment)
                                            {
                                                if (Model.IsTextBoxEdit1)
                                                {
                                                    @*@(Html.Kendo().Upload().Multiple(false)
                .Name("files1")
                .Async(a => a
                .Save("SaveAttachment", "Task", new { @Area="Cms"})
                .SaveField("files")
                .AutoUpload(true)
                )
                    .Events(e => e.Success("onFileUploadSuccess1"))
                    .HtmlAttributes(new { @class = "hr-large" })
                )*@
                                                    @*<div class="row">
                                                        <div class="col">
                                                            <div id="attachment1" class="dm-uploader">
                                                                <h6 class=" text-muted">Drag &amp; drop files here</h6>

                                                                <div class="btn btn-primary btn-block ">
                                                                    <span>Open the file Browser</span>
                                                                    <input type="file" title='Click to add Files' />
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>*@
                                                await Html.RenderPartialAsync("~/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AttachmentCode2), Value = Model.AttachmentCode2 });

                                            }
                                                @*<div onclick="onDownload('@Model.AttachmentCode1')" style="cursor:pointer" title="Click here to download">
                                                    <span style="font-size: 18px;text-align: center;color: dodgerblue" id="Av1">
                                                        @Model.AttachmentValue1
                                                    </span>
                                                </div>*@
                                                @Html.HiddenFor(x => x.AttachmentCode1)
                                                @Html.HiddenFor(x => x.AttachmentValue1)
                                            }
                                            else
                                            {
                                                @*@Html.Kendo().TextBoxFor(x => x.TextValue1).HtmlAttributes(new { @class = "hr-xxl-large" }).Enable(Model.IsTextBoxEdit1)*@
                                                @if (Model.IsTextBoxEdit1)
                                                {
                                                    <input type="text" asp-for="TextValue1" id="TextValue1" class="hr-xxl-large" />
                                                }
                                                @if (!Model.IsTextBoxEdit1)
                                                {
                                                    @Html.HiddenFor(x => x.TextValue1)
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="form-group col-12">
                                        <div class="col-md-12 label-div">
                                            @Html.Raw(Model.TextBoxDisplay1)
                                        </div>
                                    </div>
                                }
                                @if (Model.IsDropdownDisplay1.IsNotNullAndNotEmpty())
                                {
                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredDropdownDisplay1)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.DropdownDisplay1, Model.IsDropdownDisplay1, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @*@(Html.Kendo().DropDownListFor(model => model.DropdownValue1)
        .HtmlAttributes(new { @class = "hr-x-large" })
        .OptionLabel("Select")
        .DataTextField("Name")
        .DataValueField("Id")
        .Events(e=>e.Change("onDropDownListChange1"))
        .DataSource(source =>
        {
            source.Read(read =>
                    {
                        read.Url(Model.DropdownValueMethod1);
                    });
        })
        .AutoBind(true)
        .Filter(FilterType.Contains).Enable(Model.IsDropDownEdit1)
        )*@
                                            <input asp-for="DropdownValue1" id="DropdownValue1" class="hr-x-large" />
                                            @if (!Model.IsDropDownEdit1)
                                            {
                                                @Html.HiddenFor(x => x.DropdownValue1)
                                            }
                                        </div>
                                    </div>
                                }

                                @if (Model.TextBoxDisplay2.IsNotNullAndNotEmpty())
                                {

                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredTextBoxDisplay2)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.TextDisplay2, Model.TextBoxDisplay2, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @if (Model.TextBoxDisplayType2 == NtsFieldType.NTS_TextArea)
                                            {
                                                @if (Model.IsTextBoxEdit2)
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue2, new { @class = "hr-xxl-large", @rows = "4", @cols = "24", @style = "border-color:lightgray" })

                                                }
                                                else
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue2, new { @class = "hr-xxl-large", @readonly = "readonly", @rows = "4", @cols = "24", @style = "border-color:lightgray" })
                                                    @Html.HiddenFor(x => x.TextValue2)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType2 == NtsFieldType.NTS_HyperLink)
                                            {
                                                <div onclick="onLinkView('@Model.TextBoxLink2')" style="cursor:pointer" title="Click here to view">
                                                    <span style="font-size: 20px;text-align: center;color: dodgerblue">
                                                        @Model.TextBoxDisplay2
                                                    </span>
                                                </div>
                                            }
                                            else if (Model.TextBoxDisplayType2 == NtsFieldType.NTS_DatePicker)
                                            {
                                                @Html.Kendo().DatePickerFor(x => x.DatePickerValue2).Format("dd MMM yyyy").Enable(Model.IsTextBoxEdit2)
                                                @if (!Model.IsTextBoxEdit2)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue2)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType2 == NtsFieldType.NTS_DateTimePicker)
                                            {
                                                @Html.Kendo().DateTimePickerFor(x => x.DatePickerValue2).HtmlAttributes(new { @style = "width:275px" }).Format("{0:dd MMM yyyy HH:mm}").Enable(Model.IsTextBoxEdit2)
                                                @if (!Model.IsTextBoxEdit2)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue2)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType2 == NtsFieldType.NTS_Attachment)
                                            {
                                                if (Model.IsTextBoxEdit2)
                                                {
                                                    @*@(Html.Kendo().Upload().Multiple(false)
                .Name("files2")
                .Async(a => a
                .Save("SaveAttachment", "Task", new { @Area="Cms"})
                .SaveField("files")
                .AutoUpload(true)
                )
                    .Events(e => e.Success("onFileUploadSuccess2"))
                    .HtmlAttributes(new { @class = "hr-large" }).Enable(Model.IsTextBoxEdit2)
                )*@
                                                    @*<div class="row">
                                                        <div class="col">
                                                            <div id="attachment2" class="dm-uploader">
                                                                <h6 class=" text-muted">Drag &amp; drop files here</h6>

                                                                <div class="btn btn-primary btn-block ">
                                                                    <span>Open the file Browser</span>
                                                                    <input type="file" title='Click to add Files' />
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>*@

                                                await Html.RenderPartialAsync("~/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AttachmentCode2), Value = Model.AttachmentCode2 });

                                            }
                                                @*<div onclick="onDownload('@Model.AttachmentCode2')" style="cursor:pointer" title="Click here to download">
                                                    <span style="font-size: 18px;text-align: center;color: dodgerblue" id="Av2">
                                                        @Model.AttachmentValue2
                                                    </span>
                                                </div>*@
                                                @Html.HiddenFor(x => x.AttachmentCode2)
                                                @Html.HiddenFor(x => x.AttachmentValue2)
                                            }
                                            else
                                            {
                                                @*@Html.Kendo().TextBoxFor(x => x.TextValue2).HtmlAttributes(new { @class = "hr-xxl-large" }).Enable(Model.IsTextBoxEdit2)*@
                                                @if (Model.IsTextBoxEdit2)
                                                {
                                                    <input type="text" asp-for="TextValue2" id="TextValue2" class="hr-xxl-large" />
                                                }
                                                @if (!Model.IsTextBoxEdit2)
                                                {
                                                    @Html.HiddenFor(x => x.TextValue2)
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                @if (Model.IsDropdownDisplay2.IsNotNullAndNotEmpty())
                                {
                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredDropdownDisplay2)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.DropdownDisplay2, Model.IsDropdownDisplay2, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @*@(Html.Kendo().DropDownListFor(model => model.DropdownValue2)
        .HtmlAttributes(new { @class = "hr-x-large" })
        .OptionLabel("Select")
        .DataTextField("Name")
        .DataValueField("Id")
        .Events(e => e.Change("onDropDownListChange2"))
        .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Url(Model.DropdownValueMethod2);
            });
        })
        .AutoBind(true)
        .Filter(FilterType.Contains).Enable(Model.IsDropDownEdit2)
        )*@
                                            <input asp-for="DropdownValue2" id="DropdownValue2" class="hr-x-large" />
                                            @if (!Model.IsDropDownEdit2)
                                            {
                                                @Html.HiddenFor(x => x.DropdownValue2)
                                            }
                                        </div>
                                    </div>
                                }

                                @if (Model.TextBoxDisplay3.IsNotNullAndNotEmpty())
                                {

                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredTextBoxDisplay3)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.TextDisplay3, Model.TextBoxDisplay3, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @if (Model.TextBoxDisplayType3 == NtsFieldType.NTS_TextArea)
                                            {
                                                @if (Model.IsTextBoxEdit3)
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue3, new { @class = "hr-xxl-large", @rows = "4", @cols = "24", @style = "border-color:lightgray" })

                                                }
                                                else
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue3, new { @class = "hr-xxl-large", @readonly = "readonly", @rows = "4", @cols = "24", @style = "border-color:lightgray" })
                                                    @Html.HiddenFor(x => x.TextValue3)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType3 == NtsFieldType.NTS_HyperLink)
                                            {
                                                <div onclick="onLinkView('@Model.TextBoxLink3')" style="cursor:pointer" title="Click here to view">
                                                    <span style="font-size: 20px;text-align: center;color: dodgerblue">
                                                        @Model.TextBoxDisplay3
                                                    </span>
                                                </div>
                                            }
                                            else if (Model.TextBoxDisplayType3 == NtsFieldType.NTS_DatePicker)
                                            {
                                                @Html.Kendo().DatePickerFor(x => x.DatePickerValue3).Format("dd MMM yyyy").Enable(Model.IsTextBoxEdit3)
                                                @if (!Model.IsTextBoxEdit3)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue3)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType3 == NtsFieldType.NTS_DateTimePicker)
                                            {
                                                @Html.Kendo().DateTimePickerFor(x => x.DatePickerValue3).HtmlAttributes(new { @style = "width:275px" }).Format("{0:dd MMM yyyy HH:mm}").Enable(Model.IsTextBoxEdit3)
                                                @if (!Model.IsTextBoxEdit3)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue3)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType3 == NtsFieldType.NTS_Attachment)
                                            {
                                                if (Model.IsTextBoxEdit3)
                                                {
                                                    @*@(Html.Kendo().Upload().Multiple(false)
                .Name("files3")
                .Async(a => a
                .Save("SaveAttachment", "Task", new { @Area="Cms"})
                .SaveField("files")
                .AutoUpload(true)
                )
                    .Events(e => e.Success("onFileUploadSuccess3"))
                    .HtmlAttributes(new { @class = "hr-large" }).Enable(Model.IsTextBoxEdit3)
                )*@
                                                    @*<div class="row">
                                                        <div class="col">
                                                            <div id="attachment3" class="dm-uploader">
                                                                <h6 class=" text-muted">Drag &amp; drop files here</h6>

                                                                <div class="btn btn-primary btn-block ">
                                                                    <span>Open the file Browser</span>
                                                                    <input type="file" title='Click to add Files' />
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>*@

                                                await Html.RenderPartialAsync("~/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AttachmentCode3), Value = Model.AttachmentCode3 });

                                            }
                                                @*<div onclick="onDownload('@Model.AttachmentCode3')" style="cursor:pointer" title="Click here to download">
                                                    <span style="font-size: 18px;text-align: center;color: dodgerblue" id="Av3">
                                                        @Model.AttachmentValue3
                                                    </span>
                                                </div>*@

                                                @Html.HiddenFor(x => x.AttachmentCode3)
                                                @Html.HiddenFor(x => x.AttachmentValue3)
                                            }
                                            else
                                            {
                                                @*@Html.Kendo().TextBoxFor(x => x.TextValue3).HtmlAttributes(new { @class = "hr-xxl-large" }).Enable(Model.IsTextBoxEdit3)*@
                                                @if (Model.IsTextBoxEdit3)
                                                {
                                                    <input type="text" asp-for="TextValue3" id="TextValue3" class="hr-xxl-large" />
                                                }
                                                @if (!Model.IsTextBoxEdit3)
                                                {
                                                    @Html.HiddenFor(x => x.TextValue3)
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                @if (Model.IsDropdownDisplay3.IsNotNullAndNotEmpty())
                                {
                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredDropdownDisplay3)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.DropdownDisplay3, Model.IsDropdownDisplay3, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @*@(Html.Kendo().DropDownListFor(model => model.DropdownValue3)
                                        .HtmlAttributes(new { @class = "hr-x-large" })
                                        .OptionLabel("Select")
                                        .DataTextField("Name")
                                        .DataValueField("Id")
                                        .Events(e => e.Change("onDropDownListChange3"))
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Url(Model.DropdownValueMethod3);
                                            });
                                        })
                                        .AutoBind(true)
                                        .Filter(FilterType.Contains).Enable(Model.IsDropDownEdit3)
                                        )*@

                                            <input asp-for="DropdownValue3" id="DropdownValue3" class="hr-x-large" />
                                            @if (!Model.IsDropDownEdit3)
                                            {
                                                @Html.HiddenFor(x => x.DropdownValue3)
                                            }
                                        </div>
                                    </div>
                                }

                                @if (Model.TextBoxDisplay4.IsNotNullAndNotEmpty())
                                {

                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredTextBoxDisplay4)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.TextDisplay4, Model.TextBoxDisplay4, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @if (Model.TextBoxDisplayType4 == NtsFieldType.NTS_TextArea)
                                            {
                                                @if (Model.IsTextBoxEdit4)
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue4, new { @class = "hr-xxl-large", @rows = "4", @cols = "24", @style = "border-color:lightgray" })

                                                }
                                                else
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue4, new { @class = "hr-xxl-large", @readonly = "readonly", @rows = "4", @cols = "24", @style = "border-color:lightgray" })
                                                    @Html.HiddenFor(x => x.TextValue4)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType4 == NtsFieldType.NTS_HyperLink)
                                            {
                                                <div onclick="onLinkView('@Model.TextBoxLink4')" style="cursor:pointer" title="Click here to view">
                                                    <span style="font-size: 20px;text-align: center;color: dodgerblue">
                                                        @Model.TextBoxDisplay4
                                                    </span>
                                                </div>
                                            }
                                            else if (Model.TextBoxDisplayType4 == NtsFieldType.NTS_DatePicker)
                                            {
                                                @Html.Kendo().DatePickerFor(x => x.DatePickerValue4).Format("dd MMM yyyy").Enable(Model.IsTextBoxEdit4)
                                                @if (!Model.IsTextBoxEdit4)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue4)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType4 == NtsFieldType.NTS_DateTimePicker)
                                            {
                                                @Html.Kendo().DateTimePickerFor(x => x.DatePickerValue4).HtmlAttributes(new { @style = "width:275px" }).Format("{0:dd MMM yyyy HH:mm}").Enable(Model.IsTextBoxEdit4)
                                                @if (!Model.IsTextBoxEdit4)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue4)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType4 == NtsFieldType.NTS_Attachment)
                                            {
                                                if (Model.IsTextBoxEdit4)
                                                {
                                                    @*@(Html.Kendo().Upload().Multiple(false)
                .Name("files4")
                .Async(a => a
                .Save("SaveAttachment", "Task", new { @Area="Cms"})
                .SaveField("files")
                .AutoUpload(true)
                )
                    .Events(e => e.Success("onFileUploadSuccess4"))
                    .HtmlAttributes(new { @class = "hr-large" }).Enable(Model.IsTextBoxEdit4)
                )*@
                                                    @*<div class="row">
                                                        <div class="col">
                                                            <div id="attachment4" class="dm-uploader">
                                                                <h6 class=" text-muted">Drag &amp; drop files here</h6>

                                                                <div class="btn btn-primary btn-block ">
                                                                    <span>Open the file Browser</span>
                                                                    <input type="file" title='Click to add Files' />
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>*@
                                                }
                                                @*<div onclick="onDownload('@Model.AttachmentCode4')" style="cursor:pointer" title="Click here to download">
                                                    <span style="font-size: 18px;text-align: center;color: dodgerblue" id="Av4">
                                                        @Model.AttachmentValue4
                                                    </span>
                                                </div>*@

                                            await Html.RenderPartialAsync("~/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AttachmentCode4), Value = Model.AttachmentCode4 });

                                                @Html.HiddenFor(x => x.AttachmentCode4)
                                                @Html.HiddenFor(x => x.AttachmentValue4)
                                            }
                                            else
                                            {
                                                @*@Html.Kendo().TextBoxFor(x => x.TextValue4).HtmlAttributes(new { @class = "hr-xxl-large" }).Enable(Model.IsTextBoxEdit4)*@
                                                @if (Model.IsTextBoxEdit4)
                                                {
                                                    <input type="text" asp-for="TextValue4" id="TextValue4" class="hr-xxl-large" />
                                                }
                                                @if (!Model.IsTextBoxEdit4)
                                                {
                                                    @Html.HiddenFor(x => x.TextValue4)
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                @if (Model.IsDropdownDisplay4.IsNotNullAndNotEmpty())
                                {
                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredDropdownDisplay4)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.DropdownDisplay4, Model.IsDropdownDisplay4, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @*@(Html.Kendo().DropDownListFor(model => model.DropdownValue4)
        .HtmlAttributes(new { @class = "hr-x-large" })
        .OptionLabel("Select")
        .DataTextField("Name")
        .DataValueField("Id")
        .Events(e => e.Change("onDropDownListChange4"))
        .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Url(Model.DropdownValueMethod4);
            });
        })
        .AutoBind(true)
        .Filter(FilterType.Contains).Enable(Model.IsDropDownEdit4)
        )*@

                                            <input asp-for="DropdownValue4" id="DropdownValue4" class="hr-x-large" />
                                            @if (!Model.IsDropDownEdit4)
                                            {
                                                @Html.HiddenFor(x => x.DropdownValue4)
                                            }
                                        </div>
                                    </div>
                                }

                                @if (Model.TextBoxDisplay5.IsNotNullAndNotEmpty())
                                {

                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredTextBoxDisplay5)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.TextDisplay5, Model.TextBoxDisplay5, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @if (Model.TextBoxDisplayType5 == NtsFieldType.NTS_TextArea)
                                            {
                                                @if (Model.IsTextBoxEdit5)
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue5, new { @class = "hr-xxl-large", @rows = "4", @cols = "24", @style = "border-color:lightgray" })

                                                }
                                                else
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue5, new { @class = "hr-xxl-large", @readonly = "readonly", @rows = "4", @cols = "24", @style = "border-color:lightgray" })
                                                    @Html.HiddenFor(x => x.TextValue5)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType5 == NtsFieldType.NTS_HyperLink)
                                            {
                                                <div onclick="onLinkView('@Model.TextBoxLink5')" style="cursor:pointer" title="Click here to view">
                                                    <span style="font-size: 20px;text-align: center;color: dodgerblue">
                                                        @Model.TextBoxDisplay5
                                                    </span>
                                                </div>
                                            }
                                            else if (Model.TextBoxDisplayType5 == NtsFieldType.NTS_DatePicker)
                                            {
                                                @Html.Kendo().DatePickerFor(x => x.DatePickerValue5).Format("dd MMM yyyy").Enable(Model.IsTextBoxEdit5)
                                                @if (!Model.IsTextBoxEdit5)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue5)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType5 == NtsFieldType.NTS_DateTimePicker)
                                            {
                                                @Html.Kendo().DateTimePickerFor(x => x.DatePickerValue5).HtmlAttributes(new { @style = "width:275px" }).Format("{0:dd MMM yyyy HH:mm}").Enable(Model.IsTextBoxEdit5)
                                                @if (!Model.IsTextBoxEdit5)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue5)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType5 == NtsFieldType.NTS_Attachment)
                                            {
                                                if (Model.IsTextBoxEdit5)
                                                {
                                                    @*@(Html.Kendo().Upload().Multiple(false)
                .Name("files5")
                .Async(a => a
                .Save("SaveAttachment", "Task", new { @Area="Cms"})
                .SaveField("files")
                .AutoUpload(true)
                )
                    .Events(e => e.Success("onFileUploadSuccess5"))
                    .HtmlAttributes(new { @class = "hr-large" }).Enable(Model.IsTextBoxEdit5)
                )*@
                                                    @*<div class="row">
                                                        <div class="col">
                                                            <div id="attachment5" class="dm-uploader">
                                                                <h6 class=" text-muted">Drag &amp; drop files here</h6>

                                                                <div class="btn btn-primary btn-block ">
                                                                    <span>Open the file Browser</span>
                                                                    <input type="file" title='Click to add Files' />
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>*@

                                                await Html.RenderPartialAsync("~/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AttachmentCode5), Value = Model.AttachmentCode5 });

                                            }
                                                @*<div onclick="onDownload('@Model.AttachmentCode5')" style="cursor:pointer" title="Click here to download">
                                                    <span style="font-size: 18px;text-align: center;color: dodgerblue" id="Av5">
                                                        @Model.AttachmentValue5
                                                    </span>
                                                </div>*@
                                                @Html.HiddenFor(x => x.AttachmentCode5)
                                                @Html.HiddenFor(x => x.AttachmentValue5)
                                            }
                                            else
                                            {
                                                @*@Html.Kendo().TextBoxFor(x => x.TextValue5).HtmlAttributes(new { @class = "hr-xxl-large" }).Enable(Model.IsTextBoxEdit5)*@
                                                @if (Model.IsTextBoxEdit5)
                                                {
                                                    <input type="text" asp-for="TextValue5" id="TextValue5" class="hr-xxl-large" />
                                                }
                                                @if (!Model.IsTextBoxEdit5)
                                                {
                                                    @Html.HiddenFor(x => x.TextValue5)
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                @if (Model.IsDropdownDisplay5.IsNotNullAndNotEmpty())
                                {
                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredDropdownDisplay5)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.DropdownDisplay5, Model.IsDropdownDisplay5, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @*@(Html.Kendo().DropDownListFor(model => model.DropdownValue5)
                                        .HtmlAttributes(new { @class = "hr-x-large" })
                                        .OptionLabel("Select")
                                        .DataTextField("Name")
                                        .DataValueField("Id")
                                        .Events(e => e.Change("onDropDownListChange5"))
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Url(Model.DropdownValueMethod5);
                                            });
                                        })
                                        .AutoBind(true)
                                        .Filter(FilterType.Contains).Enable(Model.IsDropDownEdit5)
                                        )*@

                                            <input asp-for="DropdownValue5" id="DropdownValue5" class="hr-x-large" />
                                            @if (!Model.IsDropDownEdit5)
                                            {
                                                @Html.HiddenFor(x => x.DropdownValue5)
                                            }
                                        </div>
                                    </div>
                                }

                                @if (Model.TextBoxDisplay6.IsNotNullAndNotEmpty())
                                {

                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredTextBoxDisplay6)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.TextDisplay6, Model.TextBoxDisplay6, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @if (Model.TextBoxDisplayType6 == NtsFieldType.NTS_TextArea)
                                            {
                                                @if (Model.IsTextBoxEdit6)
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue6, new { @class = "hr-xxl-large", @rows = "4", @cols = "24", @style = "border-color:lightgray" })

                                                }
                                                else
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue6, new { @class = "hr-xxl-large", @readonly = "readonly", @rows = "4", @cols = "24", @style = "border-color:lightgray" })
                                                    @Html.HiddenFor(x => x.TextValue6)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType6 == NtsFieldType.NTS_HyperLink)
                                            {
                                                <div onclick="onLinkView('@Model.TextBoxLink6')" style="cursor:pointer" title="Click here to view">
                                                    <span style="font-size: 20px;text-align: center;color: dodgerblue">
                                                        @Model.TextBoxDisplay6
                                                    </span>
                                                </div>
                                            }
                                            else if (Model.TextBoxDisplayType6 == NtsFieldType.NTS_DatePicker)
                                            {
                                                @Html.Kendo().DatePickerFor(x => x.DatePickerValue6).Format("dd MMM yyyy").Enable(Model.IsTextBoxEdit6)
                                                @if (!Model.IsTextBoxEdit6)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue6)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType6 == NtsFieldType.NTS_DateTimePicker)
                                            {
                                                @Html.Kendo().DateTimePickerFor(x => x.DatePickerValue6).HtmlAttributes(new { @style = "width:275px" }).Format("{0:dd MMM yyyy HH:mm}").Enable(Model.IsTextBoxEdit6)
                                                @if (!Model.IsTextBoxEdit6)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue6)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType6 == NtsFieldType.NTS_Attachment)
                                            {
                                                if (Model.IsTextBoxEdit6)
                                                {
                                                    @*@(Html.Kendo().Upload().Multiple(false)
                        .Name("files6")
                        .Async(a => a
                        .Save("SaveAttachment", "Task", new { @Area = "Cms" })
                        .SaveField("files")
                        .AutoUpload(true)
                        )
                            .Events(e => e.Success("onFileUploadSuccess6"))
                            .HtmlAttributes(new { @class = "hr-large" }).Enable(Model.IsTextBoxEdit6)
                )*@
                                                    @*<div class="row">
                                                        <div class="col">
                                                            <div id="attachment6" class="dm-uploader">
                                                                <h6 class=" text-muted">Drag &amp; drop files here</h6>

                                                                <div class="btn btn-primary btn-block ">
                                                                    <span>Open the file Browser</span>
                                                                    <input type="file" title='Click to add Files' />
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>*@
                                                await Html.RenderPartialAsync("~/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AttachmentCode6), Value = Model.AttachmentCode6 });

                                            }
                                                @*<div onclick="onDownload('@Model.AttachmentCode6')" style="cursor:pointer" title="Click here to download">
                                                    <span style="font-size: 18px;text-align: center;color: dodgerblue" id="Av6">
                                                        @Model.AttachmentValue6
                                                    </span>
                                                </div>*@
                                                @Html.HiddenFor(x => x.AttachmentCode6)
                                                @Html.HiddenFor(x => x.AttachmentValue6)
                                            }
                                            else
                                            {
                                                @*@Html.Kendo().TextBoxFor(x => x.TextValue6).HtmlAttributes(new { @class = "hr-xxl-large" }).Enable(Model.IsTextBoxEdit6)*@
                                                @if (Model.IsTextBoxEdit6)
                                                {
                                                    <input type="text" asp-for="TextValue6" id="TextValue6" class="hr-xxl-large" />
                                                }
                                                @if (!Model.IsTextBoxEdit6)
                                                {
                                                    @Html.HiddenFor(x => x.TextValue6)
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                @if (Model.IsDropdownDisplay6.IsNotNullAndNotEmpty())
                                {
                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredDropdownDisplay6)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.DropdownDisplay6, Model.IsDropdownDisplay6, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @*@(Html.Kendo().DropDownListFor(model => model.DropdownValue6)
                                        .HtmlAttributes(new { @class = "hr-x-large" })
                                        .OptionLabel("Select")
                                        .DataTextField("Name")
                                        .DataValueField("Id")
                                        .Events(e => e.Change("onDropDownListChange6"))
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Url(Model.DropdownValueMethod6);
                                            });
                                        })
                                        .AutoBind(true)
                                        .Filter(FilterType.Contains).Enable(Model.IsDropDownEdit6)
                                        )*@

                                            <input asp-for="DropdownValue6" id="DropdownValue6" class="hr-x-large" />
                                            @if (!Model.IsDropDownEdit6)
                                            {
                                                @Html.HiddenFor(x => x.DropdownValue6)
                                            }
                                        </div>
                                    </div>
                                }

                                @if (Model.TextBoxDisplay7.IsNotNullAndNotEmpty())
                                {

                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredTextBoxDisplay7)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.TextDisplay7, Model.TextBoxDisplay7, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @if (Model.TextBoxDisplayType7 == NtsFieldType.NTS_TextArea)
                                            {
                                                @if (Model.IsTextBoxEdit7)
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue7, new { @class = "hr-xxl-large", @rows = "4", @cols = "24", @style = "border-color:lightgray" })

                                                }
                                                else
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue7, new { @class = "hr-xxl-large", @readonly = "readonly", @rows = "4", @cols = "24", @style = "border-color:lightgray" })
                                                    @Html.HiddenFor(x => x.TextValue7)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType7 == NtsFieldType.NTS_HyperLink)
                                            {
                                                <div onclick="onLinkView('@Model.TextBoxLink7')" style="cursor:pointer" title="Click here to view">
                                                    <span style="font-size: 20px;text-align: center;color: dodgerblue">
                                                        @Model.TextBoxDisplay7
                                                    </span>
                                                </div>
                                            }
                                            else if (Model.TextBoxDisplayType7 == NtsFieldType.NTS_DatePicker)
                                            {
                                                @Html.Kendo().DatePickerFor(x => x.DatePickerValue7).Format("dd MMM yyyy").Enable(Model.IsTextBoxEdit7)
                                                @if (!Model.IsTextBoxEdit7)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue7)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType7 == NtsFieldType.NTS_DateTimePicker)
                                            {
                                                @Html.Kendo().DateTimePickerFor(x => x.DatePickerValue7).HtmlAttributes(new { @style = "width:275px" }).Format("{0:dd MMM yyyy HH:mm}").Enable(Model.IsTextBoxEdit7)
                                                @if (!Model.IsTextBoxEdit7)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue7)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType7 == NtsFieldType.NTS_Attachment)
                                            {
                                                if (Model.IsTextBoxEdit7)
                                                {
                                                    @*@(Html.Kendo().Upload().Multiple(false)
                        .Name("files7")
                        .Async(a => a
                        .Save("SaveAttachment", "Task", new { @Area = "Cms" })
                        .SaveField("files")
                        .AutoUpload(true)
                        )
                            .Events(e => e.Success("onFileUploadSuccess7"))
                            .HtmlAttributes(new { @class = "hr-large" }).Enable(Model.IsTextBoxEdit7)
                )*@
                                                    @*<div class="row">
                                                        <div class="col">
                                                            <div id="attachment7" class="dm-uploader">
                                                                <h6 class=" text-muted">Drag &amp; drop files here</h6>

                                                                <div class="btn btn-primary btn-block ">
                                                                    <span>Open the file Browser</span>
                                                                    <input type="file" title='Click to add Files' />
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>*@

                                                await Html.RenderPartialAsync("~/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AttachmentCode7), Value = Model.AttachmentCode7 });

                                            }
                                                @*<div onclick="onDownload('@Model.AttachmentCode7')" style="cursor:pointer" title="Click here to download">
                                                    <span style="font-size: 18px;text-align: center;color: dodgerblue" id="Av7">
                                                        @Model.AttachmentValue7
                                                    </span>
                                                </div>*@
                                                @Html.HiddenFor(x => x.AttachmentCode7)
                                                @Html.HiddenFor(x => x.AttachmentValue7)
                                            }
                                            else
                                            {
                                                @Html.Kendo().TextBoxFor(x => x.TextValue7).HtmlAttributes(new { @class = "hr-xxl-large" }).Enable(Model.IsTextBoxEdit7)
                                                @if (Model.IsTextBoxEdit7)
                                                {
                                                    <input type="text" asp-for="TextValue7" id="TextValue7" class="hr-xxl-large" />
                                                }
                                                @if (!Model.IsTextBoxEdit7)
                                                {
                                                    @Html.HiddenFor(x => x.TextValue7)
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                @if (Model.IsDropdownDisplay7.IsNotNullAndNotEmpty())
                                {
                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredDropdownDisplay7)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.DropdownDisplay7, Model.IsDropdownDisplay7, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @*@(Html.Kendo().DropDownListFor(model => model.DropdownValue7)
                                        .HtmlAttributes(new { @class = "hr-x-large" })
                                        .OptionLabel("Select")
                                        .DataTextField("Name")
                                        .DataValueField("Id")
                                        .Events(e => e.Change("onDropDownListChange7"))
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Url(Model.DropdownValueMethod7);
                                            });
                                        })
                                        .AutoBind(true)
                                        .Filter(FilterType.Contains).Enable(Model.IsDropDownEdit7)
                                        )*@

                                            <input asp-for="DropdownValue7" id="DropdownValue7" class="hr-x-large" />
                                            @if (!Model.IsDropDownEdit7)
                                            {
                                                @Html.HiddenFor(x => x.DropdownValue7)
                                            }
                                        </div>
                                    </div>
                                }

                                @if (Model.TextBoxDisplay8.IsNotNullAndNotEmpty())
                                {

                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredTextBoxDisplay8)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.TextDisplay8, Model.TextBoxDisplay8, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @if (Model.TextBoxDisplayType8 == NtsFieldType.NTS_TextArea)
                                            {
                                                @if (Model.IsTextBoxEdit8)
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue8, new { @class = "hr-xxl-large", @rows = "4", @cols = "24", @style = "border-color:lightgray" })

                                                }
                                                else
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue8, new { @class = "hr-xxl-large", @readonly = "readonly", @rows = "4", @cols = "24", @style = "border-color:lightgray" })
                                                    @Html.HiddenFor(x => x.TextValue8)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType8 == NtsFieldType.NTS_HyperLink)
                                            {
                                                <div onclick="onLinkView('@Model.TextBoxLink8')" style="cursor:pointer" title="Click here to view">
                                                    <span style="font-size: 20px;text-align: center;color: dodgerblue">
                                                        @Model.TextBoxDisplay8
                                                    </span>
                                                </div>
                                            }
                                            else if (Model.TextBoxDisplayType8 == NtsFieldType.NTS_DatePicker)
                                            {
                                                @Html.Kendo().DatePickerFor(x => x.DatePickerValue8).Format("dd MMM yyyy").Enable(Model.IsTextBoxEdit8)
                                                @if (!Model.IsTextBoxEdit8)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue8)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType8 == NtsFieldType.NTS_DateTimePicker)
                                            {
                                                @Html.Kendo().DateTimePickerFor(x => x.DatePickerValue8).HtmlAttributes(new { @style = "width:275px" }).Format("{0:dd MMM yyyy HH:mm}").Enable(Model.IsTextBoxEdit8)
                                                @if (!Model.IsTextBoxEdit8)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue8)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType8 == NtsFieldType.NTS_Attachment)
                                            {
                                                if (Model.IsTextBoxEdit8)
                                                {
                                                    @*@(Html.Kendo().Upload().Multiple(false)
                        .Name("files8")
                        .Async(a => a
                        .Save("SaveAttachment", "Task", new { @Area = "Cms" })
                        .SaveField("files")
                        .AutoUpload(true)
                        )
                            .Events(e => e.Success("onFileUploadSuccess8"))
                            .HtmlAttributes(new { @class = "hr-large" }).Enable(Model.IsTextBoxEdit8)
                )*@
                                                    @*<div class="row">
                                                        <div class="col">
                                                            <div id="attachment8" class="dm-uploader">
                                                                <h6 class=" text-muted">Drag &amp; drop files here</h6>

                                                                <div class="btn btn-primary btn-block ">
                                                                    <span>Open the file Browser</span>
                                                                    <input type="file" title='Click to add Files' />
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>*@

                                                await Html.RenderPartialAsync("~/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AttachmentCode8), Value = Model.AttachmentCode8 });

                                            }
                                                @*<div onclick="onDownload('@Model.AttachmentCode8')" style="cursor:pointer" title="Click here to download">
                                                    <span style="font-size: 18px;text-align: center;color: dodgerblue" id="Av8">
                                                        @Model.AttachmentValue8
                                                    </span>
                                                </div>*@
                                                @Html.HiddenFor(x => x.AttachmentCode8)
                                                @Html.HiddenFor(x => x.AttachmentValue8)
                                            }
                                            else
                                            {
                                                @*@Html.Kendo().TextBoxFor(x => x.TextValue8).HtmlAttributes(new { @class = "hr-xxl-large" }).Enable(Model.IsTextBoxEdit8)*@
                                                @if (Model.IsTextBoxEdit8)
                                                {
                                                    <input type="text" asp-for="TextValue8" id="TextValue8" class="hr-xxl-large" />
                                                }
                                                @if (!Model.IsTextBoxEdit8)
                                                {
                                                    @Html.HiddenFor(x => x.TextValue8)
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                @if (Model.IsDropdownDisplay8.IsNotNullAndNotEmpty())
                                {
                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredDropdownDisplay8)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.DropdownDisplay8, Model.IsDropdownDisplay8, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @*@(Html.Kendo().DropDownListFor(model => model.DropdownValue8)
        .HtmlAttributes(new { @class = "hr-x-large" })
        .OptionLabel("Select")
        .DataTextField("Name")
        .DataValueField("Id")
        .Events(e => e.Change("onDropDownListChange8"))
        .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Url(Model.DropdownValueMethod8);
            });
        })
        .AutoBind(true)
        .Filter(FilterType.Contains).Enable(Model.IsDropDownEdit8)
        )*@

                                            <input asp-for="DropdownValue8" id="DropdownValue8" class="hr-x-large" />
                                            @if (!Model.IsDropDownEdit8)
                                            {
                                                @Html.HiddenFor(x => x.DropdownValue8)
                                            }
                                        </div>
                                    </div>
                                }

                                @if (Model.TextBoxDisplay9.IsNotNullAndNotEmpty())
                                {

                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredTextBoxDisplay9)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.TextDisplay9, Model.TextBoxDisplay9, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @if (Model.TextBoxDisplayType9 == NtsFieldType.NTS_TextArea)
                                            {
                                                @if (Model.IsTextBoxEdit9)
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue9, new { @class = "hr-xxl-large", @rows = "4", @cols = "24", @style = "border-color:lightgray" })

                                                }
                                                else
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue9, new { @class = "hr-xxl-large", @readonly = "readonly", @rows = "4", @cols = "24", @style = "border-color:lightgray" })
                                                    @Html.HiddenFor(x => x.TextValue9)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType9 == NtsFieldType.NTS_HyperLink)
                                            {
                                                <div onclick="onLinkView('@Model.TextBoxLink9')" style="cursor:pointer" title="Click here to view">
                                                    <span style="font-size: 20px;text-align: center;color: dodgerblue">
                                                        @Model.TextBoxDisplay9
                                                    </span>
                                                </div>
                                            }
                                            else if (Model.TextBoxDisplayType9 == NtsFieldType.NTS_DatePicker)
                                            {
                                                @Html.Kendo().DatePickerFor(x => x.DatePickerValue9).Format("dd MMM yyyy").Enable(Model.IsTextBoxEdit9)
                                                @if (!Model.IsTextBoxEdit9)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue9)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType9 == NtsFieldType.NTS_DateTimePicker)
                                            {
                                                @Html.Kendo().DateTimePickerFor(x => x.DatePickerValue9).HtmlAttributes(new { @style = "width:275px" }).Format("{0:dd MMM yyyy HH:mm}").Enable(Model.IsTextBoxEdit9)
                                                @if (!Model.IsTextBoxEdit9)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue9)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType9 == NtsFieldType.NTS_Attachment)
                                            {
                                                if (Model.IsTextBoxEdit9)
                                                {
                                                    @*@(Html.Kendo().Upload().Multiple(false)
                        .Name("files9")
                        .Async(a => a
                        .Save("SaveAttachment", "Task", new { @Area = "Cms" })
                        .SaveField("files")
                        .AutoUpload(true)
                        )
                            .Events(e => e.Success("onFileUploadSuccess9"))
                            .HtmlAttributes(new { @class = "hr-large" }).Enable(Model.IsTextBoxEdit9)
                )*@
                                                    @*<div class="row">
                                                        <div class="col">
                                                            <div id="attachment9" class="dm-uploader">
                                                                <h6 class=" text-muted">Drag &amp; drop files here</h6>

                                                                <div class="btn btn-primary btn-block ">
                                                                    <span>Open the file Browser</span>
                                                                    <input type="file" title='Click to add Files' />
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>*@

                                                await Html.RenderPartialAsync("~/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AttachmentCode9), Value = Model.AttachmentCode9 });

                                            }
                                                @*<div onclick="onDownload('@Model.AttachmentCode9')" style="cursor:pointer" title="Click here to download">
                                                    <span style="font-size: 18px;text-align: center;color: dodgerblue" id="Av9">
                                                        @Model.AttachmentValue9
                                                    </span>
                                                </div>*@
                                                @Html.HiddenFor(x => x.AttachmentCode9)
                                                @Html.HiddenFor(x => x.AttachmentValue9)
                                            }
                                            else
                                            {
                                                @*@Html.Kendo().TextBoxFor(x => x.TextValue9).HtmlAttributes(new { @class = "hr-xxl-large" }).Enable(Model.IsTextBoxEdit9)*@
                                                @if (Model.IsTextBoxEdit9)
                                                {
                                                    <input type="text" asp-for="TextValue9" id="TextValue9" class="hr-xxl-large" />
                                                }
                                                @if (!Model.IsTextBoxEdit9)
                                                {
                                                    @Html.HiddenFor(x => x.TextValue9)
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                @if (Model.IsDropdownDisplay9.IsNotNullAndNotEmpty())
                                {
                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredDropdownDisplay9)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.DropdownDisplay9, Model.IsDropdownDisplay9, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @*@(Html.Kendo().DropDownListFor(model => model.DropdownValue9)
                                        .HtmlAttributes(new { @class = "hr-x-large" })
                                        .OptionLabel("Select")
                                        .DataTextField("Name")
                                        .DataValueField("Id")
                                        .Events(e => e.Change("onDropDownListChange9"))
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Url(Model.DropdownValueMethod9);
                                            });
                                        })
                                        .AutoBind(true)
                                        .Filter(FilterType.Contains).Enable(Model.IsDropDownEdit9)
                                        )*@

                                            <input asp-for="DropdownValue9" id="DropdownValue9" class="hr-x-large" />
                                            @if (!Model.IsDropDownEdit9)
                                            {
                                                @Html.HiddenFor(x => x.DropdownValue9)
                                            }
                                        </div>
                                    </div>
                                }

                                @if (Model.TextBoxDisplay10.IsNotNullAndNotEmpty() && Model.TextBoxDisplayType10 != NtsFieldType.NTS_HtmlArea)
                                {

                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredTextBoxDisplay10)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.TextDisplay10, Model.TextBoxDisplay10, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @if (Model.TextBoxDisplayType10 == NtsFieldType.NTS_TextArea)
                                            {
                                                @if (Model.IsTextBoxEdit10)
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue10, new { @class = "hr-xxl-large", @rows = "4", @cols = "24", @style = "border-color:lightgray" })

                                                }
                                                else
                                                {
                                                    @Html.TextAreaFor(x => x.TextValue10, new { @class = "hr-xxl-large", @readonly = "readonly", @rows = "4", @cols = "24", @style = "border-color:lightgray" })
                                                    @Html.HiddenFor(x => x.TextValue10)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType10 == NtsFieldType.NTS_HyperLink)
                                            {
                                                <div onclick="onLinkView('@Model.TextBoxLink10')" style="cursor:pointer" title="Click here to view">
                                                    <span style="font-size: 20px;text-align: center;color: dodgerblue">
                                                        @Model.TextBoxDisplay10
                                                    </span>
                                                </div>
                                            }
                                            else if (Model.TextBoxDisplayType10 == NtsFieldType.NTS_DatePicker)
                                            {
                                                @Html.Kendo().DatePickerFor(x => x.DatePickerValue10).Format("dd MMM yyyy").Enable(Model.IsTextBoxEdit10)
                                                @if (!Model.IsTextBoxEdit10)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue10)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType10 == NtsFieldType.NTS_DateTimePicker)
                                            {
                                                @Html.Kendo().DateTimePickerFor(x => x.DatePickerValue10).HtmlAttributes(new { @style = "width:275px" }).Format("{0:dd MMM yyyy HH:mm}").Enable(Model.IsTextBoxEdit10)
                                                @if (!Model.IsTextBoxEdit10)
                                                {
                                                    @Html.HiddenFor(x => x.DatePickerValue10)
                                                }
                                            }
                                            else if (Model.TextBoxDisplayType10 == NtsFieldType.NTS_Attachment)
                                            {
                                                if (Model.IsTextBoxEdit10)
                                                {
                                                    @*@(Html.Kendo().Upload().Multiple(false)
                        .Name("files10")
                        .Async(a => a
                        .Save("SaveAttachment", "Task", new { @Area = "Cms" })
                        .SaveField("files")
                        .AutoUpload(true)
                        )
                            .Events(e => e.Success("onFileUploadSuccess10"))
                            .HtmlAttributes(new { @class = "hr-large" }).Enable(Model.IsTextBoxEdit10)
                )*@
                                                    @*<div class="row">
                                                        <div class="col">
                                                            <div id="attachment10" class="dm-uploader">
                                                                <h6 class=" text-muted">Drag &amp; drop files here</h6>

                                                                <div class="btn btn-primary btn-block ">
                                                                    <span>Open the file Browser</span>
                                                                    <input type="file" title='Click to add Files' />
                                                                </div>
                                                            </div>

                                                        </div>
                                                    </div>*@

                                                await Html.RenderPartialAsync("~/Views/Shared/_FileUpload.cshtml", new FileUploadViewModel { Property = nameof(Model.AttachmentCode10), Value = Model.AttachmentCode10 });

                                            }
                                                @*<div onclick="onDownload('@Model.AttachmentCode10')" style="cursor:pointer" title="Click here to download">
                                                    <span style="font-size: 18px;text-align: center;color: dodgerblue" id="Av10">
                                                        @Model.AttachmentValue10
                                                    </span>
                                                </div>*@
                                                @Html.HiddenFor(x => x.AttachmentCode10)
                                                @Html.HiddenFor(x => x.AttachmentValue10)
                                            }
                                            else
                                            {
                                                @*@Html.Kendo().TextBoxFor(x => x.TextValue10).HtmlAttributes(new { @class = "hr-xxl-large" }).Enable(Model.IsTextBoxEdit10)*@
                                                @if (Model.IsTextBoxEdit10)
                                                {
                                                    <input type="text" asp-for="TextValue10" id="TextValue10" class="hr-xxl-large" />
                                                }
                                                @if (!Model.IsTextBoxEdit10)
                                                {
                                                    @Html.HiddenFor(x => x.TextValue10)
                                                }
                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="form-group col-12">
                                        <div class="col-md-12 label-div">
                                            @Html.Raw(Model.TextBoxDisplay10)
                                        </div>
                                    </div>
                                }
                                @if (Model.IsDropdownDisplay10.IsNotNullAndNotEmpty())
                                {
                                    <div class="form-group col-6">
                                        <div class="col-md-12 label-div">
                                            @if (Model.IsRequiredDropdownDisplay10)
                                            {
                                                <span class="required">*</span>
                                            }
                                            @Html.LabelFor(x => x.DropdownDisplay10, Model.IsDropdownDisplay10, new { @class = "control-label" })
                                        </div>
                                        <div class="col-md-7">
                                            @*@(Html.Kendo().DropDownListFor(model => model.DropdownValue10)
                                        .HtmlAttributes(new { @class = "hr-x-large" })
                                        .OptionLabel("Select")
                                        .DataTextField("Name")
                                        .DataValueField("Id")
                                        .Events(e => e.Change("onDropDownListChange10"))
                                        .DataSource(source =>
                                        {
                                            source.Read(read =>
                                            {
                                                read.Url(Model.DropdownValueMethod10);
                                            });
                                        })
                                        .AutoBind(true)
                                        .Filter(FilterType.Contains).Enable(Model.IsDropDownEdit10)
                                        )*@

                                            <input asp-for="DropdownValue10" id="DropdownValue10" class="hr-x-large" />
                                            @if (!Model.IsDropDownEdit10)
                                            {
                                                @Html.HiddenFor(x => x.DropdownValue10)
                                            }
                                        </div>
                                    </div>
                                }

                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-10">
                            <iframe id="frame" src="@Model.UdfIframeSrc" width="100%" height="500px"></iframe>

                        </div>
                    }


                <div class="col-md-2">
                    <span style="margin-top:10px;font-size:15px">STATUS</span>
                    <br />
                    <span class="btn-card">
                        @*@Html.Kendo().Button().Name("btnStatus").Content(Model.TaskStatusName).HtmlAttributes(new { @class = "btn btn-sm btn-info btn-task", @type = "button", @disabled = "disabled" })*@

                        <button type="button" class="btn btn-sm btn-info btn-task" id="btnStatus" disabled="disabled">@Model.TaskStatusName</button>

                    </span>
                    <br />
                    <span style="margin-top:10px;font-size:15px">ACTIONS</span>
                    <br />
                    <span class="btn-card">
                        @* @Html.Kendo().Button().Name("btnAttachment").Content("Attachment").HtmlAttributes(new { @class = "btn btn-sm btn-info btn-task", @type = "button", @onclick = "AddAttachment()" })*@

                        <button type="button" class="btn btn-sm btn-info btn-task" id="btnAttachment" onclick="AddAttachment()">Attachment</button>

                    </span>
                    @if (Model.DraftButton)
                    {
                        <span class="btn-card">
                            @*@Html.Kendo().Button().Name("btnSaveAsDraft").Content(@Model.DraftButtonText).HtmlAttributes(new { @class = "btn btn-sm btn-info btn-task", @style = "background-color: #17a2b8;color:white", @onclick = "SetTemplateAction('Draft')" })*@
                            <button type="button" class="btn btn-sm btn-info btn-task" id="btnSaveAsDraft" style="background-color: #17a2b8;color:white" onclick="SetTemplateAction('Draft')">@Model.DraftButtonText</button>

                        </span>

                    }
                    @if (Model.SaveButton)
                    {
                        <span class="btn-card">
                            @*@Html.Kendo().Button().Name("btnSubmit").Content(@Model.SaveButtonText).HtmlAttributes(new { @class = "btn btn-sm btn-primary btn-task", @style = "background-color: #007bff;color:white", @onclick = "SetTemplateAction('Submit')" })*@
                            <button type="button" class="btn btn-sm btn-primary btn-task" id="btnSaveAsDraft" style="background-color: #007bff; color: white" onclick="SetTemplateAction('Submit')">@Model.SaveButtonText</button>

                        </span>

                    }
                    @if (Model.SaveChangesButton)
                    {
                        <span class="btn-card">

                            @* @Html.Kendo().Button().Name("btnSaveChanges").Content("Save Changes").HtmlAttributes(new { @class = "btn btn-sm btn-info btn-task", @style = "background-color: #17a2b8;color:white", @onclick = "return OnSaveChanges()" })*@
                            <button type="button" class="btn btn-sm btn-info btn-task" id="btnSaveChanges" style="background-color: #17a2b8; color: white" onclick="return OnSaveChanges()">Save Changes</button>

                        </span>

                    }
                    @if (Model.CancelButton && Model.TemplateUserType == NtsUserTypeEnum.Owner)
                    {
                        <span class="btn-card">
                           @* @Html.Kendo().Button().Name("btnCancel").Content(@Model.CancelButtonText).HtmlAttributes(new { @class = "btn btn-sm btn-danger btn-task", @style = "background-color: #fd7e14;color:white", @onclick = "return OnTaskCancel();" })*@
                            <button type="button" class="btn btn-sm btn-danger btn-task" id="btnCancel" style="background-color: #fd7e14; color: white" onclick="return OnTaskCancel();">@Model.CancelButtonText</button>

                        
                        </span>
                    }
                    @if (Model.CompleteButton && Model.TemplateUserType == NtsUserTypeEnum.Assignee)
                    {
                <span class="btn-card">
                   @* @Html.Kendo().Button().Name("btnComplete").Content(@Model.CompleteButtonText).HtmlAttributes(new { @class = "btn btn-sm btn-success btn-task", @style = "background-color: #28a745;color:white", @onclick = "return OnTaskComplete();" })*@
                    <button type="button" class="btn btn-sm btn-success btn-task" id="btnComplete" style="background-color: #28a745; color: white" onclick="return OnTaskComplete();">@Model.CompleteButtonText</button>
                        </span>
                    }
                    @if (Model.RejectButton && Model.TemplateUserType == NtsUserTypeEnum.Assignee)
                    {
                <span class="btn-card">
                   @* @Html.Kendo().Button().Name("btnReject").Content(@Model.RejectButtonText).HtmlAttributes(new { @class = "btn btn-sm btn-danger btn-task", @style = "background-color: #dc3545;color:white", @onclick = "return OnTaskReject();" })*@
                    <button type="button" class="btn btn-sm btn-danger btn-task" id="btnReject" style="background-color: #dc3545; color: white" onclick="return OnTaskReject();">@Model.RejectButtonText</button>
                
                      </span>
                    }
                    @*@if (Model.ReopenButton.IsTrue())
        {
            <span class="btn-card">
                @Html.Kendo().Button().Name("btnReopen").Content(@Model.ReopenButtonText).HtmlAttributes(new { @class = "btn btn-sm btn-primary btn-task", @onclick = "return OnTaskReopen();" })
            </span>
        }*@
                    @if (Model.NotApplicableButton && Model.TemplateUserType == NtsUserTypeEnum.Assignee)
                    {
                <span class="btn-card">
                   @* @Html.Kendo().Button().Name("btnNotApplicable").Content("Not Applicable").HtmlAttributes(new { @class = "btn btn-sm btn-danger btn-task", @style = "background-color: #fd7e14;color:white", @onclick = "return OnTaskNotApplicable();" })*@
                    <button type="button" class="btn btn-sm btn-danger btn-task" id="btnNotApplicable" style="background-color: #fd7e14; color: white" onclick="return OnTaskNotApplicable();">Not Applicable</button>
                </span>
                        
                    }
                    @*@if (Model.CloseButton)
        {
            <span class="btn-card">
                @Html.Kendo().Button().Name("btnClose").Content(@Model.CloseButtonText).HtmlAttributes(new { @class = "btn btn-sm btn-success btn-task", @onclick = "SetTemplateAction('Close')" })
            </span>
        }*@
                    @if (Model.CreateNewVersionButton)
                    {
                <span class="btn-card">
                    @*@Html.Kendo().Button().Name("btnCreateNewVersion").Content(@Model.CreateNewVersionButtonText.IsNullOrEmpty() ? "Edit" : @Model.CreateNewVersionButtonText).HtmlAttributes(new { @class = "btn btn-sm btn-primary btn-task", @type = "button", @onclick = "return OnCreateNewVersion();" })*@
                    <button type="button" class="btn btn-sm btn-primary btn-task" name="btnCreateNewVersion" onclick="return OnCreateNewVersion();">@Model.CreateNewVersionButtonText.IsNullOrEmpty() ? "Edit" : @Model.CreateNewVersionButtonText</button>
                </span>
                    }
                    @if (Model.SaveNewVersionButton)
                    {
                <span class="btn-card">
                    @*@Html.Kendo().Button().Name("btnCancelEdit").Content(@Model.CancelEditButtonText.IsNullOrEmpty() ? "Cancel" : @Model.CancelEditButtonText).HtmlAttributes(new { @class = "btn btn-sm btn-default btn-task", @onclick = "return OnCancelEdit();" })*@
                    <button type="button" class="btn btn-sm btn-primary btn-task" name="btnCancelEdit"  onclick="return OnCancelEdit();">@Model.CancelEditButtonText.IsNullOrEmpty() ? "Cancel" : @Model.CancelEditButtonText</button>
                </span>
                        
                <span class="btn-card">
                    @*@Html.Kendo().Button().Name("btnSaveNewVersion").Content(@Model.SaveNewVersionButtonText.IsNullOrEmpty() ? "Save" : @Model.SaveNewVersionButtonText).HtmlAttributes(new { @class = "btn btn-sm btn-primary btn-task", @onclick = "return OnSaveAsNewVersion();" })*@
                    <button type="button" class="btn btn-sm btn-primary btn-task" name="btnSaveNewVersion" onclick="return OnSaveAsNewVersion();">@Model.SaveNewVersionButtonText.IsNullOrEmpty() ? "Save" : @Model.SaveNewVersionButtonText</button>
                </span>
                    }
                </div>
                </div>
            </div>
        </div>



        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.DataAction)
        @Html.HiddenFor(x => x.TaskNo)
        @Html.HiddenFor(x => x.TaskStatus)
        @Html.HiddenFor(x => x.TaskStatusCode)
        @Html.HiddenFor(x => x.TaskStatusName)
        @Html.HiddenFor(x => x.TemplateAction)
        @Html.HiddenFor(x => x.OwnerUserId)
        @Html.HiddenFor(x => x.RequestedUserId)
        @Html.HiddenFor(x => x.ActiveUserId)
        @Html.HiddenFor(x => x.ReferenceTypeId)
        @Html.HiddenFor(x => x.ReferenceTypeCode)
        @Html.HiddenFor(x => x.TemplateCode)
        @Html.HiddenFor(x => x.NtsType)

        @Html.HiddenFor(x => x.TextBoxLink1)
        @Html.HiddenFor(x => x.TextDisplay1)
        @Html.HiddenFor(x => x.TextDisplay2)
        @Html.HiddenFor(x => x.TextDisplay3)
        @Html.HiddenFor(x => x.TextDisplay4)
        @Html.HiddenFor(x => x.TextDisplay5)
        @Html.HiddenFor(x => x.TextDisplay6)
        @Html.HiddenFor(x => x.TextDisplay7)
        @Html.HiddenFor(x => x.TextDisplay8)
        @Html.HiddenFor(x => x.TextDisplay9)
        @Html.HiddenFor(x => x.TextDisplay10)
        @Html.HiddenFor(x => x.DropdownDisplay1)
        @Html.HiddenFor(x => x.DropdownDisplay2)
        @Html.HiddenFor(x => x.DropdownDisplay3)
        @Html.HiddenFor(x => x.DropdownDisplay4)
        @Html.HiddenFor(x => x.DropdownDisplay5)
        @Html.HiddenFor(x => x.DropdownDisplay6)
        @Html.HiddenFor(x => x.DropdownDisplay7)
        @Html.HiddenFor(x => x.DropdownDisplay8)
        @Html.HiddenFor(x => x.DropdownDisplay9)
        @Html.HiddenFor(x => x.DropdownDisplay10)
        @Html.HiddenFor(x => x.ParentVersionNo)
        @Html.HiddenFor(x => x.VersionNo)
        @Html.HiddenFor(x => x.AssignToType)
        @Html.HiddenFor(x => x.IsRequiredTextBoxDisplay1)
        @Html.HiddenFor(x => x.IsRequiredTextBoxDisplay2)
        @Html.HiddenFor(x => x.IsRequiredTextBoxDisplay3)
        @Html.HiddenFor(x => x.IsRequiredTextBoxDisplay4)
        @Html.HiddenFor(x => x.IsRequiredTextBoxDisplay5)
        @Html.HiddenFor(x => x.IsRequiredTextBoxDisplay6)
        @Html.HiddenFor(x => x.IsRequiredTextBoxDisplay7)
        @Html.HiddenFor(x => x.IsRequiredTextBoxDisplay8)
        @Html.HiddenFor(x => x.IsRequiredTextBoxDisplay9)
        @Html.HiddenFor(x => x.IsRequiredTextBoxDisplay10)
        @Html.HiddenFor(x => x.IsRequiredDropdownDisplay1)
        @Html.HiddenFor(x => x.IsRequiredDropdownDisplay2)
        @Html.HiddenFor(x => x.IsRequiredDropdownDisplay3)
        @Html.HiddenFor(x => x.IsRequiredDropdownDisplay4)
        @Html.HiddenFor(x => x.IsRequiredDropdownDisplay5)
        @Html.HiddenFor(x => x.IsRequiredDropdownDisplay6)
        @Html.HiddenFor(x => x.IsRequiredDropdownDisplay7)
        @Html.HiddenFor(x => x.IsRequiredDropdownDisplay8)
        @Html.HiddenFor(x => x.IsRequiredDropdownDisplay9)
        @Html.HiddenFor(x => x.IsRequiredDropdownDisplay10)
        @Html.HiddenFor(x => x.TextBoxDisplayType1)
        @Html.HiddenFor(x => x.TextBoxDisplayType2)
        @Html.HiddenFor(x => x.TextBoxDisplayType3)
        @Html.HiddenFor(x => x.TextBoxDisplayType4)
        @Html.HiddenFor(x => x.TextBoxDisplayType5)
        @Html.HiddenFor(x => x.TextBoxDisplayType6)
        @Html.HiddenFor(x => x.TextBoxDisplayType7)
        @Html.HiddenFor(x => x.TextBoxDisplayType8)
        @Html.HiddenFor(x => x.TextBoxDisplayType9)
        @Html.HiddenFor(x => x.TextBoxDisplayType10)
        @Html.HiddenFor(x => x.TextBoxDisplay1)
        @Html.HiddenFor(x => x.TextBoxDisplay2)
        @Html.HiddenFor(x => x.TextBoxDisplay3)
        @Html.HiddenFor(x => x.TextBoxDisplay4)
        @Html.HiddenFor(x => x.TextBoxDisplay5)
        @Html.HiddenFor(x => x.TextBoxDisplay6)
        @Html.HiddenFor(x => x.TextBoxDisplay7)
        @Html.HiddenFor(x => x.TextBoxDisplay8)
        @Html.HiddenFor(x => x.TextBoxDisplay9)
        @Html.HiddenFor(x => x.TextBoxDisplay10)
        @Html.HiddenFor(x => x.UdfIframeSrc)
        @Html.HiddenFor(x => x.TaskVersionId)
        @Html.HiddenFor(x => x.ReturnTemplateName)
        @Html.HiddenFor(x => x.IsIncludeEmailAttachment)
        @Html.HiddenFor(x => x.EmailSettingId)
        @Html.HiddenFor(x => x.DropdownDisplayValue1)
        @Html.HiddenFor(x => x.DropdownDisplayValue2)
        @Html.HiddenFor(x => x.DropdownDisplayValue3)
        @Html.HiddenFor(x => x.DropdownDisplayValue4)
        @Html.HiddenFor(x => x.DropdownDisplayValue5)
        @Html.HiddenFor(x => x.DropdownDisplayValue6)
        @Html.HiddenFor(x => x.DropdownDisplayValue7)
        @Html.HiddenFor(x => x.DropdownDisplayValue8)
        @Html.HiddenFor(x => x.DropdownDisplayValue9)
        @Html.HiddenFor(x => x.DropdownDisplayValue10)
    </form>
</div>
<script>
    @*$(document).ready(function () {

       // if ('@Model.UdfIframeSrc' != null && '@Model.UdfIframeSrc' != "") {

            $('#frame').load(function () {
                $(this).contents().find('form')[0].submit(function () {
                    return false;
                });
            });
       // }
    });*@
    
    function onAjaxBegin() {
        window.scrollTo(0, 0);

        if ('@Model.UdfIframeSrc' != null && '@Model.UdfIframeSrc' != "") {
            var abc = document.getElementById('frame');
            document.getElementById('frame').contentWindow.save();

           // $('#frame').contents().find('form')[0].submit();
            $.ajax({
                type: "POST",
                url: $('#frame').contents().find('form')[0].action,
                data: $('#frame').contents().find('form').serialize(), // serializes the form's elements.
                success: function (res) {
                    if (res.success) {
                        return true;

                    }
                    else {
                        showError(res.error);
                        return false;
                    }

                    HideLoader($('.Task_Card'));
                }
            });


        }
        else {
            return true;
        }
    }


   
    function OnService() {
        var url = '/cms/task/service?taskId=@Model.ReferenceTypeId';
        window.open(url, '_blank');
        return false;
    }
    function onLinkView(url) {
         
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Details', Width: 1000, Height: 800 });
        return false;
    }
function AddAttachment(e)
{
     

    var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("AddTaskAttachment", "Task", new { @area= "Cms" })?TaskId=@Model.Id';
    win.OpenWindow({ Title: 'Task Attachment', Width: 450, Height: 800 });
        return false;
}
    function SetTemplateAction(action) {
        ShowLoader($('.Task_Card'));
    $("#TemplateAction").val(action);
}
function OnSaveChanges() {
    $("#TemplateAction").val('@NtsActionEnum.SaveChanges');
    return true;
    }
    function OnCancelEdit() {
        ShowLoader($('.Task_Card'));
         var params = window.location.search;
        params = RemoveParams(params, 'versionId');
        var url = window.location.pathname + '?' + params;
        window.location.href = url;
        return false;
    }
    function OnSaveAsNewVersion(e)
    {
    SetTemplateAction('@NtsActionEnum.EditAsNewVersion');
    return true;
    }

function OnTaskCancel()
{
    SetTemplateAction('@NtsActionEnum.Cancel.ToString()');
    //var isReasonReq = $("#IsCancelReasonRequired").val()=='True';
    //if (isReasonReq) {
    //var dialogue = $('#reason').data("kendoDialog");
    //dialogue.title('');
    //$("#commentReq").html('');
    //dialogue.open();
    //return false;
    //}
    return true;
}
function OnTaskComplete()
{
    SetTemplateAction('@NtsActionEnum.Complete.ToString()');
    //var isReasonReq = $("#IsCompleteReasonRequired").val()=='True';
    //if (isReasonReq) {
    //    var dialogue = $('#reason').data("kendoDialog");
    //        dialogue.title('');
    //    $("#commentReq").html('');
    //    dialogue.open();
    //    return false;
    //}
    return true;
}
function OnTaskReject()
{

    SetTemplateAction('@NtsActionEnum.Reject.ToString()');
    //var isReasonReq = $("#IsRejectionReasonRequired").val()=='True';
    //if (isReasonReq) {
    //var dialogue = $('#reason').data("kendoDialog");
    //dialogue.title('');
    //$("#commentReq").html('');
    //dialogue.open();
    //return false;
    //}
    return true;
}
function OnTaskReopen()
{
    SetTemplateAction('@NtsActionEnum.Reopen.ToString()');
    //    var isReasonReq = $("#IsReopenReasonRequired").val()=='True';
    //if (isReasonReq) {
    //var dialogue = $('#reason').data("kendoDialog");
    //dialogue.title('Reopen reason');
    //$("#commentReq").html('Reopening reason is required');
    //dialogue.open();
    //return false;
    //}
    return true;
}
function OnTaskNotApplicable()
{
    SetTemplateAction('@NtsActionEnum.NotApplicable.ToString()');
    return true;
}
function OnCreateNewVersion(e) {
    ShowLoader($('.Task_Card'));
        var params = window.location.search;
        var ru = encodeURIComponent(GetUrlParamByName(window.location.href, 'ru'));
        params = RemoveParams(params, 'versionId');
        params = RemoveParams(params, 'ru');
        var url = window.location.pathname + '?versionId=0&' + params;
        if (ru != null && ru != 'null') {
            url = url + '&ru=' + ru;
        }
        window.location.href = url;
        return false;
}
    function GetUrlParamByName(url, name) {

        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }
    function RemoveParams(str, matchString) {
        str = str.replace('?', '');
        var array = str.split("&");
        //var ret = "";
        //var matchString = "serviceid";
        for (var i = array.length - 1; i >= 0; i--) {
            var p = array[i].split('=');
            if (p[0].toLowerCase() == matchString.toLowerCase()) {
                array.splice(i, 1);
                break;
            }
        }
        var ret = array.join('&');
        return ret;
    }
    var onAjaxSuccess = function (res) {
        if (res.success) {
        HideLoader($('.Task_Card'));
        ShowNotification("Saved Successfully", "success");
            var taskId = res.Id;
            
        @*LoadPartailView('@Url.Action("Index", "Task", new { @area = "Cms" })?taskId=' + taskId, $('#detailPage'));*@
        if ('@Model.TemplateAction' == "Draft" && '@ViewBag.Layout'.includes('Popup')) {
            window.location.href = "/cms/task/index?taskId=" + taskId + "&isPopUp=" + true;
        /*window.parent.IframePostbackScript();*/

            var win = GetMainWindow();
            win.CloseWindow({ MethodName: 'IframePostbackScript' });
        }
        else if ('@Model.TemplateAction' == "Draft") {
            window.location.href = "/cms/task/index?taskId=" + taskId;
        }
        else if ('@ViewBag.Layout'.includes('Popup')) {
            /*window.location.reload();*/
            /*window.parent.IframePostbackScript();*/

            var win = GetMainWindow();
            win.CloseWindow({ MethodName: 'IframePostbackScript' });
        }
        else {
            /*window.location.reload();*/
            var win = GetMainWindow();
            win.CloseWindow({ MethodName: 'CallBackBulkTaskAction' });
        }


    }
    else {
        HideLoader($('.Task_Card'));
        showError(res.error);
    }
    };
    var onAjaxFailed = function (res) {
        HideLoader($('.Task_Card'));
        ShowNotification("Network failed try again !", "danger");

    };
    var onAjaxComplete = function (res) {
        HideLoader($('.Task_Card'));

};
var showError = function (error) {
    //#validation-summary-manageform
    $("#validation-summary").html(error);
    $("#validation-summary").css("display", "block")
}
function ShowLoader(target) {
    // target.loadingOverlay();
    kendo.ui.progress(target, true);
}
function HideLoader(target) {
    //target.loadingOverlay('remove');
    kendo.ui.progress(target, false);
    }
    function onDownload(id) {
        url = '/cms/Document/GetFileMongo?fileId=' + id;
        window.open(url, '_blank');
        return false;
    }
    function OnVersionChange(e) {
        var versionId = this.value();
        var params = window.location.search;
        params = RemoveParams(params, 'versionId');
        var url = window.location.pathname + '?' + params;
        if (versionId != null && versionId != '') {
            url = url + '&versionId=' + versionId;
        }
        window.location.href = url;
    }
    function onDropDownListChange1(e) {
        var ddl = $("#DropdownValue1").data("kendoDropDownList").text();
        $("#DropdownDisplayValue1").val(ddl);
    }
    function onDropDownListChange2(e) {
        var ddl = $("#DropdownValue2").data("kendoDropDownList").text();
        $("#DropdownDisplayValue2").val(ddl);
    }
    function onDropDownListChange3(e) {
        var ddl = $("#DropdownValue3").data("kendoDropDownList").text();
        $("#DropdownDisplayValue3").val(ddl);
    }
    function onDropDownListChange4(e) {
        var ddl = $("#DropdownValue4").data("kendoDropDownList").text();
        $("#DropdownDisplayValue4").val(ddl);
    }
    function onDropDownListChange5(e) {
        var ddl = $("#DropdownValue5").data("kendoDropDownList").text();
        $("#DropdownDisplayValue5").val(ddl);
    }
    function onDropDownListChange6(e) {
        var ddl = $("#DropdownValue6").data("kendoDropDownList").text();
        $("#DropdownDisplayValue6").val(ddl);
    }
    function onDropDownListChange7(e) {
        var ddl = $("#DropdownValue7").data("kendoDropDownList").text();
        $("#DropdownDisplayValue7").val(ddl);
    }
    function onDropDownListChange8(e) {
        var ddl = $("#DropdownValue8").data("kendoDropDownList").text();
        $("#DropdownDisplayValue8").val(ddl);
    }
    function onDropDownListChange9(e) {
        var ddl = $("#DropdownValue9").data("kendoDropDownList").text();
        $("#DropdownDisplayValue9").val(ddl);
    }
    function onDropDownListChange10(e) {
        var ddl = $("#DropdownValue10").data("kendoDropDownList").text();
        $("#DropdownDisplayValue10").val(ddl);
    }
</script>












