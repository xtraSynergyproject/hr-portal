
@using CMS.UI.ViewModel;
@using Kendo.Mvc.UI;
@using CMS.Common;
@using Kendo.Mvc.Extensions;
@{
    ViewData["Title"] = "Assessment Question";

    Layout = null;
}
<style>
    .kgrdSalaryInfoStyle {
        width: 100% !important;
    }

    #treelist > .k-toolbar > .k-button-icontext {
        color: white;
        background-color: #0062cc;
    }

    .treeheader {
        font-weight: 500;
        text-align: center;
        font-size: medium;
        background-color: #006699;
        color: #f2f2f2 !important;
        border-style: solid;
        border-width: 1px;
        border-color: lightgrey;
        padding: 5px 0px 5px 0px;
    }

    .treebody {
        padding: 10px !important;
        color: black !important;
    }

    .fancytree-icon {
        display: none !important;
    }

    .pagination li:hover {
        cursor: pointer;
    }
    .page {
        font-size: 20px;
        padding: 6px;
        border: solid;
        border-width: thin;
        border-color: lightgrey;
        margin-bottom: 45px;
    }

    .ancpagination {
        padding: 20px;
        border-right: solid;
        padding-top: 8px;
        padding-bottom: 8px;
        border-color: lightgrey;
        border-width: thin;
    }
</style>

<script type="text/javascript">
    function OnCreateSalaryInfo() {
        var win = GetMainWindow();
       // var portalId = $('#GlobalPortalId').val();
       // var url = '/Cms/Page?lo=Popup&cbm=OnAfterNoteCreate&source=Create&dataAction=Create&pageName=SalaryInfo&portalId=' + portalId /*+ '&prms=' + prms*/;
        win.iframeOpenUrl = "/Tas/TalentAssessment/AssessmentQuestions?lo=Popup";
        win.OpenWindow({ Title: 'Create Questions', Width: 1200, Height: 700 });
        return false;
    }

    function referesh() {
        //$("#treelist").data("kendoTreeList").dataSource.read();
        getInputTree();
    }

    function onEditSalaryInfo(id) {
     debugger
       // e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //alert(dataItem.NoteId);
        var win = GetMainWindow();
        var portalId = $('#GlobalPortalId').val();
       // var url = '/Cms/Page?lo=Popup&cbm=OnAfterNoteCreate&source=@RequestSourceEnum.Versioning.ToString()&dataAction=Edit&pageName=SalaryInfo&portalId=' + portalId + '&recordId=' + dataItem.NoteId;
       // win.iframeOpenUrl = "/Tas/TalentAssessment/AssessmentQuestions?noteId=" + dataItem.NoteId +"&lo=Popup";
        win.iframeOpenUrl = "/Tas/TalentAssessment/AssessmentQuestions?noteId=" + id +"&lo=Popup";
        win.OpenWindow({ Title: 'Edit Questions', Width: 1200, Height: 700 });
    }

    function OnAfterNoteCreate() {
        getInputTree();
       // $("#treelist").data("kendoTreeList").dataSource.read();
    }

      function getInputTree() {
        debugger;
          $("#treetable").fancytree({
              extensions: ["table"],
              source: $.ajax({
                  url: "/TAS/TalentAssessment/ReadQuestionTree",
                  dataType: "json"
              }),
              lazyLoad: function (event, data) {
                  var node = data.node;
                  // Issue an Ajax request to load child nodes
                  data.result = {
                      url: "/TAS/TalentAssessment/ReadQuestionTree",
                      data: { id: node.key }
                  }

              },
              renderNode: function (event, data) {
                  // Optionally tweak data.node.span
                 // debugger;
                  //var node = data.node;
                  //  node.renderTitle();
                  var node = data.node,
                      $tdList = $(node.tr).find(">td");
                  // (index #0 is rendered by fancytree by adding the checkbox)
                  //  $tdList.eq(0).text(node.data.NoteSubject).addClass("alignRight");
                  // (index #2 is rendered by fancytree)
                  //if(Type=='Question'){#<div><i class='fa fas fa-pencil' onclick='onEditSalaryInfo(\"#:NoteId#\")'></i></div>#}
                  if (node.data.Type == 'Question') {
                      $tdList.eq(1).html("<div><i class='fa fas fa-pencil' onclick='onEditSalaryInfo(\"" + node.data.NoteId + "\")'></i></div>");
                  }
                  else {
                      $tdList.eq(1).html("");
                  }
                  $tdList.eq(2).text(node.data.Question);
                  $tdList.eq(3).text(node.data.QuestionArabic);
                  $tdList.eq(4).text(node.data.QuestionDescription);
                  $tdList.eq(5).text(node.data.QuestionDescriptionArabic);
                  $tdList.eq(6).text(node.data.AssessmentType);
                  $tdList.eq(7).text(node.data.CompetencyLevel);
                  $tdList.eq(8).text(node.data.IndicatorName);


              },
              dblclick: function (event, data) {
                  var node = data.node;
              },
              contextMenu: {
                  menu: function (data) {
                      debugger;
                      return {
                      }
                  },
                  actions: function (node, action, options) {
                  }
              }
          });
         
    }

    $(function () {
        getInputTree();
       
        setTimeout(function () {
            debugger;
            $('#treetable').after('<div id="nav" class="page"></div>');
            var rowsShown = 10;
            var rowsTotal = $('#treetable tbody tr').length;
            var numPages = rowsTotal / rowsShown;
            for (i = 0; i < numPages; i++) {
                var pageNum = i + 1;
                $('#nav').append('<a class="ancpagination" href="#" rel="' + i + '">' + pageNum + '</a> ');
            }
            $('#treetable tbody tr').hide();
            $('#treetable tbody tr').slice(0, rowsShown).show();
            $('#nav a:first').addClass('active');
            $('#nav a').bind('click', function () {

                $('#nav a').removeClass('active');
                $(this).addClass('active');
                var currPage = $(this).attr('rel');
                var startItem = currPage * rowsShown;
                var endItem = startItem + rowsShown;
                $('#treetable tbody tr').css('opacity', '0.0').hide().slice(startItem, endItem).
                    css('display', 'table-row').animate({ opacity: 1 }, 300);
            }); }, 3000);

       // getPagination('#treetable');
    });

   
</script>
<h3>@ViewBag.Title</h3>
<div class="row">
    <div class="col-md-12">

        @*@(Html.Kendo().TreeList<AssessmentQuestionsViewModel>()
                        .Name("treelist")
                         .Toolbar(toolbar => toolbar.Custom().Name("btnAdd").Click("OnCreateSalaryInfo").Text(@SharedResource["Create"]))

                                .Columns(columns =>
                                {
                                    columns.Add().Field(e => e.NoteSubject).Width(250);
                                    columns.Add().Field(e => e.Id).Title("Action").Template("#if(Type=='Question'){#<div><i class='fa fas fa-pencil' onclick='onEditSalaryInfo(\"#:NoteId#\")'></i></div>#}#").Width(100);
                                    columns.Add().Field(e => e.Question).Width(250);
                                    columns.Add().Field(e => e.QuestionArabic).Width(250);
                                    columns.Add().Field(e => e.QuestionDescription).Width(250);
                                    columns.Add().Field(e => e.QuestionDescriptionArabic).Width(250);
                                    columns.Add().Field(e => e.AssessmentType).Width(250);
                                    columns.Add().Field(e => e.CompetencyLevel).Width(250);
                                    columns.Add().Field(e => e.IndicatorName).Width(250);

                                    //columns.Add().Field(e => e.SubModuleName).Width(160);
                                })

                            .Filterable().Resizable(true)
                            .Sortable()
                            .DataSource(dataSource => dataSource
                            .Read(read => read.Action("ReadQuestion", "TalentAssessment", new { Area = "TAS" }))
                    .ServerOperation(false)
                    .Model(m => {
                        m.Id(f => f.Id);
                        m.ParentId(f => f.ParentId);
                        m.Expanded(true);
                        m.Field(f => f.NoteSubject);
                        // m.Field(f => f.SubModuleName);
                    })
                )
                .Height(800)
                .Pageable(p => p.PageSize(15)
                                .PageSizes(true)
                )
            )*@
        @*@(Html.Kendo().Grid<AssessmentQuestionsViewModel>
            ().Name("kgrdSalaryInfo").HtmlAttributes(new { @class = "kgrdSalaryInfoStyle" })
            .Columns(col =>
            {
                col.Command(command =>
                {
                    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("onEditSalaryInfo").HtmlAttributes(new { @class = "action-icon", @title = "Edit" });
                    // command.Custom("Manage Salary Elements").Text("<i class='fa fas fa-cog'></i>").Click("OnManageSalaryElements").HtmlAttributes(new { @class = "action-icon", @title = "Manage Salary Elements" });
                }).Title(@SharedResource["Action"]).Width(150);
                col.Bound(c => c.Question);
                col.Bound(c => c.QuestionArabic);
                col.Bound(c => c.QuestionDescription);
                col.Bound(c => c.QuestionDescriptionArabic);
            })
               .ToolBar(toolbar =>
               {
                   toolbar.Custom().Text(@SharedResource["Create"]).Name("btnAdd").IconClass("fa fas fa-plus").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreateSalaryInfo();" });
               })
            .Scrollable(x => x.Enabled(true))

            .Sortable(srt => srt.Enabled(true))
            .Selectable(select => select.Enabled(false))
            .Filterable(f => f.Extra(false)
            .Operators(o => o.ForString(s => s.Clear()
            .Contains("Contains")
            .IsEqualTo("Is equal to")
            )))
              .Resizable(resize => resize.Columns(true))
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
            .AutoBind(true)
            .DataSource(
            dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .Read(read => read.Action("ReadQuestion", "TalentAssessment", new { Area="TAS"}))
            .Model(model => model.Id("Id")))
            )*@
    </div>

    <div style="margin-left:17px">
        <button class="btn btn-primary" onclick="OnCreateSalaryInfo()" title="@SharedResource["Create"]">@SharedResource["Create"]</button>
        <br />
        <table id="treetable">
            <colgroup>
                <col width="200">
                <col width="50">
                <col width="200">
                <col width="200">
                <col width="200">
                <col width="200">
                <col width="200">
                <col width="200">
                <col width="200">

            </colgroup>
            <thead>
                <tr>
                    <th class="treeheader"><div id="NoteSubject">NoteSubject</div></th>
                    <th class="treeheader"><div id="edit">Action</div></th>
                    <th class="treeheader"><div id="Question">Question</div></th>
                    <th class="treeheader"><div id="QuestionArabic">QuestionArabic</div></th>
                    <th class="treeheader"><div id="QuestionDescription">QuestionDescription</div></th>
                    <th class="treeheader"><div id="QuestionDescriptionArabic">Question Description Arabic</div></th>
                    <th class="treeheader"><div id="AssessmentType">AssessmentType</div></th>
                    <th class="treeheader"><div id="CompetencyLevel">CompetencyLevel</div></th>
                    <th class="treeheader"><div id="IndicatorName">IndicatorName</div></th>
                </tr>
            </thead>
            <tbody>
                <tr>

                    <td class="treebody"></td>
                    <td class="treebody"></td>
                    <td class="treebody"></td>
                    <td class="treebody"></td>
                    <td class="treebody"></td>
                    <td class="treebody"></td>
                    <td class="treebody"></td>
                    <td class="treebody"></td>
                    <td class="treebody"></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>




