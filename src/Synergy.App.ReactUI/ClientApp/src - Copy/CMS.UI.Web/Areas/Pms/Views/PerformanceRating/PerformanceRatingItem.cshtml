@using CMS.UI.ViewModel;
@using CMS.Common;

@model PerformanceRatingItemViewModel

@{

    Layout = "/Views/Shared/_PopupLayout.cshtml";
}

<style>
    .kgrdPDM {
        width: 100% !important;
    }
</style>




   


<script>
    var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(StatusEnum)))';
    var statusObj = JSON.parse(status);

    var columnDefs = [
        {
            field: "Name",
        },
        { field: "code" },
        
        {
            field: "Status",
            cellRenderer: params => {
                return statusObj[params.value]; //only for enum
            }
        },
       
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinUserSet' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:ParentNoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        getDataItem();

        //$.contextMenu('update');
        //$('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-menuBinUserSet',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteid = $trigger.data('noteid');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        onEditOnCreateTag(id, noteid);
                                        break;

                                    case 'delete':
                                        OnDeleteTag(id);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-edit" },
                                "delete": { name: "Delete", icon: "fas fa-trash" },


                            }
                        };


                }
            }
        });


    });

    function OnCreateTag() {
        // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var noteid = '@Model.ParentNoteId';

        var win = GetMainWindow();

        win.iframeOpenUrl = "/Pms/PerformanceRating/CreateItem?ParentNodeId=" + noteid;
        win.OpenWindow({ Title: 'Create Peformance Rating Item', Width: 450, Height: 700 });
        return false;
    }
    function onEditOnCreateTag(id,noteid) {

        //e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        //var noteid = dataItem.NoteId;
        var win = GetMainWindow();
        //var portalId = $('#GlobalPortalId').val();
        //var TagCategoryId = $('#hiddenCategoryid').val();

        win.iframeOpenUrl = "/Pms/PerformanceRating/CreateItem?Id=" + id + "&ParentNodeId=" + noteid;
        win.OpenWindow({ Title: 'Edit Peformance Rating Item', Width: 450, Height: 700 });
    }



    function OnAfterTagCreate() {

        $("#kgrdItem").data("kendoGrid").dataSource.read({ ParentNodeId: '@Model.ParentNoteId' });
    }
    function OnDeleteTag(id) {
        var flag = confirm('Do you really want to delete the Performance Rating Item?');
        //alert("..Delete");
        //e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        if (flag) {
            $.ajax({
                url: '@Url.Action("Deleteitem", "PerformanceRating", new { @area="Pms"})?Id=' + id ,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        getDataItem();
                        kendo.alert("Performance Rating Item Deleted Successfully.");
                    } else {
                        getDataItem();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    //
                    getDataItem();
                }
            });
            return false;
        }
    }


   function getDataItem() {
       document.getElementById("kgrdItem").innerHTML = "";
       gridConfig(
           "kgrdItem",
           "@Url.Action("ReadItemData", "PerformanceRating", new { Area="Pms", ParentNoteId = Model.ParentNoteId})",
           columnDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
    }

</script>

<div>
    <h4>@ViewBag.Title</h4>

    <hr />


    <div class="row">
        <div class="col-12">
            <button type='button' class='btn btn-primary' onclick='OnCreateTag();'><i class='fa fas fa-plus'></i>&nbsp;Create</button>
            <br /><br />
            <div id="kgrdItem" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        </div>
    </div>
</div>






@*<div>
    <h4>@ViewBag.Title</h4>



    <hr />

    <div class="row">



        <div class="col-md-12">
            @(Html.Kendo().Grid<PerformanceRatingItemViewModel>
    ().Name("kgrdItem").HtmlAttributes(new { @class = "kgrdPDM" })
    .Columns(col =>
    {
        col.Command(command =>
        {
            command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("onEditOnCreateTag").HtmlAttributes(new { @class = "action-icon", @title = "Edit" });
            command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteTag").HtmlAttributes(new { @class = "action-icon", @title = "Delete" });


        }).Title("Action").Width(150);
        //col.Bound(c => c.Id);
        col.Bound(c => c.Name).Title("Name");
        col.Bound(c => c.code).Title("Code");
        col.Bound(c => c.Status).Title("Status");
        //col.Bound(c => c.NoteSubject).Title("Tag Name");




    })
    .ToolBar(toolbar =>
    {
        toolbar.Custom().Text("Create").Name("btnAdd").IconClass("fa fas fa-plus").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreateTag();" });
    })
    .Scrollable(x => x.Enabled(true))

    .Sortable(srt => srt.Enabled(true))
    .Selectable(select => select.Enabled(false))
    .Filterable(f => f.Extra(false)
    .Operators(o => o.ForString(s => s.Clear()
    .Contains("Contains")
    .IsEqualTo("Is equal to")
    )))
    // .Events(e => e.DataBound("onDataBound"))
    .Resizable(resize => resize.Columns(true))
    .Pageable(pageable => pageable
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5))
    .AutoBind(true)
    .DataSource(
    dataSource => dataSource
    .Ajax()
    .PageSize(10)
    .Read(read => read.Action("ReadItemData", "PerformanceRating", new { Area="Pms", ParentNoteId = Model.ParentNoteId}))
      .Model(m =>
      {
          m.Id(model => model.Id);
          m.Id(model => model.NoteId);
          m.Id(model => model.ParentNoteId);


      }))
    )
        </div>

    </div>
</div>*@
