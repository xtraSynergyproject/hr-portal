@inject IStringLocalizer<CMS.UI.Web.Areas.PortalAdmin.Controllers.UserController> Resource
@using CMS.UI.ViewModel;
@using CMS.Common;
@using Kendo.Mvc.UI;
@model UserViewModel
@{
    ViewData["Title"] = @SharedResource["User"];
    Layout = null;
}
<script>
    var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(StatusEnum)))';
    var statusObj = JSON.parse(status);

    var columnDefs = [
        {
            field: "Name",
        },
        { field: "Email" },
        { field: "JobTitle" },
        {
            field: "Status",
            cellRenderer: params => {
                return statusObj[params.value]; //only for enum
            }
        },
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinUser' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        GetDataUser();

        //$.contextMenu('update');
        //$('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-menuBinUser',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditUser(id);
                                        break;
                                    case 'del':
                                        OnDeleteUser(id);
                                        break;
                                    case 'UserEntityPermission':
                                        onUserEntityPermission(id);
                                        break;
                                    case 'hierarchyPermission':
                                        onUserHierarchyPermission(id);
                                        break;
                                    case 'Permission':
                                        onPermission(id);
                                        break;
                                    case 'ResendWelcomeEmail':
                                        onResendWelcomeEmail(id);
                                        break;
                                    case 'ChangePassword':
                                        ChangePassword(id);
                                        break;
                                    case 'viewPermission':
                                        onViewPermission(id);
                                        break;
                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-pencil" },
                                "del": { name: "Delete", icon: "fas fa-trash" },
                                // "Permission": { name: "Permission", icon: "fas fa-user-shield" },
                                "ResendWelcomeEmail": { name: "Resend Welcome Email", icon: "fas fa-envelope" },
                                "UserEntityPermission": { name: "Manage Permission", icon: "fas fa-external-link" },
                                "hierarchyPermission": { name: "User Hierarchy Permission", icon: "fas fa-external-link-square" },
                                "ChangePassword": { name: "Change Password", icon: "fas fa-user" },
                                "viewPermission": { name: "View Permission", icon: "fas fa-external-link-square" },


                            }
                        };


                }
            }
        });


    });


   function GetDataUser() {
       document.getElementById("myGridUser").innerHTML = "";
       gridConfig(
           "myGridUser",
           "/portalAdmin/user/ReadData",
           columnDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
    }

</script>
<script>
      function OnEditUser(id) {
        var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("EditUser", "User", new { @area= "PortalAdmin" })?Id=' + id;
        win.OpenWindow({ Title: 'Manage User', Width: 500, Height: 650 });
        return false;
    }

    function OnDeleteUser(id) {
        var flag = confirm('Do you really want to delete the User?');

        if (flag) {
            $.ajax({
                url:'@Url.Action("DeleteUser", "User", new { @area= "PortalAdmin" })?Id=' + id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    debugger;
                    if (result.success) {
                        GetDataUser();
                        kendo.alert("User Deleted Successfully.");
                    } else {
                        GetDataUser();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    GetDataUser();
                }
            });
            return false;
        }
    }
      function OnCreateUser() {

           var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreateUser", "User", new { @area= "PortalAdmin" })';
        win.OpenWindow({ Title: 'Manage User', Width: 500, Height: 650 });
        return false;
    }
    function SendSummaryEmail() {
        SendSummary();
    }
    function onViewPermission(id)
    {
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ViewUserPermission", "User", new { @area= "PortalAdmin" })?userId=' + id;
        win.OpenWindow({ Title: 'View User Permission', Width: 1200, Height: 650 });
        return false;
    }



    function onPermission(id) {

        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ManagePermissionForUser", "User", new { @area= "PortalAdmin" })?userId=' + id;
        win.OpenWindow({ Title: 'Manage User Permission', Width: 500, Height: 650 });
        return false;
    }

    function onUserHierarchyPermission(id) {
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("UserHierarchyPermission", "User", new { @area= "PortalAdmin" })?userId=' + id;
        win.OpenWindow({ Title: 'Manage User Permission', Width: 1500, Height: 650 });
        return false;
    }
    function onUserEntityPermission(id) {
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ManageUserEntityPermission", "User", new { @area= "PortalAdmin" })?type=user&id=' + id;
        win.OpenWindow({ Title: 'Manage Permission', Width: 1200, Height: 650 });
        return false;
    }


    function onResendWelcomeEmail(id) {
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        kendo.confirm("Are you sure, you want to resend welcome email?").then(function () {
            resendWelcomeEmail(id);
        }, function () {

        });

    }
    function ChangePassword(id) {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ChangeUserPassword", "Account", new { @area=""})?userId=' + id;
        win.OpenWindow({ Title: 'Change Password', Width: 600, Height: 350 });

    }

    function resendWelcomeEmail(id) {
        $.ajax({

            url:'@Url.Action("SendWelcomeEmail", "User", new { @area= "PortalAdmin" })?userId=' + id,
            type: "GET",
            contentType: "application/json",
            dataType: "JSON",
            success: function (response) {
                ShowNotification("Welcome email sent successfully", "success");
                window.parent.GetDataUser();
            }
        });

    }

     function SendSummary(e) {

        kendo.confirm("Are you sure, you want to Send Summary Email for all user?").then(function () {
            SendUserSummaryEmail();
        }, function () {

        });

    }

    function SendUserSummaryEmail() {
        $.ajax({

            url:'@Url.Action("SendSummaryEmail", "User", new { @area= "PortalAdmin" })',
            type: "GET",
            contentType: "application/json",
            dataType: "JSON",
            success: function (response) {
                ShowNotification("Summary Email Sent Successfully", "success");
            }
        });

    }
</script>
<div>
    <h4>@ViewBag.Title</h4>

    <hr />


    <div class="row">
        <div class="col-12">
            <button type='button' class='btn btn-primary' onclick='OnCreateUser();'><i class='fa fas fa-plus'></i>&nbsp;Create User </button>
            <br /><br />
            <div id="myGridUser" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        </div>
    </div>
</div>

@*<script>

    function OnCreateUser() {

           var win = GetMainWindow();
                win.iframeOpenUrl = '@Url.Action("CreateUser", "User", new { @area= "PortalAdmin" , @portalId=Model.PortalId})';
        win.OpenWindow({ Title: '@Html.Raw(Resource["ManageUser"])', Width: 450, Height: 800 });
        return false;
    }
    function SendSummaryEmail() {
        SendSummary();
    }

    function OnEditUser(id) {
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        var win = GetMainWindow();
        var url = "/PortalAdmin/User/EditUser?Id=" + id + '&portalId=' + '@Model.PortalId';
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: '@Html.Raw(Resource["ManageUser"])', Width: 450, Height: 800 });
        return false;
    }

    function onPermission(id) {
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ManagePermissionForUser", "User", new { @area= "PortalAdmin" })?userId=' + id;
        win.OpenWindow({ Title: '@Html.Raw(Resource["ManageUserPermission"])', Width: 450, Height: 800 });
        return false;
    }
    function onViewPermission(id)
    {
         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ViewUserPermission", "User", new { @area= "PortalAdmin" })?userId=' + id;
        win.OpenWindow({ Title: '@Html.Raw(Resource["ViewUserPermission"])', Width: 1000, Height: 800 });
        return false;
    }

         function onUserHierarchyPermission(id) {
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

         var win = GetMainWindow();
             win.iframeOpenUrl = '@Url.Action("UserHierarchyPermission", "User", new { @area= "PortalAdmin" })?userId=' + id;
             win.OpenWindow({ Title: '@Html.Raw(Resource["ManageUserPermission"])', Width: 1500, Height: 1000 });
        return false;
    }
       function onUserEntityPermission(id) {
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

         var win = GetMainWindow();
           win.iframeOpenUrl = '@Url.Action("ManageUserEntityPermission", "User", new { @area= "PortalAdmin" })?type=user&id=' + id;
           win.OpenWindow({ Title: '@Html.Raw(Resource["ManagePermission"])', Width: 1000, Height: 1000 });
        return false;
    }

    function OnDeleteUser(id) {
        //
        //  $('#dlg_DeleteConfirmation').data("kendoDialog").open();

      //  var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        kendo.confirm("@Resource["Areyousure,youwanttodeletetheuser?Afterdeletingtheuser,youwillnotbeabletoaccessanycandidatefromthisuser"]").then(function () {
            confirmDelete(id);
        }, function () {

        });

    }

    function confirmDelete(id) {
        //
        //  var grid = $("#grd_OrderStatus").data("kendoGrid");
        // var dataItem = $(e.currentTarget).closest("tr");
        // alert(dataItem.Id);
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        $.ajax({
           // url: "~/UserRole/DeleteUserRole?Id=" + id,
            url:'@Url.Action("DeleteUser", "User", new { @area= "PortalAdmin" })?Id=' + id,
            type: "GET",
            contentType: "application/json",
            dataType: "JSON",
            success: function (response) {
                // $('#dlg_DeleteConfirmation').data("kendoDialog").close();
                ShowNotification("@SharedResource["DeletedSuccessfully"]", "success");
                window.parent.$("#Usergrid").data("kendoGrid").dataSource.read();
            }
        });
        //  $('#dlg_DeleteConfirmation').data("kendoDialog").close();
      

    }
    function onResendWelcomeEmail(id) {
      //  var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        kendo.confirm("@Resource["Areyousure,youwanttoresendwelcomeemail?"]").then(function () {
            resendWelcomeEmail(id);
        }, function () {

        });

    }

    function resendWelcomeEmail(id) {
        $.ajax({

            url:'@Url.Action("SendWelcomeEmail", "User", new { @area= "PortalAdmin" })?userId=' + id,
            type: "GET",
            contentType: "application/json",
            dataType: "JSON",
            success: function (response) {
                ShowNotification("@Resource["Welcomeemailsentsuccessfully"]", "success");
                window.parent.$("#Usergrid").data("kendoGrid").dataSource.read();
            }
        });

    }

     function SendSummary(e) {

        kendo.confirm("@Resource["Areyousure,youwanttoSendSummaryEmailforalluser?"]").then(function () {
            SendUserSummaryEmail();
        }, function () {

        });

    }

    function SendUserSummaryEmail() {
        $.ajax({

            url:'@Url.Action("SendSummaryEmail", "User", new { @area= "PortalAdmin" })',
            type: "GET",
            contentType: "application/json",
            dataType: "JSON",
            success: function (response) {
                ShowNotification("@Resource["SummaryEmailSentSuccessfully"]", "success");
            }
        });
    }

    function ChangePassword(id) {
        var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ChangeUserPassword", "Account", new { @area=""})?userId=' + id;
        win.OpenWindow({ Title: 'Change Password', Width: 450, Height: 500 });
    }

    $(function () {
        $.contextMenu({
            selector: '#usertree-menu',
            trigger: 'left',
            build: function ($trigger, e) {

                console.log($trigger);
                var id = $trigger.data('idvalue');
                var status = 0;


                switch (status) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditUser(id);
                                        break;
                                    case 'del':
                                        OnDeleteUser(id);
                                        break;
                                    case 'UserEntityPermission':
                                        onUserEntityPermission(id);
                                        break;
                                    case 'hierarchyPermission':
                                        onUserHierarchyPermission(id);
                                        break;
                                    case 'Permission':
                                        onPermission(id);
                                        break;
                                    case 'ResendWelcomeEmail':
                                        onResendWelcomeEmail(id);
                                        break;
                                    case 'viewPermission':
                                        onViewPermission(id);
                                        break;
                                    case 'ChangePassword':
                                        ChangePassword(id);
                                        break;
                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "@Html.Raw(SharedResource["Edit"])", icon: "fas fa-pencil" },
                                "del": { name: "@Html.Raw(SharedResource["Delete"])", icon: "fas fa-trash" },
                                //"Permission": { name: "Access Permission", icon: "fas fa-user-shield" },
                                "ResendWelcomeEmail": { name: "@Html.Raw(Resource["ResendWelcomeEmail"])", icon: "fas fa-envelope" },
                                "UserEntityPermission": { name: "@Html.Raw(Resource["ManagePermission"])", icon: "fas fa-external-link" },
                                "hierarchyPermission": { name: "@Html.Raw(Resource["UserHierarchyPermission"])", icon: "fas fa-external-link-square" },
                                "viewPermission": { name: "@Html.Raw(Resource["ViewPermission"])", icon: "fas fa-external-link-square" },
                                "ChangePassword": { name: "Change Password", icon: "fas fa-user" },
                            }
                        };


                }
            }
        });

    });
</script>
<style>
    .fa-plus {
        margin-top: 5px;
    }
</style>
<div style="padding:15px;">
    <h4>@ViewBag.Title</h4>

    <hr />


    <div class="row">
        <div class="col-12">

            @(Html.Kendo().Grid<UserViewModel>
()
.Name("Usergrid")
  .ToolBar(toolbar =>
  {
      toolbar.Custom().Text("" + SharedResource["Create"] + "").Name("btnAdd").IconClass("fa fas fa-plus").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreateUser();" });
  })

    //toolbar.Custom().Text("Create Group").HtmlAttributes(new { href = "javascript:OnCreateGroup();" }))
    .Columns(columns =>
    {
        //columns.Bound(c => c.Id).Width(140).Hidden(true);
        //  columns.Bound(c => c.Id).Title(" ").Width(100).ClientTemplate("<a class='btn btn-success' onclick='return OnEditGroup(\"#=Id#\");'><i class='fad fa-edit'></i> Edit</a>");
        //columns.Command(command =>
        //{
        //    command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditUser").HtmlAttributes(new { @class = "action-icon" });
        //    command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteUser").HtmlAttributes(new { @class = "action-icon" });
        //    command.Custom("Permission").Text("<i class='fa fas fa-user-shield'></i>").Click("onPermission").HtmlAttributes(new { @class = "action-icon" });
        //    command.Custom("ResendWelcomeEmail").Text("<i class='fa fas fa-envelope' title='Resend Welcome Email'></i>").Click("onResendWelcomeEmail").HtmlAttributes(new { @class = "action-icon" });
        //    command.Custom("UserHierarchyPermissionPermission").Text("<i class='fa fa-external-link'></i>").Click("onUserHierarchyPermission").HtmlAttributes(new { @class = "action-icon" });
        //    command.Custom("UserEntityPermission").Text("<i class='fa fa-external-link-square'></i>").Click("onUserEntityPermission").HtmlAttributes(new { @class = "action-icon" });
        //}).Title("Action").Width(250);
        columns.Bound(c => c.Id).ClientTemplate("<div class='btn-group grid-menu' id='usertree-menu' data-idvalue=\"#:Id#\"  ><i class='fas fa-ellipsis-v'></i></div>").Width(150).Title("" + SharedResource["Action"] + "");
        columns.Bound(c => c.Name).Title(@SharedResource["Name"]);
        columns.Bound(c => c.Email).Title(@SharedResource["Email"]);
        columns.Bound(c => c.JobTitle).Title(@Resource["JobTitle"]);
        columns.Bound(c => c.Status).Title(@SharedResource["Status"]);
        //columns.Bound(c => c.GroupPortals).ClientTemplate("#= GroupPortals.join(', ')  #").Width(140);

    })
     .Scrollable(x => x.Enabled(false))
                .Sortable(srt => srt.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                                                    .Operators(o => o.ForString(s => s.Clear()
                                                    .Contains("Contains")
                                                    .IsEqualTo("Is equal to")
                                                )))
                .Pageable(pageable => pageable
                .Refresh(true)

                .PageSizes(true)
                .ButtonCount(5))
                .AutoBind(true)
                .DataSource(
                dataSource => dataSource
                .Ajax()
                .PageSize(10)
                //.Events(events => events.Error("OnError"))
                .Read(read => read.Action("ReadData", "User",new { @area="PortalAdmin" }))
                .Model(model => model.Id(p => p.Id))
                )
          )
        </div>
    </div>

</div>

<script>
        // $(document).ready(function () {

        //        $("#grid").data("kendoGrid").dataSource.reload()

        //});

    //function OnDeleteUser() {
    //
    //    $('#dlg_DeleteConfirmation').data("kendoDialog").open();
    //}



</script>*@
