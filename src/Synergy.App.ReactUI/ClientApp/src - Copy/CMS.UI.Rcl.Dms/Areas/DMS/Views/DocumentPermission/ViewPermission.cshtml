@inject IStringLocalizer<CMS.UI.Web.Areas.DMS.Controllers.DocumentPermissionController> Resource
@using CMS.UI.ViewModel;
@using CMS.Common;
@using Kendo.Mvc.UI;
@model DocumentPermissionViewModel

@{

    Layout = "/Views/Shared/_PopupLayout.cshtml";
    //Layout = null;
}

<style>
    .product {
        float: left;
        position: relative;
        height: 30px;
        padding-left: 3px;
        font-size: 16px;
    }
    .kgrdPDM {
        width: 100% !important;
    }
</style>
<script>
     function onDisablePermission(inheritance)
    {
        //alert(inheritance);
        $.ajax({
            url: '/Dms/DocumentPermission/DisableParentPermission?id=@Model.NoteId&InheritanceStatus=' + inheritance,
            type: 'POST',
            data: {},
            dataType: 'json',
            success: function (result) {

                $("#kgrdPermisstion").data("kendoGrid").dataSource.read();
                window.location.href = window.location.href;
                kendo.alert("@Resource["PermissionsDisabledSuccessfully"]");
            },
            error: function (ert) {
                $("#kgrdPermisstion").data("kendoGrid").dataSource.read();
                window.location.href = window.location.href;
                kendo.alert("@Resource["PermissionsDisabledSuccessfully"]");
            }
        });
    }


    function OnCreateTag() {
        // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));


        var win = GetMainWindow();

        win.iframeOpenUrl = "/Dms/DocumentPermission/ManagePermission?NodeId=@Model.NoteId";
        win.OpenWindow({ Title: '@Html.Raw(Resource["AddPermission"])', Width: 600, Height: 700 });
        return false;
    }
    function onEditOnCreateTag(e) {

        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var id = dataItem.Id;
        var win = GetMainWindow();
        //var portalId = $('#GlobalPortalId').val();
        //var TagCategoryId = $('#hiddenCategoryid').val();

        win.iframeOpenUrl = "/Dms/DocumentPermission/ManagePermission?Id=" + id + "&NodeId=@Model.NoteId";
        win.OpenWindow({ Title: '@Html.Raw(Resource["EditPermission"])', Width: 600, Height: 700 });
    }



    function OnAfterTagCreate() {

        $("#kgrdPermisstion").data("kendoGrid").dataSource.read();
    }
    function OnDeleteTag(e) {
        var flag = confirm('@SharedResource["Areyousurethatyouwanttoproceed?"]');
        //alert("..Delete");
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        if (flag) {
            $.ajax({
                url: '@Url.Action("DeletePermission", "DocumentPermission", new { @area="Dms"})?Id=' + dataItem.Id ,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        $("#kgrdPermisstion").data("kendoGrid").dataSource.read();
                        kendo.alert("@SharedResource["DeletedSuccessfully"]");
                    } else {
                        $("#kgrdPermisstion").data("kendoGrid").dataSource.read();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    //
                    $("#kgrdPermisstion").data("kendoGrid").dataSource.read();
                }
            });
            return false;
        }
    }

    function OnAfterCreateuser() {
        var datas = Getdata();
        $("#kgrdPermisstion").data("kendoGrid").dataSource.read(datas);
    }
    function Getdata() {

        var id = '@Model.NoteId';
        var search = { noteId: id, };
        return search;
    }

    function FilterData() {

        var data = Getdata;

        $("#kgrdPermisstion").data("kendoGrid").dataSource.read(data);


    }

     var statusType = '@Html.Raw(EnumExtension.EnumToJson(typeof(DmsPermissionTypeEnum)))';
    var statusTypeObj = JSON.parse(statusType);

      var statusAccess = '@Html.Raw(EnumExtension.EnumToJson(typeof(DmsAccessEnum)))';
    var statusAccessObj = JSON.parse(statusAccess);

      var statusApplies = '@Html.Raw(EnumExtension.EnumToJson(typeof(DmsAppliesToEnum)))';
    var statusAppliesObj = JSON.parse(statusApplies);

    var columnDefs = [

        {
            headerName: '@Resource["Type"]',
            field: "PermissionType",
            cellRenderer: params => {
                return statusTypeObj[params.value]; //only for enum
            }
        },
        {
            headerName: '@Resource["User/Permission Group"]',
            field: "PermittedUserId"
        },
        {
            headerName: '@Resource["Access"]', field: "Access",
            cellRenderer: params => {
                return statusAccessObj[params.value]; //only for enum
            }
        },
        {
            headerName: '@Resource["AppliesTo"]', field: "AppliesTo",
            cellRenderer: params => {
                return statusAppliesObj[params.value]; //only for enum
            }
        },


    ];

    $(function () {

        getData1();

        var pId = '@Model.ParentId' == null ? '@Model.WorkspaceId' : '@Model.ParentId';

        var dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Dms/Document/ReadFolderHierarchyData?parentId=" + pId +"&noteId="+'@Model.NoteId',
                    dataType: "json"
                }
            },
        });

        $("#listView").kendoListView({
            dataSource: dataSource,
            template: kendo.template($("#template").html())
        });


    });

   function getData1() {
       document.getElementById("PermissionGrid").innerHTML = "";
       gridConfig(
           "PermissionGrid",
           "/DMS/DocumentPermission/GetPermissionDetails1?noteId=@Model.NoteId",
           columnDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
    }


</script>


<div>
    @if (Model.WorkspaceId.IsNotNull())
    {
        <div class="col-xs-7">
            @*@(Html.Kendo().ListView<Cms.UI.ViewModel.FolderViewModel>()
                         .Name("listView")
                         .TagName("div")
                         .ClientTemplateId("template")
                         //.Events(events => events
                         //.DataBound("OnListViewDataBound"))
                         .DataSource(dataSource => dataSource
                         .Ajax()
                         .Read(read => read.Action("ReadFolderHierarchyData", "Document", new { area = "Dms", parentId = Model.ParentId == null ? Model.WorkspaceId : Model.ParentId,noteId=Model.NoteId }))
                        .ServerOperation(false))
              )*@

            <div id="listView"></div>
            <script type="text/x-kendo-tmpl" id="template">
                <div class="product">
                    <a href="javascript: void(0);">#:Name# > </a>
                </div>
            </script>
        </div>

    }

    <div class="row">
        <div class="col-md-12">
            <div id="PermissionGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        </div>
        @*<div class="col-md-12">
            @(Html.Kendo().Grid<DocumentPermissionViewModel>
    ().Name("kgrdPermisstion").HtmlAttributes(new { @class = "kgrdPDM" })
    .Columns(col =>
    {

        col.Bound(c => c.PermissionType).Title(@Resource["Type"]);
        col.Bound(c => c.PermittedUserId).Title(@Resource["User/Permission Group"]);
        col.Bound(c => c.Access).Title(@Resource["Access"]);
        col.Bound(c => c.AppliesTo).Title(@Resource["AppliesTo"]);

        //col.Bound(c => c.NoteSubject).Title("Tag Name");




    })
    //.ToolBar(toolbar =>
    //{
    //    toolbar.Custom().Text("Add Permission").Name("btnAdd").IconClass("fa fas fa-plus").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreateTag();" });
    //})
    .Scrollable(x => x.Enabled(true))

    .Sortable(srt => srt.Enabled(true))
    .Selectable(select => select.Enabled(false))
    .Filterable(f => f.Extra(false)
    .Operators(o => o.ForString(s => s.Clear()
    .Contains("Contains")
    .IsEqualTo("Is equal to")
    )))
    // .Events(e => e.DataBound("onDataBound"))
    .Resizable(resize => resize.Columns(true))
    .Pageable(pageable => pageable
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5))
    .AutoBind(true)
    .DataSource(
    dataSource => dataSource
    .Ajax()
    .PageSize(10)
    .Read(read => read.Action("GetPermissionDetails", "DocumentPermission", new { area="DMS"}).Data("Getdata"))
      .Model(m =>
      {
          m.Id(model => model.Id);
          m.Id(model => model.NoteId);


      }))
    )
        </div>*@

    </div>
</div>
