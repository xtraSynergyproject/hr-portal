@using CMS.UI.ViewModel;
@using Kendo.Mvc.UI;
@using CMS.Common;
@{
    ViewBag.Title = "Topics";
    Layout = null;
}

<style>

    em {
        background-color: yellow;
    }

    .left {
        min-width: 300px;
        max-width: 600px;
    }

    .splitter-container {
        height: 90vh !important;
        width: 100%;
    }

    .treeview .k-in {
        width: 100% !important;
    }
    /*Portal Start*/
    .sidenav {
        height: 100vh; /* 100% Full-height */
        width: 0; /* 0 width - change this with JavaScript */
        position: fixed; /* Stay in place */
        z-index: 100; /* Stay on top */
        top: 0; /* Stay at the top */
        right: 0;
        background-color: #fff; /* Black*/
        border-left: 1px solid silver;
        overflow-x: hidden; /* Disable horizontal scroll */
        padding-top: 30px; /* Place content 60px from the top */
        transition: 0.5s; /* 0.5 second transition effect to slide in the sidenav */
    }



        /* Position and style the close button (top right corner) */
        .sidenav .closebtn {
            position: absolute;
            top: 0;
            right: 15px;
            font-size: 30px;
            font-weight: bold;
            margin-left: 20px;
            color: gray;
            border: none;
            text-decoration: none;
        }

            .sidenav .closebtn:hover {
                color: red;
            }

    .slidenav-flow {
        overflow-x: hidden;
        overflow-y: auto !important;
        height: 92% !important;
    }

    #portal-div {
        transition: margin-left .5s;
        padding: 20px;
    }

    #overlay {
        position: fixed;
        background: rgba(0,0,0,.5);
        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=30)";
        width: 100%;
        height: 100%;
        z-index: 99;
        right: 100%;
        top: 0;
        /*  transition: right .5s ease;*/
    }

    .overlay {
        right: 0 !important;
        /* transition: right .5s ease !important;*/
    }

    .cms-panel-header-name {
        font-size: 16px;
        font-weight: 700;
        padding: 0 10px;
        width: 80%;
    }

    .k-listview {
        background: transparent;
    }
    /*Portal End*/
    .watchlist-menu {
        background: #f8f8f7;
        border-bottom: 1px solid #9e9e9e;
        width: 100%;
        padding: 6px;
    }

    #watchlist li:hover {
        background: #808080;
        cursor: pointer;
    }

    .active {
        background: #808080;
    }

/*    #topicTreeView .k-state-selected {
        background-color: white;
        color: black;
    }*/

</style>

<script>

    var selectdItem = null;
    var selectedType = null;
    var selectedParentId = null;      

    var splitter = $('.splitter-container').height(200).split({
        orientation: 'vertical',
        limit: 10,
        position: '20%', // if there is no percentage it interpret it as pixels
        onDrag: function (event) {
            console.log(splitter.position());
        }
    });
    function OnSelectTopic1(e) {
  
        e.preventDefault();
    }
    function OnSelectTopic(e) {
        
       // var id = e.node.children[0].lastElementChild.lastElementChild.getAttribute("data-id");
       // var type = e.node.children[0].lastElementChild.lastElementChild.getAttribute("data-type");
       // var parentId = e.node.children[0].lastElementChild.lastElementChild.getAttribute("data-parent-id");
         var id = e.getAttribute("data-id");
        var type = e.getAttribute("data-type");
        var parentId = e.getAttribute("data-parent-id");

        selectdItem = id;
        selectedParentId = parentId;
        selectedType = type;

        if (selectedType != "Root") {
            if (selectedType == "level") {
            } else if (selectedType == "topic") {
                selectedParentId = null;
            }
            $("#kgrdQuestion").data("kendoGrid").dataSource.read();
        }
        return true;
    }

    $(function () {
        $.contextMenu({
            selector: '.tree-menu',
            trigger: 'left',
            build: function ($trigger, e) {
                var id = $trigger.data('id');
                var type = $trigger.data('type');
                var parentId = $trigger.data('parentId');
                switch (type) {
                    case 'Root':
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'add':
                                        createTopic(id);
                                        break;
  
                                    //case 'addlevel':
                                    //    createLevel(id);
                                    //    break;

                                    default:
                                }
                            },
                            items: {
                                "add": { name: "Add Topic", icon: "fas fa-plus" },
                                /* "addlevel": { name: "Add Competency Level", icon: "fas fa-plus" },*/
                                //"remove": { name: "Remove Topic", icon: "fas fa-trash" },
                            }
                        };
                    case 'topic': return {
                        callback: function (key, options) {
                            switch (key) {
                                case 'edit':
                                    editTopic(id);
                                    break;
                                case 'add':
                                    createTopic(id);
                                    break;

                                //case 'addlevel':
                                //    createLevel(id);
                                //    break;
                                case 'addQuestion':
                                    createQuestion(id, parentId);
                                    break;    

                                default:
                            }
                        },
                        items: {
                            "edit": { name: "Edit Topic", icon: "fas fa-pencil" },
                            "add": { name: "Add Sub Topic", icon: "fas fa-plus" },
                            "addQuestion": { name: "Add Question", icon: "fas fa-plus" },  
                            //"addlevel": { name: "Add Competency Level", icon: "fas fa-plus" },
                            //"remove": { name: "Remove Topic", icon: "fas fa-trash" },
                        }
                    };
                    //case 'level': return {
                    //    callback: function (key, options) {
                    //        switch (key) {

                    //            case 'addQuestion':
                    //                createQuestion(id, parentId);
                    //                break;                                

                    //            default:
                    //        }
                    //    },
                    //    items: {
                    //        "addQuestion": { name: "Add Question", icon: "fas fa-plus" },                            
                    //    }
                    //};

                    default:
                }


            }
        });
    });

    var portalId = $('#GlobalPortalId').val();

    function createLevel(id) {
        var prms = encodeURIComponent('parentNoteId=' + id);
        var url = '/Cms/Page?lo=Popup&cbm=OnAfterNoteCreate&source=Create&dataAction=Create&templateCodes=TAS_COMPETENCY_LEVEL&portalId=' + portalId + '&prms=' + prms;
        openPopup(url, "Add Competency Level");
    }
    function createQuestion(id, parentId) {
        var win = GetMainWindow();
        //win.iframeOpenUrl = "/Tas/TalentAssessment/AssessmentQuestions?lo=Popup&topicId=" + parentId + "&levelId=" + id;
        win.iframeOpenUrl = "/Tas/TalentAssessment/AssessmentQuestions?lo=Popup&topicId=" + id;
        win.OpenWindow({ Title: 'Create Questions', Width: 1200, Height: 800 });
    }   

    function createTopic(id) {
        debugger;
        
        //if (id == 'topics') {
        //    id = null;            
        //}  
        if (id != 'topics') {
            var prms = encodeURIComponent('parentNoteId=' + id);
        } 
       
                
        var url = '/Cms/Page?lo=Popup&cbm=OnAfterNoteCreate&source=Create&dataAction=Create&templateCodes=TAS_TOPIC&portalId=' + portalId + '&prms=' + prms;
        openPopup(url, "Add Topic");
    }

    function editTopic(id) {
        //var prms = encodeURIComponent('parentNoteId=' + id);
        var url = '/Cms/Page?lo=Popup&cbm=OnAfterNoteCreate&source=View&dataAction=View&templateCodes=TAS_TOPIC&portalId=' + portalId + '&recordId=' + id;
        openPopup(url, "Manage Topic");
    }

    function OnAfterNoteCreate() {        
        ShowNotification("Saved Successfully", "success");
        $("#topicTreeView").data("kendoTreeView").dataSource.read();
    }

    function referesh() {
        $("#kgrdQuestion").data("kendoGrid").dataSource.read();
        $("#topicTreeView").data("kendoTreeView").dataSource.read();
    }

    function openPopup(url, title) {
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: title, Width: 1200, Height: 600 });
        return false;
    }

    //function createTopic(id) {
    //    if (id == 'topics') {
    //        id = null;
    //    }
    //    ShowLoader($('#topic'));
    //    kendo.prompt("Topic", "")
    //        .done(function (data) {
    //            var diagram = {
    //                "subject": data,
    //                "parentId": id
    //            };
    //            $.ajax({
    //                type: "POST",
    //                url: "/Tas/TalentAssessment/ManageTopic",
    //                data: diagram,
    //                dataType: "json",
    //                success: function (result) {
    //                    HideLoader($('#topic'));
    //                    ShowNotification("Saved Successfully", "success");
    //                    $("#topicTreeView").data("kendoTreeView").dataSource.read();
    //                },
    //                error: function (xhr, httpStatusMessage, customErrorMessage) {
    //                    HideLoader($('#topic'));
    //                    ShowNotification("Saved Successfully", "success");
    //                }
    //            });
    //        })
    //        .fail(function (data) {
    //            console.log("User rejected with text: " + data);
    //        });
    //}

    function Filter() {
        if (selectedType == "topic") {
            return {
                topic: selectdItem,
                level: null
            };
        } else if (selectedType == "level") {
            return {
                topic: selectedParentId,
                level: selectdItem
            };
        } else {
            return {
                topic: null,
                level: null
            };
        }
    }

    function OnView(id,topicId) {

        var win = GetMainWindow();
        win.iframeOpenUrl = "/Tas/TalentAssessment/AssessmentQuestions?noteId=" + id + "&lo=Popup" + '&topicId=' + topicId;
        win.OpenWindow({ Title: 'Edit Questions', Width: 1200, Height: 700 });

    }
    function onFileUploadSuccess(e) {
        if (e.response.success) {
            $(".hr-v-summary").removeClass("validation-summary-errors");
            $(".hr-v-summary").addClass("validation-summary-valid");
            $(".hr-v-summary ul").html("");
            var msg = "Assessment Uploaded Successfully";
            alert(msg);
            $("#topicTreeView").data("kendoTreeView").dataSource.read();
        }
        else {
            var msg = "";
            for (var i = 0; i < e.response.errors.length; i++) {
                msg += e.response.errors[i] + "<br/>";
            }
            ShowError(msg);
        }
        return true;
    }

    function onFileUploadSuccess1(e) {
        if (e.response.success) {
            alert("Image Upload Successfully");
        }
        
        return true;
    }

    function OnFileUploadError(e) {
        var msg = "";
   
            for (var i = 0; i < e.response.errors.length; i++) {
                msg += e.response.errors[i] + "<br/>";
           
        }
        ShowError(msg);
    }


    function OnImageUploadError(e) {
        var msg = "";

        var r = e.response.errors.length;
        alert(r);
    }
 
    function ShowError(err) {
        alert(err);
        //kendo.ui.progress($("#divTemplateGrid"), false);
        //$(".hr-v-summary").removeClass("validation-summary-valid");
        //$(".hr-v-summary").addClass("validation-summary-errors");
        //$(".hr-v-summary ul").html(err);
    }

    function DownloadFile() {

        window.location = '/Tas/TalentAssessment/Download';

    }

    function onFileSuccess(e) {
        $("#divTemplateGrid").hide();
        if (e.response.success) {
            $("#FileId").val(e.response.fileId);
            $(".hr-v-summary").removeClass("validation-summary-errors");
            $(".hr-v-summary").addClass("validation-summary-valid");
        } else {
            var msg = ExtractError(e.response.errors, true);
            alert(msg);
        }
    }    

    //function OnFilter() {
    //    var s = $('#search').val();
    //    if (s != "" && s != null) {
    //        var srch = {
    //            id: "topics",
    //            search: s
    //        }
    //        $("#topicTreeView").data("kendoTreeView").dataSource.read(srch);
    //    } else {
    //        $("#topicTreeView").data("kendoTreeView").dataSource.read();
    //    } 
    //    ShowLoader($('#treelist'));
    //}
    //function OnClearFilter() {
    //    $('#search').val("");
    //    $("#topicTreeView").data("kendoTreeView").dataSource.read();
    //    ShowLoader($('#treelist'));
    //}

    //function OnDataBound() {
    //    HideLoader($('#treelist'));
    //}


    $("#search").keyup(function () {
        var val = $('#search').val();
        var listView = $("#topicTreeView").data("kendoTreeView");
        listView.dataSource.filter({
            logic: "or",
            filters: [
                {
                    field: "DisplayName",
                    operator: "contains",
                    value: val
                },                
                //{
                //    field: "ParentName",
                //    operator: "contains",
                //    value: val
                //},

            ]
        });
    });
    
</script>
<script id="fileTemplate" type="text/x-kendo-template">
    <span class='k-progress'></span>
    <div class='file-wrapper'>
        <h8 class='file-heading file-name-heading'>Name: #=name#</h8>
        <strong class="k-upload-status">
            <button type='button' class='k-upload-action'></button>
            <button type='button' class='k-upload-action'></button>
        </strong>
    </div>
</script>

<div class="row" style="text-align:right">
   
    <div class="form-group col-xs-8 col-sm-8 d-flex justify-content-start">

        <div class="col-lg-5" style="text-align:left">
            <span style="font-size:16px;font-weight:bold">Bulk Upload</span>
            @(Html.Kendo().Upload().Multiple(false)
                        .Name("files1")
                        .TemplateId("fileTemplate")
                        .Async(a => a
                        .Save("ImportQuestionnaire", "TalentAssessment", new { @area = "TAS" })
                        .AutoUpload(false)
                        )
                        .Events(events => events
                        .Success("onFileUploadSuccess")
                        .Error("OnFileUploadError")
                        )
                        .Validation(validation => validation.AllowedExtensions(new string[] { ".xlsx", ".xls" }))
        )

        </div>

        <div class="col-lg-3" style="padding-top:33px;text-align:left">
            <input type="button" class="btn-primary" onclick="DownloadFile()" value="Download Format" />
        </div>

        <div class="col-lg-5">
            <span style="font-size:16px;font-weight:bold">Upload Questionnaire Images</span>
            @(Html.Kendo().Upload()
                        .Name("files2")
                        .TemplateId("fileTemplate")
                        .Async(a => a
                        .Save("SaveFile", "TalentAssessment", new { @area = "TAS" })
                        .AutoUpload(false)

                        )
                      
                        .Directory(true)
                        .Validation(validation => validation.AllowedExtensions(new string[] { ".png", ".jpeg", ".jpg" }))
        )
        </div>



    </div>
    </div>

    <div class="splitter-container">
        <div class="left">
            <div style="display:flex;padding:10px;">
                <input type="text" class="form-control" id="search" placeholder="search topic..." autocomplete="off"/>
                @*<button class="btn btn-primary" onclick="OnFilter();"><i class="fas fa-search"></i></button>
                <button class="btn btn-danger" onclick="OnClearFilter();"><i class="fas fa-times"></i></button>*@
            </div>
            <div id="topic">

                <div style="height:600px;overflow:scroll; margin-left:5px;" id="treelist">


                    @(Html.Kendo().TreeView()
        .Name("topicTreeView").HtmlAttributes( new {@class="treeview"})
        .Events(e=>e.Select("OnSelectTopic1"))
        .DataTextField("Name")
        .TemplateId("ct-tv-template")
        .DataSource(dataSource => dataSource
            .Read(read => read
                .Action("GetTopicTreeList", "TalentAssessment",new { @area= "Tas" })
            )
        )        
    )
                </div>

                <script id="ct-tv-template" type="text/kendo-ui-template">
                    <span style="width:100%" data-id="#:item.id#" data-template-type="#:item.TemplateType#" data-type="#:item.Type#" data-portal-name="#:item.Name#" data-parent-id="#:item.ParentId#" data-level="#:item.Level#" onclick="OnSelectTopic(this)">
                    # if (item.Type == 'Root') { #
                    <span class='fas fa-folder' style='margin-right:5%'></span>
                    # } #

                    # if (item.Type == 'topic') { #
                    <span class='fal fa-file-contract' style='margin-right:5%;font-size:11px'></span>
                    # } #

                    # if (item.Type == 'level') { #
                    <span class='fal fa-layer-group' style='margin-right:5%;font-size:11px'></span>
                    # } #
                            <span style="width:100%">   #: item.DisplayName #   (#: item.Count #)</span>
                    # if (item.Type != 'level') { #
                            <span style="float:right;" data-id="#:item.id#" data-template-type="#:item.TemplateType#" data-type="#:item.Type#" data-portal-name="#:item.Name#" data-parent-id="#:item.ParentId#" class="tree-menu" data-level="#:item.Level#" onclick="OnSelectTopic(this)"><i class="fa fa-ellipsis-h"></i></span>
                    # } #
                    </span>
                </script>
            </div>

        </div>
        <div class="right" id="template-content">
            @(Html.Kendo().TabStrip()
          .Name("tabstrip")
          .Animation(animation =>
              animation.Open(effect =>
                  effect.Fade(FadeDirection.In)))
          .Items(tabstrip =>
          {
              tabstrip.Add().Text("Questions")
                  .Selected(true)
                  .Content(@<text>

            @*<script>
    var columnDefs = [
        {
            field: "Id",
            headerName: "View",
            cellRenderer: params => {
                return "<span onclick='OnView(\"" + params.data.NtsNoteId + "\",\"" + params.data.NtsNoteId_ParentNoteId+"\")' class='fas fas fa-pencil' > </span>";
            }


        },
           {
               field: "IndicatorId_IndicatorName",
               headerName: "Indicator",
               cellRenderer: params => {
                   return "<div class='text-justify' >" + params.value + "</div>";
               }
           },
           {
               field: "CompentencyLevelId_CompetencyLevel",
               headerName: "Competency Level",
               cellRenderer: params => {
                   return "<div class='text-justify' >" + params.value + "</div>";
               }

           },
           {
               field: "Question",
               cellRenderer: params => {
                   return "<div class='text-justify' >" + params.value+"</div>";
               }

           },

        {
            field: "QuestionArabic",
            headerName: "Question Arabic",
            cellRenderer: params => {
                return "if('" + params.value + "'!=null){ <div class='text-justify' >" + params.value+"</div>}"
            }

        },
        {
            field: "AssessmentTypeId_Name",
            headerName:"Question Type",
            cellRenderer: params => {
                return "<div class='text-justify' >" + params.value+"</div>"; //only for enum
            }
        },

    ];

    $(function () {

        getTopicsData();

       // $.contextMenu('update');
      //  $('.context-menu-list').trigger('contextmenu:refresh');




    });

    function getTopicsData() {
        document.getElementById("kgrdQuestion").innerHTML = "";
        var param = Filter();
        gridConfig(
            "kgrdQuestion",
            "/tas/TalentAssessment/ReadQuestions?topic=" + param.topic + "&level=" + param.level,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>*@

             @*<div id="kgrdQuestion" style="width: 100%;height:550px" class="ag-theme-alpine"></div>*@
            @(Html.Kendo().Grid<AssessmentQuestionsViewModel>()
            .Name("kgrdQuestion")

              .HtmlAttributes(new { @style = "width: 100%;", })
            .Columns(columns =>
            {
                //columns.Bound("Id").Width(20).ClientTemplate("<span onclick='OnView(\"#:NtsNoteId#\",\"#:NtsNoteId_ParentNoteId#\")' class='fas fas fa-pencil' > </span>").Title("View");
                //columns.Bound("IndicatorId_IndicatorName").ClientTemplate("<div class='text-justify' >#=IndicatorId_IndicatorName# </div>").Title("Indicator");
                //columns.Bound("CompentencyLevelId_CompetencyLevel").ClientTemplate("<div class='text-justify' >#=CompentencyLevelId_CompetencyLevel# </div>").Title("Competency Level");
                //columns.Bound("Question").ClientTemplate("<div class='text-justify' >#=Question# </div>").Title("Question");
                //columns.Bound("QuestionArabic").ClientTemplate("#if(QuestionArabic!=null){# <div class='text-justify' >#=QuestionArabic# </div>#}#").Title("QuestionArabic");
                //columns.Bound("AssessmentTypeId_Name").ClientTemplate("<div class='text-justify' >#=AssessmentTypeId_Name# </div>").Title("Question Type");

                columns.Bound(c=>c.Id).Width(20).ClientTemplate("<span onclick='OnView(\"#:NoteId#\",\"#:ParentNoteId#\")' class='fas fas fa-pencil'> </span>").Title("View");
                columns.Bound(c => c.Topic).Title("Topic");
                columns.Bound(c=>c.IndicatorName).Title("Indicator");
                columns.Bound(c=>c.CompetencyLevel).Title("Competency Level");
                columns.Bound(c=>c.Question).Title("Question");
                columns.Bound(c=>c.QuestionArabic).Title("QuestionArabic");
                columns.Bound(c=>c.AssessmentType).Title("Question Type");
            })
            //.HtmlAttributes(new { style = "height: 750px;" })
            .Sortable()
            .Filterable(f => f.Extra(false)
    .Operators(o => o.ForString(s => s.Clear()
    .Contains("Contains")
    .IsEqualTo("Is equal to")
    )))
            .Resizable(resize => resize.Columns(true))
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(true)
                .ButtonCount(5))
            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("ReadQuestions", "TalentAssessment", new { area = "tas" }).Data("Filter"))
                .PageSize(10)
            )
        )
                  </text>);

              @*tabstrip.Add().Text("New York")
                  .Content(@<text>
                    <div class="weather">
                        <h2>29<span>&ordm;C</span></h2>
                        <p>Sunny weather in New York.</p>
                    </div>
                    <span class="sunny">&nbsp;</span>
                  </text>);

              tabstrip.Add().Text("Moscow")
                  .Content(@<text>
                    <div class="weather">
                        <h2>16<span>&ordm;C</span></h2>
                        <p>Cloudy weather in Moscow.</p>
                    </div>
                    <span class="cloudy">&nbsp;</span>
                  </text>);

              tabstrip.Add().Text("Sydney")
                  .Content(@<text>
                    <div class="weather">
                        <h2>17<span>&ordm;C</span></h2>
                        <p>Rainy weather in Sidney.</p>
                    </div>
                    <span class="rainy">&nbsp;</span>
                  </text>);*@
          })
    )
        </div>
    </div>
