
@using CMS.UI.ViewModel;
@using Kendo.Mvc.UI;
@using CMS.Common;
@using Kendo.Mvc.Extensions;
@model AssessmentViewModel
@{
    ViewData["Title"] = "Assessments Set";
    //Layout = "/Areas/Cms/Views/Shared/_LayoutCms.cshtml";
    Layout = null;
}
<style>
    .kgrdSalaryInfoStyle {
        width: 100% !important;
    }

    .panel-heading {
        font-size: 1.3em;
        cursor: pointer;
        padding-top: 7px !important;
        padding-bottom: 7px !important;
    }

    .panel {
        margin-top: 10px;
        border-color: #ddd;
        margin-bottom: 20px;
        background-color: #fff;
        border: 1px solid transparent;
        border-radius: 4px;
        -webkit-box-shadow: 0 1px 1px rgb(0 0 0 / 5%);
        box-shadow: 0 1px 1px rgb(0 0 0 / 5%);
    }

    .panel-heading:hover {
        background-color: #f1f1f1;
    }

    .panel-filter {
        border-color: #428bca;
    }

        .panel-filter > .panel-heading {
            color: #1a3750;
            background-color: #428bca;
            border-color: #428bca;
        }

    .btn-filter-reset {
        color: #fff;
        background-color: #428bca;
        border-color: #428bca;
    }
   /* .ag-cell{
        width:200px!important;
    }*/
</style>
<script type="text/javascript">

    function ViewCandidateProfile(userId) {
        var url = "/TAS/TalentAssessment/CandidateProfile?userId=" + userId;
        LoadPartailView(url, $('#cms-content'));
    }
 
    function dateformat(value) {
        if (value.toString().includes("GMT")) {
            return value.toString().split('GMT')[0];
        } else {
            return "";
        }
    }




   

    function DownloadReport(id, userId) {
        if (id == null || id == 0) {
            alert('Assessment report is not available for this user');
            return false;
        }
        window.location.href = "/assessment/assessment/DownloadUserAssessmentReport?userId=" + userId;

    }
   


 
    $(window).resize(function (e) {
        var grid = $('#kgrdInterview').data("kendoGrid");
        grid.thead.closest(".k-grid-header").css("padding-right", kendo.support.scrollbar(true));
    });
</script>
@*<h3>@ViewBag.Title</h3>*@

<script>
    var columnDefs = [
        {
            headerName: " ",
            field: "Id",
            width:350,
            cellRenderer: params => {
                return "<button class='btn btn-warning' onclick='ViewCandidateProfile(\"" + params.data.OwnerUserId + "\")'>View Profile</button>"
                //return "<button class='btn-group-right btn btn-sm btn-success dropdown-toggle' data-toggle='dropdown'><span class='caret'>Action</span></button>" +
                //    "<ul class='dropdown-menu' style='top:auto;left:auto;'>" +
                //    "<li><button class='btn btn-warning' onclick='ViewCandidateProfile(\"" + params.data.OwnerUserId + "\")'>View Profile</button></li>" +

                //    "</ul>"
            }
        },
        {
            headerName: " ",
            field: "PhotoId",
            cellRenderer: params => {
                return "<img style='border-radius:50%;' width='40' height='40' src='/Cms/document/getimagemongo?id=" + params.data.PhotoId + "' onerror='OnPhotoError(this);' > "
            }
        },
        {
            field: "OwnerUserName",
            headerName: "Candidate Name",
        },
        {
            field : "Email",
                headerName: "Candidate Email",
        },
        {
            headerName: "Candidate Phone",
            field: "Mobile",
        },
        {
            headerName: "Job Title",
            field: "MinistryName",

        },
        {
            headerName: "Assessment Language",
            field: "PreferredLanguage",
        },
        {
            headerName: "Interview Scheduled StartDate",
            field: "ScheduledStartDate",
            cellRenderer: params => {

                var date = new Date(params.value);
                const month = date.toLocaleString('default', { month: 'short' })
                return date.getDate() + " " + month + " " + date.getFullYear();
            }
        },
        {
            headerName: "Interview Scheduled EndDate",
            field: "ScheduledEndDate",
            cellRenderer: params => {

                var date = new Date(params.value);
                const month = date.toLocaleString('default', { month: 'short' })
                return date.getDate() + " " + month + " " + date.getFullYear();
            }
        },
        {
            headerName: "Interview Actual EndDate",
            field: "ActualStartDate",
            cellRenderer: params => {
                debugger;
                var date = new Date(params.value);
                const month = date.toLocaleString('default', { month: 'short' })
                return date.getDate() + " " + month + " " + date.getFullYear();
            }
        },
        {
            headerName: "Interview Actual EndDate",
            field: "ActualEndDate",
            cellRenderer: params => {

                var date = new Date(params.value);
                const month = date.toLocaleString('default', { month: 'short' })
                return date.getDate() + " " + month + " " + date.getFullYear();
            }
        },
        {
            headerName: "Online Assessment Zoom",
            field: "AssessmentZoomUrl",
        },
        {
            headerName: "Online Case Study Zoom",
            field: "CaseStudyZoomUrl",
          
        },
        {
            headerName: "MCQ Status",
            field: "MCQStatus",
           
        },

        {
            headerName: "Case Study Status",
            field: "CSStatus",

        },


        {
            headerName: "Interview Zoom",
            field: "AssessmentInterviewUrl",

        },

        {
            headerName: "Interview Status",
            field: "AssessmentStatus",

        },
      
    ];

    $(function () {

        getAssessmentReportData();

      


    });

    function getAssessmentReportData() {
        document.getElementById("kgrdInterview").innerHTML = "";
        gridConfig(
            "kgrdInterview",
            "/Tas/TalentAssessment/GetAssessmentReportMinistryList?userId=@ViewBag.UserId",
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>


<div class="row">
    <div class="col-md-12">

        <div id="kgrdInterview" style="width:100%;height:550px" class="ag-theme-alpine"></div>


        @*@(Html.Kendo().Grid<AssessmentInterviewViewModel>
                ().Name("kgrdInterview")
                .Columns(col =>
                {
                    {
                        col.Bound(p => p.Id).Title("").ClientTemplate("<button class='btn-group-right btn btn-sm btn-success dropdown-toggle' data-toggle='dropdown'><span class='caret'>Action</span></button>" +
                        "<ul class='dropdown-menu' style='top:auto;left:auto;'>" +
                        "<li><button class='btn btn-warning' onclick='ViewCandidateProfile(\"#=OwnerUserId#\")'>View Profile</button></li>"+

                        "</ul>"

                        ).Width(250);
                    }
                    col.Bound(c => c.PhotoId).Title("").Filterable(false).ClientTemplate("<img style='border-radius:50%;' width='40' height='40' src='/Cms/document/getimagemongo?id=#:PhotoId#' onerror='OnPhotoError(this);' > ").Width(80);
                    col.Bound(c => c.OwnerUserName).Width(200).Title("Candidate Name");
                    col.Bound(c => c.Email).Title("Candidate Email").Width(200);
                    col.Bound(c => c.Mobile).Title("Candidate phone").Width(200);
                    col.Bound(c => c.MinistryName).Title("Job Title").Width(200);
                    col.Bound(c => c.PreferredLanguage).Title("Assessment Language").Width(200);
                    col.Bound(c => c.ScheduledStartDate).Title("Interview Scheduled StartDate").Width(200).Format("{0:dd MMM yyyy}");
                    col.Bound(c => c.ScheduledEndDate).Title("Interview Scheduled EndDate").Width(200).Format("{0:dd MMM yyyy}");
                    col.Bound(c => c.ActualStartDate).Title("Interview Actual StartDate").Width(200).Format("{0:dd MMM yyyy}");
                    col.Bound(c => c.ActualEndDate).Title("Interview Actual EndDate").Width(200).Format("{0:dd MMM yyyy}");
                    //col.Bound(c => c.Subject).Title("Interview Name");
                    col.Bound(c => c.AssessmentZoomUrl).Title("Online Assessment Zoom").Width(200);
                    col.Bound(c => c.CaseStudyZoomUrl).Title("Online Case Study Zoom").Width(200);
                    col.Bound(c => c.MCQStatus).Title("MCQ Status").Width(200);
                    col.Bound(c => c.CSStatus).Title("Case Study Status").Width(200);
                    col.Bound(c => c.AssessmentInterviewUrl).Title("Interview Zoom").Width(200);
                    col.Bound(c => c.AssessmentStatus).Title("Interview Status").Hidden(true);
                    //col.Bound(c => c.IsAssessmentStopped).Title("").ClientTemplate("  <div class='btn-group'><button type='button' class='btn btn-primary dropdown-toggle' data-toggle='dropdown'>Action<span class='caret'></span></button><ul class='dropdown-menu' role='menu'><li onclick='DownloadReport(#=UserReportId#,#=OwnerUserId#)'><a>Download Report</a></li><li onclick='ViewCandidateProfile(#=OwnerUserId#)'><a>View Profile</a></li><li onclick='UploadDocs(#=ServiceId#,this)' data-type='Id'><a>Upload Id</a></li><li onclick='UploadDocs(#=ServiceId#,this)'  data-type='Image'><a>Upload Image</a></li><li onclick='UploadDocs(#=ServiceId#,this)' data-type='Recording'><a>Upload Recording</a></li> </ul></div>").Filterable(false).Sortable(false);
                    //col.Bound(c => c.IsAssessmentStopped).Title("").ClientTemplate("<button class='btn btn-info' onclick='DownloadReport(#=UserReportId#,#=OwnerUserId#)'>Download Report</button>&nbsp; <button class='btn btn-warning' onclick='ViewCandidateProfile(#=OwnerUserId#)'>View Profile</button>").Filterable(false).Sortable(false);

                })
                .ToolBar(toolbar =>
                {
                    //  toolbar.Excel();
                })

                .Excel(excel => excel
                .FileName("AssessmentReport.xlsx")
                .AllPages(true)
                ).Resizable(r=>r.Columns(true))
                .Scrollable(x => x.Enabled(true))
                .Sortable(srt => srt.Enabled(true))
                .Selectable(select => select.Enabled(false))
                .Filterable(f => f.Extra(false)
                .Operators(o => o.ForString(s => s.Clear()
                .Contains("Contains")
                .IsEqualTo("Is equal to")
                )))
                .Pageable(pageable => pageable
                .Refresh(true)

                .PageSizes(true)
                .ButtonCount(5))
                .AutoBind(true)
                .DataSource(
                dataSource => dataSource
                .Ajax()
                .PageSize(20)
                .Read(read => read.Action("GetAssessmentReportMinistryList", "TalentAssessment", new { @Area="Tas", @userId = ViewBag.UserId}))
                .Model(model => model.Id(p => p.Id))
                )
        )*@
    </div>
</div>

