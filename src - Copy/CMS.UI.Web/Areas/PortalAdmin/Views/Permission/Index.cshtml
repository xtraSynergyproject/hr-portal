@{
    ViewData["Title"] = "Permission";
    Layout = null;
}
@using CMS.UI.ViewModel;
@using CMS.Common;


@model PermissionViewModel

<script>

    var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(StatusEnum)))';
    var statusObj = JSON.parse(status);

    var columnDefs = [
        {
            field: "Name",
        },
        { field: "GroupName" },
        { field: "Code" },
        {
            field: "Status",
            cellRenderer: params => {
                return statusObj[params.value]; //only for enum
            }
        },
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBinPermission' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        getDataPermission();

        //$.contextMenu('update');
        //$('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-menuBinPermission',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditPermission(id);
                                        break;

                                    case 'delete':
                                        OnDeletePermission(id);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-edit" },
                                "delete": { name: "Delete", icon: "fas fa-trash" },


                            }
                        };


                }
            }
        });


    });
      function OnCreatePermission() {

         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("CreatePermission", "Permission", new { @area="PortalAdmin"})';
        win.OpenWindow({ Title: 'Manage Permission', Width: 450, Height: 800 });
        return false;
    }
    function OnDeletePermission(id) {
        var flag = confirm('Do you really want to delete the permission?');
        //alert("..Delete");
        //e.preventDefault();
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        if (flag) {
            $.ajax({
                url:'@Url.Action("Delete", "Permission", new { @area="PortalAdmin"})?Id=' + id,
                type: 'POST',
                data: {},
                dataType: 'json',
                success: function (result) {
                    //
                    if (result.success) {
                        getDataPermission();
                        kendo.alert("Permission Deleted Successfully");
                    } else {
                        getDataPermission();
                        var err = result.errors.BinderCountError.errors[0];
                        kendo.alert(err);
                    }
                },
                error: function (ert) {
                    //
                    getDataPermission();
                }
            });
            return false;
        }
    }
    function OnEditPermission(id) {
       var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("EditPermission", "Permission", new { @area="PortalAdmin"})?Id=' + id;
         win.OpenWindow({ Title: 'Manage Permission', Width: 450, Height: 800 });
        return false;
    }
 function getDataPermission() {
       document.getElementById("myGridPermission").innerHTML = "";
       gridConfig(
           "myGridPermission",
           "/portalAdmin/permission/ReadPermissionData",
           columnDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
    }

</script>

<div>
    <h4>@ViewBag.Title</h4>

    <hr />


    <div class="row">
        <div class="col-12">
            <button type='button' class='btn btn-primary' onclick='OnCreatePermission();'><i class='fa fas fa-plus'></i>&nbsp;Create Permission</button>
            <br /><br />
            <div id="myGridPermission" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        </div>
    </div>
</div>

@*<div>
        <h4>@ViewBag.Title</h4>
        <hr />
    </div>

    <div class="row">
        <div class="col-12">

            @(Html.Kendo().Grid<PermissionViewModel>
                    ().Name("gridPermission")
                    .Columns(columns =>
                    {
                        columns.Command(command =>
                        {
                            command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditPermission").HtmlAttributes(new { @class = "action-icon" });
                            command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeletePermission").HtmlAttributes(new { @class = "action-icon" });
                        }).Title("Action").Width(100);
                        columns.Bound(p => p.Name);
                        columns.Bound(p => p.GroupName);
                        columns.Bound(p => p.Code);
                        columns.Bound(p => p.Status);
                    })
                    .ToolBar(toolbar =>
                    {
                        toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreatePermission();'><i class='fa fas fa-plus'></i>&nbsp;Create Permission</button>");
                    })
                    //.Events(e => e.DataBound("OnDataBoundNot"))
                    .Scrollable(x => x.Enabled(false))
                    .Sortable(srt => srt.Enabled(true))
                    .Selectable(select => select.Enabled(false))
                    .Filterable(f => f.Extra(false)
                                      .Operators(o => o.ForString(s => s.Clear()
                                      .Contains("Contains")
                                      .IsEqualTo("Is equal to")
                                      )))
                    .Pageable(pageable => pageable
                    .Refresh(true)
                    .PageSizes(true)
                    .ButtonCount(5))
                    .AutoBind(true)
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(10)
                    .Read(read => read.Action("ReadPermissionData", "Permission"))
                    .Model(model => model.Id(p => p.Id))
                    )
              )
        </div>
    </div>*@

