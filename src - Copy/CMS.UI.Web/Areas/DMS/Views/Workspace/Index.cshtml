@inject IStringLocalizer<CMS.UI.Web.Areas.DMS.Controllers.WorkspaceController> Resource
@using CMS.Common;
@using Kendo.Mvc.UI;
@using CMS.Data.Model;
@using CMS.UI.ViewModel;

@model WorkspaceViewModel
@{
    ViewData["Title"] = @Resource["Workspace"];
    Layout = null;
}

<script>
    function OnEditWorkspace(noteId) {
       //
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

         var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Create", "Workspace", new { @area="Dms"})?master=true&workspaceId=' + noteId ;
        win.OpenWindow({ Title: '@Html.Raw(Resource["ManageWorkspace"])', Width: 450, Height: 800 });
        return false;
    }

    function OnDeleteWorkspace(noteId) {
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        kendo.confirm("@SharedResource["Areyousurethatyouwanttoproceed?"]").then(function () {
            $.ajax({
                type: "POST",
                url: "/DMS/Workspace/DeleteWorkspace?noteId=" + noteId,

                success: function (data) {

                    kendo.alert("@SharedResource["DeletedSuccessfully"]");

               // window.parent.$("#Workspacegrid").data("kendoGrid").dataSource.read();
                   getData();

                },
                dataType: "json",
            });
        }, function () {

        });



    }
    //function OnOk() {
    //    $.ajax({
    //            type: "GET",
    //        url: "/DMS/Document/ConvertFileToPdfTest",

    //            success: function (data) {

                 
    //            },
    //            dataType: "json",
    //        });
    //}
    function OnCreateWorkspace() {


             var win = GetMainWindow();
        win.iframeOpenUrl =  '@Url.Action("Create", "Workspace", new { @area= "Dms" })?master=true';
        win.OpenWindow({ Title: '@Html.Raw(Resource["ManageWorkspace"])', Width: 450, Height: 800 });
        return false;

    }
    function ManagePermission(noteId) {

       //  var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
             var win = GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("ManagePermissions", "Workspace", new { @area= "Dms" })?NoteId=' + noteId;
        win.OpenWindow({ Title: '@Html.Raw(Resource["Permission/Share"])', Width: 1000, Height: 800 });
        return false;

    }






    @*function confirmDeleteRole(e) {
        //

        $.ajax({
           // url: "~/UserRole/DeleteUserRole?Id=" + id,
            url: '@Url.Action("DeleteWorkspace", "Workspace", new { @area= "Dms" })?workspaceId=' + dataItem.Id,
            type: "GET",
            contentType: "application/json",
            dataType: "JSON",
            success: function (response) {
                // $('#dlg_DeleteConfirmation').data("kendoDialog").close();
               //
                $("#Workspacegrid").data("kendoGrid").dataSource.read();
            },
            error: function () {
               //
                $("#Workspacegrid").data("kendoGrid").dataSource.read();
            }
        });


    }*@
    //$(function () {
    //    $.contextMenu({
    //        selector: '#groupgrid-menu',
    //        trigger: 'left',
    //        build: function ($trigger, e) {

    //            console.log($trigger);
    //            var id = $trigger.data('idvalue');
    //            var status = 0;


    //            switch (status) {
    //                case 0:
    //                    return {
    //                        callback: function (key, options) {
    //                            switch (key) {
    //                                case 'edit':
    //                                    OnEditUserGroup(id);
    //                                    break;
    //                                case 'del':
    //                                    OnDeleteUserGroup(id);
    //                                    break;

    //                                default:
    //                            }
    //                        },
    //                        items: {
    //                            "edit": { name: "Edit", icon: "fas fa-pencil" },
    //                            "del": { name: "Delete", icon: "fas fa-trash" },


    //                        }
    //                    };


    //            }
    //        }
    //    });

    //});



    var columnDefs = [
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuWS' data-idvalue='" + params.data.Id + "' data-noteid='" + params.data.NoteId + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        },

        {
            headerName: "@Resource["WorkspaceName"]", field: "WorkspaceName",
        },
        { headerName: "@Resource["ParentName"]", field: "ParentName" },
        { headerName: "@Resource["LegalEntityName"]", field: "LegalEntityName" },
        {
            headerName: "@Resource["CreatedbyName"]", field: "CreatedbyName",

        },

    ];

    $(function () {

        getData();

        //$.contextMenu('update');
        //$('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-menuWS',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');
                var noteId = $trigger.data('noteid');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'permission':
                                        ManagePermission(noteId);
                                        break;
                                    case 'edit':
                                        OnEditWorkspace(noteId);
                                        break;

                                    case 'delete':
                                        OnDeleteWorkspace(noteId);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "permission": { name: "Permission", icon: "fal fa-folder-open" },
                                "edit": { name: "Edit", icon: "fas fa-edit" },
                                "delete": { name: "Delete", icon: "fas fa-trash" },


                            }
                        };


                }
            }
        });


    });



   function getData() {
       document.getElementById("myGrid").innerHTML = "";
       gridConfig(
           "myGrid",
           "/dms/Workspace/ReadDataGrid",
           columnDefs,
           false,
           true,
           true,
           true,
           1,
           true,
           10);
    }
</script>


<div>
    <h4>@ViewBag.Title</h4>

    <hr />


    <div class="row">
         <div class="col-12">
             @*<button type='button' class='btn btn-primary' onclick='OnOk();'><i class='fa fas fa-plus'></i>Ok</button>*@
             <button type='button' class='btn btn-primary' onclick='OnCreateWorkspace();'><i class='fa fas fa-plus'></i>&nbsp;@Resource["AddWorkspace"]</button>
            <br /><br />
            <div id="myGrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        </div>
        @*<div class="col-12">

            @(Html.Kendo().Grid<WorkspaceViewModel>
    ()
    .Name("Workspacegrid")
    .ToolBar(toolbar =>
    {

        toolbar.Custom().Text(@Resource["AddWorkspace"]).Name("btnAdd").HtmlAttributes(new { @class = "k-primary", href = "javascript:OnCreateWorkspace();" });
        //toolbar.Excel();

    })
    .Columns(columns =>

    {
        columns.Command(command =>
        {
            command.Custom("Permission").Text("<i class='fal fa-folder-open li-fal'></i>").Click("ManagePermission").HtmlAttributes(new { @class = "action-icon" });
            command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEditWorkspace").HtmlAttributes(new { @class = "action-icon" });
            command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDeleteWorkspace").HtmlAttributes(new { @class = "action-icon" });
        }).Title(@SharedResource["Action"]).Width(150);

        columns.Bound(c => c.WorkspaceName).Title(@Resource["WorkspaceName"]);
        columns.Bound(c => c.ParentName).Title(@Resource["ParentName"]);
        columns.Bound(c => c.LegalEntityName).Title(@Resource["LegalEntityName"]);
        columns.Bound(c => c.CreatedbyName).Title(@Resource["CreatedbyName"]);

    })
    .Scrollable(x => x.Enabled(false))
    .Sortable(srt => srt.Enabled(true))
    .Selectable(select => select.Enabled(false))
    .Filterable(f => f.Extra(false)
    .Operators(o => o.ForString(s => s.Clear()
    .Contains("Contains")
    .IsEqualTo("Is equal to")
    )))
    .Pageable(pageable => pageable
    .Refresh(true)

    .PageSizes(true)
    .ButtonCount(5))
    .AutoBind(true)
    .DataSource(
    dataSource => dataSource
    .Ajax()
    .PageSize(10)
    //.Events(events => events.Error("OnError"))
    .Read(read => read.Action("ReadData", "Workspace"))
    .Model(model => model.Id(p => p.Id))
    )
    )

</div>*@
    </div>

</div>

