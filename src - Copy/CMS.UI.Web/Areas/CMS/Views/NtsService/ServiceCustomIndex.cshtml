@using CMS.UI.ViewModel;
@using CMS.Common;
@using Kendo.Mvc.UI;
@{
    Layout = null;
}
@model CustomIndexPageTemplateViewModel
<script>
    function OnDatabound(e) {
        $("#kgrid_AllServices tbody tr").each(function () {
            var currentDataItem = $("#kgrid_AllServices").data("kendoGrid").dataItem($(this));
            if (currentDataItem.ServiceStatusCode !== 'SERVICE_STATUS_DRAFT') {
                var del = $(this).find(".action-delete");
                del.hide();
            }
        });
    }

       function ReloadIndexPage(res) {
        var id = '@Model.Page.Id';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.View.ToString()';
        var action = '@DataActionEnum.View.ToString()';
        LoadPageById(id, type, source, action);
    }
    function OnServiceCreate() {
        debugger;
            var portalId = '@Model.Page.PortalId';
            var url = '@Url.Action("SelectServiceTemplate", "NtsService",new {area="Cms" })?cbm=ReloadIndexPage&templateCode=@Model.TemplateCodes&categoryCode=@Model.CategoryCodes&userId=' + '@ViewBag.UserId'+'&portalNames='+'@ViewBag.PortalNames';
            var win = GetMainWindow();
            win.iframeOpenUrl = url;
            win.OpenWindow({ Title: '@Model.TemplateSelectionPopupDefaultTitle', Width: 1200, Height: 650 });
            return false;
        }
    function OnView(TemplateCode, ServiceId, ServiceStatusCode) {
        //var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var source = '@RequestSourceEnum.View.ToString()';
        var action = '@DataActionEnum.View.ToString()';
        if (ServiceStatusCode === 'SERVICE_STATUS_DRAFT') {
        source = "Edit";
        action = "Edit";
        }
        var portalId = '@Model.Page.PortalId';
        var url = '/Cms/Page?lo=Popup&pageType=Service&cbm=ReloadIndexPage&source=' + source + '&dataAction=' + action + '&templateCodes=' + TemplateCode + '&portalId=' + portalId + '&recordId=' + ServiceId;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title:  'Manage Service', Width: 1200, Height: 600 });
        return false;
    }
    function OnEdit(TemplateCode, ServiceId) {
        debugger;
       // var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var source = '@RequestSourceEnum.Edit.ToString()';
        var action = '@DataActionEnum.Edit.ToString()';
        var portalId = '@Model.Page.PortalId';
        var url = '/Cms/Page?lo=Popup&pageType=Service&cbm=ReloadIndexPage&source=' + source + '&dataAction=' + action + '&templateCodes=' + TemplateCode + '&portalId=' + portalId + '&recordId=' + ServiceId;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title:  'Manage Service', Width: 1200, Height: 600 });
        return false;
    }

    var deleteEvent = null;
    function OnDelete(ServiceId) {
        if ('@Model.EnableDeleteConfirmation'==='True')
        {
            deleteEvent = ServiceId;
            $('#confirmDelete').data("kendoDialog").open();

        }
        else
        {
            DeleteItem(ServiceId);
        }

    }
    function DeleteItem(ServiceId) {
       // var dataItem = $("#kgrid_OwnerOrRequester").data("kendoGrid").dataItem($(e.currentTarget).closest("tr"));
        var id = '@Model.Page.Id';
        var type = '@Model.Page.PageType.ToString()';
        var source = '@RequestSourceEnum.Post.ToString()';
        var action = '@RequestSourceEnum.Delete.ToString()';
        LoadPageById(id, type, source, action, ServiceId);
        return false;
    }
    function ConfirmDelete() {
        $('#confirmDelete').data("kendoDialog").close();
        DeleteItem(deleteEvent);
        }
</script>
<div class="row no-gutters">
    <div class="col-12 pb-1 pt-3">
        <h3>@Model.Page.Title</h3>
    </div>
    @if (Model.EnableCreateButton)
    {
        <div class="col-12 pb-2">
            <button type="button" class="btn btn-primary" onclick="return OnServiceCreate();"><i class="fa fa-plus pr-1"></i>@Model.CreateButtonDefaultText</button>
        </div>
    }
<div class="container col-12">
    <script>
                        var columnDefs = [
                            {
                                headerName: "Actions",
                                field: "ServiceId",
                                cellRenderer: params => {
                                    debugger
                                    return "<div class='btn-group grid-menu' id='tree-mrnu' data-idvalue='" + params.value + "'  data-code='" + params.data.TemplateCode + "' data-status='" + params.data.ServiceStatusCode + "'><i class='fas fa-ellipsis-v'></i></div>"
                                }
                            },
                               @foreach (var column in Model.SelectedTableRows)
                            {
                                if (column != null && column.ColumnMetadata != null)
                                {
                                    if (column.ColumnMetadata.DataType == DataColumnTypeEnum.DateTime)
                                    {
                                        @:{field: '@column.ColumnName', headerName: '@column.HeaderName', cellRenderer: params => {return params.value.getDate() + "/" + params.value.getMonth() +"/"+ params.value.getyears();}},
                                    }
                                    else
                                    {
                                        @:{ field: '@column.ColumnName', headerName: '@column.HeaderName' },
                                     }
                                }
                                else
                                {
                                    @:{ field: '@column.ColumnName', headerName: '@column.HeaderName' },
                                }

                            }
                        ];
                        $(function () {
                            GetData_kgrid_AllServices();
                             $.contextMenu({
                                 selector: '#tree-mrnu',
                                trigger: 'left',
                                build: function ($trigger, e) {


                                    var id = $trigger.data('idvalue');
                                    var tempCode = $trigger.data('code');
                                    var status = $trigger.data('status');
                                    debugger
                                    switch (0) {
                                        case 0:
                                            return {
                                                callback: function (key, options) {
                                                    switch (key) {
                                                        case 'edit':
                                                            OnEdit(tempCode,id);
                                                            break;
                                                        case 'view':
                                                            OnView(tempCode, id, status);
                                                            break;

                                                        case 'delete':
                                                            OnDelete(id);
                                                            break;

                                                        default:
                                                    }
                                                },
                                                items: {
                                                    "edit": { name: "Edit", icon: "fas fa-edit" },

                                                     "view": { name: "View", icon: "fas fa-eye" },

                                                    "delete": { name: "Delete", icon: "fas fa-trash" },



                                                }
                                            };


                                    }
                                }
                            });
                        });

                        function GetData_kgrid_AllServices() {
                            document.getElementById("kgrid_AllServices").innerHTML = "";


                            gridConfig(
                                "kgrid_AllServices",
                                "/cms/NtsService/LoadCustomServiceIndexPageGrid?templateId=@Model.TemplateId&showAllOwnersService=@Model.ShowAllOwnersService&moduleCodes=@Model.ModuleCodes&templateCodes=@Model.TemplateCodes&categoryCodes=@Model.CategoryCodes",
                                columnDefs,
                                false,
                                true,
                                true,
                                true,
                                1,
                                true,
                                10);
                        }
    </script>
    <div id="kgrid_AllServices" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
    @*@(Html.Kendo().Grid<dynamic>()
    .Name($"kgrid_AllServices")
    .Columns(columns =>
    {
        columns.Bound("ServiceId").Visible(false);
        var c = columns.Command(command =>
        {

            command.Custom("View").Text("<i class='fa fas fa-eye'></i>").Click("OnView").HtmlAttributes(new { @class = "action-icon",title="View" });
            if (Model.EnableEditButton)
            {
                command.Custom("Edit").Text("<i class='fa fas fa-pencil'></i>").Click("OnEdit").HtmlAttributes(new { @class = "action-icon", title = "Edit" });
            }
            if (Model.EnableDeleteButton)
            {
                command.Custom("Delete").Text("<i class='fa fas fa-trash'></i>").Click("OnDelete").HtmlAttributes(new { @class = "action-icon action-delete", title = "Delete" });
            }
        }).Width(120);
        foreach (var column in Model.SelectedTableRows)
        {
            if (column!=null && column.ColumnMetadata != null )
            {
                if (column.ColumnMetadata.DataType==DataColumnTypeEnum.DateTime)
                {
                    columns.Bound(typeof(System.DateTime),column.ColumnName).Title(column.HeaderName).Width(150).ClientTemplate("#=kendo.toString(kendo.parseDate(" + column.ColumnName + "), '"+CMS.Common.ApplicationConstant.DateAndTime.DefaultJqueryDateTimeFormat+"')#");
                }
                else
                {
                    columns.Bound(column.ColumnName).Title(column.HeaderName).Width(150);
                }
            }
            else
            {
                columns.Bound(column.ColumnName).Title(column.HeaderName).Width(150);
            }
        }

    }
    )

    .Resizable(resizable => resizable.Columns(true))
    .Events(e => e.DataBound("OnDatabound"))
    .Scrollable(x => x.Enabled(true))
    .Sortable(srt => srt.Enabled(true))
    .Selectable(select => select.Enabled(false))
    .Filterable(f => f.Extra(false))
    .Pageable(pageable => pageable
    .Refresh(true)

    .PageSizes(true)
    .ButtonCount(5))
    //.AutoBind(true)
    .DataSource(
    dataSource => dataSource
    .Ajax()
    .PageSize(10)

    .Read(read => read.Action("LoadCustomServiceIndexPageGrid", "NtsService", new { Area = "cms",templateId=Model.TemplateId, showAllOwnersService = Model.ShowAllOwnersService, moduleCodes = Model.ModuleCodes, templateCodes = Model.TemplateCodes, categoryCodes = Model.CategoryCodes }))

    )

    )*@
    @(Html.Kendo().Dialog()
    .Name("confirmDelete")
    .Title("Confirm Delete")
    .Content(Model.DeleteConfirmationMessage)
    .Width(400)
    .Modal(true)
    .Visible(false)
    .Actions(actions =>
    {
        actions.Add().Text("Cancel");
        actions.Add().Text("Continue Delete").Primary(true).Action("ConfirmDelete");
    }))
</div>
</div>

