@using CMS.UI.ViewModel;
@using CMS.Common;
@using Syncfusion.EJ2;
@model RecTaskViewModel
@{
    ViewBag.Title = "All Tasks";
    Layout = "~/Areas/CMS/Views/Shared/_LayoutCms1.cshtml";   
    //Layout = "/Views/Shared/_PopupLayout.cshtml";
    // Layout = ViewBag.Layout;    
}
<style>
    .e-file-drop {
        display: none;
    }
   
    .e-icons.e-file-delete-btn {
        display: none !important;
    }
    
</style>
<script type="text/javascript">
     $(document).ready(function () {
        @*ShowLoader($('.task-card'));
        if ('@ViewBag.IsDisableBulk' == "True") {
            var tabStrip = $("#tabstrip").kendoTabStrip().data("kendoTabStrip");
            tabStrip.remove("li:last");
        }*@


    });
    function onGridSaveCriteria(arg) {

    }
   

</script>
<style>
    .tab {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: #f1f1f1;
    }

        /* Style the buttons inside the tab */
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            font-size: 17px;
        }

            /* Change background color of buttons on hover */
            .tab button:hover {
                background-color: #ddd;
            }

            /* Create an active/current tablink class */
            .tab button.active {
                background-color: #ccc;
            }

    /* Style the tab content */
    .tabcontent {
        display: none;
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-top: none;
    }
    .e-file-name {
        max-width: 110px !important;
    }
</style>

@if (ViewBag.DataSource != null)
{
<div class="main">
    <script type="text/x-jsrender" id="columnTemplate">
        <div onclick="onDownload('${AttachmentCode2}')" style="cursor:pointer" title="Click here to download">
            <span style="font-size: 18px;text-align: center;color: dodgerblue" id="Av2">
                ${AttachmentValue2}
            </span>
        </div>
    </script>

    @{
        List<object> toolbarItems = null;
        List<object> toolbarItems1 = null;
        var DropDownList1 = new Syncfusion.EJ2.DropDowns.DropDownList()
        {
            //DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod1 + @"&viewData=DataSource1" },
            DataSource = (IEnumerable<object>)ViewBag.DDL1,
            Query = "new ej.data.Query()",
            Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            Change = "function(args){row.DropdownDisplayValue1=args.itemData.Name;}",
        };

        var DropDownList2 = new Syncfusion.EJ2.DropDowns.DropDownList()
        {
            //DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod2 },
            DataSource = (IEnumerable<object>)ViewBag.DDL2,
            Query = "new ej.data.Query()",
            Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            Change = "function(args){row.DropdownDisplayValue2=args.itemData.Name;}",
        };
        var DropDownList3 = new Syncfusion.EJ2.DropDowns.DropDownList()
        {
            //DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod3 + @"&viewData=DataSource3" },
            DataSource = (IEnumerable<object>)ViewBag.DDL3,
            Query = "new ej.data.Query()",
            Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            Change = "function(args){row.DropdownDisplayValue3=args.itemData.Name;}",
        };
        var DropDownList4 = new Syncfusion.EJ2.DropDowns.DropDownList()
        {
            //DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod4 },
            DataSource = (IEnumerable<object>)ViewBag.DDL4,
            Query = "new ej.data.Query()",
            Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            Change = "function(args){row.DropdownDisplayValue4=args.itemData.Name;}",
        };

        var DropDownList5 = new Syncfusion.EJ2.DropDowns.DropDownList()
        {
            //DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod5 },
            DataSource = (IEnumerable<object>)ViewBag.DDL5,
            Query = "new ej.data.Query()",
            Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            Change = "function(args){row.DropdownDisplayValue5=args.itemData.Name;}",
        };
        var DropDownList6 = new Syncfusion.EJ2.DropDowns.DropDownList()
        {
            //DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod6 },
            DataSource = (IEnumerable<object>)ViewBag.DDL6,
            Query = "new ej.data.Query()",
            Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            Change = "function(args){row.DropdownDisplayValue6=args.itemData.Name;}",
        };

        var DropDownList7 = new Syncfusion.EJ2.DropDowns.DropDownList()
        {
            //DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod7 },
            DataSource = (IEnumerable<object>)ViewBag.DDL7,
            Query = "new ej.data.Query()",
            Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            Change = "function(args){row.DropdownDisplayValue7=args.itemData.Name;}",
        };

        var DropDownList8 = new Syncfusion.EJ2.DropDowns.DropDownList()
        {
            //DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod8 },
            DataSource = (IEnumerable<object>)ViewBag.DDL8,
            Query = "new ej.data.Query()",
            Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            Change = "function(args){row.DropdownDisplayValue8=args.itemData.Name;}",
        };

        var DropDownList9 = new Syncfusion.EJ2.DropDowns.DropDownList()
        {
            //DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod9 },
            DataSource = (IEnumerable<object>)ViewBag.DDL9,
            Query = "new ej.data.Query()",
            Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            Change = "function(args){row.DropdownDisplayValue9=args.itemData.Name;}",
        };

        var DropDownList10 = new Syncfusion.EJ2.DropDowns.DropDownList()
        {
            //DataSource = new DataManager { Url = ViewBag.DataSourceHeader.DropdownValueMethod10 },
            DataSource = (IEnumerable<object>)ViewBag.DDL10,
            Query = "new ej.data.Query()",
            Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
            Change = "function(args){row.DropdownDisplayValue10=args.itemData.Name;}",
        };
    }
    @{

        var DropDownListAction = new Syncfusion.EJ2.DropDowns.DropDownList()
        {
            DataSource = new List<IdNameViewModel>() { new IdNameViewModel { Id = "2", Name = "Complete" }, new IdNameViewModel { Id = "7", Name = "Reject" }, new IdNameViewModel { Id = "24", Name = "NotApplicable" } },
            //DataSource = (IEnumerable<object>)ViewBag.DataSource1,
            Query = "new ej.data.Query()",
            Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
        };
        var DropDownListUser = new Syncfusion.EJ2.DropDowns.DropDownList()
        {
            //DataSource = new List<IdNameViewModel>() { new IdNameViewModel { Id = "2", Name = "Complete" }, new IdNameViewModel { Id = "7", Name = "Reject" }, new IdNameViewModel { Id = "24", Name = "NotApplicable" } },
            DataSource = (IEnumerable<object>)ViewBag.DataSourceUser,
            Query = "new ej.data.Query()",
            Fields = new Syncfusion.EJ2.DropDowns.DropDownListFieldSettings() { Text = "Name", Value = "Id" },
        };
    }


    @*<h4 style="color:Highlight">@ViewBag.DataSourceHeader.Subject</h4>*@
    <div class="tab">
        <button class="tablinks active" onclick="openCity(event, 'London')" id="defaultOpen">Individual Action</button>
        @if (ViewBag.IsDisableBulk)
        {

        }
        else
        {
            <button class="tablinks" onclick="openCity(event, 'Paris')">Bulk Action</button>
        }

    </div>

    <div id="London" class="tabcontent" style="display:block">
        @if (Model.TaskStatusCode.Contains("INPROGRESS"))
        {
            toolbarItems = new List<object>() { "Edit", "Update", "Cancel" };
        }
        else
        {
            toolbarItems = new List<object>();
        }
        <div id="validation-summary" class="text-danger" asp-validation-summary="All"></div>
        @Html.EJS().Grid("Grid").DataSource((IEnumerable<object>)ViewBag.DataSource).AllowFiltering(true).AllowResizing(true).Height(300).ActionComplete("actionComplete").ActionBegin("actionBegin").Columns(col =>
   {

       col.Field("GridTemplateAction").Visible(Model.TaskStatusCode.Contains("INPROGRESS")).HeaderText("Action").ValueAccessor("DisplayDescription").EditType("dropdownedit").Edit(new { @params = DropDownListAction }).Width("200").ValidationRules(new { required = true }).Add();
       col.Field("TextValue1").AllowFiltering(true).AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit1).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).
                  Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" &&
                  !(ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DateTimePicker ||
                  ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_HyperLink || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_HtmlArea || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_Hidden)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay1 }).Add();
       col.Field("TextValue2").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit2).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).
               Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" &&
               !(ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DateTimePicker ||
               ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay2 }).Add();
       col.Field("TextValue3").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit3).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).
            Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" &&
            !(ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DateTimePicker ||
            ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay3 }).Add();
       col.Field("TextValue4").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit4).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).
                       Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" &&
                       !(ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DateTimePicker ||
                       ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay4 }).Add();
       col.Field("TextValue5").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit5).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).
                          Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" &&
                          !(ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DateTimePicker ||
                          ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay5 }).Add();
       col.Field("TextValue6").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit6).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).
                              Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" &&
                              !(ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DateTimePicker ||
                              ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay6 }).Add();
       col.Field("TextValue7").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit7).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).
                             Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" &&
                             !(ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DateTimePicker ||
                             ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay7 }).Add();
       col.Field("TextValue8").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit8).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).
                                  Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" &&
                                  !(ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DateTimePicker ||
                                  ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay8 }).Add();
       col.Field("TextValue9").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit9).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).
                                      Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" &&
                                      !(ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DateTimePicker ||
                                      ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay9 }).Add();
       col.Field("TextValue10").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit10).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).
                                          Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" &&
                                          !(ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DateTimePicker ||
                                          ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_HyperLink || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_HtmlArea || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_Hidden)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay10 }).Add();

       //col.Field("TextValue1").HeaderText("First Name").Width("120").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
       ////col.Field("DatePickerValue1").HeaderText("Date PickerValue1").Format("{0:dd/MM/yyyy}").EditType("datepickeredit").Edit(new { @params = new { format="dd.MM.yyyy"}}).Width("150").Add();
       //col.Field("DatePickerValue3").HeaderText("Date PickerValue1").EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).Add();



       //col.Field("DropdownValue3").HeaderText("Gender").Width("120").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
       //col.Field("DropdownValue3").HeaderText("Gender").EditType("dropdownedit").Edit(new { @params = DropDownList3 }).Width("200").Add();

       ////col.Field("DropdownValue3").HeaderText("Customer ID").EditType("dropdownedit").DataSource((IEnumerable<object>)ViewBag.DataSource1).Width("200").Add();
       //col.Field("AttachmentValue1").HeaderText("Attachment").Edit(new { create = "create", read = "read", destroy = "destroy", write = "write" }).Width("150").Add();

       //Header and Value
       col.Field("TaskNo").AllowFiltering(true).HeaderText("TaskNo").Template("<a href='#' onclick='onTaskOpen(${somefun(data)})'>${ TaskNo}</a>").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();

       col.Field("Subject").HeaderText("Subject").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
       col.Field("TaskStatusName").AllowEditing(false).HeaderText("Task Status").Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();

       col.Field("CandidateName").HeaderText("Candidate Name").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
       col.Field("JobName").HeaderText("Position").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
       col.Field("OrgUnitName").HeaderText("Org Unit").Width("150").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
       col.Field("GaecNo").HeaderText("GAEC No").Width("150").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();

       //col.Field("Description").HeaderText("Description").AllowEditing(false).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();

       col.Field("StartDate").HeaderText("StartDate").AllowEditing(false).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).Add();

       //col.Field("DueDate").HeaderText("DueDate").AllowEditing(false).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).Add();

       //col.Field("SLA").HeaderText("SLA").AllowEditing(false).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
       ////col.Field("DatePickerValue1").HeaderText("Date PickerValue1").Format("{0:dd/MM/yyyy}").EditType("datepickeredit").Edit(new { @params = new { format="dd.MM.yyyy"}}).Width("150").Add();
       //col.Field("DatePickerValue3").HeaderText("Date PickerValue1").EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).Add();



       //col.Field("AssigneeUserId").AllowEditing(false).HeaderText("AssigneeUserName").ValueAccessor("DisplayDescription").EditType("dropdownedit").Edit(new { @params = DropDownListUser }).Width("200").Add(); ;

       //col.Field("RequestedUser").AllowEditing(false).HeaderText("RequestedUser").Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();

       //Header and Value
       //col.Field("TaskNo").HeaderText("TaskNo").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();

       //col.Field("DropdownValue1").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay1).Visible(ViewBag.DataSourceHeader.DropdownDisplay1 != null && ViewBag.DataSourceHeader.DropdownDisplay1 != "").EditType("dropdownedit").Edit(new { @params = DropDownList1 }).Add();

       //col.Field("Description").HeaderText("Description").AllowEditing(false).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();

       //col.Field("DropdownValue2").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay2).Visible(ViewBag.DataSourceHeader.DropdownDisplay2 != null && ViewBag.DataSourceHeader.DropdownDisplay2 != "").EditType("dropdownedit").Edit(new { @params = DropDownList2 }).Add();

       //col.Field("DueDate").HeaderText("DueDate").AllowEditing(false).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).Add();

       //col.Field("DropdownValue3").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay3).Visible(ViewBag.DataSourceHeader.DropdownDisplay3 != null && ViewBag.DataSourceHeader.DropdownDisplay3 != "").EditType("dropdownedit").Edit(new { @params = DropDownList3 }).Width("200").Add();


       //col.Field("DropdownValue4").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay4).Visible(ViewBag.DataSourceHeader.DropdownDisplay4 != null && ViewBag.DataSourceHeader.DropdownDisplay4 != "").EditType("dropdownedit").Edit(new { @params = DropDownList4 }).Width("200").Add();

       col.Field("AssigneeUserId").AllowEditing(false).HeaderText("AssigneeUserName").ValueAccessor("DisplayDescription").EditType("dropdownedit").Edit(new { @params = DropDownListUser }).Width("200").Add(); ;

       //col.Field("DropdownValue5").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay5).Visible(ViewBag.DataSourceHeader.DropdownDisplay5 != null && ViewBag.DataSourceHeader.DropdownDisplay5 != "").EditType("dropdownedit").Edit(new { @params = DropDownList5 }).Width("200").Add();


       col.Field("DropdownValue1").ValueAccessor("DisplayDescription1").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit1).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay1).Visible(ViewBag.DataSourceHeader.DropdownDisplay1 != null && ViewBag.DataSourceHeader.DropdownDisplay1 != "").EditType("dropdownedit").Edit(new { @params = DropDownList1 }).Width("200").Add();


       col.Field("DropdownValue2").ValueAccessor("DisplayDescription2").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit2).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay2).Visible(ViewBag.DataSourceHeader.DropdownDisplay2 != null && ViewBag.DataSourceHeader.DropdownDisplay2 != "").EditType("dropdownedit").Edit(new { @params = DropDownList2 }).Width("200").Add();


       col.Field("DropdownValue3").ValueAccessor("DisplayDescription3").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit3).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay3).Visible(ViewBag.DataSourceHeader.DropdownDisplay3 != null && ViewBag.DataSourceHeader.DropdownDisplay3 != "").EditType("dropdownedit").Edit(new { @params = DropDownList3 }).Width("200").Add();


       col.Field("DropdownValue4").ValueAccessor("DisplayDescription4").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit4).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay4).Visible(ViewBag.DataSourceHeader.DropdownDisplay4 != null && ViewBag.DataSourceHeader.DropdownDisplay4 != "").EditType("dropdownedit").Edit(new { @params = DropDownList4 }).Width("200").Add();


       col.Field("DropdownValue5").ValueAccessor("DisplayDescription5").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit5).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay5).Visible(ViewBag.DataSourceHeader.DropdownDisplay5 != null && ViewBag.DataSourceHeader.DropdownDisplay5 != "").EditType("dropdownedit").Edit(new { @params = DropDownList5 }).Width("200").Add();


       col.Field("DropdownValue6").ValueAccessor("DisplayDescription6").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit6).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay6).Visible(ViewBag.DataSourceHeader.DropdownDisplay6 != null && ViewBag.DataSourceHeader.DropdownDisplay6 != "").EditType("dropdownedit").Edit(new { @params = DropDownList6 }).Width("200").Add();



       col.Field("DropdownValue7").ValueAccessor("DisplayDescription7").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit7).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay7).Visible(ViewBag.DataSourceHeader.DropdownDisplay7 != null && ViewBag.DataSourceHeader.DropdownDisplay7 != "").EditType("dropdownedit").Edit(new { @params = DropDownList7 }).Width("200").Add();


       col.Field("DropdownValue8").ValueAccessor("DisplayDescription8").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit8).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay8).Visible(ViewBag.DataSourceHeader.DropdownDisplay8 != null && ViewBag.DataSourceHeader.DropdownDisplay8 != "").EditType("dropdownedit").Edit(new { @params = DropDownList8 }).Width("200").Add();


       col.Field("DropdownValue9").ValueAccessor("DisplayDescription9").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit9).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay9).Visible(ViewBag.DataSourceHeader.DropdownDisplay9 != null && ViewBag.DataSourceHeader.DropdownDisplay9 != "").EditType("dropdownedit").Edit(new { @params = DropDownList9 }).Width("200").Add();


       col.Field("DropdownValue10").ValueAccessor("DisplayDescription10").AllowEditing(ViewBag.DataSourceHeader.IsDropDownEdit10).HeaderText(ViewBag.DataSourceHeader.DropdownDisplay10).Visible(ViewBag.DataSourceHeader.DropdownDisplay10 != null && ViewBag.DataSourceHeader.DropdownDisplay10 != "").EditType("dropdownedit").Edit(new { @params = DropDownList10 }).Width("200").Add();

       col.Field("DatePickerValue1").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit1).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay1 }).Add();

       col.Field("DatePickerValue1").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit1).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay1 }).Add();

       col.Field("AttachmentValue1").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit1).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).Template("<a href='#' onclick='onAttachment1(${somefun(data)})'>${if(AttachmentValue1!=null)}${AttachmentValue1}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_Attachment).Edit(new { create = "create1", read = "read1", write = "write1" }).Width("200").Add();
       col.Field("TextBoxLink1").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).Template("<a href='#' onclick='onOpenLink1(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink1", write = "writeLink1" }).Width("200").Add();
       col.Field("DatePickerValue2").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit2).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay2 }).Add();

       col.Field("DatePickerValue2").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit2).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay2 }).Add();

       col.Field("AttachmentValue2").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit2).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).Template("<a href='#' onclick='onAttachment2(${somefun(data)})'>${if(AttachmentValue2!=null)}${AttachmentValue2}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_Attachment).Edit(new { create = "create2", read = "read2", write = "write2" }).Width("200").Add();
       col.Field("TextBoxLink2").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).Template("<a href='#' onclick='onOpenLink2(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink2", write = "writeLink2" }).Width("200").Add();
       col.Field("DatePickerValue3").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit3).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay3 }).Add();

       col.Field("DatePickerValue3").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit3).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay3 }).Add();

       col.Field("AttachmentValue3").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit3).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).Template("<a href='#' onclick='onAttachment3(${somefun(data)})'>${if(AttachmentValue3!=null)}${AttachmentValue3}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_Attachment).Edit(new { create = "create3", read = "read3", write = "write3" }).Width("200").Add();
       col.Field("TextBoxLink3").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).Template("<a href='#' onclick='onOpenLink3(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink3", write = "writeLink3" }).Width("200").Add();
       col.Field("DatePickerValue4").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit4).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay4 }).Add();

       col.Field("DatePickerValue4").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit4).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay4 }).Add();

       col.Field("AttachmentValue4").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit4).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).Template("<a href='#' onclick='onAttachment4(${somefun(data)})'>${if(AttachmentValue4!=null)}${AttachmentValue4}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_Attachment).Edit(new { create = "create4", read = "read4", write = "write4" }).Width("200").Add();
       col.Field("TextBoxLink4").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).Template("<a href='#' onclick='onOpenLink4(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink4", write = "writeLink4" }).Width("200").Add();
       col.Field("DatePickerValue5").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit5).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay5 }).Add();

       col.Field("DatePickerValue5").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit5).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay5 }).Add();

       col.Field("AttachmentValue5").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit5).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).Template("<a href='#' onclick='onAttachment5(${somefun(data)})'>${if(AttachmentValue5!=null)}${AttachmentValue5}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_Attachment).Edit(new { create = "create5", read = "read5", write = "write5" }).Width("200").Add();
       col.Field("TextBoxLink5").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).Template("<a href='#' onclick='onOpenLink5(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink5", write = "writeLink5" }).Width("200").Add();
       col.Field("DatePickerValue6").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit6).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay6 }).Add();

       col.Field("DatePickerValue6").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit6).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay6 }).Add();

       col.Field("AttachmentValue6").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit6).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).Template("<a href='#' onclick='onAttachment6(${somefun(data)})'>${if(AttachmentValue6!=null)}${AttachmentValue6}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_Attachment).Edit(new { create = "create6", read = "read6", write = "write6" }).Width("200").Add();
       col.Field("TextBoxLink6").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).Template("<a href='#' onclick='onOpenLink6(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink6", write = "writeLink6" }).Width("200").Add();
       col.Field("DatePickerValue7").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit7).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay7 }).Add();

       col.Field("DatePickerValue7").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit7).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay7 }).Add();

       col.Field("AttachmentValue7").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit7).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).Template("<a href='#' onclick='onAttachment7(${somefun(data)})'>${if(AttachmentValue7!=null)}${AttachmentValue7}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_Attachment).Edit(new { create = "create7", read = "read7", write = "write7" }).Width("200").Add();
       col.Field("TextBoxLink7").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).Template("<a href='#' onclick='onOpenLink7(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink7", write = "writeLink7" }).Width("200").Add();
       col.Field("DatePickerValue8").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit8).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay8 }).Add();

       col.Field("DatePickerValue8").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit8).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay8 }).Add();

       col.Field("AttachmentValue8").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit8).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).Template("<a href='#' onclick='onAttachment8(${somefun(data)})'>${if(AttachmentValue8!=null)}${AttachmentValue8}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_Attachment).Edit(new { create = "create8", read = "read8", write = "write8" }).Width("200").Add();
       col.Field("TextBoxLink8").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).Template("<a href='#' onclick='onOpenLink8(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink8", write = "writeLink8" }).Width("200").Add();
       col.Field("DatePickerValue9").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit9).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay9 }).Add();

       col.Field("DatePickerValue9").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit9).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay9 }).Add();

       col.Field("AttachmentValue9").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit9).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).Template("<a href='#' onclick='onAttachment9(${somefun(data)})'>${if(AttachmentValue9!=null)}${AttachmentValue9}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_Attachment).Edit(new { create = "create9", read = "read9", write = "write9" }).Width("200").Add();
       col.Field("TextBoxLink9").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).Template("<a href='#' onclick='onOpenLink9(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink9", write = "writeLink9" }).Width("200").Add();
       col.Field("DatePickerValue10").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit10).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay10 }).Add();

       col.Field("DatePickerValue10").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit10).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay10 }).Add();

       col.Field("AttachmentValue10").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit10).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).Template("<a href='#' onclick='onAttachment10(${somefun(data)})'>${if(AttachmentValue10!=null)}${AttachmentValue10}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_Attachment).Edit(new { create = "create10", read = "read10", write = "write10" }).Width("200").Add();
       col.Field("TextBoxLink10").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).Template("<a href='#' onclick='onOpenLink10(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_HyperLink).Edit(new { create = "createLink10", write = "writeLink10" }).Width("200").Add();
       col.Field("").Visible(true).Edit(new { write = "writeLinkDummy" }).Width("1").Add();
   }).AllowPaging(true).AllowSorting(true).PageSettings(page => page.PageSize(5)).FilterSettings(filter => { filter.Type(Syncfusion.EJ2.Grids.FilterType.Excel); }).EditSettings(edit => { edit.AllowEditing(Model.TaskStatusCode.Contains("INPROGRESS")).Mode(Syncfusion.EJ2.Grids.EditMode.Normal); }).Toolbar(toolbarItems).Render()
    </div>
    
    <div id="Paris" class="tabcontent">
        @if (Model.TaskStatusCode.Contains("INPROGRESS"))
        {
            toolbarItems1 = new List<object>();
            toolbarItems1.Add(new { text = "Bulk Action", tooltipText = "Bulk", prefixIcon = "e-edit", id = "bulkAction" });
        }
        else
        {
            toolbarItems1 = new List<object>();
        }
        @Html.EJS().Grid("Grid1").DataSource((IEnumerable<object>)ViewBag.DataSource).AllowFiltering(true).AllowResizing(true).Height(300).ActionComplete("actionComplete").ActionBegin("actionBegin").Columns(col =>
   {
       col.Type("checkbox").Width("50").Add();
       col.Field("GridTemplateAction").HeaderText("Action").ValueAccessor("DisplayDescription").EditType("dropdownedit").Edit(new { @params = DropDownListAction }).Width("200").ValidationRules(new { required = true }).Add();
       col.Field("TextValue1").AllowFiltering(true).AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit1).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).
                  Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" &&
                  !(ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DateTimePicker ||
                  ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_HyperLink || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_HtmlArea || ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_Hidden)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay1 }).Add();
       col.Field("TextValue2").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit2).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).
               Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" &&
               !(ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DateTimePicker ||
               ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay2 }).Add();
       col.Field("TextValue3").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit3).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).
            Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" &&
            !(ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DateTimePicker ||
            ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay3 }).Add();
       col.Field("TextValue4").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit4).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).
                       Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" &&
                       !(ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DateTimePicker ||
                       ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay4 }).Add();
       col.Field("TextValue5").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit5).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).
                          Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" &&
                          !(ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DateTimePicker ||
                          ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay5 }).Add();
       col.Field("TextValue6").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit6).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).
                              Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" &&
                              !(ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DateTimePicker ||
                              ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay6 }).Add();
       col.Field("TextValue7").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit7).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).
                             Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" &&
                             !(ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DateTimePicker ||
                             ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay7 }).Add();
       col.Field("TextValue8").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit8).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).
                                  Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" &&
                                  !(ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DateTimePicker ||
                                  ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay8 }).Add();
       col.Field("TextValue9").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit9).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).
                                      Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" &&
                                      !(ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DateTimePicker ||
                                      ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_HyperLink)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay9 }).Add();
       col.Field("TextValue10").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit10).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).
                                          Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" &&
                                          !(ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_Attachment || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DateTimePicker ||
                                          ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DatePicker || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DropdownList || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_HyperLink || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_HtmlArea || ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_Hidden)).Width("200").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay10 }).Add();


       col.Field("TaskNo").AllowFiltering(true).IsPrimaryKey(true).Template("<a href='#' onclick='onTaskOpen(${somefun(data)})'>${ TaskNo}</a>").HeaderText("TaskNo").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();

       col.Field("Subject").HeaderText("Subject").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
       col.Field("TaskStatusName").HeaderText("Task Status").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
       col.Field("CandidateName").HeaderText("Candidate Name").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
       col.Field("JobName").HeaderText("Position").Width("200").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
       col.Field("OrgUnitName").HeaderText("Org Unit").Width("150").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
       col.Field("GaecNo").HeaderText("GAEC No").Width("150").AllowEditing(false).TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();



       col.Field("StartDate").HeaderText("StartDate").AllowEditing(false).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).Add();




       col.Field("AssigneeUserId").AllowEditing(false).HeaderText("AssigneeUserName").ValueAccessor("DisplayDescription").EditType("dropdownedit").Edit(new { @params = DropDownListUser }).Width("200").Add(); ;



       col.Field("DropdownDisplayValue1").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay1).Visible(ViewBag.DataSourceHeader.DropdownDisplay1 != null && ViewBag.DataSourceHeader.DropdownDisplay1 != "").EditType("dropdownedit").Edit(new { @params = DropDownList1 }).Width("200").Add();


       col.Field("DropdownDisplayValue2").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay2).Visible(ViewBag.DataSourceHeader.DropdownDisplay2 != null && ViewBag.DataSourceHeader.DropdownDisplay2 != "").EditType("dropdownedit").Edit(new { @params = DropDownList2 }).Width("200").Add();


       col.Field("DropdownDisplayValue3").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay3).Visible(ViewBag.DataSourceHeader.DropdownDisplay3 != null && ViewBag.DataSourceHeader.DropdownDisplay3 != "").EditType("dropdownedit").Edit(new { @params = DropDownList3 }).Width("200").Add();


       col.Field("DropdownDisplayValue4").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay4).Visible(ViewBag.DataSourceHeader.DropdownDisplay4 != null && ViewBag.DataSourceHeader.DropdownDisplay4 != "").EditType("dropdownedit").Edit(new { @params = DropDownList4 }).Width("200").Add();


       col.Field("DropdownDisplayValue5").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay5).Visible(ViewBag.DataSourceHeader.DropdownDisplay5 != null && ViewBag.DataSourceHeader.DropdownDisplay5 != "").EditType("dropdownedit").Edit(new { @params = DropDownList5 }).Width("200").Add();


       col.Field("DropdownDisplayValue6").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay6).Visible(ViewBag.DataSourceHeader.DropdownDisplay6 != null && ViewBag.DataSourceHeader.DropdownDisplay6 != "").EditType("dropdownedit").Edit(new { @params = DropDownList6 }).Width("200").Add();



       col.Field("DropdownDisplayValue7").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay7).Visible(ViewBag.DataSourceHeader.DropdownDisplay7 != null && ViewBag.DataSourceHeader.DropdownDisplay7 != "").EditType("dropdownedit").Edit(new { @params = DropDownList7 }).Width("200").Add();


       col.Field("DropdownDisplayValue8").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay8).Visible(ViewBag.DataSourceHeader.DropdownDisplay8 != null && ViewBag.DataSourceHeader.DropdownDisplay8 != "").EditType("dropdownedit").Edit(new { @params = DropDownList8 }).Width("200").Add();


       col.Field("DropdownDisplayValue9").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay9).Visible(ViewBag.DataSourceHeader.DropdownDisplay9 != null && ViewBag.DataSourceHeader.DropdownDisplay9 != "").EditType("dropdownedit").Edit(new { @params = DropDownList9 }).Width("200").Add();


       col.Field("DropdownDisplayValue10").HeaderText(ViewBag.DataSourceHeader.DropdownDisplay10).Visible(ViewBag.DataSourceHeader.DropdownDisplay10 != null && ViewBag.DataSourceHeader.DropdownDisplay10 != "").EditType("dropdownedit").Edit(new { @params = DropDownList10 }).Width("200").Add();

       col.Field("DatePickerValue1").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit1).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay1 }).Add();

       col.Field("DatePickerValue1").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit1).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay1 }).Add();

       col.Field("AttachmentValue1").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit1).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).Template("<a href='#' onclick='onAttachment1(${somefun(data)})'>${if(AttachmentValue1!=null)}${AttachmentValue1}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_Attachment).Edit(new { create = "create1", read = "read1", write = "write1" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay1 }).Add();
       col.Field("TextBoxLink1").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay1).Template("<a href='#' onclick='onOpenLink1(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay1 != null && ViewBag.DataSourceHeader.TextBoxDisplay1 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType1 == NtsFieldType.NTS_HyperLink).Width("200").Add();
       col.Field("DatePickerValue2").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit2).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay2 }).Add();

       col.Field("DatePickerValue2").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit2).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay2 }).Add();

       col.Field("AttachmentValue2").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit2).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).Template("<a href='#' onclick='onAttachment2(${somefun(data)})'>${if(AttachmentValue2!=null)}${AttachmentValue2}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_Attachment).Edit(new { create = "create2", read = "read2", write = "write2" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay2 }).Add();
       col.Field("TextBoxLink2").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay2).Template("<a href='#' onclick='onOpenLink2(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay2 != null && ViewBag.DataSourceHeader.TextBoxDisplay2 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType2 == NtsFieldType.NTS_HyperLink).Width("200").Add();
       col.Field("DatePickerValue3").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit3).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay3 }).Add();

       col.Field("DatePickerValue3").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit3).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay3 }).Add();

       col.Field("AttachmentValue3").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit3).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).Template("<a href='#' onclick='onAttachment3(${somefun(data)})'>${if(AttachmentValue3!=null)}${AttachmentValue3}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_Attachment).Edit(new { create = "create3", read = "read3", write = "write3" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay3 }).Add();
       col.Field("TextBoxLink3").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay3).Template("<a href='#' onclick='onOpenLink3(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay3 != null && ViewBag.DataSourceHeader.TextBoxDisplay3 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType3 == NtsFieldType.NTS_HyperLink).Width("200").Add();
       col.Field("DatePickerValue4").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit4).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay4 }).Add();

       col.Field("DatePickerValue4").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit4).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay4 }).Add();

       col.Field("AttachmentValue4").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit4).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).Template("<a href='#' onclick='onAttachment4(${somefun(data)})'>${if(AttachmentValue4!=null)}${AttachmentValue4}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_Attachment).Edit(new { create = "create4", read = "read4", write = "write4" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay4 }).Add();
       col.Field("TextBoxLink4").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay4).Template("<a href='#' onclick='onOpenLink4(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay4 != null && ViewBag.DataSourceHeader.TextBoxDisplay4 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType4 == NtsFieldType.NTS_HyperLink).Width("200").Add();
       col.Field("DatePickerValue5").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit5).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay5 }).Add();

       col.Field("DatePickerValue5").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit5).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay5 }).Add();

       col.Field("AttachmentValue5").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit5).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).Template("<a href='#' onclick='onAttachment5(${somefun(data)})'>${if(AttachmentValue5!=null)}${AttachmentValue5}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_Attachment).Edit(new { create = "create5", read = "read5", write = "write5" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay5 }).Add();
       col.Field("TextBoxLink5").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay5).Template("<a href='#' onclick='onOpenLink5(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay5 != null && ViewBag.DataSourceHeader.TextBoxDisplay5 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType5 == NtsFieldType.NTS_HyperLink).Width("200").Add();
       col.Field("DatePickerValue6").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit6).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay6 }).Add();

       col.Field("DatePickerValue6").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit6).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay6 }).Add();

       col.Field("AttachmentValue6").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit6).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).Template("<a href='#' onclick='onAttachment6(${somefun(data)})'>${if(AttachmentValue6!=null)}${AttachmentValue6}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_Attachment).Edit(new { create = "create6", read = "read6", write = "write6" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay6 }).Add();
       col.Field("TextBoxLink6").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay6).Template("<a href='#' onclick='onOpenLink6(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay6 != null && ViewBag.DataSourceHeader.TextBoxDisplay6 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType6 == NtsFieldType.NTS_HyperLink).Width("200").Add();
       col.Field("DatePickerValue7").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit7).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay7 }).Add();

       col.Field("DatePickerValue7").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit7).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay7 }).Add();

       col.Field("AttachmentValue7").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit7).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).Template("<a href='#' onclick='onAttachment7(${somefun(data)})'>${if(AttachmentValue7!=null)}${AttachmentValue7}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_Attachment).Edit(new { create = "create7", read = "read7", write = "write7" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay7 }).Add();
       col.Field("TextBoxLink7").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay7).Template("<a href='#' onclick='onOpenLink7(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay7 != null && ViewBag.DataSourceHeader.TextBoxDisplay7 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType7 == NtsFieldType.NTS_HyperLink).Width("200").Add();
       col.Field("DatePickerValue8").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit8).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay8 }).Add();

       col.Field("DatePickerValue8").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit8).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay8 }).Add();

       col.Field("AttachmentValue8").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit8).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).Template("<a href='#' onclick='onAttachment8(${somefun(data)})'>${if(AttachmentValue8!=null)}${AttachmentValue8}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_Attachment).Edit(new { create = "create8", read = "read8", write = "write8" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay8 }).Add();
       col.Field("TextBoxLink8").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay8).Template("<a href='#' onclick='onOpenLink8(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay8 != null && ViewBag.DataSourceHeader.TextBoxDisplay8 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType8 == NtsFieldType.NTS_HyperLink).Width("200").Add();
       col.Field("DatePickerValue9").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit9).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay9 }).Add();

       col.Field("DatePickerValue9").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit9).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay9 }).Add();

       col.Field("AttachmentValue9").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit9).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).Template("<a href='#' onclick='onAttachment9(${somefun(data)})'>${if(AttachmentValue9!=null)}${AttachmentValue9}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_Attachment).Edit(new { create = "create9", read = "read9", write = "write9" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay9 }).Add();
       col.Field("TextBoxLink9").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay9).Template("<a href='#' onclick='onOpenLink9(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay9 != null && ViewBag.DataSourceHeader.TextBoxDisplay9 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType9 == NtsFieldType.NTS_HyperLink).Width("200").Add();
       col.Field("DatePickerValue10").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit10).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DateTimePicker)).EditType("datetimepickeredit").Width("150").Format(new { type = "datetime", format = "M/d/y hh:mm a" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay10 }).Add();

       col.Field("DatePickerValue10").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit10).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" && (ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_DatePicker)).EditType("datepickeredit").Width("150").Format(new { type = "date", format = "M/d/y" }).ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay10 }).Add();

       col.Field("AttachmentValue10").AllowEditing(ViewBag.DataSourceHeader.IsTextBoxEdit10).HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).Template("<a href='#' onclick='onAttachment10(${somefun(data)})'>${if(AttachmentValue10!=null)}${AttachmentValue10}${else}${/if}</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_Attachment).Edit(new { create = "create10", read = "read10", write = "write10" }).Width("200").ValidationRules(new { required = ViewBag.DataSourceHeader.IsRequiredTextBoxDisplay10 }).Add();
       col.Field("TextBoxLink10").HeaderText(ViewBag.DataSourceHeader.TextBoxDisplay10).Template("<a href='#' onclick='onOpenLink10(${somefun(data)})'>click to open</a>").Visible(ViewBag.DataSourceHeader.TextBoxDisplay10 != null && ViewBag.DataSourceHeader.TextBoxDisplay10 != "" && ViewBag.DataSourceHeader.TextBoxDisplayType10 == NtsFieldType.NTS_HyperLink).Width("200").Add();

   }).AllowPaging(true).AllowSorting(true).PageSettings(page => page.PageSize(5)).SelectionSettings(sel => { sel.PersistSelection(true); }).FilterSettings(filter => { filter.Type(Syncfusion.EJ2.Grids.FilterType.Excel); }).EditSettings(edit => { edit.AllowEditing(false).Mode(Syncfusion.EJ2.Grids.EditMode.Normal); }).Toolbar(toolbarItems1).ToolbarClick("toolbarClick").Render()

    </div>



</div>
        }




<script>

    var row;
    function writeLinkDummy(args) {
        row = args.rowData;
    }
    function IframePostbackScript() {

        var win = GetMainWindow();
        win.CloseWindow();
        window.location.reload();
        window.parent.refreshInbox();
    };
    function toolbarClick(args) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        if (args.item.id === 'bulkAction') {


            var selectedRow = gridobj.getSelectedRecords();//to get the selected rows
            var ids = selectedRow.map(function (e) {
                return e.Id;
            }).join(',');
            //var id = String.join(selectedRow.Id);
            //var ids = "94b9d58c-8a0e-4b2d-bd04-1ec653be1009,d7069f91-d9ae-4974-beff-4e479c6f6796,ba081deb-9ce3-4431-b518-b34fac2d2cdc";
            //var id = "94b9d58c-8a0e-4b2d-bd04-1ec653be1009";
            var id = selectedRow[0].Id;
            if (id == null && id == "") {
                alert("Select atleast one record");
            }
            else {

                var win = window.parent.GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("TaskUdfDetails", "Task", new { @area= "Cms" })?taskId=' + id + '&ids=' + ids ;
        win.OpenWindow({ Title: 'Task Details', Width: 1200, Height: 1200 });
        return false;
            }

        }

    }
    var showError = function (error) {
        $("#validation-summary").html(error);
        $("#validation-summary").css("display", "block")
    }

    function openCity(evt, cityName) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(cityName).style.display = "block";
        evt.currentTarget.className += " active";
    }
    function actionBegin(args) {
        if (args.requestType === "beginEdit") {
            if (args.rowData.GridRowLock == true) {
                args.cancel = true;
                alert("Already Actioned");
            }
        }
    }

    function DisplayDescription(field, data, column) {

        var coldata = column.edit.params.dataSource;
        for (var i = 0; i < coldata.length; i++) {
            if (data[field]== coldata[i]['Id'])
                return coldata[i]['Name'];
        }
    }
    function DisplayDescription1(field, data, column) {
        return data["DropdownDisplayValue1"];
    }
    function DisplayDescription2(field, data, column) {
        return data["DropdownDisplayValue2"];
    }
    function DisplayDescription3(field, data, column) {
        return data["DropdownDisplayValue3"];
    }
    function DisplayDescription4(field, data, column) {
        return data["DropdownDisplayValue4"];
    }
    function DisplayDescription5(field, data, column) {
        return data["DropdownDisplayValue5"];
    }
    function DisplayDescription6(field, data, column) {
        return data["DropdownDisplayValue6"];
    }
    function DisplayDescription7(field, data, column) {
        return data["DropdownDisplayValue7"];
    }
    function DisplayDescription8(field, data, column) {
        return data["DropdownDisplayValue8"];
    }
    function DisplayDescription9(field, data, column) {
        return data["DropdownDisplayValue9"];
    }
    function DisplayDescription10(field, data, column) {
        return data["DropdownDisplayValue10"];
    }

    function actionComplete(args) {

        if (args.requestType === 'save') {
            args.data.AttachmentCode1 = args.rowData.AttachmentCode1;
            args.data.AttachmentCode2 = args.rowData.AttachmentCode2;
            args.data.AttachmentCode3 = args.rowData.AttachmentCode3;
            args.data.AttachmentCode4 = args.rowData.AttachmentCode4;
            args.data.AttachmentCode5 = args.rowData.AttachmentCode5;
            args.data.AttachmentCode6 = args.rowData.AttachmentCode6;
            args.data.AttachmentCode7 = args.rowData.AttachmentCode7;
            args.data.AttachmentCode8 = args.rowData.AttachmentCode8;
            args.data.AttachmentCode9 = args.rowData.AttachmentCode9;
            args.data.AttachmentCode10 = args.rowData.AttachmentCode10;

            var datasource=
            args.data.DropdownValue1
            kendo.confirm("Please, Confirm to save the changes").then(function () {
                ShowLoader($('.main'));
                args.data.DataAction = 2;
                //args.data.GridRowLock = true;
                var ajax = new ej.base.Ajax({
                    url: "/cms/task/manage1", //render the partial view
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify(args.data)
                });
                ajax.send().then(function (data) {
                    var res=JSON.parse(data);
                    //$("#dialogTemp").html(data); //Render the edit form with selected record
                    //args.form.elements.namedItem('CustomerID').focus();
                    if (res.success) {
                        //window.location.href = "/cms/task/tasklist?code=" + args.data.TemplateCode;
                        window.location.reload();
                        window.parent.refreshInbox();
                    }
                    else {
                        HideLoader($('.main'));
                        showError(res.error);
                        //window.location.href = "/cms/task/tasklist?code=" + args.data.TemplateCode;
                    }

                }).catch(function (xhr) {
                    console.log(xhr);
                });
            }, function () {
                    args.cancel = true;
                    //window.location.href = "/cms/task/tasklist?code=" + args.data.TemplateCode;
                    window.location.reload();
            })
        }
        //if (args.requestType === 'add') {
        //    var ajax = new ej.base.Ajax({
        //        url: "/Home/Addpartial", //render the partial view
        //        type: "POST",
        //        contentType: "application/json",
        //    });
        //    ajax.send().then(function (data) {
        //        $("#dialogTemp").html(data); //Render the edit form with selected record
    }

    function createLink1(args) {
        // create target element

        elemLink1 = document.createElement('a');
        return elemLink1;
    }

    function writeLink1(args) {
        if (args.rowData.TextBoxLink1 != "" && args.rowData.TextBoxLink1 != null) {
            elemLink1.textContent = "Click to open";
            elemLink1.setAttribute("style","color:highlight;cursor:pointer");
            elemLink1.setAttribute("onclick", "onOpenLink1(" + args.row.rowIndex+")");
        }
    }
    function createLink2(args) {
        // create target element

        elemLink2 = document.createElement('a');
        return elemLink2;
    }
    function writeLink2(args) {
        if (args.rowData.TextBoxLink2 != "" && args.rowData.TextBoxLink2 != null) {
            elemLink2.textContent = "Click to open";
            elemLink2.setAttribute("style", "color:highlight;cursor:pointer");
            elemLink2.setAttribute("onclick", "onOpenLink2(" + args.row.rowIndex + ")");
        }
    }
    function createLink3(args) {
        // create target element

        elemLink3 = document.createElement('a');
        return elemLink3;
    }
    function writeLink3(args) {
        if (args.rowData.TextBoxLink3 != "" && args.rowData.TextBoxLink3 != null) {
            elemLink3.textContent = "Click to open";
            elemLink3.setAttribute("style", "color:highlight;cursor:pointer");
            elemLink3.setAttribute("onclick", "onOpenLink3(" + args.row.rowIndex + ")");
        }
    }
    function createLink4(args) {
        // create target element

        elemLink4 = document.createElement('a');
        return elemLink4;
    }
    function writeLink4(args) {
        if (args.rowData.TextBoxLink4 != "" && args.rowData.TextBoxLink4 != null) {
            elemLink4.textContent = "Click to open";
            elemLink4.setAttribute("style", "color:highlight;cursor:pointer");
            elemLink4.setAttribute("onclick", "onOpenLink4(" + args.row.rowIndex + ")");
        }
    }
    function createLink5(args) {
        // create target element

        elemLink5 = document.createElement('a');
        return elemLink5;
    }
    function writeLink5(args) {
        if (args.rowData.TextBoxLink5 != "" && args.rowData.TextBoxLink5 != null) {
            elemLink5.textContent = "Click to open";
            elemLink5.setAttribute("style", "color:highlight;cursor:pointer");
            elemLink5.setAttribute("onclick", "onOpenLink5(" + args.row.rowIndex + ")");
        }
    }
    function createLink6(args) {
        // create target element

        elemLink6 = document.createElement('a');
        return elemLink6;
    }
    function writeLink6(args) {
        if (args.rowData.TextBoxLink6 != "" && args.rowData.TextBoxLink6 != null) {
            elemLink6.textContent = "Click to open";
            elemLink6.setAttribute("style", "color:highlight;cursor:pointer");
            elemLink6.setAttribute("onclick", "onOpenLink6(" + args.row.rowIndex + ")");
        }
    }
    function createLink7(args) {
        // create target element

        elemLink7 = document.createElement('a');
        return elemLink7;
    }
    function writeLink7(args) {
        if (args.rowData.TextBoxLink7 != "" && args.rowData.TextBoxLink7 != null) {
            elemLink7.textContent = "Click to open";
            elemLink7.setAttribute("style", "color:highlight;cursor:pointer");
            elemLink7.setAttribute("onclick", "onOpenLink7(" + args.row.rowIndex + ")");
        }
    }
    function createLink8(args) {
        // create target element

        elemLink8 = document.createElement('a');
        return elemLink8;
    }
    function writeLink8(args) {
        if (args.rowData.TextBoxLink8 != "" && args.rowData.TextBoxLink8 != null) {
            elemLink8.textContent = "Click to open";
            elemLink8.setAttribute("style", "color:highlight;cursor:pointer");
            elemLink8.setAttribute("onclick", "onOpenLink8(" + args.row.rowIndex + ")");
        }
    }
    function createLink9(args) {
        // create target element

        elemLink9 = document.createElement('a');
        return elemLink9;
    }
    function writeLink9(args) {
        if (args.rowData.TextBoxLink9 != "" && args.rowData.TextBoxLink9 != null) {
            elemLink9.textContent = "Click to open";
            elemLink9.setAttribute("style", "color:highlight;cursor:pointer");
            elemLink9.setAttribute("onclick", "onOpenLink9(" + args.row.rowIndex + ")");
        }
    }
    function createLink10(args) {
        // create target element

        elemLink10 = document.createElement('a');
        return elemLink10;
    }
    function writeLink10(args) {
        if (args.rowData.TextBoxLink10 != "" && args.rowData.TextBoxLink10 != null) {
            elemLink10.textContent = "Click to open";
            elemLink10.setAttribute("style", "color:highlight;cursor:pointer");
            elemLink10.setAttribute("onclick", "onOpenLink10(" + args.row.rowIndex + ")");
        }
    }
    function create1(args) {
        // create target element
        elem1 = document.createElement('input');
        return elem1;
    }

    function write1(args) {
        // EJ2 render Uploader component

        row = args.rowData;
        if (row.AttachmentValue1 != null && row.AttachmentValue1 != "") {
            var fname = row.AttachmentValue1.split('.').slice(0, -1);
            var fext = row.AttachmentValue1.split('.').pop();
            var preLoadFiles = [
                { name: fname[0], size: 500, type: fext },
            ];
        }


        let uploadObject = new ej.inputs.Uploader({
            multiple: false,
        asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save1")',
            },
            files: preLoadFiles,
            success: onUploadSuccess1,

            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem1);
            }
    function onUploadSuccess1(args) {

        if (args.operation === 'upload') {

        var header = args.response.headers;
        var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
        statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
        row.AttachmentCode1 = statusMessage.split(':')[1].trim();
        }
    }

            function read1(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue1;
            }
            }

            function create2(args) {
            // create target element

            elem2 = document.createElement('input');
            return elem2;
            }
            function write2(args) {
            // EJ2 render Uploader component

            row = args.rowData;
            if (row.AttachmentValue2 != null && row.AttachmentValue2 != "") {
                var fname = row.AttachmentValue2.split('.').slice(0, -1);
                var fext = row.AttachmentValue2.split('.').pop();
                var preLoadFiles = [
                    { name: fname[0], size: 500, type: fext },
                ];
            }
            let uploadObject = new ej.inputs.Uploader({
            multiple:false,
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save2")',

                },
                files: preLoadFiles,
                success: onUploadSuccess2,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem2);
            }
            function onUploadSuccess2(args) {


                if (args.operation === 'upload') {

            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode2 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read2(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue2;
            }


            }

            function create3(args) {
            // create target element

            elem3 = document.createElement('input');
            return elem3;
            }
            function write3(args) {
            // EJ2 render Uploader component

            row = args.rowData;
            if (row.AttachmentValue3 != null && row.AttachmentValue3 != "") {
                var fname = row.AttachmentValue3.split('.').slice(0, -1);
                var fext = row.AttachmentValue3.split('.').pop();
                var preLoadFiles = [
                    { name: fname[0], size: 500, type: fext },
                ];
            }
                let uploadObject = new ej.inputs.Uploader({
                    multiple: false,
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save3")',

            },
            files: preLoadFiles,
            success: onUploadSuccess3,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem3);
            }
            function onUploadSuccess3(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode3 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read3(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue3;
            }


            }

            function create4(args) {
            // create target element

            elem4 = document.createElement('input');
            return elem4;
            }
            function write4(args) {
            // EJ2 render Uploader component

            row = args.rowData;
            if (row.AttachmentValue4 != null && row.AttachmentValue4 != "") {
                var fname = row.AttachmentValue4.split('.').slice(0, -1);
                var fext = row.AttachmentValue4.split('.').pop();
                var preLoadFiles = [
                    { name: fname[0], size: 500, type: fext },
                ];
            }
                let uploadObject = new ej.inputs.Uploader({
                    multiple: false,
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save4")',

            },
            files: preLoadFiles,
            success: onUploadSuccess4,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem4);
            }
            function onUploadSuccess4(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode4 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read4(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue4;
            }


            }

            function create5(args) {
            // create target element

            elem5 = document.createElement('input');
            return elem5;
            }
            function write5(args) {
            // EJ2 render Uploader component

            row = args.rowData;
            if (row.AttachmentValue5 != null && row.AttachmentValue5 != "") {
                var fname = row.AttachmentValue5.split('.').slice(0, -1);
                var fext = row.AttachmentValue5.split('.').pop();
                var preLoadFiles = [
                    { name: fname[0], size: 500, type: fext },
                ];
            }
                let uploadObject = new ej.inputs.Uploader({
                    multiple: false,
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save5")',

            },
            files: preLoadFiles,
            success: onUploadSuccess5,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem5);
            }
            function onUploadSuccess5(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode5 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read5(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue5;
            }


            }

            function create6(args) {
            // create target element

            elem6 = document.createElement('input');
            return elem6;
            }
            function write6(args) {
            // EJ2 render Uploader component

            row = args.rowData;
            if (row.AttachmentValue6 != null && row.AttachmentValue6 != "") {
                var fname = row.AttachmentValue6.split('.').slice(0, -1);
                var fext = row.AttachmentValue6.split('.').pop();
                var preLoadFiles = [
                    { name: fname[0], size: 500, type: fext },
                ];
            }
                let uploadObject = new ej.inputs.Uploader({
                    multiple: false,
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save6")',

                },
                files: preLoadFiles,
            success: onUploadSuccess6,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem6);
            }
            function onUploadSuccess6(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode6 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read6(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue6;
            }


            }


            function create7(args) {
            // create target element

            elem7 = document.createElement('input');
            return elem7;
            }
            function write7(args) {
            // EJ2 render Uploader component

            row = args.rowData;
                if (row.AttachmentValue7 != null && row.AttachmentValue7 != "") {
                    var fname = row.AttachmentValue7.split('.').slice(0, -1);
                    var fext = row.AttachmentValue7.split('.').pop();
                    var preLoadFiles = [
                        { name: fname[0], size: 500, type: fext },
                    ];
                }
                let uploadObject = new ej.inputs.Uploader({
                    multiple: false,
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save7")',

                },
                files: preLoadFiles,
            success: onUploadSuccess7,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem7);
            }
            function onUploadSuccess7(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode7 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read7(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue7;
            }


            }


            function create8(args) {
            // create target element

            elem8 = document.createElement('input');
            return elem8;
            }
            function write8(args) {
            // EJ2 render Uploader component

            row = args.rowData;
                if (row.AttachmentValue8 != null && row.AttachmentValue8 != "") {
                    var fname = row.AttachmentValue8.split('.').slice(0, -1);
                    var fext = row.AttachmentValue8.split('.').pop();
                    var preLoadFiles = [
                        { name: fname[0], size: 500, type: fext },
                    ];
                }
                let uploadObject = new ej.inputs.Uploader({
                    multiple: false,
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save8")',

                },
                files: preLoadFiles,
            success: onUploadSuccess8,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem8);
            }
            function onUploadSuccess8(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode8 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read8(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue8;
            }


            }

            function create9(args) {
            // create target element

            elem9 = document.createElement('input');
            return elem9;
            }
            function write9(args) {
            // EJ2 render Uploader component

            row = args.rowData;
                if (row.AttachmentValue9 != null && row.AttachmentValue9 != "") {
                    var fname = row.AttachmentValue9.split('.').slice(0, -1);
                    var fext = row.AttachmentValue9.split('.').pop();
                    var preLoadFiles = [
                        { name: fname[0], size: 500, type: fext },
                    ];
                }
                let uploadObject = new ej.inputs.Uploader({
                    multiple: false,
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save9")',

                },
                files: preLoadFiles,
            success: onUploadSuccess9,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem9);
            }
            function onUploadSuccess9(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode9 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read9(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue9;
            }


            }

            function create10(args) {
            // create target element

            elem10 = document.createElement('input');
            return elem10;
            }
            function write10(args) {
            // EJ2 render Uploader component

            row = args.rowData;
                if (row.AttachmentValue10 != null && row.AttachmentValue10 != "") {
                    var fname = row.AttachmentValue10.split('.').slice(0, -1);
                    var fext = row.AttachmentValue10.split('.').pop();
                    var preLoadFiles = [
                        { name: fname[0], size: 500, type: fext },
                    ];
                }
                let uploadObject = new ej.inputs.Uploader({
                    multiple: false,
            asyncSettings: {
            saveUrl: '@Url.Content("/cms/Document/Save10")',

                },
                files: preLoadFiles,
            success: onUploadSuccess10,
            //failure: onUploadFailure
            });
            uploadObject.appendTo(elem10);
            }
            function onUploadSuccess10(args) {


            if (args.operation === 'upload') {
            var header = args.response.headers;
            var statusMessage = header.slice(header.indexOf('fileid'), header.indexOf('filename'));
            statusMessage = statusMessage.slice(statusMessage.indexOf(',') + 1);
            row.AttachmentCode10 = statusMessage.split(':')[1].trim();
            //elem.value = args.file.name;
            //alert(elem.value);
            //row.AttachmentValue1 = args.file.name;

            }
            }
            function read10(args) {

            //alert(args);
            // read the custom component(uploader) value
            if (args.files != null && args.files.length > 0) {
            return args.files[0].name; // base64 string return
            } else {
            return row.AttachmentValue10;
            }


            }


    function somefun(args) { // args contains the full row data.
        return String(args.index);
    }
    function onTaskOpen(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var id=gridobj.currentViewData[index].Id

        var win = window.parent.GetMainWindow();
        win.iframeOpenUrl = '@Url.Action("Index", "Task", new { @area= "Cms" })?taskId=' + id;
        win.OpenWindow({ Title: 'Task Details', Width: 1200, Height: 1200 });
        return false;
    }
    function onOpenLink1(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var link = gridobj.currentViewData[index].TextBoxLink1;
        var win = GetMainWindow();
        win.iframeOpenUrl = link;
        win.OpenWindow({ Title: 'Details', Width: 1200, Height: 1200 });
        return false;
    }
    function onOpenLink2(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var link = gridobj.currentViewData[index].TextBoxLink2;
        var win = GetMainWindow();
        win.iframeOpenUrl = link;
        win.OpenWindow({ Title: 'Details', Width: 1200, Height: 1000 });
        return false;
    }
    function onOpenLink3(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var link = gridobj.currentViewData[index].TextBoxLink3;
        var win = GetMainWindow();
        win.iframeOpenUrl = link;
        win.OpenWindow({ Title: 'Details', Width: 1200, Height: 1000 });
        return false;
    }
    function onOpenLink4(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var link = gridobj.currentViewData[index].TextBoxLink4;
        var win = GetMainWindow();
        win.iframeOpenUrl = link;
        win.OpenWindow({ Title: 'Details', Width: 1200, Height: 1000 });
        return false;
    }
    function onOpenLink5(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var link = gridobj.currentViewData[index].TextBoxLink5;
        var win = GetMainWindow();
        win.iframeOpenUrl = link;
        win.OpenWindow({ Title: 'Details', Width: 1200, Height: 1000 });
        return false;
    }
    function onOpenLink6(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var link = gridobj.currentViewData[index].TextBoxLink6;
        var win = GetMainWindow();
        win.iframeOpenUrl = link;
        win.OpenWindow({ Title: 'Details', Width: 1200, Height: 1000 });
        return false;
    }
    function onOpenLink7(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var link = gridobj.currentViewData[index].TextBoxLink7;
        var win = GetMainWindow();
        win.iframeOpenUrl = link;
        win.OpenWindow({ Title: 'Details', Width: 1200, Height: 1000 });
        return false;
    }
    function onOpenLink8(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var link = gridobj.currentViewData[index].TextBoxLink8;
        var win = GetMainWindow();
        win.iframeOpenUrl = link;
        win.OpenWindow({ Title: 'Details', Width: 1200, Height: 1000 });
        return false;
    }
    function onOpenLink9(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var link = gridobj.currentViewData[index].TextBoxLink9;
        var win = GetMainWindow();
        win.iframeOpenUrl = link;
        win.OpenWindow({ Title: 'Details', Width: 1200, Height: 1000 });
        return false;
    }
    function onOpenLink10(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var link = gridobj.currentViewData[index].TextBoxLink10;
        var win = GetMainWindow();
        win.iframeOpenUrl = link;
        win.OpenWindow({ Title: 'Details', Width: 1200, Height: 1000 });
        return false;
    }
    function onAttachment1(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var fileId = gridobj.currentViewData[index].AttachmentCode1;
        onDownload(fileId);
        return false;
    }
    function onAttachment2(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var fileId = gridobj.currentViewData[index].AttachmentCode2;
        onDownload(fileId);
        return false;
    }
    function onAttachment3(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var fileId = gridobj.currentViewData[index].AttachmentCode3;
        onDownload(fileId);
        return false;
    }
    function onAttachment4(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var fileId = gridobj.currentViewData[index].AttachmentCode4;
        onDownload(fileId);
        return false;
    }
    function onAttachment5(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var fileId = gridobj.currentViewData[index].AttachmentCode5;
        onDownload(fileId);
        return false;
    }
    function onAttachment6(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var fileId = gridobj.currentViewData[index].AttachmentCode6;
        onDownload(fileId);
        return false;
    }
    function onAttachment7(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var fileId = gridobj.currentViewData[index].AttachmentCode7;
        onDownload(fileId);
        return false;
    }
    function onAttachment8(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var fileId = gridobj.currentViewData[index].AttachmentCode8;
        onDownload(fileId);
        return false;
    }
    function onAttachment9(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var fileId = gridobj.currentViewData[index].AttachmentCode9;
        onDownload(fileId);
        return false;
    }
    function onAttachment10(index) {
        var gridobj = document.getElementById("Grid1").ej2_instances[0];
        var fileId = gridobj.currentViewData[index].AttachmentCode10;
        onDownload(fileId);
        return false;
    }
    function onDownload(id) {
        url = '/cms/Document/GetFileMongo?fileId=' + id;
        window.open(url, '_blank');
        return false;
    }
    function onOpenLink(link) {
        var win = GetMainWindow();
        win.iframeOpenUrl =  link;
        win.OpenWindow({ Title: 'Details', Width: 1200, Height: 1200 });
        return false;
    }

</script>