@{
    ViewData["Title"] = "Member Group";
    Layout = null;
}
@using CMS.UI.ViewModel;
@using CMS.Common;

@model MemberGroupViewModel

<script>
       var status = '@Html.Raw(EnumExtension.EnumToJson(typeof(StatusEnum)))';
    var statusObj = JSON.parse(status);

    var columnDefs = [

        {
            field: "Name",
        },

        {
            field: "GroupStatus",
            cellRenderer: params => {
                return statusObj[params.value]; //only for enum
            }
        },


        {
            field: "GroupPortals",
            cellRenderer: params => {                
                return params.value.join(', ');
            }
        },

  
        {
            headerName: "Actions",
            field: "Id",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuBin12' data-idvalue='" + params.value + "' data-status=\"0\" data-noteid=\"#:NoteId#\" ><i class='fas fa-ellipsis-v'></i></div>"
            }
        }
    ];

    $(function () {

        getMemberGroupData();

        // $.contextMenu('update');
        //  $('.context-menu-list').trigger('contextmenu:refresh');

        $.contextMenu({
            selector: '#tree-menuBin12',
            trigger: 'left',
            build: function ($trigger, e) {


                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'edit':
                                        OnEditGroup(id);
                                        break;

                                  

                                    default:
                                }
                            },
                            items: {
                                "edit": { name: "Edit", icon: "fas fa-edit" },
                              


                            }
                        };


                }
            }
        });


    });

    function getMemberGroupData() {
        document.getElementById("MemberGroupgrid").innerHTML = "";
        gridConfig(
            "MemberGroupgrid",
            "/cms/MemberGroup/ReadData",
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }
</script>
<div class="row">
    <div class="col-12">
        <button type='button' class='btn btn-primary' onclick='OnCreateGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Group</button>
        <br /><br />
        <div id="MemberGroupgrid" style="width: 100%;height:550px" class="ag-theme-alpine"></div>
        @*@(Html.Kendo().Grid<MemberGroupViewModel>
        ()
        .Name("MemberGroupgrid")
        .ToolBar(toolbar =>
        toolbar.ClientTemplate("<button type='button' class='btn btn-primary' onclick='OnCreateGroup();'><i class='fa fas fa-plus'></i>&nbsp;Create Group</button>"))

        //toolbar.Custom().Text("Create Group").HtmlAttributes(new { href = "javascript:OnCreateGroup();" }))
        .Columns(columns =>
        {
        //columns.Bound(c => c.Id).Width(140).Hidden(true);
        //  columns.Bound(c => c.Id).Title(" ").Width(100).ClientTemplate("<a class='btn btn-success' onclick='return OnEditGroup(\"#=Id#\");'><i class='fad fa-edit'></i> Edit</a>");
        columns.Command(command =>
        {
        command.Custom(" ").Text("").IconClass("fa fas fa-pencil").Click("OnEditGroup").HtmlAttributes(new { @class = "action-icon" });
        }).Title("Edit").Width(60);
        columns.Bound(c => c.Name).Width(140);
        columns.Bound(c => c.GroupStatus).Width(140);
        columns.Bound(c => c.GroupPortals).ClientTemplate("#= GroupPortals.join(', ')  #").Width(140);

        })
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(8)
        .Read(read => read.Action("ReadData", "MemberGroup"))
        )
        .HtmlAttributes(new { style = "height: 550px"})
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))

        .Scrollable(x => x.Enabled(true))
        //.Pageable(pageable => pageable
        //                             .Refresh(true)
        //                             .PageSizes(new[] { 10, 50, 100, 200, 500 })
        //                             .ButtonCount(10))
        )*@
    </div>
</div>

<script>

</script>