@using CMS.UI.ViewModel;
@using CMS.Common;

@model ProcessDesignViewModel

@{
    ViewData["Title"] = "Template";
    // Layout = null;
    Layout = string.Concat("~/Areas/CMS/Views/Shared/_LayoutCMS.cshtml");
}

<script src="~/js/common.js"></script>
<link href="//cdn.syncfusion.com/ej2/ej2-base/styles/material.css" rel="stylesheet">
<link href="//cdn.syncfusion.com/ej2/ej2-buttons/styles/material.css" rel="stylesheet">
<link href="//cdn.syncfusion.com/ej2/ej2-popups/styles/material.css" rel="stylesheet">
<link href="//cdn.syncfusion.com/ej2/ej2-splitbuttons/styles/material.css" rel="stylesheet">
<link href="//cdn.syncfusion.com/ej2/ej2-diagrams/styles/material.css" rel="stylesheet">
<link href="//cdn.syncfusion.com/ej2/ej2-navigations/styles/fabric.css" rel="stylesheet">

<script src="https://cdn.syncfusion.com/ej2/dist/ej2.min.js" type="text/javascript"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">



<style>
    .node-style {
        color: white;
        height: 100px;
        /* text-align: center; */
        padding: -2px;
        padding-top: 5px;
        font-size: 20px;
        border-radius: 7px;
    }

    .node-style1 {
        color: white;
        height: 70px;
        /* text-align: center; */
        padding: -2px;
        padding-top: 5px;
        font-size: 15px;
        border-radius: 100px;
    }

    /*  .btn-menu:hover {
            font-size: 30px;
            cursor: pointer;
        }
    */
    .menu {
        text-align: right;
        cursor: pointer;
    }

    .avatar {
        vertical-align: middle;
        width: 30px;
        height: 30px;
        border-radius: 50%;
    }

    /*.dropbtn {
            background-color: #4caf50;
            color: white;
            padding: 16px;
            font-size: 16px;
            border: none;
        }

        .dropdown {
            position: relative;
            display: inline-block;
        }*/

    /* .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f1f1f1;
        min-width: 160px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
    }

        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }

            .dropdown-content a:hover {
                background-color: #ddd;
            }

    .dropdown:hover .dropdown-content {
        display: block;
    }*/

    .dropdown:hover .dropbtn {
        background-color: #3e8e41;
    }

    .dropdown-submenu {
        position: relative;
    }

        .dropdown-submenu .dropdown-menu {
            top: 0;
            left: 100%;
            margin-top: -1px;
        }

    .small {
        font-size: 10px;
    }

    .center {
        text-align: center;
    }

    .right {
        text-align: right;
    }
</style>

@*<span id="posId" style="display:none">@Model.Id</span>*@

<div id="container" style="margin-top:10px;">
    <div id="element"></div>
</div>



<script>
    var ele = document.getElementById('container');
    if (ele) {
        ele.style.visibility = "visible";
    }
</script>
<script>
    ej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.diagrams.ComplexHierarchicalTree, ej.diagrams.LineDistribution);
    var items;
    var diagram;
    var nodeId = 0;
    var level = 0;
    //$.ajax({
    //    url: "/cms/processDesign/GetChart?processdesignId=" + document.getElementById("posId").innerText,
    //    contentType: "application/json",
    //    cache: false,
    //    success: function (result) {
    
    var data = [
        { "Id": GenerateGuid(), "Name": "Project", "ComponentType": 4, "Level": 0 }
    ];
    console.log(data);
    items = new ej.data.DataManager(data);
    var snapSettings = {
        // Define the Constraints for gridlines and snapping
        constraints: "None",
    };
    diagram = new ej.diagrams.Diagram({
        width: '100%',
        height: '590px',
        //Uses layout to auto-arrange nodes on the diagram page
        layout: {
            //Sets layout type
            type: 'ComplexHierarchicalTree',
            connectionPointOrigin: ej.diagrams.ConnectionPointOrigin.DifferentPoint,
            horizontalSpacing: 50, verticalSpacing: 50, horizontalAlignment: "Left", verticalAlignment: "Top",
            margin: { left: 0, right: 0, top: 10, bottom: 0 },
            orientation: 'TopToBottom',
            enableAnimation: true
        },//Configures data source for diagram
        dataSourceSettings: {
            id: 'Id',
            parentId: 'Parents',
            dataManager: items
        },//Sets the default properties for nodes
        getNodeDefaults: (obj) => {
            var bgcolor;
            var pdisplay;
            if (obj.data.ComponentType == 10) {
                bgcolor = "#900c3e";
                pdisplay = "none";
            } else if (obj.data.ComponentType == "2") {
                bgcolor = "#ffc300";
            } else if (obj.data.ComponentType == "3") {
                bgcolor = "#239adc";
                obj.offsetX = 300;
                obj.offsetY = 0;

            } else if (obj.data.ComponentType == "1") {
                bgcolor = "#108e2f";
            } else if (obj.data.ComponentType == 4) {
                bgcolor = "#fa1b17";
            } else if (obj.data.ComponentType == 7) {
                bgcolor = "#6d6e70";
            } else if (obj.data.ComponentType == 2) {
                bgcolor = "#000000";
                pdisplay = "none";
            }
            
            if (obj.data.Level != 0) {
                
                obj.offsetX = 100 * obj.data.Level;
                obj.offsetY = 100 * obj.data.Level;
                console.log(obj.offsetX);
                console.log(obj.offsetY);
            }
            obj.shape = {
                type: 'HTML', content: "<div id=" + obj.data.Id + " style='background-color:" + bgcolor +
                    "' class='row node-style'><div class='col-xs-8'>"
                    + obj.data.Name + " <div class='small'>Start: 06-04-2021</div><div class='small'>End: 06-04-2021</div><div class='small'>Resource: Sumbul</div></div>" +
                    "<div class='col-xs-4 center'><span id='setting_" + obj.data.Id + "' class= 'fas fa-ellipsis-v ' onclick='onSetting(this)'></span>"+
                    "<span id='expand_" + obj.data.Id + "' class= 'fas fa-edit' onclick='onExpand(this)' ></span></div > </div > "

            };
            //Sets properties for expandIcon
            obj.expandIcon = { shape: "fas fa-edit", width: 20, height: 20 };
            //Sets properties for collapseIcon
            obj.collapseIcon = { shape: "fas fa-edit", width: 20, height: 20 };
            obj.style = { fill: "#c15433", strokeColor: 'none', strokeWidth: 2 };
            obj.width = 150; obj.height = 100;
            return obj;
        },//Sets the default properties for and connectors
        getConnectorDefaults: (connector, diagram) => {
            connector.type = 'Orthogonal';
            connector.cornerRadius = 7;
            connector.targetDecorator.height = 7;
            connector.targetDecorator.width = 7;
            connector.style.strokeColor = '#6d6d6d';
            return connector;
        },

        snapSettings: snapSettings,

    }, '#element');
    diagram.fitToPage({ mode: 'Width' });
    //diagram.tool = ej.diagrams.DiagramTools.ZoomPan;


    function onAddParent(e) {
        var id = e.id.split("_")[1];
        var parents = this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Parents;
        //if (parent == null) {
        //    this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Parents = [];
        //}
        //var newId = GenerateGuid();
        //this.diagram.dataSourceSettings.dataManager.dataSource.json.push({ "Id": newId, "Name": "Parent", "ComponentType": 10 });
        //this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Parents.push(newId);
        //var level = this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Level;
        //this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == newId).level = level - 1;
        //this.diagram.clear();
        //this.diagram.refresh();
        
        var nodes = this.diagram.dataSourceSettings.dataManager.dataSource.json.splice(1);
       
        var url = "/cms/ProcessDesign/ChooseParentNode?parents=" + JSON.stringify(parents) + "&nodes=" + JSON.stringify(nodes);
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Choose Parent', Width: 650, Height: 650 });
        return false;

    }

    function onAddChild() { }

    function onAddStep(e) {
        var id = e.id.split("_")[1];
        var newId = GenerateGuid();
        var level = this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Level;
        if (e.id.split("_")[0].includes("parent_")) {
            this.diagram.dataSourceSettings.dataManager.dataSource.json.push({ "Id": newId, "Name": "Step", "Parents": [id], "ComponentType": 4, "Level": level });
        } else {
            this.diagram.dataSourceSettings.dataManager.dataSource.json.push({ "Id": newId, "Name": "Step", "Parents": [id], "ComponentType": 4, "Level": level + 1 });
        }

        this.diagram.clear();
        this.diagram.refresh();

    }

    function onAddDecision(e) {
        var id = e.id.split("_")[1];
        var newId = GenerateGuid();
        var level = this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Level;
        this.diagram.dataSourceSettings.dataManager.dataSource.json.push({ "Id": newId, "Name": "True", "Parents": [id], "ComponentType": 8, "Level": level + 1 });
        newId = GenerateGuid();
        this.diagram.dataSourceSettings.dataManager.dataSource.json.push({ "Id": newId, "Name": "False", "Parents": [id], "ComponentType": 9, "Level": level + 1 });
        this.diagram.clear();
        this.diagram.refresh();

    }

    function onAddExecution(e) {
        var id = e.id.split("_")[1];
        var newId = GenerateGuid();
        var level = this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Level;
        this.diagram.dataSourceSettings.dataManager.dataSource.json.push({ "Id": newId, "Name": "Execution", "Parents": [id], "ComponentType": 7, "Level": level + 1 });
        this.diagram.clear();
        this.diagram.refresh();
    }

    function onStop(e) {
        var id = e.id.split("_")[1];
        var newId = GenerateGuid();
        var level = this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Level;
        this.diagram.dataSourceSettings.dataManager.dataSource.json.push({ "Id": newId, "Name": "Stop", "Parents": [id], "ComponentType": 2, "Level": level + 1 });
        this.diagram.clear();
        this.diagram.refresh();
    }
    $(document).ready(function () {
        //$('.dropdown-submenu a.test').on("click", function (e) {
        //    $(this).next('ul').toggle();
        //    e.stopPropagation();
        //    e.preventDefault();
        //});
    });

    function onSubMenu(e) {
        
        var id = e.id.split("_")[1];
        //document.getElementById(e.id).click();
        //e.stopPropagation();
        //e.preventDefault
        //$('#' + e.id).on("click", function (e) {
        //    $(this).next('ul').toggle();
        $("#task_child_" + id).append('<li><a href="#">' + id + '</a></li>');
        //    e.stopPropagation();
        //    e.preventDefault();
        //});
    }

    function addTask(e) {
        var id = e.id.split("_")[1];
        $("#task_child_" + id).append('<li><a id="step_' + id + '" href="#" onclick="onAddStep(this)">' + id + '</a></li>');
    }

    function onSetting(e) {
        var id = e.id.split("_")[1];
        var parents = this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Parents;
        var nodes = this.diagram.dataSourceSettings.dataManager.dataSource.json;
       
        var url = "/pjm/ProjectTimeline/Settings?id=" + id + "&nodes=" + JSON.stringify(nodes);
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: 'Settings', Width: 300, Height: 300 });
        return false;

    }

    function OnCloseSetting(res) {
        console.log(res);
        var newId = GenerateGuid();
        var id = res.parentId;
        
        if (res.type == "1") {
            //var newId = GenerateGuid();
            this.diagram.dataSourceSettings.dataManager.dataSource.json.push({ "Id": newId, "Name": res.tempName, "ComponentType": res.type, Level: res.level });
            var parent = this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Parents;
            if (parent == null) {
                this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Parents = [];
            }
            this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Parents.push(newId);
            var level = this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Level;
            this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == newId).level = level - 1;
        } else if (res.type == "2") {
            var level = this.diagram.dataSourceSettings.dataManager.dataSource.json.find(x => x.Id == id).Level;
            this.diagram.dataSourceSettings.dataManager.dataSource.json.push({ "Id": newId, "Name": res.tempName, "Parents": [id], "ComponentType": res.type, Level: res.level });
        } else if (res.type == "3") {
            this.diagram.dataSourceSettings.dataManager.dataSource.json.push({ "Id": newId, "Name": "Hanging", "ComponentType": res.type , Level: res.level });
        }
        this.diagram.clear();
        this.diagram.refresh();
    }
    var fullData;
    function onExpand(e) {
        var id = e.id.split("_")[1];
        var childrenId;
        var all = fullData = this.diagram.dataSourceSettings.dataManager.dataSource.json;
        for (var i = 0; i <= all.length; i++) {
            if (all[i].Parents != undefined) {
                var isChildren = all[i].Parents.find(x => x == id).length;
                if (isChildren > 0) {
                    childrenId.push(all[i].Id)
                }
            }
        }
        if (childrenId != undefined) {
            for (var i = 0; i <= childrenId.length; i++) {
                var node = all.find(x => x.Id != childrenId[i]);
                this.diagram.dataSourceSettings.dataManager.dataSource.json = [];
                this.diagram.dataSourceSettings.dataManager.dataSource.json.push(node);
            }
        }
        console.log(childrens);
    }
</script>