@inject IStringLocalizer<CMS.UI.Web.Areas.PJM.Controllers.ProjectController> Resource
@using CMS.Data.Model
@using CMS.UI.ViewModel
@using Kendo.Mvc.UI
@using CMS.Common

@model ProgramDashboardViewModel

@{
    /**/

    /**/
    // Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
    Layout = null;
    //Layout = "~/Views/Shared/_LayoutPopup.cshtml";
}
<style>
    .k-gantt .k-treelist .k-alt.k-state-selected, .k-gantt .k-treelist .k-alt.k-state-selected > td, .k-gantt .k-treelist .k-state-selected, .k-gantt .k-treelist .k-state-selected td {
        background-color: none !important;
    }

    .k-state-selected {
        color: #fff;
        background-color: #fd695e;
        border-color: #fd695e;
    }

    .k-task-single {
        background-color: #fd695e;
        border-color: #f58647;
        color: #fff;
        /* height: 25px; */
        text-align: center;
        /* vertical-align: middle; */
        /* padding: 3px; */
    }

    ::-webkit-scrollbar-thumb {
        border-radius: 0px !important;
        background-color: #d4d4d4 !important;
        background-image: none !important;
    }

    ::-webkit-scrollbar-track {
        -webkit-box-shadow: none !important;
        background-color: #fafafa;
        border-radius: 0px !important;
    }

    .k-gantt .k-treelist .k-alt {
        background-color: #ffffff;
    }

    .k-grid td {
        color: black !important;
        font-size: 14px !important;
        font-family: sans-serif;
    }

    .k-link {
        color: #28282b !important;
        font-size: 14px !important;
        font-family: sans-serif;
    }

    .k-gantt .k-grid-content tr, .k-gantt-rows tr, .k-gantt-tasks tr {
        height: 4.4em;
    }
    /*style the task template*/
    .k-task-template {
        height: 100%;
        padding: 0 !important;
    }

    .template {
        height: 100%;
        overflow: hidden;
    }

    .resource-img {
        float: left;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        margin: 8px;
    }

    .tree-list-img {
        float: left;
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    .wrapper {
        padding: 8px;
        color: #fff;
    }

    .k-task-template .wrapper > * {
        display: block;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .title {
        font-weight: bold;
        font-size: 13px;
    }

    .resource {
        text-transform: uppercase;
        font-size: 9px;
        margin-top: .5em;
    }

    .progress {
        position: absolute;
        left: 0;
        bottom: 0;
        width: 0%;
        height: 4px;
        background: rgba(0, 0, 0, .3);
    }

    .team-lead-name {
        display: inline-block;
        vertical-align: middle;
        line-height: 32px;
        padding-left: 3px;
    }
    /*center treelist cell content vertically*/
    .k-gantt .k-treelist td {
        vertical-align: middle;
    }

    /*hide the resource labels, as they are present in the task template*/
    .k-gantt .k-resource {
        display: none;
    }
    /* .k-reset {
        float:left;
        display:inline-flex;
        padding:10px;
    }*/
    .k-link {
        padding: 5px;
    }

    .k-gantt {
        display: inline-block;
    }

    #ProjectTimeLineGanttChart {
        width: 100%;
    }
    /*#ProjectFilter .k-reset {
        float: unset;
        display: unset;
        padding: unset;
    }*/
</style>
<script type="text/javascript">
    function OnTimelineView() {
        //alert("Timeline");
        $("#divtimelineview").show();
        $("#divgridview").hide();
        $("#ProjectTimeLineGanttChart").data("kendoGantt").dataSource.read();
    }
    function OnGridView() {
        //alert("Grid View");
        $("#divtimelineview").hide();
        $("#divgridview").show();
        GetWBSTLData();
        //$("#kgdProjectGridView").data("kendoGrid").dataSource.read();
    }
    function OnOpen(id) {
       // e.preventDefault();
      //  var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var portalId = $('#GlobalPortalId').val();
        // var prms = encodeURIComponent('parentServiceId=' + Id);
        var url = '/Cms/Page?lo=Popup&cbm=OnAfterTaskCreate&source=Edit&dataAction=Edit&pageName=ProjectTask&portalId=' + portalId + '&recordId=' + id;

        LoadCmsPartialView(url, 'Task', true, 1200, 650, '@Html.Raw(SharedResource["OpenTask"])');
        return false;

    }
</script>
<script>



    $(document).ready(function () {
        window.LoadPartailView1("/pjm/ProjectTask/ProjectDetailsFilter", 'ProjectFilter');
        var parentId = null;
        var ProjectId = null;
            var userType = null;
            OnGridView();
        $("#menu, #divmenu").mouseleave(function () {
            $("#menu").hide();
        });
        $("#stagemenu, #divstagemenu").mouseleave(function () {
            $("#stagemenu").hide();
        });

            $(".bt1").click(function (e) {
                var tasks = $("#ProjectTimeLineGanttChart").data("kendoGantt").dataSource.view();
                var shouldExpand = !tasks[0].expanded;
                for (i = 0; i < tasks.length; i++) {

                    tasks[i].set("expanded", shouldExpand)
                }
            })
        HideLoader($("#global-overlay"));
    });

    var columnDefs = [

        {
            field: "Id",
            headerName: "@SharedResource["Action"]",
            cellRenderer: params => {
                return "<div class='btn-group grid-menu' id='tree-menuWBSTL' data-idvalue='" + params.value + "'><i class='fas fa-ellipsis-v'></i></div>"
            }
        },
         {
            field: "Title",
            headerName:"@SharedResource["Subject"]"
        },
        {
            field: "OwnerName",
            headerName:"@SharedResource["From"]"
         },
        {
            field: "UserName",
            headerName:"@SharedResource["To"]"
         },
        {
            field: "ProjectName",
            headerName:"@SharedResource["Project"]"
        },
        {
            field: "ServiceStage",
            headerName:"@SharedResource["Stage"]"
        },
        {
            field: "Priority",
            headerName:"@SharedResource["Priority"]"
        },
        {
            field: "NtsStatus",
            headerName:"@SharedResource["Status"]"
        },
                {
            field: "Start",
            headerName: "@SharedResource["PlanStartDate"]",
            cellRenderer: params => {
                var date = new Date(params.value);
                var d = new Date(date),
                    month = '' + (d.getMonth() + 1),
                    day = '' + d.getDate(),
                    year = d.getFullYear(),
                    hr = '' + d.getHours(),
                    mins = '' + d.getMinutes();

                if (month.length < 2)
                    month = '0' + month;
                if (day.length < 2)
                    day = '0' + day;
                if (hr.length < 2)
                    hr = '0' + hr;
                if (mins.length < 2)
                    mins = '0' + mins;

                return [day, month, year].join('.') + " " + [hr, mins].join(':');
            }
        },
        {
            field: "End",
            headerName: "@SharedResource["PlanDueDate"]",
            cellRenderer: params => {
                var date = new Date(params.value);
                var d = new Date(date),
                    month = '' + (d.getMonth() + 1),
                    day = '' + d.getDate(),
                    year = d.getFullYear(),
                    hr = '' + d.getHours(),
                    mins = '' + d.getMinutes();

                if (month.length < 2)
                    month = '0' + month;
                if (day.length < 2)
                    day = '0' + day;
                if (hr.length < 2)
                    hr = '0' + hr;
                if (mins.length < 2)
                    mins = '0' + mins;

                return [day, month, year].join('.') + " " + [hr, mins].join(':');
            }
        },
        {
            field: "ActualStartDate",
            headerName: "@SharedResource["ActualStartDate"]",
            cellRenderer: params => {
                if (params.value != null && params.value != '') {
                    var date = new Date(params.value);
                    var d = new Date(date),
                        month = '' + (d.getMonth() + 1),
                        day = '' + d.getDate(),
                        year = d.getFullYear(),
                        hr = '' + d.getHours(),
                        mins = '' + d.getMinutes();

                    if (month.length < 2)
                        month = '0' + month;
                    if (day.length < 2)
                        day = '0' + day;
                    if (hr.length < 2)
                        hr = '0' + hr;
                    if (mins.length < 2)
                        mins = '0' + mins;

                    return [day, month, year].join('.') + " " + [hr, mins].join(':');
                } else {
                    return '';
                }
            }
        },
        {
            field: "ActualEndDate",
            headerName: "@SharedResource["ActualEndDate"]",
            cellRenderer: params => {
                if (params.value != null && params.value != '') {
                    var date = new Date(params.value);
                    var d = new Date(date),
                        month = '' + (d.getMonth() + 1),
                        day = '' + d.getDate(),
                        year = d.getFullYear(),
                        hr = '' + d.getHours(),
                        mins = '' + d.getMinutes();

                    if (month.length < 2)
                        month = '0' + month;
                    if (day.length < 2)
                        day = '0' + day;
                    if (hr.length < 2)
                        hr = '0' + hr;
                    if (mins.length < 2)
                        mins = '0' + mins;

                    return [day, month, year].join('.') + " " + [hr, mins].join(':');
                } else {
                    return '';
                }

            }
        },

    ];

    function GetWBSTLData(urlnew) {
        var url = "";
        if (urlnew != "" && urlnew != null) {
            url = urlnew;
        } else {
            url = "/PJM/Project/ReadProjectTaskGridViewData?projectId=" + '@Model.Id';

        }
        document.getElementById("kgdWBSTLGridView").innerHTML = "";
        gridConfig(
            "kgdWBSTLGridView",
            url,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }

    $(function () {

        $.contextMenu({
            selector: '#tree-menuWBSTL',
            trigger: 'left',
            build: function ($trigger, e) {

                var id = $trigger.data('idvalue');

                //var portalName = $trigger.data('portal-name');

                switch (0) {
                    case 0:
                        return {
                            callback: function (key, options) {
                                switch (key) {
                                    case 'view':
                                        OnOpen(id);
                                        break;

                                    default:
                                }
                            },
                            items: {
                                "view": { name: "View", icon: "fas fa-eye" },
                            }
                        };
                }
            }
        });

    });

    function OnStageMenuClick(e) {
        var command = $(e.item).attr('id');

        if (command == "CreateNewStage") {
            var portalId = $('#GlobalPortalId').val();
             $.ajax({
            url: '/pjm/projecttask/GetServiceSequenceOrder',
                type: 'GET',
                 data: { parentId: serviceId },
                success: function (res) {
                    var prms = encodeURIComponent('parentServiceId=' + serviceId +'&servicePlusId='+ProjectId+'&sequenceOrder='+res.count);

        var url = '/Cms/Page?lo=Popup&cbm=OnAfterCreate&source=Create&dataAction=Create&pageName=ProjectStage&portalId=' + portalId + '&prms=' + prms;
            LoadCmsPartialView(url, 'Service', true, 1000, 600, '@Html.Raw(SharedResource["CreateStage"])');
                }
            });
            @*var prms = encodeURIComponent('parentServiceId=' + serviceId);

            var url = '/Cms/Page?lo=Popup&cbm=OnAfterCreate&source=Create&dataAction=Create&pageName=ProjectStage&portalId=' + portalId + '&prms=' + prms;
            LoadCmsPartialView(url, 'Service', true, 1000, 600, '@Html.Raw(SharedResource["CreateStage"])');*@
        }
        $("#stagemenu").hide();
    }

    function OnTaskMenuClick(e) {
        var command = $(e.item).attr('id');

        if (command == "Open") {
            var portalId = $('#GlobalPortalId').val();
            var url = '/Cms/Page?lo=Popup&cbm=OnAfterTaskCreate&source=Versioning&dataAction=Edit&pageName=ProjectTask&portalId=' + portalId + '&recordId=' + taskId;
            LoadCmsPartialView(url, 'Task', true, 1200, 650, '@Html.Raw(SharedResource["EditTask"])');
        }
        else if (command == "SubTask") {
            var portalId = $('#GlobalPortalId').val();
              $.ajax({
                  url: '/pjm/projecttask/GetSubTaskSequenceOrder',
                type: 'GET',
                  data: { parentId: taskId },
                success: function (res) {
                    var prms = encodeURIComponent('parentServiceId=' + parentid + '&parentTaskId=' + taskId +'&servicePlusId='+ProjectId+'&sequenceOrder='+res.count);

         var url = '/Cms/Page?lo=Popup&cbm=OnAfterTaskCreate&source=Create&dataAction=Create&pageName=ProjectTask&portalId=' + portalId + '&prms=' + prms;
            LoadCmsPartialView(url, 'Task', true, 1200, 650, '@Html.Raw(SharedResource["CreateSubTask"])');

                }
            });
            //var prms = encodeURIComponent('parentServiceId=' + parentid + '&parentTaskId=' + taskId);

            @*if (userType == '@NtsUserTypeEnum.Assignee' || '@Model.TemplateUserType' == '@NtsUserTypeEnum.Owner') {

            }
            else {
                alert("Owner or assignee can create sub task");
            }*@
        }
        $("#menu").hide();
    }
    function OnAfterCreate(service) {
        $("#ProjectTimeLineGanttChart").data("kendoGantt").dataSource.read();
        //$("#kgdProjectGridView").data("kendoGrid").dataSource.read();
        GetWBSTLData();
    }
    function OnExcelMenuClick(e) {
        @*var command = $(e.item).attr('id');
             //
            if (command == "Open") {

             }
             else if (command == "SubTask") {

                 if (userType == '@NtsUserTypeEnum.Assignee' || '@Model.TemplateUserType' == '@NtsUserTypeEnum.Owner') {

                 }
                 else {
                        alert("Owner or assignee can create sub task");
                 }
             }
             $("#menu").hide();
        }*@
    }
        function OnDataBound(e) {

        }
        function onChange(e) {
            debugger;
            var gantt = e.sender;
            var selection = gantt.select();

            if (selection.length) {
                var dataItem = gantt.dataItem(selection);
                //alert(dataItem.ProjectId);
                ProjectId = dataItem.ProjectId;

                if (dataItem.Type == 'Task') {
                    menu = $("#menu");
                    menu1 = $("#stagemenu");
                    taskId = dataItem.Id;
                    parentid = dataItem.parentId;
                    console.log(event.pageY, event.pageX);
                    menu.css({ top: event.pageY + 100 });
                  //  menu.css({ top: event.pageY+100, left: event.pageX-300 });
                    menu.show();
                    menu1.hide();
                }
                else {
                    menu = $("#stagemenu");
                    menu1 = $("#menu");
                    serviceId = dataItem.Id;
                    console.log(event.pageY, event.pageX);
                    menu.css({ top: event.pageY +100});
                    //menu.css({ top: event.pageY+100, left: event.pageX-300 });
                    menu.show();
                    menu1.hide();
                }
            }
        }
    $("#CreateItem").click(function () {
        //alert("TaskCreate");
            var portalId = $('#GlobalPortalId').val();
            var prms = encodeURIComponent('parentServiceId=@Model.Id');
            var url = '/Cms/Page?lo=Popup&cbm=OnAfterTaskCreate&source=Create&dataAction=Create&pageName=ProjectTask&portalId=' + portalId + '&prms=' + prms;

            LoadCmsPartialView(url, 'Task', true, 1200, 650, '@Html.Raw(SharedResource["Create"])');
            return false;
            //iframeOpenUrl = url;
            //OpenIframePopup(1200, 1200, "Stage");


        });
        $("#CreateStage").click(function () {
            //var portalId = $('#GlobalPortalId').val();
            var prms = encodeURIComponent('parentServiceId=@Model.Id');
           // var url = '/Cms/Page?source=Create&dataAction=Create&pageName=Project&portalId=' + portalId;

           // LoadCmsPartialView(url, 'Service');

            var portalId = $('#GlobalPortalId').val();
            //var prms = encodeURIComponent('parentServiceId=123&parentTaskId=223');

            var url = '/Cms/Page?lo=Popup&cbm=OnAfterServiceCreate&source=Create&dataAction=Create&pageName=ProjectStage&portalId=' + portalId + '&prms=' + prms;
            LoadCmsPartialView(url, 'Service', true, 1200, 650, '@Html.Raw(SharedResource["Create"])');
            return false;

        });
        //$(document).on('click', function (e) {
        //    if ($(e.target).closest("#menu").length === 0 && $(e.target).closest(".hr-org-menu").length === 0) {
        //        $("#menu").hide();
        //    }
        //});
    function OnAfterTaskCreate(service) {
        //alert("Task Created");
        onSearch();
    }
    function OnAfterServiceCreate(service) {
        onSearch();
    }
    function onSearch() {
        //var search = {
        //    projectIds: $("#ProjectFiltersIds").data("kendoMultiSelect").value(),
        //    recieverids: $("#Receiver").data("kendoMultiSelect").value(),
        //    senderIds: $("#Sender").data("kendoMultiSelect").value(),
        //    statusIds: $("#Status").data("kendoMultiSelect").value(),
        //    column: $("#Column").data("kendoDropDownList").value(),
        //    dateRange: $("#DateType").data("kendoDropDownList").value(),
        //    fromDate: kendo.toString($("#FromDate").data("kendoDatePicker").value(), 'yyyy/MM/dd'),
        //    toDate: kendo.toString($("#ToDate").data("kendoDatePicker").value(), 'yyyy/MM/dd'),
        //};
        //$("#kgdProjectGridView").data("kendoGrid").dataSource.read(search);
        var projectIds= $("#ProjectFiltersIds").data("kendoMultiSelect").value()
        var recieverids= $("#Receiver").data("kendoMultiSelect").value();
        var senderIds = $("#Sender").data("kendoMultiSelect").value();
        var statusIds= $("#Status").data("kendoMultiSelect").value();
        var column = $("#Column").data("kendoDropDownList").value();
        var dateRange = $("#DateType").data("kendoDropDownList").value();
        var fromDate = kendo.toString($("#FromDate").data("kendoDatePicker").value(), 'yyyy/MM/dd');
        var toDate = kendo.toString($("#ToDate").data("kendoDatePicker").value(), 'yyyy/MM/dd');

        var newurl = "/PJM/Project/ReadProjectTaskGridViewData?projectId=" + '@Model.Id' + "&projectIds=" + projectIds + "&recieverids=" + recieverids + "&senderIds=" + senderIds + "&statusIds=" + statusIds + "&column=" + column + "&dateRange=" + dateRange + "&fromDate=" + fromDate + "&toDate=" + toDate;
        GetWBSTLData(newurl);
       // $("#ProjectTimeLineGanttChart").data("kendoGantt").dataSource.read(search);

        $("#ProjectTimeLineGanttChart").data("kendoGantt").dataSource.read();
        HideLoader($("#global-overlay"));
    }
    function onReset() {
        window.parent.LoadPartailView1("/pjm/ProjectTask/ProjectDetailsFilter", 'ProjectFilter');
        GetWBSTLData();
        HideLoader($("#global-overlay"));
        //$("#kgdProjectGridView").data("kendoGrid").dataSource.read();
        $("#ProjectTimeLineGanttChart").data("kendoGantt").dataSource.read();
    }
</script>
<script type="text/x-kendo-tmpl" id="title">
    <div>#=Start#</div>
</script>
<script type="text/x-kendo-tmpl" id="daytitle">
    <div>#=Start# </div>
</script>

<script id="task-template" type="text/x-kendo-template">

    <div class="template">
         @*<img class="resource-img" src='/General/File/PersonPhoto?fileId=#:data.PhotoId#' onerror="OnPhotoError(this,'#:data.UserName#');" />*@
        <div class="wrapper">
            <strong class="title">#= title # </strong>
            <span class="resource">#= UserName #</span>
        </div>
    </div>

</script>
@*<script id="column-template" type="text/x-kendo-template">

        <span class="team-lead-name">#= Title #</span>
    </script>*@
<div id="ProjectFilter">

</div>
<div style="margin:20px;">
    <br />
    @* @if (Model.TemplateUserType == NtsUserTypeEnum.Owner)*@

    <div class="row" style="padding-right:10px;">
        <div class="col-md-8" style="text-align: left;">
            @if (Model.Id != null)
            {
            <div>
                <input class="k-button bt1" type="button" value="@Resource["Expand/Collapse"]"></input>&nbsp;
                <button class="k-button k-primary" id="CreateItem">@SharedResource["CreateTask"]</button>&nbsp;
                <button class="k-button k-primary" id="CreateStage">@SharedResource["CreateStage"]</button>
            </div>
                }
        </div>
        <div class="col-md-4" style="text-align: right;">

            <a href="javascript: void(0); onclick=OnGridView()" class="btn btn-sm btn-primary" title="@Resource["GridView"]"><i class="fas fa-list-alt fa-1x"></i></a>
            <a href="javascript: void(0); onclick=OnTimelineView()" class="btn btn-sm btn-primary" title="@Resource["TimelineView"]"><i class="fas fa-line-columns fa-1x"></i></a>
            &nbsp;&nbsp;&nbsp;
        </div>
    </div>

    <br />
    <div class="row" id="divtimelineview">
        <div class="col-sm-12">
            @(Html.Kendo().Gantt<ProjectGanttTaskViewModel, Cms.UI.ViewModel.DependencyViewModel>()
            .Name("ProjectTimeLineGanttChart")
            .Columns(columns =>
            {
                columns.Bound(c=>c.Title).Title(@SharedResource["Subject"]).Width(200);
                //columns.Bound(c=>c.Start).Title(@SharedResource["ReceivedDate"]).Format(ApplicationConstant.DateAndTime.DefaultDateTimeFormat).Width(100);
                //columns.Bound(c => c.OwnerName).Title(@SharedResource["Owner"]).Width(150);
                columns.Bound(c => c.UserName).Title(@SharedResource["Assignee"]).Width(150);
                columns.Bound(c => c.Priority).Title(@SharedResource["Priority"]).Width(150);
                columns.Bound(c => c.NtsStatus).Title(@Resource["TaskStatus"]).Width(150);
                columns.Bound(c => c.PlannedStart).Editable(true).Title(@SharedResource["PlanStartDate"]).Format(ApplicationConstant.DateAndTime.DefaultDateTimeFormat).Width(150);
                columns.Bound(c => c.PlannedEnd).Editable(true).Title(@SharedResource["PlanDueDate"]).Format(ApplicationConstant.DateAndTime.DefaultDateTimeFormat).Width(150);
                columns.Bound(c => c.ActualStartDate).Editable(true).Title(@SharedResource["ActualStartDate"]).Format(ApplicationConstant.DateAndTime.DefaultDateTimeFormat).Width(150);
                columns.Bound(c => c.ActualEndDate).Editable(true).Title(@SharedResource["ActualEndDate"]).Format(ApplicationConstant.DateAndTime.DefaultDateTimeFormat).Width(150);
                //columns.Bound("start").Title("Start Time").Format("{0:MM/dd/yyyy}").Width(100).Editable(true).Sortable(true);
                //columns.Bound("end").Title("End Time").Format("{0:MM/dd/yyyy}").Width(100).Editable(true).Sortable(true);
            })
            .Views(views =>
            {
                views.DayView();
                views.WeekView(weekView => weekView.Selected(true));
                views.MonthView();
            })
            .ShowPlannedTasks(true)
            .Events(events => events.Change("onChange"))
            //.Filterable(true)
            //.Reorderable(true)
            .Height(700)

            .ShowWorkHours(false)
            .ShowWorkDays(false)
            .Snap(false)
            .Resizable(true)
            .TaskTemplateId("task-template")
            //.Editable(editable => editable.Move(true))
            .Editable(false)
            .ShowWorkHours(false)
            .ShowWorkDays(false)
            .Snap(false)
            .Selectable(true)
            .DataSource(d => d
            .Model(m =>
            {
                m.Id(f => f.Id);
                //m.ProjectName(f => f.ProjectName);
                m.ParentId(f => f.ParentId);
                //m.OrderId(f => f.OrderId);
                m.Field(f => f.Expanded).DefaultValue(true);
            })
            //.Group(group => group.Add("UserName", typeof(string), System.ComponentModel.ListSortDirection.Descending))
            .Read("ReadWBSTimelineGanttChartData", "Project",new { @area = "PJM", projectId = Model.Id }) @*projectId = Model.Id, userIds = Model.UserIds,
                taskGroupIds = Model.TaskGroupIds, sd = Model.SDate, ed = Model.EDate})*@
            //.Destroy("Destroy_Task", "Gantt")
            //.Update(update => update.Action("Update_Task", "Gantt").Data("onUpdateCreate"))
            //.Create(create => create.Action("Create_Task", "Gantt").Data("onUpdateCreate"))
            )
            //.DependenciesDataSource(d => d
            //.Model(m =>
            //{
            //    m.Id(f => f.DependencyID);
            //    m.PredecessorId(f => f.PredecessorID);
            //    m.SuccessorId(f => f.SuccessorID);
            //    m.Type(f => f.Type);
            //})
            //.Read("ReadWBSTimelineGanttDependencyData", "Project", new { @area = "PJM" })
            //)
            )

        </div>
    </div>
    <div id="divgridview" class="row">
        <div class="col-sm-12">

            <div id="kgdWBSTLGridView" style="width:100%;height:550px" class="ag-theme-alpine"></div>

            @*@(Html.Kendo().Grid<ProjectGanttTaskViewModel>()
    .Name("kgdWBSTLGridView")
    .Columns(columns =>
    {
        //        columns.Select().Width(75).HtmlAttributes(new { @class = "checkbox-align" }).HeaderHtmlAttributes(new { @class = "checkbox-align" });
        columns.Command(command =>
        {
            command.Custom("open").Text("<i class='fa fas fa-eye' title='Open'></i>").Click("OnOpen").HtmlAttributes(new { @class = "action-icon" });
            //command.Custom("addtask").Text("<i class='fa fa-plus' title='Add Task'></i>").Click("OnEditJobDesc").HtmlAttributes(new { @class = "action-icon" });
            //command.Custom("addStage").Text("<i class='fa fa-plus' title='View Job Description Request'></i>").Click("OnViewJobDesc").HtmlAttributes(new { @class = "action-icon" });
        }).Width(150).Title(SharedResource["Action"]);
        columns.Bound(p => p.Title).Title(@SharedResource["Subject"]).Width(300);
        columns.Bound(p => p.OwnerName).Title(@SharedResource["From"]).Width(200);
        columns.Bound(p => p.UserName).Title(@SharedResource["To"]).Width(200);
        columns.Bound(p => p.Start).Title(@SharedResource["ReceivedDate"]).Format("{0:dd MMM yyyy}").Width(160);
        columns.Bound(p => p.ProjectName).Title(@SharedResource["Project"]).Width(250);
        columns.Bound(p => p.ServiceStage).Title(@SharedResource["Stage"]).Width(250);
        columns.Bound(p => p.End).Title(@SharedResource["DueDate"]).Format("{0:dd MMM yyyy}").Width(150);
        columns.Bound(p => p.Priority).Title(@SharedResource["Priority"]).Width(200);
        columns.Bound(p => p.NtsStatus).Title(@Resource["NtsStatus"]).Width(200);


    })
    .ToolBar(toolbar =>
    {
        //toolbar.Excel();
        //toolbar.Pdf();
        toolbar.Search().Text(@SharedResource["Search"]);
    })
    //.Pdf(pdf=>pdf.ProxyURL(Url.Action("Excel_Export_Save", "Grid")))
    //.Excel(excel=>excel.ProxyURL(Url.Action("Excel_Export_Save", "Grid")))
    .ColumnMenu(col=>col.Filterable(false))
    .Height(700)
    .Editable()
    .Pageable()
    .Sortable()
    .Navigatable()
    .Resizable(r=>r.Columns(true))
    .Reorderable(r => r.Columns(true))
    .Groupable(g=>g.ShowFooter(false))
    .Filterable()
    .Scrollable()
    //.Events(events => events.DataBound("onDataBound"))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .PageSize(20)
        .AutoSync(true)
        .ServerOperation(false)
        //.Events(events => events.Error("error_handler"))
        .Model(model =>
        {
            model.Id(p => p.Id);

        })
        //.Group(group=>group.Add("Category.CategoryName", typeof(string), ListSortDirection.Descending))
        //.Create("DetailProducts_Create", "Grid")
        .Read("ReadProjectTaskGridViewData", "Project", new { @area = "PJM", projectId = Model.Id })

    //.Update("DetailProducts_Update", "Grid")
    //.Destroy("DetailProducts_Destroy", "Grid")
    )
)*@

        </div>
    </div>
</div>
<div id="divmenu">
    @(Html.Kendo().Menu()
                .Name("menu")
                .Orientation(MenuOrientation.Vertical)
                .Events(e => e.Select("OnTaskMenuClick"))
                .HtmlAttributes(new { @class = "dropdown-menu", @style="width:auto;" })
                .Items(items =>
                {
                items.Add().Text(@SharedResource["Open"]).HtmlAttributes(new { @id = "Open" });
                items.Add().Text(@SharedResource["CreateSubTask"]).HtmlAttributes(new { @id = "SubTask" });

                })
        )
</div>
<div id="divstagemenu">
    @(Html.Kendo().Menu()
                .Name("stagemenu")
                .Orientation(MenuOrientation.Vertical)
                .Events(e => e.Select("OnStageMenuClick"))
                .HtmlAttributes(new { @class = "dropdown-menu", @style="width:auto;" })
                .Items(items =>
                {
                //items.Add().Text(@SharedResource["Open"]).HtmlAttributes(new { @id = "OpenStage" });
                items.Add().Text(@SharedResource["CreateStage"]).HtmlAttributes(new { @id = "CreateNewStage" });
                })
        )
</div>
@*<div id="divmenu">
        @(Html.Kendo().Menu()
                .Name("menu")
                .Orientation(MenuOrientation.Vertical)
                .Events(e => e.Select("OnExcelMenuClick"))
                .HtmlAttributes(new { @class = "dropdown-menu" })
                .Items(items =>
                {
                items.Add().Text("Open").HtmlAttributes(new { @id = "Open" });
                items.Add().Text("Create Sub Task").HtmlAttributes(new { @id = "SubTask" });

                })
        )
    </div>*@

