@inject IStringLocalizer<CMS.UI.Web.Areas.PJM.Controllers.ProjectController> Resource
@using CMS.Data.Model
@using CMS.UI.ViewModel
@using Kendo.Mvc.UI
@using CMS.Common

@model ProjectDashboardViewModel;

@{
    ViewBag.Title = "Project Dashboard";
    //Layout = "~/Areas/CMS/Views/Shared/_LayoutCms.cshtml";
    Layout = null;
}

<style>
    .panel-heading {
        font-size: 1.3em;
        cursor: pointer;
        padding-top: 7px !important;
        padding-bottom: 7px !important;
    }

    .k-listview {
        border: none !important;
    }

    .project-property {
        width: 100px;
        padding: 3px;
    }

    .panel {
        margin-top: 10px;
        border-color: #ddd;
        margin-bottom: 20px;
        background-color: #fff;
        border: 1px solid transparent;
        border-radius: 4px;
        -webkit-box-shadow: 0 1px 1px rgb(0 0 0 / 5%);
        box-shadow: 0 1px 1px rgb(0 0 0 / 5%);
    }

    .panel-heading:hover {
        background-color: #f1f1f1;
    }

    .panel-success {
        border-color: #d6e9c6;
    }

        .panel-success > .panel-heading {
            color: #468847;
            background-color: #dff0d8;
            border-color: #d6e9c6;
        }

    .panel-info {
        border-color: #bce8f1;
    }

        .panel-info > .panel-heading {
            color: #3a87ad;
            background-color: #d9edf7;
            border-color: #bce8f1;
        }

    .panel-warning {
        border-color: #fbeed5;
    }

        .panel-warning > .panel-heading {
            color: #c09853;
            background-color: #fcf8e3;
            border-color: #fbeed5;
        }

    .panel-primary {
        border-color: #428bca;
    }

        .panel-primary > .panel-heading {
            color: #fff;
            background-color: #428bca;
            border-color: #428bca;
        }

    .panel-filter {
        border-color: #428bca;
    }

        .panel-filter > .panel-heading {
            color: #1a3750;
            background-color: #428bca;
            border-color: #428bca;
        }

    .btn-filter-reset {
        color: #fff;
        background-color: #428bca;
        border-color: #428bca;
    }
</style>
<script>

     function onTaskSeriesClick(e) {

        //alert("onTaskSeriesClick");
        //console.log(e.dataItem);
        var selectvalue = e.dataItem.Id;
        var multiselect = $("#mdlTaskStatus").data("kendoMultiSelect");
        var mdlvalue = multiselect.value();
        var newvalue = new Array();
        newvalue = mdlvalue;
        var addflag = true;
        if (newvalue.length > 0) {
            var i = 0;
            for (i = 0; i < newvalue.length;i++) {
                if (newvalue[i] == selectvalue) {
                    addflag = false;
                }
            }
            if (addflag) {
                newvalue.push(selectvalue);
            }
        } else {
            newvalue.push(selectvalue);
        }
        multiselect.value(newvalue);

        var multiselectTaskAssigned = $("#mdlTaskAssigned").data("kendoMultiSelect");
        var assignedvalue = multiselectTaskAssigned.value();
        var multiselectTaskStages = $("#mdlTaskStages").data("kendoMultiSelect");
        var stagevalue = multiselectTaskStages.value();

        var search = {
            statusIds: newvalue,
            projectIds: stagevalue,
            recieverids: assignedvalue,
        };

        var newurl = "/PJM/Project/ReadProjectTaskGridViewData?projectId=" + '@Model.Id' + "&statusIds=" + newvalue + "&projectIds=" + stagevalue + "&recieverids=" + assignedvalue;
        GetDashboardData(newurl);
        //$("#kgdProjectGridView").data("kendoGrid").dataSource.read(search);


        //var g = $("#kgdProjectGridView").data("kendoGrid");
        //console.log(g);
        //g.dataSource.group({ field: "NtsStatus" });
       //alert("\n category : " + e.category + "\n value : " + e.dataItem.Code);
        //window.lModelcation.href = "/pmt/pmthome/tasks?taskStatus=" + e.dataItem.Code;
    }

    function onTaskAssignedSeriesClick(e) {

        //alert("onTaskSeriesClick");
        //console.log(e.dataItem);
        var selectvalue = e.dataItem.Id;
        var multiselect = $("#mdlTaskAssigned").data("kendoMultiSelect");
        var mdlvalue = multiselect.value();
        var newvalue = new Array();
        newvalue = mdlvalue;
        var addflag = true;
        if (newvalue.length > 0) {
            var i = 0;
            for (i = 0; i < newvalue.length; i++) {
                if (newvalue[i] == selectvalue) {
                    addflag = false;
                }
            }
            if (addflag) {
                newvalue.push(selectvalue);
            }
        } else {
            newvalue.push(selectvalue);
        }
        multiselect.value(newvalue);

        var multiselectTaskStatus = $("#mdlTaskStatus").data("kendoMultiSelect");
        var statusvalue = multiselectTaskStatus.value();
        var multiselectTaskStages = $("#mdlTaskStages").data("kendoMultiSelect");
        var stagevalue = multiselectTaskStages.value();

        var search = {
            statusIds: statusvalue,
            projectIds: stagevalue,
            recieverids: newvalue,
        };
        var newurl = "/PJM/Project/ReadProjectTaskGridViewData?projectId=" + '@Model.Id' + "&statusIds=" + statusvalue + "&projectIds=" + stagevalue + "&recieverids=" + newvalue;
        GetDashboardData(newurl);
        //$("#kgdProjectGridView").data("kendoGrid").dataSource.read(search);

        //var g = $("#kgdProjectGridView").data("kendoGrid");
        //console.log(g);
        //g.dataSource.group({ field: "UserName" });
    }
    function onTaskStagesSeriesClick(e) {

        //alert("onTaskSeriesClick");
        //console.log(e.dataItem);
        var selectvalue = e.dataItem.Id;
        var multiselect = $("#mdlTaskStages").data("kendoMultiSelect");
        var mdlvalue = multiselect.value();
        var newvalue = new Array();
        newvalue = mdlvalue;
        var addflag = true;
        if (newvalue.length > 0) {
            var i = 0;
            for (i = 0; i < newvalue.length; i++) {
                if (newvalue[i] == selectvalue) {
                    addflag = false;
                }
            }
            if (addflag) {
                newvalue.push(selectvalue);
            }
        } else {
            newvalue.push(selectvalue);
        }
        multiselect.value(newvalue);
        var multiselectTaskStatus = $("#mdlTaskStatus").data("kendoMultiSelect");
        var statusvalue = multiselectTaskStatus.value();
        var multiselectTaskAssigned = $("#mdlTaskAssigned").data("kendoMultiSelect");
        var assignedvalue = multiselectTaskAssigned.value();

        var search = {
            projectId: '@Model.Id',
            projectIds: newvalue,
            statusIds: statusvalue,
            recieverids: assignedvalue,
        };
        var newurl = "/PJM/Project/ReadProjectTaskGridViewData?projectId=" + '@Model.Id' + "&statusIds=" + statusvalue + "&projectIds=" + newvalue + "&recieverids=" + assignedvalue;
        GetDashboardData(newurl);
        //$("#kgdProjectGridView").data("kendoGrid").dataSource.read(search);


        //var g = $("#kgdProjectGridView").data("kendoGrid");
        //console.log(g);
        //g.dataSource.group({ field: "ServiceStage" });
    }




    var loaded = false;
    $(document).ready(function () {
        if (!loaded)
        {
            GetDashboardData();
            HideLoader($("#global-overlay"));
            loaded = true;
        }
        $("#mdlTaskStatus").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Id",
            autoBind: true,
            autoClose: false,
            change: onChangeTaskStatus,
            dataSource: {
                transport: {
                    read: {
                        url: "@Url.Action("GetLOVIdNameList", "LOV", new { area = "CMS", lovType = "LOV_TASK_STATUS" })",
                    }
                }
            }
        });

        $("#mdlTaskAssigned").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Id",
            autoBind: true,
            autoClose: false,
            change: onChangeTaskAssigned,
            dataSource: {
                transport: {
                    read: {
                        url: "@Url.Action("GetProjectUserIdNameList", "Project", new { area = "PJM", projectId = Model.Id })",
                    }
                }
            }
        });

        $("#mdlTaskStages").kendoMultiSelect({
            dataTextField: "Name",
            dataValueField: "Id",
            autoBind: true,
            autoClose: false,
            change: onChangeTaskStages,
            dataSource: {
                transport: {
                    read: {
                        url: "@Url.Action("GetProjectStageIdNameList", "Project", new { area = "PJM", projectId = Model.Id })",
                    }
                }
            }
        });
    });

    var columnDefs = [
         @*{
            field: "Title",
            headerName:"@Resource["TaskName"]"
        },*@
        {
            headerName: "@Resource["TaskName"]", field: "Title",
            cellRenderer: params => {
                return "<a style='cursor:pointer;color:blue;' href='javascript:OpenTask(\"" + params.data.Id + "\",\"" + params.data.TemplateMasterCode + "\");'>" + params.value + " </a>";;
            }
        },
        {
            field: "ServiceStage",
            headerName:"@Resource["ServiceStage"]"
         },
        {
            field: "ProjectName",
            headerName:"@Resource["ProjectName"]"
         },
        {
            field: "UserName",
            headerName:"Task Assignee"
        },
         {
            field: "OwnerName",
            headerName:"Task Owner"
         },
        {
            field: "Priority",
            headerName:"@SharedResource["Priority"]"
        },
        {
            field: "NtsStatus",
            headerName:"@Resource["NtsStatus"]"
        },
        {
            field: "Start",
            headerName: "@SharedResource["PlanStartDate"]",
            cellRenderer: params => {
                var date = new Date(params.value);
                var d = new Date(date),
                    month = '' + (d.getMonth() + 1),
                    day = '' + d.getDate(),
                    year = d.getFullYear(),
                    hr = '' + d.getHours(),
                    mins = '' + d.getMinutes();

                if (month.length < 2)
                    month = '0' + month;
                if (day.length < 2)
                    day = '0' + day;
                if (hr.length < 2)
                    hr = '0' + hr;
                if (mins.length < 2)
                    mins = '0' + mins;

                return [day, month, year].join('.') + " " + [hr, mins].join(':');
            }
        },
        {
            field: "End",
            headerName: "@SharedResource["PlanDueDate"]",
            cellRenderer: params => {
                var date = new Date(params.value);
                var d = new Date(date),
                    month = '' + (d.getMonth() + 1),
                    day = '' + d.getDate(),
                    year = d.getFullYear(),
                    hr = '' + d.getHours(),
                    mins = '' + d.getMinutes();

                if (month.length < 2)
                    month = '0' + month;
                if (day.length < 2)
                    day = '0' + day;
                if (hr.length < 2)
                    hr = '0' + hr;
                if (mins.length < 2)
                    mins = '0' + mins;

                return [day, month, year].join('.') + " " + [hr, mins].join(':');
            }
        },
                {
            field: "ActualStartDate",
            headerName: "@SharedResource["ActualStartDate"]",
                    cellRenderer: params => {
                        if (params.value != null && params.value != '') {
                            var date = new Date(params.value);
                            var d = new Date(date),
                                month = '' + (d.getMonth() + 1),
                                day = '' + d.getDate(),
                                year = d.getFullYear(),
                                hr = '' + d.getHours(),
                                mins = '' + d.getMinutes();

                            if (month.length < 2)
                                month = '0' + month;
                            if (day.length < 2)
                                day = '0' + day;
                            if (hr.length < 2)
                                hr = '0' + hr;
                            if (mins.length < 2)
                                mins = '0' + mins;

                            return [day, month, year].join('.') + " " + [hr, mins].join(':');
                        } else {
                            return '';
                        }

            }
        },
                {
            field: "ActualEndDate",
            headerName: "@SharedResource["ActualEndDate"]",
                    cellRenderer: params => {
                        if (params.value != null && params.value != '') {
                            var date = new Date(params.value);
                            var d = new Date(date),
                                month = '' + (d.getMonth() + 1),
                                day = '' + d.getDate(),
                                year = d.getFullYear(),
                                hr = '' + d.getHours(),
                                mins = '' + d.getMinutes();

                            if (month.length < 2)
                                month = '0' + month;
                            if (day.length < 2)
                                day = '0' + day;
                            if (hr.length < 2)
                                hr = '0' + hr;
                            if (mins.length < 2)
                                mins = '0' + mins;

                            return [day, month, year].join('.') + " " + [hr, mins].join(':');
                        } else {
                            return '';
                        }

            }
        },

    ];

    function OnAfterTaskCreate() {
        //$("#BusinessTripGridView").data("kendoGrid").dataSource.read();
        GetDashboardData();
    }
     function OpenTask(taskId, templateCode) {

        var portalId = $('#GlobalPortalId').val();
         var url = '/Cms/Page?lo=Popup&pageType=Task&source=View&dataAction=View&templateCodes=' + templateCode + '&portalId=' + portalId + '&recordId=' + taskId;
        // var url = '/Cms/Page?lo=Popup&popup=true&cbm=OnAfterTaskCreate&source=View&dataAction=View&templateCodes=PMS_GOAL_ADHOC_TASK&portalId=' + portalId + '&recordId=' + Id;
        //var url = '/Cms/Page?lo=Popup&pageType=Task&source=Versioning&dataAction=Edit&templateCodes=' + templateCode + '&portalId=' + portalId + '&recordId=' + taskId;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: '@Html.Raw(Resource["ViewTask"])', Width: 1000, Height: 600, Position: 'Right1' });
        return false;
    }
    function GetDashboardData(urlnew) {
        var url = "";
        if (urlnew != "" && urlnew != null) {
            url = urlnew;
        } else {
            url = "/PJM/Project/ReadProjectTaskGridViewData?projectId=@Model.Id";

        }
        debugger;
        document.getElementById("kgdProjectGridView").innerHTML = "";
        gridConfig(
            "kgdProjectGridView",
            url,
            columnDefs,
            false,
            true,
            true,
            true,
            1,
            true,
            10);
    }



    function GOWBS() {

        window.parent.LoadPartailView1("/pjm/ProjectTask/Index?ProjectId=@Model.Id&pageName=WorkBreakDownStructure", 'cms-content');
        AddBreadCrumb({ Text: 'Work BreakDown Structure', Name: 'WorkBreakDownStructure', Url: '/pjm/ProjectTask/Index?ProjectId=@Model.Id&pageName=WorkBreakDownStructure', PageType: 'Custom', LoadType: 'PartialView', IsNotClickable: false, IsClickDisabled: true }, true, 'Project Dashboard');

        //window.location.href = "/pmt/pmthome/WorkBreakdownStructure";
        @*/pmt/pmthome/tasks?projectId=@Model.Id";*@
        //alert("GOWBS");
    }


    //function OnProjectChange(id) {
    //    //alert("OnProjectChange");
    //    //window.location.href = "/pmt/projectdashboard?projectId=" + id;
    //}

    //function AddTask() {
    //    //alert("AddTask");

    //}


    function onChangeTaskStatus() {
        var multiselectTaskStatus = $("#mdlTaskStatus").data("kendoMultiSelect");
        var statusvalue = multiselectTaskStatus.value();
        var multiselectTaskAssigned = $("#mdlTaskAssigned").data("kendoMultiSelect");
        var assignedvalue = multiselectTaskAssigned.value();
        var multiselectTaskStages = $("#mdlTaskStages").data("kendoMultiSelect");
        var stagevalue = multiselectTaskStages.value();
        var search = {
            projectId: '@Model.Id',
            projectIds: stagevalue,
            statusIds: statusvalue,
            recieverids: assignedvalue,
        }; debugger;
        //refreshGrid(search);
        var newurl = "/PJM/Project/ReadProjectTaskGridViewData?projectId=" + '@Model.Id' + "&statusIds=" + statusvalue + "&projectIds=" + stagevalue + "&recieverids=" + assignedvalue;
        GetDashboardData(newurl);
        //$("#kgdProjectGridView").data("kendoGrid").dataSource.read(search);

    }
    function onChangeTaskAssigned() {
        var multiselectTaskStatus = $("#mdlTaskStatus").data("kendoMultiSelect");
        var statusvalue = multiselectTaskStatus.value();
        var multiselectTaskAssigned = $("#mdlTaskAssigned").data("kendoMultiSelect");
        var assignedvalue = multiselectTaskAssigned.value();
        var multiselectTaskStages = $("#mdlTaskStages").data("kendoMultiSelect");
        var stagevalue = multiselectTaskStages.value();
        var search = {
            projectId: '@Model.Id',
            projectIds: stagevalue,
            statusIds: statusvalue,
            recieverids: assignedvalue,
        };
        var newurl = "/PJM/Project/ReadProjectTaskGridViewData?projectId=" + '@Model.Id' + "&statusIds=" + statusvalue + "&projectIds=" + stagevalue + "&recieverids=" + assignedvalue;
        GetDashboardData(newurl);
        //$("#kgdProjectGridView").data("kendoGrid").dataSource.read(search);

    }
    function onChangeTaskStages() {
        var multiselectTaskStatus = $("#mdlTaskStatus").data("kendoMultiSelect");
        var statusvalue = multiselectTaskStatus.value();
        var multiselectTaskAssigned = $("#mdlTaskAssigned").data("kendoMultiSelect");
        var assignedvalue = multiselectTaskAssigned.value();
        var multiselectTaskStages = $("#mdlTaskStages").data("kendoMultiSelect");
        var stagevalue = multiselectTaskStages.value();
        var search = {
            projectId: '@Model.Id',
            projectIds: stagevalue,
            statusIds: statusvalue,
            recieverids: assignedvalue,
        };
        var newurl = "/PJM/Project/ReadProjectTaskGridViewData?projectId=" + '@Model.Id' + "&statusIds=" + statusvalue + "&projectIds=" + stagevalue + "&recieverids=" + assignedvalue;
        GetDashboardData(newurl);
        //$("#kgdProjectGridView").data("kendoGrid").dataSource.read(search);

    }
    function OnDataBound(arg) {

        document.getElementById('projectFiles').style.border = 'none';
        var data = $("#projectFiles").data("kendoListView").dataSource.data();
        var data1 = $("#ProjectTask12").data("kendoListView").dataSource.data();
        if (data.length == 0) {
            $('#no-data-file').show();
        } else {
            $('#no-data-file').hide();
        }
        if (data1.length == 0) {
            $('#no-data-notifi').show();
        } else {
            $('#no-data-notifi').hide();
        }
    }

    function OnTaskAssChartDataBound(e) {
        var view = e.sender.dataSource.view();
        if (view.length === 0) {
            $('#no-data-taskchart').show();

        } else {
            $('#no-data-taskchart').hide();
        }
    }

    function OnTaskStatusChartDataBound(e) {
        var view = e.sender.dataSource.view();
        if (view.length === 0) {
            $('#no-data-chart').show();

        } else {
            $('#no-data-chart').hide();
        }
    }

    function OnTaskTimeChartDataBound(e) {
        var view = e.sender.dataSource.view();
        if (view.length === 0) {
            $('#no-data-timechart').show();

        } else {
            $('#no-data-timechart').hide();
        }
    }
    function OnProjectStageChartDataBound(e) {
        var view = e.sender.dataSource.view();
        if (view.length === 0) {
            $('#no-data-stagechart').show();

        } else {
            $('#no-data-stagechart').hide();
        }
    }
    function onFilterReset() {
        var newvalue = new Array();
        var multiselectTaskStatus = $("#mdlTaskStatus").data("kendoMultiSelect");
        multiselectTaskStatus.value(newvalue);
        var multiselectTaskAssigned = $("#mdlTaskAssigned").data("kendoMultiSelect");
        multiselectTaskAssigned.value(newvalue);
        var multiselectTaskStages = $("#mdlTaskStages").data("kendoMultiSelect");
        multiselectTaskStages.value(newvalue);
        var search = {
            projectId: '@Model.Id',
        };
        //var newurl = "/PJM/Project/ReadProjectTaskGridViewData?projectId" + '@Model.Id' + "&statusIds=" + statusvalue + "&projectIds=" + stagevalue + "&recieverids=" + assignedvalue;
        GetDashboardData();
        HideLoader($("#global-overlay"));
        //$("#kgdProjectGridView").data("kendoGrid").dataSource.read(search);

    }
     function gotoTask(NoteId) {
        debugger;
        var portalId = $('#GlobalPortalId').val();

        // var url = '/Cms/Page?source=Edit&dataAction=Edit&pageName=Project&portalId=' + portalId + '&recordId=' + id ;
        // var url = '/Cms/Page?lo=Popup&cbm=OnAfterServiceCreate&source=Versioning&dataAction=Edit&pageName=BusinessTrip&portalId=' + portalId + '&recordId=' + NoteId;
        var url = '/Cms/Page?lo=Popup&cbm=OnAfterServiceCreate&source=View&dataAction=View&pageName=BuisnessTrip&portalId=' + portalId + '&recordId=' + NoteId;
        var win = GetMainWindow();
        win.iframeOpenUrl = url;
        win.OpenWindow({ Title: '@Html.Raw(SharedResource["Service"])', Width: 1200, Height: 600 });
        return false;
    }
</script>


<div class="row hr-pad-top-10">
    <div class="col-md-6">
        <h4>
            @*Project Dashboard*@
        </h4>
    </div>
</div>
@if (Model.ProjectList != null && Model.ProjectList.Count() > 0)
{
    @*@Html.Partial("~/Areas/Pmt/Views/ProjectDashboard/_banner.cshtml", Model)*@
    @*<div id="ProjectBanner">

        </div>*@
    <div id="appWrapper" class="hr-pad-top-15">
        @if (Model.TemplateUserType == NtsUserTypeEnum.Owner)
        {
            <div class="row no-gutter btn-group btn-group-sm" role="group" style="margin:5px;margin-left:10px;">
                <button type="button" onclick="GOWBS();" class="btn btn-sm btn-primary">
                    <i class="fad fa-network-wired"></i>&nbsp;&nbsp;@Resource["GoToWorkBreakdownStructure"]
                </button>
            </div>
        }
        <div class="row no-gutter btn-group btn-group-sm" role="group" style="width:100%;margin:5px;">
            <button type="button" class="btn btn-success col-sm-2">@Resource["ProjectProgress"]&nbsp;<b>@Model.ProgressPercentage%</b></button>
            <button type="button" onclick="GotoTask();" class="btn btn-success col-sm-2">@Resource["ViewAllTasks"]&nbsp;<b>@Model.TaskCount</b></button>
            <button type="button" class="btn btn-success col-sm-2">@Resource["TimeEntry"]&nbsp;<b>@Model.TaskTimeEntryHours</b></button>
            <button type="button" class="btn btn-success col-sm-2">@Resource["Activities"]&nbsp;<b>@Model.ActivityCount</b></button>
            <button type="button" class="btn btn-success col-sm-2">@Resource["ProjectEstimate"]&nbsp;<b>@Model.ProjectEstimatedHours</b></button>
            <button type="button" class="btn btn-success col-sm-2">@Resource["TaskEstimate"]&nbsp;<b>@Model.TaskEstimatedHours</b></button>
        </div>


        <div class="row">
            <div class="col-sm-4">

                <div class="panel panel-success">
                    <div class="panel-heading">@Resource["TaskStatus"]</div>
                    <div class="panel-body">
                        @(Html.Kendo().Chart<ProjectDashboardChartViewModel>()
                                            .Name("chartTaskByStatus")
                                            .Legend(legend => legend
                                                .Position(ChartLegendPosition.Bottom)
                                            )
                                                .DataSource(ds => ds
                                                .Read(read => read.Action("GetProjectTaskChartByStatus", "Project", new { @area = "PJM", projectId = Model.Id }))
                                                )
                                            .SeriesColors(new string[] { "#007bff", "#17a2b8", "#ffc107", "#28a745" })
                                            .Series(series =>
                                            {
                                                series.Donut(model => model.Value, model => model.Type)
                                                 .Labels(labels => labels
                                                    .Visible(true)
                                                    .Position(ChartPieLabelsPosition.Center)
                                                    // .Template("#= category # - #= kendo.format(' {0:n0}', value) # ")
                                                    .Background("transparent")

                                                );

                                            }).HtmlAttributes(new { @style = "height:300px;" })
                                            .Tooltip(tooltip => tooltip
                                                .Visible(true)
                                            // .Template("#= category # - #= kendo.format('{0:P}', percentage) #")
                                            )
                                            .Events(events=>events
                                                .SeriesClick("onTaskSeriesClick")
                                                .DataBound("OnTaskStatusChartDataBound")
                                                )
                        )
                        <div id="no-data-chart" class="no-data" style="text-align:center"><i class="fad fa-file-exclamation no-data-icon"></i>&nbsp;<span>@SharedResource["NoDataFound"]</span></div>

                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="panel panel-info">
                    <div class="panel-heading">@Resource["TaskAssigned"]</div>
                    <div class="panel-body">
                        @(Html.Kendo().Chart<ProjectDashboardChartViewModel>()
                              .Name("chartTaskByType")
                              .Legend(legend => legend
                              .Position(ChartLegendPosition.Bottom)
                              )
                              .DataSource(ds => ds
                              .Read(read => read.Action("GetProjectTaskChartByType", "Project", new { @area = "PJM", projectId = Model.Id }))

                              )
                              .SeriesColors(new string[] { "#007bff", "#17a2b8", "#ffc107", "#28a745" })
                              .Series(series =>
                              {
                                  series.Pie(model => model.Value, model => model.Type)
                                  .Labels(labels => labels
                                  .Visible(true)
                                  .Position(ChartPieLabelsPosition.Center)
                                  .Background("transparent"));
                              }).HtmlAttributes(new { @style = "height:300px;" })
                               .Tooltip(tooltip => tooltip
                               .Visible(true)
                               .Template("#= category # - #= kendo.format('{0:P}', percentage) #"))
                               .Events(e => e
                               .SeriesClick("onTaskAssignedSeriesClick")
                               .DataBound("OnTaskAssChartDataBound"))
                        )
                        <div id="no-data-taskchart" class="no-data" style="text-align:center"><i class="fad fa-file-exclamation no-data-icon"></i>&nbsp;<span>@SharedResource["NoDataFound"]</span></div>


                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="panel panel-warning">
                    <div class="panel-heading">@Resource["ProjectStageTask"]</div>
                    <div class="panel-body">
                        @(Html.Kendo().Chart<ProjectDashboardChartViewModel>()
                                .Name("chartProjectStage")
                                .Legend(legend => legend
                                .Position(ChartLegendPosition.Bottom)
                                )
                                .DataSource(ds => ds
                                .Read(read => read.Action("GetProjectStageChart", "Project", new { @area = "PJM", projectId = Model.Id }))
                                )
                                .SeriesColors(new string[] { "#ff9800", "#fad84a", "#4caf50", "#03a9f4", "#808080", "#FF0000", "#C27BA0", "#CFE2F3", "#E69138", "#EAD1DC" })
                                .Series(series =>
                                {
                                series.Donut(model => model.Value, model => model.Type)
                                .Labels(labels => labels
                                .Visible(true)
                                .Position(ChartPieLabelsPosition.Center)
                                .Background("transparent")
                                );
                                }).HtmlAttributes(new { @style = "height:300px;" })
                                .Tooltip(tooltip => tooltip
                                .Visible(true)
                                .Template("#= category # - #= kendo.format('{0:P}', percentage) #"))
                                .Events(e => e
                                .SeriesClick("onTaskStagesSeriesClick")
                                .DataBound("OnProjectStageChartDataBound"))
                        )
                        <div id="no-data-stagechart" class="no-data" style="text-align:center"><i class="fad fa-file-exclamation no-data-icon"></i>&nbsp;<span>@SharedResource["NoDataFound"]</span></div>

                    </div>
                </div>
            </div>
            @*<div class="col-sm-4">
                    <div class="panel panel-warning">
                        <div class="panel-heading">Time Entries</div>
                        <div class="panel-body">
                            @(Html.Kendo().Chart<ProjectDashboardChartViewModel>()
                                    .Name("chartTimeLog")
                                    .Legend(legend => legend
                                    .Position(ChartLegendPosition.Bottom)
                                    )
                                    .DataSource(ds => ds
                                    .Read(read => read.Action("GetProjectTimeLog", "Project", new { @area = "PJM", projectId = Model.Id }))
                                    )
                                    .Series(series =>
                                    {
                                    series.Donut(model => model.Value, model => model.Type)
                                    .Labels(labels => labels
                                    .Visible(true)
                                    .Position(ChartPieLabelsPosition.Center)
                                    .Background("transparent")
                                    );
                                    }).HtmlAttributes(new { @style = "height:300px;" })
                                    .Tooltip(tooltip => tooltip
                                    .Visible(true)
                                    .Template("#= category # - #= kendo.format('{0:P}', percentage) #"))
                                    .Events(e => e.DataBound("OnTaskTimeChartDataBound"))
                            )
                            <div id="no-data-timechart" class="no-data" style="text-align:center"><i class="fad fa-file-exclamation no-data-icon"></i>&nbsp;<span>No Data Found</span></div>

                        </div>
                    </div>
                </div>*@
        </div>
        <!--<div class="row">
            <div class="col-sm-8">
                <div class="panel panel-success">
                    <div class="panel-heading">Files</div>
                    <div class="panel-body">-->
        @*@(Html.Kendo().ListView<NtsServiceCommentViewModel>()
                .Name("projectFiles")
                .TagName("div")
                .ClientTemplateId("templateAttach")
                .Events(e => e.DataBound("OnDataBound"))
                .DataSource(dataSource =>
                {
                dataSource.Read(read => read.Action("GetProjectAttachments", "Project", new { @area = "PJM", projectId = Model.Id }));
                dataSource.ServerOperation(false);
                })

            )*@

        <!--<script type="text/x-kendo-tmpl" id="templateAttach">

            <div class="attach">
                <div class="attach-img-div"><img src="/general/file/SnapShot?fileId=#:data.Id#" /></div>
                <h3>#:FileName#</h3>
                <p>
                    # if(data.IsFileViewableFormat ) {#
                    <span onclick="onViewClick(#=Id#)" class="attach-icon" title="View">
                        <i class="fas fa-eye fa-lg"></i>
                    </span>
                    #}#
                    <span onclick="onDownloadClick(#=Id#)" class="attach-icon" title="Download">
                        <i class="fas fa-download fa-lg"></i>
                    </span>-->
        @*@if (Model.IsAllowed)
            {
                <span onclick="onDeleteClick(#=Id#)" class="attach-icon" title="Delete">
                    <i class="fas fa-trash-alt fa-lg"></i>
                </span>
            }*@

        <!--</p>
                            </div>
                        </script>

                        <div id="no-data-file" class="no-data" style="text-align:center"><i class="fad fa-file-exclamation no-data-icon"></i>&nbsp;<span>No Files Found</span></div>

                    </div>
                </div>
            </div>
            <div class="col-sm-4">
                <div class="panel panel-info">
                    <div class="panel-heading">Notifications</div>
                    <div class="panel-body">
                        @(Html.Kendo().ListView<NotificationViewModel>()
                               .Name("ProjectTask12")
                               .TagName("div")
                               .AutoBind(true)
                               .ClientTemplateId("listTemplateUpComing2")
                               .Events(e => e.DataBound("OnDataBound"))
                               .DataSource(dataSource =>dataSource
                               .Ajax()
                               .Read(read => read.Action("GetProjectNotificationList", "Project", new {@area = "PJM", projectId = Model.Id}))
                               )
                               .HtmlAttributes(new { @Class = "board" })
                            )

                        <script id="listTemplateUpComing2" type="text/x-kendo-template">
                            <div class="card" style="margin-left:5px;margin-bottom:10px;margin-top:10px;padding-left:5px;min-height:50px!important;width:350px">
                                <div class="row">
                                    <span style="float:left;margin-top:10px;margin-right:10px;"><i style="#=StatusStyle#" class="fas fa-circle"></i></span>  <h5>#:Subject#</h5>
                                </div>
                                <div class="row">
                                    <h6><span style="color:deepskyblue">#:ReferenceTypeNo#</span> From:  <span style="color:blueviolet">#:FromUserDisplay#</span> <br />- #: kendo.toString(Date, "dd-MMM-yyyy") #</h6>
                                </div>
                            </div>

                        </script>

                        <div id="no-data-notifi" class="no-data" style="text-align:center"><i class="fad fa-file-exclamation no-data-icon"></i>&nbsp;<span>No Notifications Found</span></div>
                    </div>
                </div>
            </div>
        </div>-->
        @*<div class="row">
                <div class="col-sm-6">
                    <div class="panel panel-warning">
                        <div class="panel-heading">Over Due Tasks</div>
                        <div class="panel-body">

                            @(Html.Kendo().Grid<TaskViewModel>()
                                        .Name("projectOverDueTasks")
                                        .Columns(col =>
                                        {
                                            col.Bound(c => c.TaskSubject).Filterable(flt => flt.Multi(true).Search(true)).Width(150);
                                            col.Bound(c => c.AssigneeDisplayName).Filterable(flt => flt.Multi(true).Search(true)).Width(150);
                                            col.Bound(c => c.DueDate).Format(ApplicationConstant.DateAndTime.DefaultDateTimeFormat).Filterable(flt => flt.Multi(true).Search(true)).Width(150);

                                        })
                                        .Sortable(srt => srt.Enabled(true))
                                        .Selectable(select => select.Enabled(false))
                                        .Filterable(f => f.Extra(false)
                                        .Operators(o => o.ForString(s => s.Clear()
                                        .Contains("Contains")
                                        .IsEqualTo("Is equal to")
                                        )))
                                        .Pageable(pageable => pageable
                                        .Refresh(true)
                                        .PageSizes(true)
                                        .ButtonCount(5))
                                        .AutoBind(true)
                                        .DataSource(dataSource => dataSource
                                                    .Ajax()
                                                    .PageSize(10)
                                                    //.Events(events => events.Error("OnError"))
                                                    .Read(read => read.Action("GetProjectOverDueTask", "Project", new { @area = "PJM", projectId = Model.Id }))
                                                    //.Update(update => update.Action("Update", "Nationality"))
                                                    //.Destroy(destroy => destroy.Action("Delete", "Nationality"))
                                                    .Model(model => model.Id(p => p.Id))
                                                    )
                                                    .Editable(editable => editable.Mode(GridEditMode.PopUp)
                                                    .DisplayDeleteConfirmation("Continue to delete this record?")
                                   )

                            )

                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="panel panel-primary">
                        <div class="panel-heading">Tasks Summary</div>
                        <div class="panel-body">

                            @(Html.Kendo().Grid<TeamTaskDashboardViewModel>()
                            .Name("projectTeamData")
                            .Columns(col =>
                            {
                                col.Bound(c => c.UserName).Filterable(flt => flt.Multi(true).Search(true));
                                col.Bound(c => c.TaskCount).Filterable(flt => flt.Multi(true).Search(true)).Width(80);
                                col.Bound(c => c.OverdueCount).Filterable(flt => flt.Multi(true).Search(true)).Width(80);
                                col.Bound(c => c.Billable).Filterable(flt => flt.Multi(true).Search(true)).Width(80);
                                col.Bound(c => c.NonBillable).Filterable(flt => flt.Multi(true).Search(true)).Width(80);

                            })
                            .Sortable(srt => srt.Enabled(true))
                            .Resizable(resize => resize.Columns(true))
                            .Scrollable(s => s.Height("auto"))
                            .Selectable(select => select.Enabled(false))
                            .Filterable(f => f.Extra(false)
                            .Operators(o => o.ForString(s => s.Clear()
                            .Contains("Contains")
                            .IsEqualTo("Is equal to")
                            )))
                            .Pageable(pageable => pageable
                            .Refresh(true)

                            .PageSizes(true)
                            .ButtonCount(5))
                            .AutoBind(true)
                            .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(10)
                            //.Events(events => events.Error("OnError"))
                            .Read(read => read.Action("GetProjectTeamData", "Project", new { @area = "PJM", projectId = Model.Id }))
                            .Update(update => update.Action("Update", "Nationality"))
                            .Destroy(destroy => destroy.Action("Delete", "Nationality"))
                            .Model(model => model.Id(p => p.TaskCount)))
                            .Editable(editable => editable.Mode(GridEditMode.PopUp)
                                      .DisplayDeleteConfirmation("Continue to delete this record?")
                 )
            )
                        </div>
                    </div>
                </div>
            </div>*@
        <div class="row">
            <div class="col-12">
                <div class="panel panel-filter">
                    <div class="panel-heading">@SharedResource["Filter"]</div>
                    <div class="panel-body" style="padding:10px 0px 10px 0px">
                        <div class="row" style="padding:5px;">
                            <div class="col-3">
                                @Resource["TaskStatus"]
                                @*@(Html.Kendo().MultiSelect().Name("mdlTaskStatus")
                             .DataSource(source =>
                             {
                                 source.Read(read =>
                                 {
                                     read.Action("GetLOVIdNameList", "LOV", new { area = "CMS", lovType = "LOV_TASK_STATUS" });
                                 });
                             })
                             .AutoClose(false)
                             .Placeholder(Resource["FilterTaskStatus"])
                             .DataTextField("Name")
                             .DataValueField("Id")
                             .Events(e=>e.Change("onChangeTaskStatus"))
                             .HtmlAttributes(new { @class = "hr-x-large search-control" })
            )*@
                                <select id="mdlTaskStatus" data-placeholder="@Resource["FilterTaskStatus"]" class="hr-x-large search-control"></select>

                            </div>
                            <div class="col-3">
                                @Resource["TaskAssigned"]
                                @*@(Html.Kendo().MultiSelect().Name("mdlTaskAssigned")
                             .DataSource(source =>
                             {
                                 source.Read(read =>
                                 {
                                     read.Action("GetProjectUserIdNameList", "Project", new { area = "PJM", projectId = Model.Id });
                                 });
                             })
                             .AutoClose(false)
                             .Placeholder(@Resource["FilterTaskAssigned"])
                             .DataTextField("Name")
                             .DataValueField("Id")
                             .Events(e => e.Change("onChangeTaskAssigned"))
                             .HtmlAttributes(new { @class = "hr-x-large search-control" })
            )*@
                                <select id="mdlTaskAssigned" data-placeholder="@Resource["FilterTaskAssigned"]" class="hr-x-large search-control"></select>

                            </div>
                            <div class="col-3">
                                @Resource["ProjectStages"]
                                @*@(Html.Kendo().MultiSelect().Name("mdlTaskStages")
                             .DataSource(source =>
                             {
                                 source.Read(read =>
                                 {
                                     read.Action("GetProjectStageIdNameList", "Project", new { area = "PJM", projectId=Model.Id });
                                 });
                             })
                             .AutoClose(false)
                             .Placeholder(@Resource["FilterTaskStages"])
                             .DataTextField("Name")
                             .DataValueField("Id")
                             .Events(e => e.Change("onChangeTaskStages"))
                             .HtmlAttributes(new { @class = "hr-x-large search-control" })
            )*@
                                <select id="mdlTaskStages" data-placeholder="@Resource["FilterTaskStages"]" class="hr-x-large search-control"></select>

                            </div>
                            <div class="col-3" style="text-align:center;">
                                
                                <button class="btn btn-filter-reset" onclick="onFilterReset()" title="@SharedResource["ResetFilter"]">@SharedResource["Reset"]</button>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="panel panel-primary">
                    <div class="panel-heading">@Resource["ProjectDetails"]</div>
                    <div class="panel-body">

                        <div id="kgdProjectGridView" style="width: 100%;height:550px" class="ag-theme-alpine"></div>

                        @*@(Html.Kendo().Grid<ProjectGanttTaskViewModel>()
                                .Name("kgdProjectGridView")
                                .Columns(columns =>
                                {
                                    //        columns.Select().Width(75).HtmlAttributes(new { @class = "checkbox-align" }).HeaderHtmlAttributes(new { @class = "checkbox-align" });
                                    columns.Bound(p => p.Title).Title(@Resource["TaskName"]).Width(300);
                                    columns.Bound(p => p.ServiceStage).Title(@Resource["ServiceStage"]).Width(250);
                                    columns.Bound(p => p.ProjectName).Title(@Resource["ProjectName"]).Width(250);
                                    columns.Bound(p => p.UserName).Title(@Resource["UserName"]).Width(200);
                                    columns.Bound(p => p.Priority).Title(@SharedResource["Priority"]).Width(200);
                                    columns.Bound(p => p.NtsStatus).Title(@Resource["NtsStatus"]).Width(200);
                                    columns.Bound(p => p.Start).Title(@SharedResource["StartDate"]).Format("{0:dd MMM yyyy}").Width(150);
                                    columns.Bound(p => p.End).Title(@SharedResource["EndDate"]).Format("{0:dd MMM yyyy}").Width(150);
                                })
                                .ToolBar(toolbar =>
                                {
                                    //toolbar.Excel();
                                    //toolbar.Pdf();
                                    toolbar.Search().Text(@SharedResource["Search"]);
                                })
                                //.Pdf(pdf=>pdf.ProxyURL(Url.Action("Excel_Export_Save", "Grid")))
                                //.Excel(excel=>excel.ProxyURL(Url.Action("Excel_Export_Save", "Grid")))
                                .ColumnMenu(col=>col.Filterable(false))
                                .Height(700)
                                .Editable()
                                .Pageable()
                                .Sortable()
                                .Navigatable()
                                .Resizable(r=>r.Columns(true))
                                .Reorderable(r => r.Columns(true))
                                .Groupable(g=>g.ShowFooter(false))
                                .Filterable()
                                .Scrollable()
                                //.Events(events => events.DataBound("onDataBound"))
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .Batch(true)
                                    .PageSize(20)
                                    .AutoSync(true)
                                    .ServerOperation(false)
                                    //.Events(events => events.Error("error_handler"))
                                    .Model(model =>
                                    {
                                        model.Id(p => p.Id);

                                    })
                                    //.Group(group=>group.Add("Category.CategoryName", typeof(string), ListSortDirection.Descending))
                                    //.Create("DetailProducts_Create", "Grid")
                                    .Read("ReadProjectTaskGridViewData", "Project", new { @area = "PJM", projectId = Model.Id })
                                //.Update("DetailProducts_Update", "Grid")
                                //.Destroy("DetailProducts_Destroy", "Grid")
                                )
                            )*@
                    </div>
                </div>
            </div>
        </div>
    </div>

}
else
{
    <iframe src="/pjm/project/ProjectNotAssigned" style="width:100%;height:60vh"></iframe>
    <script>
        $(document).ready(function () {
            HideLoader($("#global-overlay"));
            /*$("#global-overlay").hide();*/
        });
    </script>
}